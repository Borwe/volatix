<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="90233080075"><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (53,095,611 samples, 0.06%)</title><rect x="0.0000%" y="357" width="0.0588%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="53095611"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (65,060,026 samples, 0.07%)</title><rect x="0.0588%" y="357" width="0.0721%" height="15" fill="rgb(217,0,24)" fg:x="53095611" fg:w="65060026"/><text x="0.3088%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (191,875,562 samples, 0.21%)</title><rect x="0.1309%" y="357" width="0.2126%" height="15" fill="rgb(221,193,54)" fg:x="118155637" fg:w="191875562"/><text x="0.3809%" y="367.50"></text></g><g><title>alloc::string::String::push_str (11,431,014 samples, 0.01%)</title><rect x="0.3309%" y="341" width="0.0127%" height="15" fill="rgb(248,212,6)" fg:x="298600185" fg:w="11431014"/><text x="0.5809%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11,431,014 samples, 0.01%)</title><rect x="0.3309%" y="325" width="0.0127%" height="15" fill="rgb(208,68,35)" fg:x="298600185" fg:w="11431014"/><text x="0.5809%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11,431,014 samples, 0.01%)</title><rect x="0.3309%" y="309" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="298600185" fg:w="11431014"/><text x="0.5809%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11,431,014 samples, 0.01%)</title><rect x="0.3309%" y="293" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="298600185" fg:w="11431014"/><text x="0.5809%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (74,663,007 samples, 0.08%)</title><rect x="0.3436%" y="357" width="0.0827%" height="15" fill="rgb(228,23,34)" fg:x="310031199" fg:w="74663007"/><text x="0.5936%" y="367.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (26,484,639 samples, 0.03%)</title><rect x="0.4263%" y="357" width="0.0294%" height="15" fill="rgb(218,30,26)" fg:x="384694206" fg:w="26484639"/><text x="0.6763%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (167,240,726 samples, 0.19%)</title><rect x="0.4641%" y="357" width="0.1853%" height="15" fill="rgb(220,122,19)" fg:x="418762053" fg:w="167240726"/><text x="0.7141%" y="367.50"></text></g><g><title>[[vdso]] (82,012,172 samples, 0.09%)</title><rect x="0.6494%" y="357" width="0.0909%" height="15" fill="rgb(250,228,42)" fg:x="586002779" fg:w="82012172"/><text x="0.8994%" y="367.50"></text></g><g><title>__libc_recv (22,902,545 samples, 0.03%)</title><rect x="0.7403%" y="341" width="0.0254%" height="15" fill="rgb(240,193,28)" fg:x="668014951" fg:w="22902545"/><text x="0.9903%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (11,945,828 samples, 0.01%)</title><rect x="0.7668%" y="341" width="0.0132%" height="15" fill="rgb(216,20,37)" fg:x="691931365" fg:w="11945828"/><text x="1.0168%" y="351.50"></text></g><g><title>__rustc::__rdl_realloc (25,020,971 samples, 0.03%)</title><rect x="0.7801%" y="341" width="0.0277%" height="15" fill="rgb(206,188,39)" fg:x="703877193" fg:w="25020971"/><text x="1.0301%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (91,098,697 samples, 0.10%)</title><rect x="0.8078%" y="341" width="0.1010%" height="15" fill="rgb(217,207,13)" fg:x="728898164" fg:w="91098697"/><text x="1.0578%" y="351.50"></text></g><g><title>malloc (20,893,045 samples, 0.02%)</title><rect x="0.9181%" y="341" width="0.0232%" height="15" fill="rgb(231,73,38)" fg:x="828429186" fg:w="20893045"/><text x="1.1681%" y="351.50"></text></g><g><title>realloc (19,018,417 samples, 0.02%)</title><rect x="0.9413%" y="341" width="0.0211%" height="15" fill="rgb(225,20,46)" fg:x="849322231" fg:w="19018417"/><text x="1.1913%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (76,143,758 samples, 0.08%)</title><rect x="1.4712%" y="325" width="0.0844%" height="15" fill="rgb(210,31,41)" fg:x="1327484634" fg:w="76143758"/><text x="1.7212%" y="335.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="309" width="0.0714%" height="15" fill="rgb(221,200,47)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="293" width="0.0714%" height="15" fill="rgb(226,26,5)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="277" width="0.0714%" height="15" fill="rgb(249,33,26)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="261" width="0.0714%" height="15" fill="rgb(235,183,28)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="245" width="0.0714%" height="15" fill="rgb(221,5,38)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (64,460,122 samples, 0.07%)</title><rect x="1.4841%" y="229" width="0.0714%" height="15" fill="rgb(247,18,42)" fg:x="1339168270" fg:w="64460122"/><text x="1.7341%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (57,151,824 samples, 0.06%)</title><rect x="1.4922%" y="213" width="0.0633%" height="15" fill="rgb(241,131,45)" fg:x="1346476568" fg:w="57151824"/><text x="1.7422%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57,151,824 samples, 0.06%)</title><rect x="1.4922%" y="197" width="0.0633%" height="15" fill="rgb(249,31,29)" fg:x="1346476568" fg:w="57151824"/><text x="1.7422%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="325" width="0.0253%" height="15" fill="rgb(225,111,53)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="309" width="0.0253%" height="15" fill="rgb(238,160,17)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="293" width="0.0253%" height="15" fill="rgb(214,148,48)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="277" width="0.0253%" height="15" fill="rgb(232,36,49)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="261" width="0.0253%" height="15" fill="rgb(209,103,24)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="245" width="0.0253%" height="15" fill="rgb(229,88,8)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (22,858,696 samples, 0.03%)</title><rect x="1.5556%" y="229" width="0.0253%" height="15" fill="rgb(213,181,19)" fg:x="1403628392" fg:w="22858696"/><text x="1.8056%" y="239.50"></text></g><g><title>server::process_request (561,024,193 samples, 0.62%)</title><rect x="0.9623%" y="341" width="0.6218%" height="15" fill="rgb(254,191,54)" fg:x="868340648" fg:w="561024193"/><text x="1.2123%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="277" width="0.0150%" height="15" fill="rgb(241,83,37)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="261" width="0.0150%" height="15" fill="rgb(233,36,39)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="245" width="0.0150%" height="15" fill="rgb(226,3,54)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="229" width="0.0150%" height="15" fill="rgb(245,192,40)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="213" width="0.0150%" height="15" fill="rgb(238,167,29)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="197" width="0.0150%" height="15" fill="rgb(232,182,51)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="207.50"></text></g><g><title>alloc::alloc::alloc (13,518,280 samples, 0.01%)</title><rect x="1.9152%" y="181" width="0.0150%" height="15" fill="rgb(231,60,39)" fg:x="1728177187" fg:w="13518280"/><text x="2.1652%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (52,280,408 samples, 0.06%)</title><rect x="1.9152%" y="325" width="0.0579%" height="15" fill="rgb(208,69,12)" fg:x="1728177187" fg:w="52280408"/><text x="2.1652%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (52,280,408 samples, 0.06%)</title><rect x="1.9152%" y="309" width="0.0579%" height="15" fill="rgb(235,93,37)" fg:x="1728177187" fg:w="52280408"/><text x="2.1652%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (52,280,408 samples, 0.06%)</title><rect x="1.9152%" y="293" width="0.0579%" height="15" fill="rgb(213,116,39)" fg:x="1728177187" fg:w="52280408"/><text x="2.1652%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38,762,128 samples, 0.04%)</title><rect x="1.9302%" y="277" width="0.0430%" height="15" fill="rgb(222,207,29)" fg:x="1741695467" fg:w="38762128"/><text x="2.1802%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38,762,128 samples, 0.04%)</title><rect x="1.9302%" y="261" width="0.0430%" height="15" fill="rgb(206,96,30)" fg:x="1741695467" fg:w="38762128"/><text x="2.1802%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (74,324,311 samples, 0.08%)</title><rect x="1.9732%" y="325" width="0.0824%" height="15" fill="rgb(218,138,4)" fg:x="1780457595" fg:w="74324311"/><text x="2.2232%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="325" width="0.0124%" height="15" fill="rgb(250,191,14)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="309" width="0.0124%" height="15" fill="rgb(239,60,40)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="293" width="0.0124%" height="15" fill="rgb(206,27,48)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="277" width="0.0124%" height="15" fill="rgb(225,35,8)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="261" width="0.0124%" height="15" fill="rgb(250,213,24)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="245" width="0.0124%" height="15" fill="rgb(247,123,22)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="229" width="0.0124%" height="15" fill="rgb(231,138,38)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="239.50"></text></g><g><title>alloc::alloc::alloc (11,150,123 samples, 0.01%)</title><rect x="2.0633%" y="213" width="0.0124%" height="15" fill="rgb(231,145,46)" fg:x="1861767787" fg:w="11150123"/><text x="2.3133%" y="223.50"></text></g><g><title>server_lib::resp3::parse_arrays (448,308,233 samples, 0.50%)</title><rect x="1.5841%" y="341" width="0.4968%" height="15" fill="rgb(251,118,11)" fg:x="1429364841" fg:w="448308233"/><text x="1.8341%" y="351.50"></text></g><g><title>server_lib::resp3::parse_request (429,732,020 samples, 0.48%)</title><rect x="2.0809%" y="341" width="0.4762%" height="15" fill="rgb(217,147,25)" fg:x="1877673074" fg:w="429732020"/><text x="2.3309%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::recv (73,478,623 samples, 0.08%)</title><rect x="2.5572%" y="341" width="0.0814%" height="15" fill="rgb(247,81,37)" fg:x="2307405094" fg:w="73478623"/><text x="2.8072%" y="351.50"></text></g><g><title>[server] (1,862,020,591 samples, 2.06%)</title><rect x="0.7403%" y="357" width="2.0636%" height="15" fill="rgb(209,12,38)" fg:x="668014951" fg:w="1862020591"/><text x="0.9903%" y="367.50">[..</text></g><g><title>std::net::udp::UdpSocket::send (149,151,825 samples, 0.17%)</title><rect x="2.6386%" y="341" width="0.1653%" height="15" fill="rgb(227,1,9)" fg:x="2380883717" fg:w="149151825"/><text x="2.8886%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="325" width="0.0247%" height="15" fill="rgb(248,47,43)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="309" width="0.0247%" height="15" fill="rgb(221,10,30)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="293" width="0.0247%" height="15" fill="rgb(210,229,1)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="277" width="0.0247%" height="15" fill="rgb(222,148,37)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="261" width="0.0247%" height="15" fill="rgb(234,67,33)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="245" width="0.0247%" height="15" fill="rgb(247,98,35)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="255.50"></text></g><g><title>alloc::alloc::alloc (22,331,692 samples, 0.02%)</title><rect x="3.0495%" y="229" width="0.0247%" height="15" fill="rgb(247,138,52)" fg:x="2751615922" fg:w="22331692"/><text x="3.2995%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (259,276,871 samples, 0.29%)</title><rect x="2.8039%" y="341" width="0.2873%" height="15" fill="rgb(213,79,30)" fg:x="2530035542" fg:w="259276871"/><text x="3.0539%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15,364,799 samples, 0.02%)</title><rect x="3.0742%" y="325" width="0.0170%" height="15" fill="rgb(246,177,23)" fg:x="2773947614" fg:w="15364799"/><text x="3.3242%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15,364,799 samples, 0.02%)</title><rect x="3.0742%" y="309" width="0.0170%" height="15" fill="rgb(230,62,27)" fg:x="2773947614" fg:w="15364799"/><text x="3.3242%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="245" width="0.0195%" height="15" fill="rgb(216,154,8)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="229" width="0.0195%" height="15" fill="rgb(244,35,45)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="213" width="0.0195%" height="15" fill="rgb(251,115,12)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="197" width="0.0195%" height="15" fill="rgb(240,54,50)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="181" width="0.0195%" height="15" fill="rgb(233,84,52)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="165" width="0.0195%" height="15" fill="rgb(207,117,47)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="175.50"></text></g><g><title>alloc::alloc::alloc (17,603,309 samples, 0.02%)</title><rect x="3.2166%" y="149" width="0.0195%" height="15" fill="rgb(249,43,39)" fg:x="2902446215" fg:w="17603309"/><text x="3.4666%" y="159.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (144,088,255 samples, 0.16%)</title><rect x="3.0938%" y="341" width="0.1597%" height="15" fill="rgb(209,38,44)" fg:x="2791590704" fg:w="144088255"/><text x="3.3438%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (33,232,744 samples, 0.04%)</title><rect x="3.2166%" y="325" width="0.0368%" height="15" fill="rgb(236,212,23)" fg:x="2902446215" fg:w="33232744"/><text x="3.4666%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (33,232,744 samples, 0.04%)</title><rect x="3.2166%" y="309" width="0.0368%" height="15" fill="rgb(242,79,21)" fg:x="2902446215" fg:w="33232744"/><text x="3.4666%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (33,232,744 samples, 0.04%)</title><rect x="3.2166%" y="293" width="0.0368%" height="15" fill="rgb(211,96,35)" fg:x="2902446215" fg:w="33232744"/><text x="3.4666%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (33,232,744 samples, 0.04%)</title><rect x="3.2166%" y="277" width="0.0368%" height="15" fill="rgb(253,215,40)" fg:x="2902446215" fg:w="33232744"/><text x="3.4666%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (33,232,744 samples, 0.04%)</title><rect x="3.2166%" y="261" width="0.0368%" height="15" fill="rgb(211,81,21)" fg:x="2902446215" fg:w="33232744"/><text x="3.4666%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15,629,435 samples, 0.02%)</title><rect x="3.2361%" y="245" width="0.0173%" height="15" fill="rgb(208,190,38)" fg:x="2920049524" fg:w="15629435"/><text x="3.4861%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15,629,435 samples, 0.02%)</title><rect x="3.2361%" y="229" width="0.0173%" height="15" fill="rgb(235,213,38)" fg:x="2920049524" fg:w="15629435"/><text x="3.4861%" y="239.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (102,739,041 samples, 0.11%)</title><rect x="3.2563%" y="341" width="0.1139%" height="15" fill="rgb(237,122,38)" fg:x="2938243903" fg:w="102739041"/><text x="3.5063%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (27,843,682 samples, 0.03%)</title><rect x="3.3393%" y="325" width="0.0309%" height="15" fill="rgb(244,218,35)" fg:x="3013139262" fg:w="27843682"/><text x="3.5893%" y="335.50"></text></g><g><title>__internal_syscall_cancel (17,138,232 samples, 0.02%)</title><rect x="3.3724%" y="341" width="0.0190%" height="15" fill="rgb(240,68,47)" fg:x="3042977124" fg:w="17138232"/><text x="3.6224%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (97,017,537 samples, 0.11%)</title><rect x="3.3957%" y="341" width="0.1075%" height="15" fill="rgb(210,16,53)" fg:x="3064022081" fg:w="97017537"/><text x="3.6457%" y="351.50"></text></g><g><title>__syscall_cancel (11,473,177 samples, 0.01%)</title><rect x="3.5032%" y="341" width="0.0127%" height="15" fill="rgb(235,124,12)" fg:x="3161039618" fg:w="11473177"/><text x="3.7532%" y="351.50"></text></g><g><title>_int_free_merge_chunk (11,972,985 samples, 0.01%)</title><rect x="3.5198%" y="341" width="0.0133%" height="15" fill="rgb(224,169,11)" fg:x="3175984267" fg:w="11972985"/><text x="3.7698%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (352,946,270 samples, 0.39%)</title><rect x="3.5352%" y="341" width="0.3911%" height="15" fill="rgb(250,166,2)" fg:x="3189889595" fg:w="352946270"/><text x="3.7852%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (66,813,696 samples, 0.07%)</title><rect x="3.9263%" y="341" width="0.0740%" height="15" fill="rgb(242,216,29)" fg:x="3542835865" fg:w="66813696"/><text x="4.1763%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (294,309,821 samples, 0.33%)</title><rect x="4.0004%" y="341" width="0.3262%" height="15" fill="rgb(230,116,27)" fg:x="3609649561" fg:w="294309821"/><text x="4.2504%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (103,798,678 samples, 0.12%)</title><rect x="4.3265%" y="341" width="0.1150%" height="15" fill="rgb(228,99,48)" fg:x="3903959382" fg:w="103798678"/><text x="4.5765%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (114,580,831 samples, 0.13%)</title><rect x="4.4502%" y="341" width="0.1270%" height="15" fill="rgb(253,11,6)" fg:x="4015548094" fg:w="114580831"/><text x="4.7002%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (98,341,345 samples, 0.11%)</title><rect x="4.5772%" y="341" width="0.1090%" height="15" fill="rgb(247,143,39)" fg:x="4130128925" fg:w="98341345"/><text x="4.8272%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (61,369,900 samples, 0.07%)</title><rect x="4.6936%" y="341" width="0.0680%" height="15" fill="rgb(236,97,10)" fg:x="4235222239" fg:w="61369900"/><text x="4.9436%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (14,395,528 samples, 0.02%)</title><rect x="4.7617%" y="341" width="0.0160%" height="15" fill="rgb(233,208,19)" fg:x="4296592139" fg:w="14395528"/><text x="5.0117%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10,184,785 samples, 0.01%)</title><rect x="4.7776%" y="341" width="0.0113%" height="15" fill="rgb(216,164,2)" fg:x="4310987667" fg:w="10184785"/><text x="5.0276%" y="351.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (62,685,383 samples, 0.07%)</title><rect x="4.7889%" y="341" width="0.0695%" height="15" fill="rgb(220,129,5)" fg:x="4321172452" fg:w="62685383"/><text x="5.0389%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (75,656,543 samples, 0.08%)</title><rect x="4.8599%" y="341" width="0.0838%" height="15" fill="rgb(242,17,10)" fg:x="4385276586" fg:w="75656543"/><text x="5.1099%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (25,765,550 samples, 0.03%)</title><rect x="4.9438%" y="341" width="0.0286%" height="15" fill="rgb(242,107,0)" fg:x="4460933129" fg:w="25765550"/><text x="5.1938%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (113,508,911 samples, 0.13%)</title><rect x="4.9723%" y="341" width="0.1258%" height="15" fill="rgb(251,28,31)" fg:x="4486698679" fg:w="113508911"/><text x="5.2223%" y="351.50"></text></g><g><title>malloc (174,733,756 samples, 0.19%)</title><rect x="5.0981%" y="341" width="0.1936%" height="15" fill="rgb(233,223,10)" fg:x="4600207590" fg:w="174733756"/><text x="5.3481%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (27,370,537 samples, 0.03%)</title><rect x="5.2918%" y="341" width="0.0303%" height="15" fill="rgb(215,21,27)" fg:x="4774941346" fg:w="27370537"/><text x="5.5418%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (22,610,893 samples, 0.03%)</title><rect x="5.3221%" y="341" width="0.0251%" height="15" fill="rgb(232,23,21)" fg:x="4802311883" fg:w="22610893"/><text x="5.5721%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="325" width="0.0159%" height="15" fill="rgb(244,5,23)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="335.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="309" width="0.0159%" height="15" fill="rgb(226,81,46)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="293" width="0.0159%" height="15" fill="rgb(247,70,30)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="277" width="0.0159%" height="15" fill="rgb(212,68,19)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="261" width="0.0159%" height="15" fill="rgb(240,187,13)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="245" width="0.0159%" height="15" fill="rgb(223,113,26)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="229" width="0.0159%" height="15" fill="rgb(206,192,2)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (14,321,955 samples, 0.02%)</title><rect x="5.4496%" y="213" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="4917363240" fg:w="14321955"/><text x="5.6996%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,487,074 samples, 0.01%)</title><rect x="5.4528%" y="197" width="0.0127%" height="15" fill="rgb(247,173,49)" fg:x="4920198121" fg:w="11487074"/><text x="5.7028%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,487,074 samples, 0.01%)</title><rect x="5.4528%" y="181" width="0.0127%" height="15" fill="rgb(224,114,35)" fg:x="4920198121" fg:w="11487074"/><text x="5.7028%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="325" width="0.0185%" height="15" fill="rgb(245,159,27)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="309" width="0.0185%" height="15" fill="rgb(245,172,44)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="293" width="0.0185%" height="15" fill="rgb(236,23,11)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="277" width="0.0185%" height="15" fill="rgb(205,117,38)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="261" width="0.0185%" height="15" fill="rgb(237,72,25)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="245" width="0.0185%" height="15" fill="rgb(244,70,9)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (16,680,760 samples, 0.02%)</title><rect x="5.4655%" y="229" width="0.0185%" height="15" fill="rgb(217,125,39)" fg:x="4931685195" fg:w="16680760"/><text x="5.7155%" y="239.50"></text></g><g><title>server::get_value_type (133,811,853 samples, 0.15%)</title><rect x="5.3501%" y="341" width="0.1483%" height="15" fill="rgb(235,36,10)" fg:x="4827514997" fg:w="133811853"/><text x="5.6001%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (12,960,895 samples, 0.01%)</title><rect x="5.4840%" y="325" width="0.0144%" height="15" fill="rgb(251,123,47)" fg:x="4948365955" fg:w="12960895"/><text x="5.7340%" y="335.50"></text></g><g><title>server::process_request (25,035,426 samples, 0.03%)</title><rect x="5.4983%" y="341" width="0.0277%" height="15" fill="rgb(221,13,13)" fg:x="4961326850" fg:w="25035426"/><text x="5.7483%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (35,523,849 samples, 0.04%)</title><rect x="5.6063%" y="325" width="0.0394%" height="15" fill="rgb(238,131,9)" fg:x="5058708837" fg:w="35523849"/><text x="5.8563%" y="335.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (35,523,849 samples, 0.04%)</title><rect x="5.6063%" y="309" width="0.0394%" height="15" fill="rgb(211,50,8)" fg:x="5058708837" fg:w="35523849"/><text x="5.8563%" y="319.50"></text></g><g><title>alloc::string::String::push_str (34,949,756 samples, 0.04%)</title><rect x="5.6551%" y="325" width="0.0387%" height="15" fill="rgb(245,182,24)" fg:x="5102797888" fg:w="34949756"/><text x="5.9051%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34,949,756 samples, 0.04%)</title><rect x="5.6551%" y="309" width="0.0387%" height="15" fill="rgb(242,14,37)" fg:x="5102797888" fg:w="34949756"/><text x="5.9051%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34,949,756 samples, 0.04%)</title><rect x="5.6551%" y="293" width="0.0387%" height="15" fill="rgb(246,228,12)" fg:x="5102797888" fg:w="34949756"/><text x="5.9051%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34,949,756 samples, 0.04%)</title><rect x="5.6551%" y="277" width="0.0387%" height="15" fill="rgb(213,55,15)" fg:x="5102797888" fg:w="34949756"/><text x="5.9051%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29,392,327 samples, 0.03%)</title><rect x="5.6613%" y="261" width="0.0326%" height="15" fill="rgb(209,9,3)" fg:x="5108355317" fg:w="29392327"/><text x="5.9113%" y="271.50"></text></g><g><title>server_lib::resp3::bulk_string_response (156,330,973 samples, 0.17%)</title><rect x="5.5261%" y="341" width="0.1733%" height="15" fill="rgb(230,59,30)" fg:x="4986362276" fg:w="156330973"/><text x="5.7761%" y="351.50"></text></g><g><title>server_lib::resp3::parse_arrays (27,845,882 samples, 0.03%)</title><rect x="5.6993%" y="341" width="0.0309%" height="15" fill="rgb(209,121,21)" fg:x="5142693249" fg:w="27845882"/><text x="5.9493%" y="351.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (283,554,742 samples, 0.31%)</title><rect x="5.7302%" y="341" width="0.3142%" height="15" fill="rgb(220,109,13)" fg:x="5170539131" fg:w="283554742"/><text x="5.9802%" y="351.50"></text></g><g><title>server_lib::resp3::parse_request (12,871,898 samples, 0.01%)</title><rect x="6.0445%" y="341" width="0.0143%" height="15" fill="rgb(232,18,1)" fg:x="5454093873" fg:w="12871898"/><text x="6.2945%" y="351.50"></text></g><g><title>server_lib::storage::Storage::get_entry (12,386,728 samples, 0.01%)</title><rect x="6.0587%" y="341" width="0.0137%" height="15" fill="rgb(215,41,42)" fg:x="5466965771" fg:w="12386728"/><text x="6.3087%" y="351.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (122,328,046 samples, 0.14%)</title><rect x="6.0724%" y="341" width="0.1356%" height="15" fill="rgb(224,123,36)" fg:x="5479352499" fg:w="122328046"/><text x="6.3224%" y="351.50"></text></g><g><title>std::io::Write::write_all (86,094,190 samples, 0.10%)</title><rect x="6.2080%" y="341" width="0.0954%" height="15" fill="rgb(240,125,3)" fg:x="5601680545" fg:w="86094190"/><text x="6.4580%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::recv (31,660,815 samples, 0.04%)</title><rect x="6.3034%" y="341" width="0.0351%" height="15" fill="rgb(205,98,50)" fg:x="5687774735" fg:w="31660815"/><text x="6.5534%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::send (31,245,371 samples, 0.03%)</title><rect x="6.3385%" y="341" width="0.0346%" height="15" fill="rgb(205,185,37)" fg:x="5719435550" fg:w="31245371"/><text x="6.5885%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (113,657,166 samples, 0.13%)</title><rect x="6.3731%" y="341" width="0.1260%" height="15" fill="rgb(238,207,15)" fg:x="5750680921" fg:w="113657166"/><text x="6.6231%" y="351.50"></text></g><g><title>std::thread::yield_now (55,782,443 samples, 0.06%)</title><rect x="6.4991%" y="341" width="0.0618%" height="15" fill="rgb(213,199,42)" fg:x="5864338087" fg:w="55782443"/><text x="6.7491%" y="351.50"></text></g><g><title>std::time::SystemTime::now (66,883,433 samples, 0.07%)</title><rect x="6.5609%" y="341" width="0.0741%" height="15" fill="rgb(235,201,11)" fg:x="5920120530" fg:w="66883433"/><text x="6.8109%" y="351.50"></text></g><g><title>[unknown] (3,469,545,102 samples, 3.85%)</title><rect x="2.8039%" y="357" width="3.8451%" height="15" fill="rgb(207,46,11)" fg:x="2530035542" fg:w="3469545102"/><text x="3.0539%" y="367.50">[unk..</text></g><g><title>unlink_chunk.isra.0 (11,772,889 samples, 0.01%)</title><rect x="6.6359%" y="341" width="0.0130%" height="15" fill="rgb(241,35,35)" fg:x="5987807755" fg:w="11772889"/><text x="6.8859%" y="351.50"></text></g><g><title>__internal_syscall_cancel (44,234,265 samples, 0.05%)</title><rect x="6.6490%" y="357" width="0.0490%" height="15" fill="rgb(243,32,47)" fg:x="5999580644" fg:w="44234265"/><text x="6.8990%" y="367.50"></text></g><g><title>__libc_recv (52,914,549 samples, 0.06%)</title><rect x="6.6980%" y="357" width="0.0586%" height="15" fill="rgb(247,202,23)" fg:x="6043814909" fg:w="52914549"/><text x="6.9480%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (19,459,608 samples, 0.02%)</title><rect x="6.7566%" y="357" width="0.0216%" height="15" fill="rgb(219,102,11)" fg:x="6096729458" fg:w="19459608"/><text x="7.0066%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (498,551,906 samples, 0.55%)</title><rect x="6.7782%" y="357" width="0.5525%" height="15" fill="rgb(243,110,44)" fg:x="6116189066" fg:w="498551906"/><text x="7.0282%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (107,752,049 samples, 0.12%)</title><rect x="7.2113%" y="341" width="0.1194%" height="15" fill="rgb(222,74,54)" fg:x="6506988923" fg:w="107752049"/><text x="7.4613%" y="351.50"></text></g><g><title>__rustc::__rdl_realloc (60,260,322 samples, 0.07%)</title><rect x="7.3307%" y="357" width="0.0668%" height="15" fill="rgb(216,99,12)" fg:x="6614740972" fg:w="60260322"/><text x="7.5807%" y="367.50"></text></g><g><title>__sched_yield (9,420,594 samples, 0.01%)</title><rect x="7.3975%" y="357" width="0.0104%" height="15" fill="rgb(226,22,26)" fg:x="6675001294" fg:w="9420594"/><text x="7.6475%" y="367.50"></text></g><g><title>__send (60,225,621 samples, 0.07%)</title><rect x="7.4080%" y="357" width="0.0667%" height="15" fill="rgb(217,163,10)" fg:x="6684421888" fg:w="60225621"/><text x="7.6580%" y="367.50"></text></g><g><title>__syscall_cancel (45,990,130 samples, 0.05%)</title><rect x="7.4747%" y="357" width="0.0510%" height="15" fill="rgb(213,25,53)" fg:x="6744647509" fg:w="45990130"/><text x="7.7247%" y="367.50"></text></g><g><title>__syscall_cancel_arch_end (415,825,868 samples, 0.46%)</title><rect x="7.5257%" y="357" width="0.4608%" height="15" fill="rgb(252,105,26)" fg:x="6790637639" fg:w="415825868"/><text x="7.7757%" y="367.50"></text></g><g><title>_int_free_chunk (193,182,033 samples, 0.21%)</title><rect x="7.9865%" y="357" width="0.2141%" height="15" fill="rgb(220,39,43)" fg:x="7206463507" fg:w="193182033"/><text x="8.2365%" y="367.50"></text></g><g><title>_int_free_create_chunk (23,210,648 samples, 0.03%)</title><rect x="8.2006%" y="357" width="0.0257%" height="15" fill="rgb(229,68,48)" fg:x="7399645540" fg:w="23210648"/><text x="8.4506%" y="367.50"></text></g><g><title>_int_free_merge_chunk (73,042,168 samples, 0.08%)</title><rect x="8.2263%" y="357" width="0.0809%" height="15" fill="rgb(252,8,32)" fg:x="7422856188" fg:w="73042168"/><text x="8.4763%" y="367.50"></text></g><g><title>_int_malloc (57,485,694 samples, 0.06%)</title><rect x="8.3073%" y="357" width="0.0637%" height="15" fill="rgb(223,20,43)" fg:x="7495898356" fg:w="57485694"/><text x="8.5573%" y="367.50"></text></g><g><title>_int_realloc (48,821,267 samples, 0.05%)</title><rect x="8.3710%" y="357" width="0.0541%" height="15" fill="rgb(229,81,49)" fg:x="7553384050" fg:w="48821267"/><text x="8.6210%" y="367.50"></text></g><g><title>std::net::tcp::TcpListener::accept (12,730,206 samples, 0.01%)</title><rect x="8.4363%" y="85" width="0.0141%" height="15" fill="rgb(236,28,36)" fg:x="7612373206" fg:w="12730206"/><text x="8.6863%" y="95.50"></text></g><g><title>std::sys::net::connection::socket::TcpListener::accept (12,242,537 samples, 0.01%)</title><rect x="8.4369%" y="69" width="0.0136%" height="15" fill="rgb(249,185,26)" fg:x="7612860875" fg:w="12242537"/><text x="8.6869%" y="79.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::accept (11,419,545 samples, 0.01%)</title><rect x="8.4378%" y="53" width="0.0127%" height="15" fill="rgb(249,174,33)" fg:x="7613683867" fg:w="11419545"/><text x="8.6878%" y="63.50"></text></g><g><title>std::sys::pal::unix::cvt_r (11,419,545 samples, 0.01%)</title><rect x="8.4378%" y="37" width="0.0127%" height="15" fill="rgb(233,201,37)" fg:x="7613683867" fg:w="11419545"/><text x="8.6878%" y="47.50"></text></g><g><title>_start (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="357" width="0.0433%" height="15" fill="rgb(221,78,26)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="367.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="341" width="0.0433%" height="15" fill="rgb(250,127,30)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="351.50"></text></g><g><title>__libc_start_call_main (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="325" width="0.0433%" height="15" fill="rgb(230,49,44)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="335.50"></text></g><g><title>main (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="309" width="0.0433%" height="15" fill="rgb(229,67,23)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="319.50"></text></g><g><title>std::rt::lang_start_internal (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="293" width="0.0433%" height="15" fill="rgb(249,83,47)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="303.50"></text></g><g><title>std::panic::catch_unwind (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="277" width="0.0433%" height="15" fill="rgb(215,43,3)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="287.50"></text></g><g><title>std::panicking::try (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="261" width="0.0433%" height="15" fill="rgb(238,154,13)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="271.50"></text></g><g><title>std::panicking::try::do_call (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="245" width="0.0433%" height="15" fill="rgb(219,56,2)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="255.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="229" width="0.0433%" height="15" fill="rgb(233,0,4)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="239.50"></text></g><g><title>std::panic::catch_unwind (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="213" width="0.0433%" height="15" fill="rgb(235,30,7)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="223.50"></text></g><g><title>std::panicking::try (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="197" width="0.0433%" height="15" fill="rgb(250,79,13)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="207.50"></text></g><g><title>std::panicking::try::do_call (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="181" width="0.0433%" height="15" fill="rgb(211,146,34)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="165" width="0.0433%" height="15" fill="rgb(228,22,38)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="175.50"></text></g><g><title>std::rt::lang_start::{{closure}} (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="149" width="0.0433%" height="15" fill="rgb(235,168,5)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="159.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="133" width="0.0433%" height="15" fill="rgb(221,155,16)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="117" width="0.0433%" height="15" fill="rgb(215,215,53)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="127.50"></text></g><g><title>server::main (39,058,899 samples, 0.04%)</title><rect x="8.4251%" y="101" width="0.0433%" height="15" fill="rgb(223,4,10)" fg:x="7602205317" fg:w="39058899"/><text x="8.6751%" y="111.50"></text></g><g><title>std::thread::sleep (16,160,804 samples, 0.02%)</title><rect x="8.4505%" y="85" width="0.0179%" height="15" fill="rgb(234,103,6)" fg:x="7625103412" fg:w="16160804"/><text x="8.7005%" y="95.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (15,512,427 samples, 0.02%)</title><rect x="8.4512%" y="69" width="0.0172%" height="15" fill="rgb(227,97,0)" fg:x="7625751789" fg:w="15512427"/><text x="8.7012%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (522,538,355 samples, 0.58%)</title><rect x="8.4709%" y="357" width="0.5791%" height="15" fill="rgb(234,150,53)" fg:x="7643516843" fg:w="522538355"/><text x="8.7209%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (209,382,467 samples, 0.23%)</title><rect x="9.0500%" y="357" width="0.2320%" height="15" fill="rgb(228,201,54)" fg:x="8166055198" fg:w="209382467"/><text x="9.3000%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (114,194,385 samples, 0.13%)</title><rect x="9.2852%" y="357" width="0.1266%" height="15" fill="rgb(222,22,37)" fg:x="8378347893" fg:w="114194385"/><text x="9.5352%" y="367.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (56,097,737 samples, 0.06%)</title><rect x="9.4118%" y="357" width="0.0622%" height="15" fill="rgb(237,53,32)" fg:x="8492542278" fg:w="56097737"/><text x="9.6618%" y="367.50"></text></g><g><title>cfree@GLIBC_2.2.5 (331,125,925 samples, 0.37%)</title><rect x="9.4740%" y="357" width="0.3670%" height="15" fill="rgb(233,25,53)" fg:x="8548640015" fg:w="331125925"/><text x="9.7240%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad (152,600,479 samples, 0.17%)</title><rect x="9.8495%" y="357" width="0.1691%" height="15" fill="rgb(210,40,34)" fg:x="8887547084" fg:w="152600479"/><text x="10.0995%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral (147,057,740 samples, 0.16%)</title><rect x="10.0187%" y="357" width="0.1630%" height="15" fill="rgb(241,220,44)" fg:x="9040147563" fg:w="147057740"/><text x="10.2687%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (109,432,628 samples, 0.12%)</title><rect x="10.1816%" y="357" width="0.1213%" height="15" fill="rgb(235,28,35)" fg:x="9187205303" fg:w="109432628"/><text x="10.4316%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (74,995,126 samples, 0.08%)</title><rect x="10.3029%" y="357" width="0.0831%" height="15" fill="rgb(210,56,17)" fg:x="9296637931" fg:w="74995126"/><text x="10.5529%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (20,168,014 samples, 0.02%)</title><rect x="10.3860%" y="357" width="0.0224%" height="15" fill="rgb(224,130,29)" fg:x="9371633057" fg:w="20168014"/><text x="10.6360%" y="367.50"></text></g><g><title>core::fmt::write (231,990,619 samples, 0.26%)</title><rect x="10.4084%" y="357" width="0.2571%" height="15" fill="rgb(235,212,8)" fg:x="9391801071" fg:w="231990619"/><text x="10.6584%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (59,984,003 samples, 0.07%)</title><rect x="10.5990%" y="341" width="0.0665%" height="15" fill="rgb(223,33,50)" fg:x="9563807687" fg:w="59984003"/><text x="10.8490%" y="351.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (59,984,003 samples, 0.07%)</title><rect x="10.5990%" y="325" width="0.0665%" height="15" fill="rgb(219,149,13)" fg:x="9563807687" fg:w="59984003"/><text x="10.8490%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (97,244,960 samples, 0.11%)</title><rect x="10.6655%" y="357" width="0.1078%" height="15" fill="rgb(250,156,29)" fg:x="9623791690" fg:w="97244960"/><text x="10.9155%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11,323,089 samples, 0.01%)</title><rect x="10.7607%" y="341" width="0.0125%" height="15" fill="rgb(216,193,19)" fg:x="9709713561" fg:w="11323089"/><text x="11.0107%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (72,348,627 samples, 0.08%)</title><rect x="10.7733%" y="357" width="0.0802%" height="15" fill="rgb(216,135,14)" fg:x="9721036650" fg:w="72348627"/><text x="11.0233%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (410,455,416 samples, 0.45%)</title><rect x="10.8534%" y="357" width="0.4549%" height="15" fill="rgb(241,47,5)" fg:x="9793385277" fg:w="410455416"/><text x="11.1034%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (23,276,139 samples, 0.03%)</title><rect x="11.2825%" y="341" width="0.0258%" height="15" fill="rgb(233,42,35)" fg:x="10180564554" fg:w="23276139"/><text x="11.5325%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23,276,139 samples, 0.03%)</title><rect x="11.2825%" y="325" width="0.0258%" height="15" fill="rgb(231,13,6)" fg:x="10180564554" fg:w="23276139"/><text x="11.5325%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (23,276,139 samples, 0.03%)</title><rect x="11.2825%" y="309" width="0.0258%" height="15" fill="rgb(207,181,40)" fg:x="10180564554" fg:w="23276139"/><text x="11.5325%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (319,056,656 samples, 0.35%)</title><rect x="11.3083%" y="357" width="0.3536%" height="15" fill="rgb(254,173,49)" fg:x="10203840693" fg:w="319056656"/><text x="11.5583%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (476,957,385 samples, 0.53%)</title><rect x="11.6619%" y="357" width="0.5286%" height="15" fill="rgb(221,1,38)" fg:x="10522897349" fg:w="476957385"/><text x="11.9119%" y="367.50"></text></g><g><title>malloc (544,002,763 samples, 0.60%)</title><rect x="12.1963%" y="357" width="0.6029%" height="15" fill="rgb(206,124,46)" fg:x="11005094534" fg:w="544002763"/><text x="12.4463%" y="367.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (45,859,289 samples, 0.05%)</title><rect x="12.8051%" y="357" width="0.0508%" height="15" fill="rgb(249,21,11)" fg:x="11554393352" fg:w="45859289"/><text x="13.0551%" y="367.50"></text></g><g><title>realloc (61,054,824 samples, 0.07%)</title><rect x="12.8628%" y="357" width="0.0677%" height="15" fill="rgb(222,201,40)" fg:x="11606503813" fg:w="61054824"/><text x="13.1128%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (683,793,823 samples, 0.76%)</title><rect x="13.6282%" y="341" width="0.7578%" height="15" fill="rgb(235,61,29)" fg:x="12297187701" fg:w="683793823"/><text x="13.8782%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (646,468,852 samples, 0.72%)</title><rect x="13.6696%" y="325" width="0.7164%" height="15" fill="rgb(219,207,3)" fg:x="12334512672" fg:w="646468852"/><text x="13.9196%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (646,468,852 samples, 0.72%)</title><rect x="13.6696%" y="309" width="0.7164%" height="15" fill="rgb(222,56,46)" fg:x="12334512672" fg:w="646468852"/><text x="13.9196%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="341" width="0.0149%" height="15" fill="rgb(239,76,54)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="325" width="0.0149%" height="15" fill="rgb(231,124,27)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="309" width="0.0149%" height="15" fill="rgb(249,195,6)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="293" width="0.0149%" height="15" fill="rgb(237,174,47)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="277" width="0.0149%" height="15" fill="rgb(206,201,31)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (13,464,820 samples, 0.01%)</title><rect x="14.3861%" y="261" width="0.0149%" height="15" fill="rgb(231,57,52)" fg:x="12980981524" fg:w="13464820"/><text x="14.6361%" y="271.50"></text></g><g><title>__libc_recv (119,160,956 samples, 0.13%)</title><rect x="14.4010%" y="341" width="0.1321%" height="15" fill="rgb(248,177,22)" fg:x="12994446344" fg:w="119160956"/><text x="14.6510%" y="351.50"></text></g><g><title>__rustc::__rust_dealloc (48,410,920 samples, 0.05%)</title><rect x="14.5423%" y="341" width="0.0537%" height="15" fill="rgb(215,211,37)" fg:x="13121944152" fg:w="48410920"/><text x="14.7923%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (340,261,468 samples, 0.38%)</title><rect x="14.5959%" y="341" width="0.3771%" height="15" fill="rgb(241,128,51)" fg:x="13170355072" fg:w="340261468"/><text x="14.8459%" y="351.50"></text></g><g><title>_int_free_chunk (9,393,689 samples, 0.01%)</title><rect x="14.9626%" y="325" width="0.0104%" height="15" fill="rgb(227,165,31)" fg:x="13501222851" fg:w="9393689"/><text x="15.2126%" y="335.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (15,734,042 samples, 0.02%)</title><rect x="14.9730%" y="341" width="0.0174%" height="15" fill="rgb(228,167,24)" fg:x="13510616540" fg:w="15734042"/><text x="15.2230%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (15,734,042 samples, 0.02%)</title><rect x="14.9730%" y="325" width="0.0174%" height="15" fill="rgb(228,143,12)" fg:x="13510616540" fg:w="15734042"/><text x="15.2230%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15,734,042 samples, 0.02%)</title><rect x="14.9730%" y="309" width="0.0174%" height="15" fill="rgb(249,149,8)" fg:x="13510616540" fg:w="15734042"/><text x="15.2230%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (15,734,042 samples, 0.02%)</title><rect x="14.9730%" y="293" width="0.0174%" height="15" fill="rgb(243,35,44)" fg:x="13510616540" fg:w="15734042"/><text x="15.2230%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (66,306,980 samples, 0.07%)</title><rect x="15.2841%" y="245" width="0.0735%" height="15" fill="rgb(246,89,9)" fg:x="13791334127" fg:w="66306980"/><text x="15.5341%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (65,550,260 samples, 0.07%)</title><rect x="15.2850%" y="229" width="0.0726%" height="15" fill="rgb(233,213,13)" fg:x="13792090847" fg:w="65550260"/><text x="15.5350%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (131,837,276 samples, 0.15%)</title><rect x="15.3576%" y="245" width="0.1461%" height="15" fill="rgb(233,141,41)" fg:x="13857641107" fg:w="131837276"/><text x="15.6076%" y="255.50"></text></g><g><title>_int_free_create_chunk (219,860,717 samples, 0.24%)</title><rect x="16.8358%" y="197" width="0.2437%" height="15" fill="rgb(239,167,4)" fg:x="15191441021" fg:w="219860717"/><text x="17.0858%" y="207.50"></text></g><g><title>unlink_chunk.isra.0 (59,891,088 samples, 0.07%)</title><rect x="17.0131%" y="181" width="0.0664%" height="15" fill="rgb(209,217,16)" fg:x="15351410650" fg:w="59891088"/><text x="17.2631%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,773,377,173 samples, 1.97%)</title><rect x="15.1200%" y="277" width="1.9653%" height="15" fill="rgb(219,88,35)" fg:x="13643277084" fg:w="1773377173"/><text x="15.3700%" y="287.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (1,773,377,173 samples, 1.97%)</title><rect x="15.1200%" y="261" width="1.9653%" height="15" fill="rgb(220,193,23)" fg:x="13643277084" fg:w="1773377173"/><text x="15.3700%" y="271.50">a..</text></g><g><title>cfree@GLIBC_2.2.5 (1,426,402,658 samples, 1.58%)</title><rect x="15.5046%" y="245" width="1.5808%" height="15" fill="rgb(230,90,52)" fg:x="13990251599" fg:w="1426402658"/><text x="15.7546%" y="255.50"></text></g><g><title>_int_free_chunk (499,268,528 samples, 0.55%)</title><rect x="16.5321%" y="229" width="0.5533%" height="15" fill="rgb(252,106,19)" fg:x="14917385729" fg:w="499268528"/><text x="16.7821%" y="239.50"></text></g><g><title>_int_free_merge_chunk (268,969,697 samples, 0.30%)</title><rect x="16.7873%" y="213" width="0.2981%" height="15" fill="rgb(206,74,20)" fg:x="15147684560" fg:w="268969697"/><text x="17.0373%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,896,022,980 samples, 2.10%)</title><rect x="14.9905%" y="341" width="2.1013%" height="15" fill="rgb(230,138,44)" fg:x="13526350582" fg:w="1896022980"/><text x="15.2405%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,896,022,980 samples, 2.10%)</title><rect x="14.9905%" y="325" width="2.1013%" height="15" fill="rgb(235,182,43)" fg:x="13526350582" fg:w="1896022980"/><text x="15.2405%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,896,022,980 samples, 2.10%)</title><rect x="14.9905%" y="309" width="2.1013%" height="15" fill="rgb(242,16,51)" fg:x="13526350582" fg:w="1896022980"/><text x="15.2405%" y="319.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,779,096,478 samples, 1.97%)</title><rect x="15.1200%" y="293" width="1.9717%" height="15" fill="rgb(248,9,4)" fg:x="13643277084" fg:w="1779096478"/><text x="15.3700%" y="303.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (81,897,622 samples, 0.09%)</title><rect x="17.3571%" y="293" width="0.0908%" height="15" fill="rgb(210,31,22)" fg:x="15661866736" fg:w="81897622"/><text x="17.6071%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (81,897,622 samples, 0.09%)</title><rect x="17.3571%" y="277" width="0.0908%" height="15" fill="rgb(239,54,39)" fg:x="15661866736" fg:w="81897622"/><text x="17.6071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (81,897,622 samples, 0.09%)</title><rect x="17.3571%" y="261" width="0.0908%" height="15" fill="rgb(230,99,41)" fg:x="15661866736" fg:w="81897622"/><text x="17.6071%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (81,897,622 samples, 0.09%)</title><rect x="17.3571%" y="245" width="0.0908%" height="15" fill="rgb(253,106,12)" fg:x="15661866736" fg:w="81897622"/><text x="17.6071%" y="255.50"></text></g><g><title>__rustc::__rust_dealloc (83,515,522 samples, 0.09%)</title><rect x="17.5015%" y="277" width="0.0926%" height="15" fill="rgb(213,46,41)" fg:x="15792135493" fg:w="83515522"/><text x="17.7515%" y="287.50"></text></g><g><title>_int_free_create_chunk (117,582,764 samples, 0.13%)</title><rect x="18.7400%" y="229" width="0.1303%" height="15" fill="rgb(215,133,35)" fg:x="16909656946" fg:w="117582764"/><text x="18.9900%" y="239.50"></text></g><g><title>unlink_chunk.isra.0 (19,442,587 samples, 0.02%)</title><rect x="18.8487%" y="213" width="0.0215%" height="15" fill="rgb(213,28,5)" fg:x="17007797123" fg:w="19442587"/><text x="19.0987%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,149,342,016 samples, 1.27%)</title><rect x="17.5973%" y="277" width="1.2737%" height="15" fill="rgb(215,77,49)" fg:x="15878579787" fg:w="1149342016"/><text x="17.8473%" y="287.50"></text></g><g><title>_int_free_chunk (245,469,836 samples, 0.27%)</title><rect x="18.5990%" y="261" width="0.2720%" height="15" fill="rgb(248,100,22)" fg:x="16782451967" fg:w="245469836"/><text x="18.8490%" y="271.50"></text></g><g><title>_int_free_merge_chunk (140,954,180 samples, 0.16%)</title><rect x="18.7148%" y="245" width="0.1562%" height="15" fill="rgb(208,67,9)" fg:x="16886967623" fg:w="140954180"/><text x="18.9648%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,864,477,913 samples, 2.07%)</title><rect x="17.3545%" y="309" width="2.0663%" height="15" fill="rgb(219,133,21)" fg:x="15659542533" fg:w="1864477913"/><text x="17.6045%" y="319.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (1,780,256,088 samples, 1.97%)</title><rect x="17.4479%" y="293" width="1.9730%" height="15" fill="rgb(246,46,29)" fg:x="15743764358" fg:w="1780256088"/><text x="17.6979%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (496,098,643 samples, 0.55%)</title><rect x="18.8710%" y="277" width="0.5498%" height="15" fill="rgb(246,185,52)" fg:x="17027921803" fg:w="496098643"/><text x="19.1210%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (45,666,352 samples, 0.05%)</title><rect x="19.3702%" y="261" width="0.0506%" height="15" fill="rgb(252,136,11)" fg:x="17478354094" fg:w="45666352"/><text x="19.6202%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (45,666,352 samples, 0.05%)</title><rect x="19.3702%" y="245" width="0.0506%" height="15" fill="rgb(219,138,53)" fg:x="17478354094" fg:w="45666352"/><text x="19.6202%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45,666,352 samples, 0.05%)</title><rect x="19.3702%" y="229" width="0.0506%" height="15" fill="rgb(211,51,23)" fg:x="17478354094" fg:w="45666352"/><text x="19.6202%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (2,118,767,999 samples, 2.35%)</title><rect x="17.0917%" y="341" width="2.3481%" height="15" fill="rgb(247,221,28)" fg:x="15422373562" fg:w="2118767999"/><text x="17.3417%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (1,881,599,028 samples, 2.09%)</title><rect x="17.3545%" y="325" width="2.0853%" height="15" fill="rgb(251,222,45)" fg:x="15659542533" fg:w="1881599028"/><text x="17.6045%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;server_lib::resp3::RequestType&gt;&gt; (17,121,115 samples, 0.02%)</title><rect x="19.4208%" y="309" width="0.0190%" height="15" fill="rgb(217,162,53)" fg:x="17524020446" fg:w="17121115"/><text x="19.6708%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17,121,115 samples, 0.02%)</title><rect x="19.4208%" y="293" width="0.0190%" height="15" fill="rgb(229,93,14)" fg:x="17524020446" fg:w="17121115"/><text x="19.6708%" y="303.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (21,984,068 samples, 0.02%)</title><rect x="20.2960%" y="261" width="0.0244%" height="15" fill="rgb(209,67,49)" fg:x="18313716619" fg:w="21984068"/><text x="20.5460%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,587,183 samples, 0.01%)</title><rect x="20.6143%" y="245" width="0.0128%" height="15" fill="rgb(213,87,29)" fg:x="18600935316" fg:w="11587183"/><text x="20.8643%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11,587,183 samples, 0.01%)</title><rect x="20.6143%" y="229" width="0.0128%" height="15" fill="rgb(205,151,52)" fg:x="18600935316" fg:w="11587183"/><text x="20.8643%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11,587,183 samples, 0.01%)</title><rect x="20.6143%" y="213" width="0.0128%" height="15" fill="rgb(253,215,39)" fg:x="18600935316" fg:w="11587183"/><text x="20.8643%" y="223.50"></text></g><g><title>core::fmt::Formatter::new (16,004,125 samples, 0.02%)</title><rect x="20.6272%" y="245" width="0.0177%" height="15" fill="rgb(221,220,41)" fg:x="18612522499" fg:w="16004125"/><text x="20.8772%" y="255.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (99,138,163 samples, 0.11%)</title><rect x="20.6555%" y="229" width="0.1099%" height="15" fill="rgb(218,133,21)" fg:x="18638074455" fg:w="99138163"/><text x="20.9055%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (21,208,378 samples, 0.02%)</title><rect x="20.7418%" y="213" width="0.0235%" height="15" fill="rgb(221,193,43)" fg:x="18716004240" fg:w="21208378"/><text x="20.9918%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (55,062,103 samples, 0.06%)</title><rect x="20.9735%" y="69" width="0.0610%" height="15" fill="rgb(240,128,52)" fg:x="18925016530" fg:w="55062103"/><text x="21.2235%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46,813,489 samples, 0.05%)</title><rect x="20.9826%" y="53" width="0.0519%" height="15" fill="rgb(253,114,12)" fg:x="18933265144" fg:w="46813489"/><text x="21.2326%" y="63.50"></text></g><g><title>__rustc::__rust_alloc (59,338,995 samples, 0.07%)</title><rect x="21.0345%" y="69" width="0.0658%" height="15" fill="rgb(215,223,47)" fg:x="18980078633" fg:w="59338995"/><text x="21.2845%" y="79.50"></text></g><g><title>_int_malloc (467,806,311 samples, 0.52%)</title><rect x="21.9143%" y="53" width="0.5184%" height="15" fill="rgb(248,225,23)" fg:x="19773970112" fg:w="467806311"/><text x="22.1643%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (118,565,487 samples, 0.13%)</title><rect x="22.3014%" y="37" width="0.1314%" height="15" fill="rgb(250,108,0)" fg:x="20123210936" fg:w="118565487"/><text x="22.5514%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,479,665,928 samples, 1.64%)</title><rect x="20.7947%" y="149" width="1.6398%" height="15" fill="rgb(228,208,7)" fg:x="18763669921" fg:w="1479665928"/><text x="21.0447%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,478,903,916 samples, 1.64%)</title><rect x="20.7955%" y="133" width="1.6390%" height="15" fill="rgb(244,45,10)" fg:x="18764431933" fg:w="1478903916"/><text x="21.0455%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,478,903,916 samples, 1.64%)</title><rect x="20.7955%" y="117" width="1.6390%" height="15" fill="rgb(207,125,25)" fg:x="18764431933" fg:w="1478903916"/><text x="21.0455%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,460,864,443 samples, 1.62%)</title><rect x="20.8155%" y="101" width="1.6190%" height="15" fill="rgb(210,195,18)" fg:x="18782471406" fg:w="1460864443"/><text x="21.0655%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,358,986,579 samples, 1.51%)</title><rect x="20.9284%" y="85" width="1.5061%" height="15" fill="rgb(249,80,12)" fg:x="18884349270" fg:w="1358986579"/><text x="21.1784%" y="95.50"></text></g><g><title>malloc (1,202,503,846 samples, 1.33%)</title><rect x="21.1018%" y="69" width="1.3327%" height="15" fill="rgb(221,65,9)" fg:x="19040832003" fg:w="1202503846"/><text x="21.3518%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,894,415,707 samples, 2.10%)</title><rect x="20.7653%" y="229" width="2.0995%" height="15" fill="rgb(235,49,36)" fg:x="18737212618" fg:w="1894415707"/><text x="21.0153%" y="239.50">&lt;..</text></g><g><title>alloc::string::String::push_str (1,893,701,360 samples, 2.10%)</title><rect x="20.7661%" y="213" width="2.0987%" height="15" fill="rgb(225,32,20)" fg:x="18737926965" fg:w="1893701360"/><text x="21.0161%" y="223.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,893,701,360 samples, 2.10%)</title><rect x="20.7661%" y="197" width="2.0987%" height="15" fill="rgb(215,141,46)" fg:x="18737926965" fg:w="1893701360"/><text x="21.0161%" y="207.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,893,701,360 samples, 2.10%)</title><rect x="20.7661%" y="181" width="2.0987%" height="15" fill="rgb(250,160,47)" fg:x="18737926965" fg:w="1893701360"/><text x="21.0161%" y="191.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,893,701,360 samples, 2.10%)</title><rect x="20.7661%" y="165" width="2.0987%" height="15" fill="rgb(216,222,40)" fg:x="18737926965" fg:w="1893701360"/><text x="21.0161%" y="175.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (388,292,476 samples, 0.43%)</title><rect x="22.4345%" y="149" width="0.4303%" height="15" fill="rgb(234,217,39)" fg:x="20243335849" fg:w="388292476"/><text x="22.6845%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (388,292,476 samples, 0.43%)</title><rect x="22.4345%" y="133" width="0.4303%" height="15" fill="rgb(207,178,40)" fg:x="20243335849" fg:w="388292476"/><text x="22.6845%" y="143.50"></text></g><g><title>core::fmt::write (2,493,213,893 samples, 2.76%)</title><rect x="20.3204%" y="261" width="2.7631%" height="15" fill="rgb(221,136,13)" fg:x="18335700687" fg:w="2493213893"/><text x="20.5704%" y="271.50">co..</text></g><g><title>core::fmt::rt::Argument::fmt (2,200,387,956 samples, 2.44%)</title><rect x="20.6449%" y="245" width="2.4386%" height="15" fill="rgb(249,199,10)" fg:x="18628526624" fg:w="2200387956"/><text x="20.8949%" y="255.50">co..</text></g><g><title>core::fmt::Formatter::pad (189,802,413 samples, 0.21%)</title><rect x="22.8731%" y="229" width="0.2103%" height="15" fill="rgb(249,222,13)" fg:x="20639112167" fg:w="189802413"/><text x="23.1231%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2,516,697,494 samples, 2.79%)</title><rect x="20.2960%" y="277" width="2.7891%" height="15" fill="rgb(244,185,38)" fg:x="18313716619" fg:w="2516697494"/><text x="20.5460%" y="287.50">co..</text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (2,742,083,396 samples, 3.04%)</title><rect x="20.0680%" y="293" width="3.0389%" height="15" fill="rgb(236,202,9)" fg:x="18108012249" fg:w="2742083396"/><text x="20.3180%" y="303.50">&lt;se..</text></g><g><title>core::fmt::rt::&lt;impl core::fmt::Arguments&gt;::new_v1 (19,681,532 samples, 0.02%)</title><rect x="23.0851%" y="277" width="0.0218%" height="15" fill="rgb(250,229,37)" fg:x="20830414113" fg:w="19681532"/><text x="23.3351%" y="287.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (2,823,921,763 samples, 3.13%)</title><rect x="20.0010%" y="309" width="3.1296%" height="15" fill="rgb(206,174,23)" fg:x="18047503243" fg:w="2823921763"/><text x="20.2510%" y="319.50">&lt;T ..</text></g><g><title>__rustc::__rdl_alloc (156,672,988 samples, 0.17%)</title><rect x="23.2485%" y="101" width="0.1736%" height="15" fill="rgb(211,33,43)" fg:x="20977823562" fg:w="156672988"/><text x="23.4985%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (140,640,386 samples, 0.16%)</title><rect x="23.2663%" y="85" width="0.1559%" height="15" fill="rgb(245,58,50)" fg:x="20993856164" fg:w="140640386"/><text x="23.5163%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (149,964,467 samples, 0.17%)</title><rect x="23.4221%" y="101" width="0.1662%" height="15" fill="rgb(244,68,36)" fg:x="21134496550" fg:w="149964467"/><text x="23.6721%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,386,204,826 samples, 1.54%)</title><rect x="23.2464%" y="149" width="1.5362%" height="15" fill="rgb(232,229,15)" fg:x="20975962247" fg:w="1386204826"/><text x="23.4964%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,386,204,826 samples, 1.54%)</title><rect x="23.2464%" y="133" width="1.5362%" height="15" fill="rgb(254,30,23)" fg:x="20975962247" fg:w="1386204826"/><text x="23.4964%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1,386,204,826 samples, 1.54%)</title><rect x="23.2464%" y="117" width="1.5362%" height="15" fill="rgb(235,160,14)" fg:x="20975962247" fg:w="1386204826"/><text x="23.4964%" y="127.50"></text></g><g><title>malloc (1,077,706,056 samples, 1.19%)</title><rect x="23.5883%" y="101" width="1.1944%" height="15" fill="rgb(212,155,44)" fg:x="21284461017" fg:w="1077706056"/><text x="23.8383%" y="111.50"></text></g><g><title>_int_malloc (246,277,751 samples, 0.27%)</title><rect x="24.5097%" y="85" width="0.2729%" height="15" fill="rgb(226,2,50)" fg:x="22115889322" fg:w="246277751"/><text x="24.7597%" y="95.50"></text></g><g><title>unlink_chunk.isra.0 (67,703,047 samples, 0.08%)</title><rect x="24.7076%" y="69" width="0.0750%" height="15" fill="rgb(234,177,6)" fg:x="22294464026" fg:w="67703047"/><text x="24.9576%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,495,868,979 samples, 1.66%)</title><rect x="23.1328%" y="213" width="1.6578%" height="15" fill="rgb(217,24,9)" fg:x="20873400342" fg:w="1495868979"/><text x="23.3828%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,495,868,979 samples, 1.66%)</title><rect x="23.1328%" y="197" width="1.6578%" height="15" fill="rgb(220,13,46)" fg:x="20873400342" fg:w="1495868979"/><text x="23.3828%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,495,868,979 samples, 1.66%)</title><rect x="23.1328%" y="181" width="1.6578%" height="15" fill="rgb(239,221,27)" fg:x="20873400342" fg:w="1495868979"/><text x="23.3828%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,495,868,979 samples, 1.66%)</title><rect x="23.1328%" y="165" width="1.6578%" height="15" fill="rgb(222,198,25)" fg:x="20873400342" fg:w="1495868979"/><text x="23.3828%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2,127,458,620 samples, 2.36%)</title><rect x="23.1328%" y="277" width="2.3577%" height="15" fill="rgb(211,99,13)" fg:x="20873400342" fg:w="2127458620"/><text x="23.3828%" y="287.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,127,458,620 samples, 2.36%)</title><rect x="23.1328%" y="261" width="2.3577%" height="15" fill="rgb(232,111,31)" fg:x="20873400342" fg:w="2127458620"/><text x="23.3828%" y="271.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,127,458,620 samples, 2.36%)</title><rect x="23.1328%" y="245" width="2.3577%" height="15" fill="rgb(245,82,37)" fg:x="20873400342" fg:w="2127458620"/><text x="23.3828%" y="255.50">a..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,127,458,620 samples, 2.36%)</title><rect x="23.1328%" y="229" width="2.3577%" height="15" fill="rgb(227,149,46)" fg:x="20873400342" fg:w="2127458620"/><text x="23.3828%" y="239.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (631,589,641 samples, 0.70%)</title><rect x="24.7905%" y="213" width="0.7000%" height="15" fill="rgb(218,36,50)" fg:x="22369269321" fg:w="631589641"/><text x="25.0405%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (631,589,641 samples, 0.70%)</title><rect x="24.7905%" y="197" width="0.7000%" height="15" fill="rgb(226,80,48)" fg:x="22369269321" fg:w="631589641"/><text x="25.0405%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (598,656,465 samples, 0.66%)</title><rect x="24.8270%" y="181" width="0.6635%" height="15" fill="rgb(238,224,15)" fg:x="22402202497" fg:w="598656465"/><text x="25.0770%" y="191.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5,032,818,858 samples, 5.58%)</title><rect x="19.9634%" y="325" width="5.5776%" height="15" fill="rgb(241,136,10)" fg:x="18013610819" fg:w="5032818858"/><text x="20.2134%" y="335.50">&lt;T as a..</text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (2,175,004,671 samples, 2.41%)</title><rect x="23.1306%" y="309" width="2.4104%" height="15" fill="rgb(208,32,45)" fg:x="20871425006" fg:w="2175004671"/><text x="23.3806%" y="319.50">&lt;a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2,173,029,335 samples, 2.41%)</title><rect x="23.1328%" y="293" width="2.4082%" height="15" fill="rgb(207,135,9)" fg:x="20873400342" fg:w="2173029335"/><text x="23.3828%" y="303.50">al..</text></g><g><title>alloc::string::String::from_utf8_unchecked (45,570,715 samples, 0.05%)</title><rect x="25.4905%" y="277" width="0.0505%" height="15" fill="rgb(206,86,44)" fg:x="23000858962" fg:w="45570715"/><text x="25.7405%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (40,811,552 samples, 0.05%)</title><rect x="25.5410%" y="325" width="0.0452%" height="15" fill="rgb(245,177,15)" fg:x="23046429677" fg:w="40811552"/><text x="25.7910%" y="335.50"></text></g><g><title>alloc::string::String::as_str (40,811,552 samples, 0.05%)</title><rect x="25.5410%" y="309" width="0.0452%" height="15" fill="rgb(206,64,50)" fg:x="23046429677" fg:w="40811552"/><text x="25.7910%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (40,811,552 samples, 0.05%)</title><rect x="25.5410%" y="293" width="0.0452%" height="15" fill="rgb(234,36,40)" fg:x="23046429677" fg:w="40811552"/><text x="25.7910%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29,591,054 samples, 0.03%)</title><rect x="25.5534%" y="277" width="0.0328%" height="15" fill="rgb(213,64,8)" fg:x="23057650175" fg:w="29591054"/><text x="25.8034%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29,591,054 samples, 0.03%)</title><rect x="25.5534%" y="261" width="0.0328%" height="15" fill="rgb(210,75,36)" fg:x="23057650175" fg:w="29591054"/><text x="25.8034%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (29,591,054 samples, 0.03%)</title><rect x="25.5534%" y="245" width="0.0328%" height="15" fill="rgb(229,88,21)" fg:x="23057650175" fg:w="29591054"/><text x="25.8034%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (29,591,054 samples, 0.03%)</title><rect x="25.5534%" y="229" width="0.0328%" height="15" fill="rgb(252,204,47)" fg:x="23057650175" fg:w="29591054"/><text x="25.8034%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11,388,983 samples, 0.01%)</title><rect x="25.5862%" y="325" width="0.0126%" height="15" fill="rgb(208,77,27)" fg:x="23087241229" fg:w="11388983"/><text x="25.8362%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20,907,873 samples, 0.02%)</title><rect x="25.5988%" y="325" width="0.0232%" height="15" fill="rgb(221,76,26)" fg:x="23098630212" fg:w="20907873"/><text x="25.8488%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (20,907,873 samples, 0.02%)</title><rect x="25.5988%" y="309" width="0.0232%" height="15" fill="rgb(225,139,18)" fg:x="23098630212" fg:w="20907873"/><text x="25.8488%" y="319.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (26,877,748 samples, 0.03%)</title><rect x="25.6256%" y="325" width="0.0298%" height="15" fill="rgb(230,137,11)" fg:x="23122738891" fg:w="26877748"/><text x="25.8756%" y="335.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (26,877,748 samples, 0.03%)</title><rect x="25.6256%" y="309" width="0.0298%" height="15" fill="rgb(212,28,1)" fg:x="23122738891" fg:w="26877748"/><text x="25.8756%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (112,252,993 samples, 0.12%)</title><rect x="25.6697%" y="325" width="0.1244%" height="15" fill="rgb(248,164,17)" fg:x="23162529810" fg:w="112252993"/><text x="25.9197%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (56,108,572 samples, 0.06%)</title><rect x="26.1784%" y="165" width="0.0622%" height="15" fill="rgb(222,171,42)" fg:x="23621553627" fg:w="56108572"/><text x="26.4284%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51,893,640 samples, 0.06%)</title><rect x="26.1830%" y="149" width="0.0575%" height="15" fill="rgb(243,84,45)" fg:x="23625768559" fg:w="51893640"/><text x="26.4330%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (60,739,252 samples, 0.07%)</title><rect x="26.2406%" y="165" width="0.0673%" height="15" fill="rgb(252,49,23)" fg:x="23677662199" fg:w="60739252"/><text x="26.4906%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (330,402,966 samples, 0.37%)</title><rect x="26.1643%" y="213" width="0.3662%" height="15" fill="rgb(215,19,7)" fg:x="23608832576" fg:w="330402966"/><text x="26.4143%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (330,402,966 samples, 0.37%)</title><rect x="26.1643%" y="197" width="0.3662%" height="15" fill="rgb(238,81,41)" fg:x="23608832576" fg:w="330402966"/><text x="26.4143%" y="207.50"></text></g><g><title>alloc::alloc::alloc (330,402,966 samples, 0.37%)</title><rect x="26.1643%" y="181" width="0.3662%" height="15" fill="rgb(210,199,37)" fg:x="23608832576" fg:w="330402966"/><text x="26.4143%" y="191.50"></text></g><g><title>malloc (193,625,691 samples, 0.21%)</title><rect x="26.3159%" y="165" width="0.2146%" height="15" fill="rgb(244,192,49)" fg:x="23745609851" fg:w="193625691"/><text x="26.5659%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (342,125,997 samples, 0.38%)</title><rect x="26.1531%" y="293" width="0.3792%" height="15" fill="rgb(226,211,11)" fg:x="23598711858" fg:w="342125997"/><text x="26.4031%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (342,125,997 samples, 0.38%)</title><rect x="26.1531%" y="277" width="0.3792%" height="15" fill="rgb(236,162,54)" fg:x="23598711858" fg:w="342125997"/><text x="26.4031%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (342,125,997 samples, 0.38%)</title><rect x="26.1531%" y="261" width="0.3792%" height="15" fill="rgb(220,229,9)" fg:x="23598711858" fg:w="342125997"/><text x="26.4031%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (342,125,997 samples, 0.38%)</title><rect x="26.1531%" y="245" width="0.3792%" height="15" fill="rgb(250,87,22)" fg:x="23598711858" fg:w="342125997"/><text x="26.4031%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (342,125,997 samples, 0.38%)</title><rect x="26.1531%" y="229" width="0.3792%" height="15" fill="rgb(239,43,17)" fg:x="23598711858" fg:w="342125997"/><text x="26.4031%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (724,679,436 samples, 0.80%)</title><rect x="25.7979%" y="325" width="0.8031%" height="15" fill="rgb(231,177,25)" fg:x="23278194736" fg:w="724679436"/><text x="26.0479%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (553,841,139 samples, 0.61%)</title><rect x="25.9872%" y="309" width="0.6138%" height="15" fill="rgb(219,179,1)" fg:x="23449033033" fg:w="553841139"/><text x="26.2372%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (62,036,317 samples, 0.07%)</title><rect x="26.5322%" y="293" width="0.0688%" height="15" fill="rgb(238,219,53)" fg:x="23940837855" fg:w="62036317"/><text x="26.7822%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (55,645,406 samples, 0.06%)</title><rect x="26.5393%" y="277" width="0.0617%" height="15" fill="rgb(232,167,36)" fg:x="23947228766" fg:w="55645406"/><text x="26.7893%" y="287.50"></text></g><g><title>alloc::string::String::as_str (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="325" width="0.0237%" height="15" fill="rgb(244,19,51)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="309" width="0.0237%" height="15" fill="rgb(224,6,22)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="293" width="0.0237%" height="15" fill="rgb(224,145,5)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="277" width="0.0237%" height="15" fill="rgb(234,130,49)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="261" width="0.0237%" height="15" fill="rgb(254,6,2)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (21,382,640 samples, 0.02%)</title><rect x="26.6010%" y="245" width="0.0237%" height="15" fill="rgb(208,96,46)" fg:x="24002874172" fg:w="21382640"/><text x="26.8510%" y="255.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (4,962,548,077 samples, 5.50%)</title><rect x="27.1439%" y="309" width="5.4997%" height="15" fill="rgb(239,3,39)" fg:x="24492742317" fg:w="4962548077"/><text x="27.3939%" y="319.50">&lt;core::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (104,570,908 samples, 0.12%)</title><rect x="32.5277%" y="293" width="0.1159%" height="15" fill="rgb(233,210,1)" fg:x="29350719486" fg:w="104570908"/><text x="32.7777%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (100,611,774 samples, 0.11%)</title><rect x="32.5321%" y="277" width="0.1115%" height="15" fill="rgb(244,137,37)" fg:x="29354678620" fg:w="100611774"/><text x="32.7821%" y="287.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (5,451,958,361 samples, 6.04%)</title><rect x="26.6247%" y="325" width="6.0421%" height="15" fill="rgb(240,136,2)" fg:x="24024256812" fg:w="5451958361"/><text x="26.8747%" y="335.50">alloc::s..</text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (20,924,779 samples, 0.02%)</title><rect x="32.6436%" y="309" width="0.0232%" height="15" fill="rgb(239,18,37)" fg:x="29455290394" fg:w="20924779"/><text x="32.8936%" y="319.50"></text></g><g><title>_int_free_create_chunk (264,568,963 samples, 0.29%)</title><rect x="33.5987%" y="277" width="0.2932%" height="15" fill="rgb(218,185,22)" fg:x="30317182263" fg:w="264568963"/><text x="33.8487%" y="287.50"></text></g><g><title>unlink_chunk.isra.0 (50,106,118 samples, 0.06%)</title><rect x="33.8364%" y="261" width="0.0555%" height="15" fill="rgb(225,218,4)" fg:x="30531645108" fg:w="50106118"/><text x="34.0864%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,118,085,151 samples, 1.24%)</title><rect x="32.6684%" y="325" width="1.2391%" height="15" fill="rgb(230,182,32)" fg:x="29477685933" fg:w="1118085151"/><text x="32.9184%" y="335.50"></text></g><g><title>_int_free_chunk (525,812,881 samples, 0.58%)</title><rect x="33.3248%" y="309" width="0.5827%" height="15" fill="rgb(242,56,43)" fg:x="30069958203" fg:w="525812881"/><text x="33.5748%" y="319.50"></text></g><g><title>_int_free_merge_chunk (349,344,726 samples, 0.39%)</title><rect x="33.5203%" y="293" width="0.3872%" height="15" fill="rgb(233,99,24)" fg:x="30246426358" fg:w="349344726"/><text x="33.7703%" y="303.50"></text></g><g><title>unlink_chunk.isra.0 (14,019,858 samples, 0.02%)</title><rect x="33.8920%" y="277" width="0.0155%" height="15" fill="rgb(234,209,42)" fg:x="30581751226" fg:w="14019858"/><text x="34.1420%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (91,239,712 samples, 0.10%)</title><rect x="33.9075%" y="325" width="0.1011%" height="15" fill="rgb(227,7,12)" fg:x="30595771084" fg:w="91239712"/><text x="34.1575%" y="335.50"></text></g><g><title>__rustc::__rust_dealloc (138,229,274 samples, 0.15%)</title><rect x="34.0911%" y="213" width="0.1532%" height="15" fill="rgb(245,203,43)" fg:x="30761429546" fg:w="138229274"/><text x="34.3411%" y="223.50"></text></g><g><title>_int_free_create_chunk (113,516,480 samples, 0.13%)</title><rect x="35.2875%" y="165" width="0.1258%" height="15" fill="rgb(238,205,33)" fg:x="31841042141" fg:w="113516480"/><text x="35.5375%" y="175.50"></text></g><g><title>unlink_chunk.isra.0 (14,575,700 samples, 0.02%)</title><rect x="35.3972%" y="149" width="0.0162%" height="15" fill="rgb(231,56,7)" fg:x="31939982921" fg:w="14575700"/><text x="35.6472%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,215,295,894 samples, 1.35%)</title><rect x="34.0688%" y="245" width="1.3468%" height="15" fill="rgb(244,186,29)" fg:x="30741370454" fg:w="1215295894"/><text x="34.3188%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1,215,295,894 samples, 1.35%)</title><rect x="34.0688%" y="229" width="1.3468%" height="15" fill="rgb(234,111,31)" fg:x="30741370454" fg:w="1215295894"/><text x="34.3188%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,055,686,624 samples, 1.17%)</title><rect x="34.2457%" y="213" width="1.1700%" height="15" fill="rgb(241,149,10)" fg:x="30900979724" fg:w="1055686624"/><text x="34.4957%" y="223.50"></text></g><g><title>_int_free_chunk (256,168,417 samples, 0.28%)</title><rect x="35.1318%" y="197" width="0.2839%" height="15" fill="rgb(249,206,44)" fg:x="31700497931" fg:w="256168417"/><text x="35.3818%" y="207.50"></text></g><g><title>_int_free_merge_chunk (150,861,169 samples, 0.17%)</title><rect x="35.2485%" y="181" width="0.1672%" height="15" fill="rgb(251,153,30)" fg:x="31805805179" fg:w="150861169"/><text x="35.4985%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,279,548,342 samples, 1.42%)</title><rect x="34.0086%" y="325" width="1.4180%" height="15" fill="rgb(239,152,38)" fg:x="30687010796" fg:w="1279548342"/><text x="34.2586%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,279,548,342 samples, 1.42%)</title><rect x="34.0086%" y="309" width="1.4180%" height="15" fill="rgb(249,139,47)" fg:x="30687010796" fg:w="1279548342"/><text x="34.2586%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,279,548,342 samples, 1.42%)</title><rect x="34.0086%" y="293" width="1.4180%" height="15" fill="rgb(244,64,35)" fg:x="30687010796" fg:w="1279548342"/><text x="34.2586%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,279,548,342 samples, 1.42%)</title><rect x="34.0086%" y="277" width="1.4180%" height="15" fill="rgb(216,46,15)" fg:x="30687010796" fg:w="1279548342"/><text x="34.2586%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,225,188,684 samples, 1.36%)</title><rect x="34.0688%" y="261" width="1.3578%" height="15" fill="rgb(250,74,19)" fg:x="30741370454" fg:w="1225188684"/><text x="34.3188%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (9,892,790 samples, 0.01%)</title><rect x="35.4157%" y="245" width="0.0110%" height="15" fill="rgb(249,42,33)" fg:x="31956666348" fg:w="9892790"/><text x="35.6657%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt;&gt; (265,579,489 samples, 0.29%)</title><rect x="35.4267%" y="325" width="0.2943%" height="15" fill="rgb(242,149,17)" fg:x="31966559138" fg:w="265579489"/><text x="35.6767%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (265,579,489 samples, 0.29%)</title><rect x="35.4267%" y="309" width="0.2943%" height="15" fill="rgb(244,29,21)" fg:x="31966559138" fg:w="265579489"/><text x="35.6767%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (244,841,340 samples, 0.27%)</title><rect x="35.4496%" y="293" width="0.2713%" height="15" fill="rgb(220,130,37)" fg:x="31987297287" fg:w="244841340"/><text x="35.6996%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (244,841,340 samples, 0.27%)</title><rect x="35.4496%" y="277" width="0.2713%" height="15" fill="rgb(211,67,2)" fg:x="31987297287" fg:w="244841340"/><text x="35.6996%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (269,753,894 samples, 0.30%)</title><rect x="35.7381%" y="277" width="0.2990%" height="15" fill="rgb(235,68,52)" fg:x="32247575624" fg:w="269753894"/><text x="35.9881%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (269,753,894 samples, 0.30%)</title><rect x="35.7381%" y="261" width="0.2990%" height="15" fill="rgb(246,142,3)" fg:x="32247575624" fg:w="269753894"/><text x="35.9881%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (308,731,285 samples, 0.34%)</title><rect x="35.7210%" y="325" width="0.3421%" height="15" fill="rgb(241,25,7)" fg:x="32232138627" fg:w="308731285"/><text x="35.9710%" y="335.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (308,731,285 samples, 0.34%)</title><rect x="35.7210%" y="309" width="0.3421%" height="15" fill="rgb(242,119,39)" fg:x="32232138627" fg:w="308731285"/><text x="35.9710%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (308,731,285 samples, 0.34%)</title><rect x="35.7210%" y="293" width="0.3421%" height="15" fill="rgb(241,98,45)" fg:x="32232138627" fg:w="308731285"/><text x="35.9710%" y="303.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (23,540,394 samples, 0.03%)</title><rect x="36.0370%" y="277" width="0.0261%" height="15" fill="rgb(254,28,30)" fg:x="32517329518" fg:w="23540394"/><text x="36.2870%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (23,540,394 samples, 0.03%)</title><rect x="36.0370%" y="261" width="0.0261%" height="15" fill="rgb(241,142,54)" fg:x="32517329518" fg:w="23540394"/><text x="36.2870%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (23,540,394 samples, 0.03%)</title><rect x="36.0370%" y="245" width="0.0261%" height="15" fill="rgb(222,85,15)" fg:x="32517329518" fg:w="23540394"/><text x="36.2870%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (23,759,323 samples, 0.03%)</title><rect x="36.0631%" y="325" width="0.0263%" height="15" fill="rgb(210,85,47)" fg:x="32540869912" fg:w="23759323"/><text x="36.3131%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (23,759,323 samples, 0.03%)</title><rect x="36.0631%" y="309" width="0.0263%" height="15" fill="rgb(224,206,25)" fg:x="32540869912" fg:w="23759323"/><text x="36.3131%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (286,042,856 samples, 0.32%)</title><rect x="36.0895%" y="325" width="0.3170%" height="15" fill="rgb(243,201,19)" fg:x="32564629235" fg:w="286042856"/><text x="36.3395%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (286,042,856 samples, 0.32%)</title><rect x="36.0895%" y="309" width="0.3170%" height="15" fill="rgb(236,59,4)" fg:x="32564629235" fg:w="286042856"/><text x="36.3395%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (286,042,856 samples, 0.32%)</title><rect x="36.0895%" y="293" width="0.3170%" height="15" fill="rgb(254,179,45)" fg:x="32564629235" fg:w="286042856"/><text x="36.3395%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (286,042,856 samples, 0.32%)</title><rect x="36.0895%" y="277" width="0.3170%" height="15" fill="rgb(226,14,10)" fg:x="32564629235" fg:w="286042856"/><text x="36.3395%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (258,879,030 samples, 0.29%)</title><rect x="36.4853%" y="293" width="0.2869%" height="15" fill="rgb(244,27,41)" fg:x="32921840726" fg:w="258879030"/><text x="36.7353%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (258,879,030 samples, 0.29%)</title><rect x="36.4853%" y="277" width="0.2869%" height="15" fill="rgb(235,35,32)" fg:x="32921840726" fg:w="258879030"/><text x="36.7353%" y="287.50"></text></g><g><title>__sched_yield (54,156,560 samples, 0.06%)</title><rect x="38.6613%" y="277" width="0.0600%" height="15" fill="rgb(218,68,31)" fg:x="34885302431" fg:w="54156560"/><text x="38.9113%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (33,300,768 samples, 0.04%)</title><rect x="38.7213%" y="277" width="0.0369%" height="15" fill="rgb(207,120,37)" fg:x="34939458991" fg:w="33300768"/><text x="38.9713%" y="287.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (2,127,019,289 samples, 2.36%)</title><rect x="36.4065%" y="325" width="2.3573%" height="15" fill="rgb(227,98,0)" fg:x="32850672091" fg:w="2127019289"/><text x="36.6565%" y="335.50">l..</text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (2,127,019,289 samples, 2.36%)</title><rect x="36.4065%" y="309" width="2.3573%" height="15" fill="rgb(207,7,3)" fg:x="32850672091" fg:w="2127019289"/><text x="36.6565%" y="319.50">&lt;..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (1,796,971,624 samples, 1.99%)</title><rect x="36.7722%" y="293" width="1.9915%" height="15" fill="rgb(206,98,19)" fg:x="33180719756" fg:w="1796971624"/><text x="37.0222%" y="303.50">p..</text></g><g><title>__rustc::__rdl_alloc (20,733,048 samples, 0.02%)</title><rect x="38.8390%" y="69" width="0.0230%" height="15" fill="rgb(217,5,26)" fg:x="35045629435" fg:w="20733048"/><text x="39.0890%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17,221,395 samples, 0.02%)</title><rect x="38.8429%" y="53" width="0.0191%" height="15" fill="rgb(235,190,38)" fg:x="35049141088" fg:w="17221395"/><text x="39.0929%" y="63.50"></text></g><g><title>__rustc::__rust_alloc (29,663,805 samples, 0.03%)</title><rect x="38.8620%" y="69" width="0.0329%" height="15" fill="rgb(247,86,24)" fg:x="35066362483" fg:w="29663805"/><text x="39.1120%" y="79.50"></text></g><g><title>_int_malloc (166,893,087 samples, 0.18%)</title><rect x="39.0280%" y="53" width="0.1850%" height="15" fill="rgb(205,101,16)" fg:x="35216198130" fg:w="166893087"/><text x="39.2780%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (16,260,491 samples, 0.02%)</title><rect x="39.1950%" y="37" width="0.0180%" height="15" fill="rgb(246,168,33)" fg:x="35366830726" fg:w="16260491"/><text x="39.4450%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (352,720,932 samples, 0.39%)</title><rect x="38.8262%" y="181" width="0.3909%" height="15" fill="rgb(231,114,1)" fg:x="35034087749" fg:w="352720932"/><text x="39.0762%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (352,720,932 samples, 0.39%)</title><rect x="38.8262%" y="165" width="0.3909%" height="15" fill="rgb(207,184,53)" fg:x="35034087749" fg:w="352720932"/><text x="39.0762%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (352,720,932 samples, 0.39%)</title><rect x="38.8262%" y="149" width="0.3909%" height="15" fill="rgb(224,95,51)" fg:x="35034087749" fg:w="352720932"/><text x="39.0762%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (352,720,932 samples, 0.39%)</title><rect x="38.8262%" y="133" width="0.3909%" height="15" fill="rgb(212,188,45)" fg:x="35034087749" fg:w="352720932"/><text x="39.0762%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (341,179,246 samples, 0.38%)</title><rect x="38.8390%" y="117" width="0.3781%" height="15" fill="rgb(223,154,38)" fg:x="35045629435" fg:w="341179246"/><text x="39.0890%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (341,179,246 samples, 0.38%)</title><rect x="38.8390%" y="101" width="0.3781%" height="15" fill="rgb(251,22,52)" fg:x="35045629435" fg:w="341179246"/><text x="39.0890%" y="111.50"></text></g><g><title>alloc::alloc::alloc (341,179,246 samples, 0.38%)</title><rect x="38.8390%" y="85" width="0.3781%" height="15" fill="rgb(229,209,22)" fg:x="35045629435" fg:w="341179246"/><text x="39.0890%" y="95.50"></text></g><g><title>malloc (290,782,393 samples, 0.32%)</title><rect x="38.8949%" y="69" width="0.3223%" height="15" fill="rgb(234,138,34)" fg:x="35096026288" fg:w="290782393"/><text x="39.1449%" y="79.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="309" width="0.6891%" height="15" fill="rgb(212,95,11)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="319.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="293" width="0.6891%" height="15" fill="rgb(240,179,47)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="277" width="0.6891%" height="15" fill="rgb(240,163,11)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="261" width="0.6891%" height="15" fill="rgb(236,37,12)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="245" width="0.6891%" height="15" fill="rgb(232,164,16)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="229" width="0.6891%" height="15" fill="rgb(244,205,15)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="213" width="0.6891%" height="15" fill="rgb(223,117,47)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (621,836,610 samples, 0.69%)</title><rect x="38.8262%" y="197" width="0.6891%" height="15" fill="rgb(244,107,35)" fg:x="35034087749" fg:w="621836610"/><text x="39.0762%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (269,115,678 samples, 0.30%)</title><rect x="39.2171%" y="181" width="0.2982%" height="15" fill="rgb(205,140,8)" fg:x="35386808681" fg:w="269115678"/><text x="39.4671%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (269,115,678 samples, 0.30%)</title><rect x="39.2171%" y="165" width="0.2982%" height="15" fill="rgb(228,84,46)" fg:x="35386808681" fg:w="269115678"/><text x="39.4671%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (266,640,716 samples, 0.30%)</title><rect x="39.2199%" y="149" width="0.2955%" height="15" fill="rgb(254,188,9)" fg:x="35389283643" fg:w="266640716"/><text x="39.4699%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (48,862,428 samples, 0.05%)</title><rect x="41.0214%" y="149" width="0.0542%" height="15" fill="rgb(206,112,54)" fg:x="37014866205" fg:w="48862428"/><text x="41.2714%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44,598,546 samples, 0.05%)</title><rect x="41.0261%" y="133" width="0.0494%" height="15" fill="rgb(216,84,49)" fg:x="37019130087" fg:w="44598546"/><text x="41.2761%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (47,792,817 samples, 0.05%)</title><rect x="41.0755%" y="149" width="0.0530%" height="15" fill="rgb(214,194,35)" fg:x="37063728633" fg:w="47792817"/><text x="41.3255%" y="159.50"></text></g><g><title>_int_malloc (481,025,957 samples, 0.53%)</title><rect x="41.7759%" y="133" width="0.5331%" height="15" fill="rgb(249,28,3)" fg:x="37695663194" fg:w="481025957"/><text x="42.0259%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (93,546,833 samples, 0.10%)</title><rect x="42.2053%" y="117" width="0.1037%" height="15" fill="rgb(222,56,52)" fg:x="38083142318" fg:w="93546833"/><text x="42.4553%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,173,330,582 samples, 1.30%)</title><rect x="41.0123%" y="197" width="1.3003%" height="15" fill="rgb(245,217,50)" fg:x="37006678512" fg:w="1173330582"/><text x="41.2623%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,173,330,582 samples, 1.30%)</title><rect x="41.0123%" y="181" width="1.3003%" height="15" fill="rgb(213,201,24)" fg:x="37006678512" fg:w="1173330582"/><text x="41.2623%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,173,330,582 samples, 1.30%)</title><rect x="41.0123%" y="165" width="1.3003%" height="15" fill="rgb(248,116,28)" fg:x="37006678512" fg:w="1173330582"/><text x="41.2623%" y="175.50"></text></g><g><title>malloc (1,061,560,089 samples, 1.18%)</title><rect x="41.1362%" y="149" width="1.1765%" height="15" fill="rgb(219,72,43)" fg:x="37118449005" fg:w="1061560089"/><text x="41.3862%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,187,882,111 samples, 1.32%)</title><rect x="40.9970%" y="277" width="1.3165%" height="15" fill="rgb(209,138,14)" fg:x="36992856961" fg:w="1187882111"/><text x="41.2470%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,187,882,111 samples, 1.32%)</title><rect x="40.9970%" y="261" width="1.3165%" height="15" fill="rgb(222,18,33)" fg:x="36992856961" fg:w="1187882111"/><text x="41.2470%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,187,882,111 samples, 1.32%)</title><rect x="40.9970%" y="245" width="1.3165%" height="15" fill="rgb(213,199,7)" fg:x="36992856961" fg:w="1187882111"/><text x="41.2470%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,187,882,111 samples, 1.32%)</title><rect x="40.9970%" y="229" width="1.3165%" height="15" fill="rgb(250,110,10)" fg:x="36992856961" fg:w="1187882111"/><text x="41.2470%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,187,882,111 samples, 1.32%)</title><rect x="40.9970%" y="213" width="1.3165%" height="15" fill="rgb(248,123,6)" fg:x="36992856961" fg:w="1187882111"/><text x="41.2470%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (860,512,612 samples, 0.95%)</title><rect x="42.3135%" y="277" width="0.9537%" height="15" fill="rgb(206,91,31)" fg:x="38180739072" fg:w="860512612"/><text x="42.5635%" y="287.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (696,215,172 samples, 0.77%)</title><rect x="42.4955%" y="261" width="0.7716%" height="15" fill="rgb(211,154,13)" fg:x="38345036512" fg:w="696215172"/><text x="42.7455%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (3,423,209,705 samples, 3.79%)</title><rect x="39.5154%" y="309" width="3.7937%" height="15" fill="rgb(225,148,7)" fg:x="35655924359" fg:w="3423209705"/><text x="39.7654%" y="319.50">allo..</text></g><g><title>alloc::str::convert_while_ascii (3,260,202,088 samples, 3.61%)</title><rect x="39.6960%" y="293" width="3.6131%" height="15" fill="rgb(220,160,43)" fg:x="35818931976" fg:w="3260202088"/><text x="39.9460%" y="303.50">allo..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (37,882,380 samples, 0.04%)</title><rect x="43.2671%" y="277" width="0.0420%" height="15" fill="rgb(213,52,39)" fg:x="39041251684" fg:w="37882380"/><text x="43.5171%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (37,882,380 samples, 0.04%)</title><rect x="43.2671%" y="261" width="0.0420%" height="15" fill="rgb(243,137,7)" fg:x="39041251684" fg:w="37882380"/><text x="43.5171%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (37,882,380 samples, 0.04%)</title><rect x="43.2671%" y="245" width="0.0420%" height="15" fill="rgb(230,79,13)" fg:x="39041251684" fg:w="37882380"/><text x="43.5171%" y="255.50"></text></g><g><title>alloc::string::String::as_str (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="309" width="0.0132%" height="15" fill="rgb(247,105,23)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="293" width="0.0132%" height="15" fill="rgb(223,179,41)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="277" width="0.0132%" height="15" fill="rgb(218,9,34)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="261" width="0.0132%" height="15" fill="rgb(222,106,8)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="245" width="0.0132%" height="15" fill="rgb(211,220,0)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (11,894,708 samples, 0.01%)</title><rect x="43.3091%" y="229" width="0.0132%" height="15" fill="rgb(229,52,16)" fg:x="39079134064" fg:w="11894708"/><text x="43.5591%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,666,126 samples, 0.01%)</title><rect x="43.3223%" y="309" width="0.0107%" height="15" fill="rgb(212,155,18)" fg:x="39091028772" fg:w="9666126"/><text x="43.5723%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (9,666,126 samples, 0.01%)</title><rect x="43.3223%" y="293" width="0.0107%" height="15" fill="rgb(242,21,14)" fg:x="39091028772" fg:w="9666126"/><text x="43.5723%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,666,126 samples, 0.01%)</title><rect x="43.3223%" y="277" width="0.0107%" height="15" fill="rgb(222,19,48)" fg:x="39091028772" fg:w="9666126"/><text x="43.5723%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (9,666,126 samples, 0.01%)</title><rect x="43.3223%" y="261" width="0.0107%" height="15" fill="rgb(232,45,27)" fg:x="39091028772" fg:w="9666126"/><text x="43.5723%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (9,666,126 samples, 0.01%)</title><rect x="43.3223%" y="245" width="0.0107%" height="15" fill="rgb(249,103,42)" fg:x="39091028772" fg:w="9666126"/><text x="43.5723%" y="255.50"></text></g><g><title>__rustc::__rust_dealloc (59,382,340 samples, 0.07%)</title><rect x="43.3488%" y="197" width="0.0658%" height="15" fill="rgb(246,81,33)" fg:x="39114975894" fg:w="59382340"/><text x="43.5988%" y="207.50"></text></g><g><title>_int_free_create_chunk (118,822,984 samples, 0.13%)</title><rect x="43.9656%" y="149" width="0.1317%" height="15" fill="rgb(252,33,42)" fg:x="39671520867" fg:w="118822984"/><text x="44.2156%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (13,217,927 samples, 0.01%)</title><rect x="44.0826%" y="133" width="0.0146%" height="15" fill="rgb(209,212,41)" fg:x="39777125924" fg:w="13217927"/><text x="44.3326%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (684,739,206 samples, 0.76%)</title><rect x="43.3430%" y="229" width="0.7589%" height="15" fill="rgb(207,154,6)" fg:x="39109765389" fg:w="684739206"/><text x="43.5930%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (684,739,206 samples, 0.76%)</title><rect x="43.3430%" y="213" width="0.7589%" height="15" fill="rgb(223,64,47)" fg:x="39109765389" fg:w="684739206"/><text x="43.5930%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (617,785,648 samples, 0.68%)</title><rect x="43.4172%" y="197" width="0.6847%" height="15" fill="rgb(211,161,38)" fg:x="39176718947" fg:w="617785648"/><text x="43.6672%" y="207.50"></text></g><g><title>_int_free_chunk (297,375,791 samples, 0.33%)</title><rect x="43.7723%" y="181" width="0.3296%" height="15" fill="rgb(219,138,40)" fg:x="39497128804" fg:w="297375791"/><text x="44.0223%" y="191.50"></text></g><g><title>_int_free_merge_chunk (154,059,598 samples, 0.17%)</title><rect x="43.9312%" y="165" width="0.1707%" height="15" fill="rgb(241,228,46)" fg:x="39640444997" fg:w="154059598"/><text x="44.1812%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (698,797,331 samples, 0.77%)</title><rect x="43.3330%" y="309" width="0.7744%" height="15" fill="rgb(223,209,38)" fg:x="39100694898" fg:w="698797331"/><text x="43.5830%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (698,797,331 samples, 0.77%)</title><rect x="43.3330%" y="293" width="0.7744%" height="15" fill="rgb(236,164,45)" fg:x="39100694898" fg:w="698797331"/><text x="43.5830%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (698,797,331 samples, 0.77%)</title><rect x="43.3330%" y="277" width="0.7744%" height="15" fill="rgb(231,15,5)" fg:x="39100694898" fg:w="698797331"/><text x="43.5830%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (698,797,331 samples, 0.77%)</title><rect x="43.3330%" y="261" width="0.7744%" height="15" fill="rgb(252,35,15)" fg:x="39100694898" fg:w="698797331"/><text x="43.5830%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (689,726,840 samples, 0.76%)</title><rect x="43.3430%" y="245" width="0.7644%" height="15" fill="rgb(248,181,18)" fg:x="39109765389" fg:w="689726840"/><text x="43.5930%" y="255.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (83,001,285 samples, 0.09%)</title><rect x="44.1105%" y="293" width="0.0920%" height="15" fill="rgb(233,39,42)" fg:x="39802224957" fg:w="83001285"/><text x="44.3605%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (83,001,285 samples, 0.09%)</title><rect x="44.1105%" y="277" width="0.0920%" height="15" fill="rgb(238,110,33)" fg:x="39802224957" fg:w="83001285"/><text x="44.3605%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (83,001,285 samples, 0.09%)</title><rect x="44.1105%" y="261" width="0.0920%" height="15" fill="rgb(233,195,10)" fg:x="39802224957" fg:w="83001285"/><text x="44.3605%" y="271.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (20,047,976 samples, 0.02%)</title><rect x="44.7229%" y="213" width="0.0222%" height="15" fill="rgb(254,105,3)" fg:x="40354830889" fg:w="20047976"/><text x="44.9729%" y="223.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (495,356,848 samples, 0.55%)</title><rect x="44.2024%" y="293" width="0.5490%" height="15" fill="rgb(221,225,9)" fg:x="39885226242" fg:w="495356848"/><text x="44.4524%" y="303.50"></text></g><g><title>core::num::dec2flt::dec2flt (371,773,085 samples, 0.41%)</title><rect x="44.3394%" y="277" width="0.4120%" height="15" fill="rgb(224,227,45)" fg:x="40008810005" fg:w="371773085"/><text x="44.5894%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (242,365,011 samples, 0.27%)</title><rect x="44.4828%" y="261" width="0.2686%" height="15" fill="rgb(229,198,43)" fg:x="40138218079" fg:w="242365011"/><text x="44.7328%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (129,704,433 samples, 0.14%)</title><rect x="44.6077%" y="245" width="0.1437%" height="15" fill="rgb(206,209,35)" fg:x="40250878657" fg:w="129704433"/><text x="44.8577%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (34,998,176 samples, 0.04%)</title><rect x="44.7126%" y="229" width="0.0388%" height="15" fill="rgb(245,195,53)" fg:x="40345584914" fg:w="34998176"/><text x="44.9626%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (581,756,286 samples, 0.64%)</title><rect x="44.1074%" y="309" width="0.6447%" height="15" fill="rgb(240,92,26)" fg:x="39799492229" fg:w="581756286"/><text x="44.3574%" y="319.50"></text></g><g><title>server::get_value_type (5,401,267,054 samples, 5.99%)</title><rect x="38.7683%" y="325" width="5.9859%" height="15" fill="rgb(207,40,23)" fg:x="34981839396" fg:w="5401267054"/><text x="39.0183%" y="335.50">server::..</text></g><g><title>[server] (12,634,953 samples, 0.01%)</title><rect x="44.8871%" y="277" width="0.0140%" height="15" fill="rgb(223,111,35)" fg:x="40502968849" fg:w="12634953"/><text x="45.1371%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (11,006,501 samples, 0.01%)</title><rect x="44.8889%" y="261" width="0.0122%" height="15" fill="rgb(229,147,28)" fg:x="40504597301" fg:w="11006501"/><text x="45.1389%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11,260,617 samples, 0.01%)</title><rect x="45.1514%" y="181" width="0.0125%" height="15" fill="rgb(211,29,28)" fg:x="40741531231" fg:w="11260617"/><text x="45.4014%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11,260,617 samples, 0.01%)</title><rect x="45.1514%" y="165" width="0.0125%" height="15" fill="rgb(228,72,33)" fg:x="40741531231" fg:w="11260617"/><text x="45.4014%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (11,260,617 samples, 0.01%)</title><rect x="45.1514%" y="149" width="0.0125%" height="15" fill="rgb(205,214,31)" fg:x="40741531231" fg:w="11260617"/><text x="45.4014%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (245,244,046 samples, 0.27%)</title><rect x="44.9011%" y="261" width="0.2718%" height="15" fill="rgb(224,111,15)" fg:x="40515603802" fg:w="245244046"/><text x="45.1511%" y="271.50"></text></g><g><title>alloc::string::String::push_str (19,316,617 samples, 0.02%)</title><rect x="45.1514%" y="245" width="0.0214%" height="15" fill="rgb(253,21,26)" fg:x="40741531231" fg:w="19316617"/><text x="45.4014%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19,316,617 samples, 0.02%)</title><rect x="45.1514%" y="229" width="0.0214%" height="15" fill="rgb(245,139,43)" fg:x="40741531231" fg:w="19316617"/><text x="45.4014%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19,316,617 samples, 0.02%)</title><rect x="45.1514%" y="213" width="0.0214%" height="15" fill="rgb(252,170,7)" fg:x="40741531231" fg:w="19316617"/><text x="45.4014%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19,316,617 samples, 0.02%)</title><rect x="45.1514%" y="197" width="0.0214%" height="15" fill="rgb(231,118,14)" fg:x="40741531231" fg:w="19316617"/><text x="45.4014%" y="207.50"></text></g><g><title>[unknown] (246,716,621 samples, 0.27%)</title><rect x="44.9011%" y="277" width="0.2734%" height="15" fill="rgb(238,83,0)" fg:x="40515603802" fg:w="246716621"/><text x="45.1511%" y="287.50"></text></g><g><title>core::fmt::Formatter::new (14,671,925 samples, 0.02%)</title><rect x="45.1840%" y="277" width="0.0163%" height="15" fill="rgb(221,39,39)" fg:x="40770881387" fg:w="14671925"/><text x="45.4340%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (12,374,556 samples, 0.01%)</title><rect x="45.2002%" y="277" width="0.0137%" height="15" fill="rgb(222,119,46)" fg:x="40785553312" fg:w="12374556"/><text x="45.4502%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22,635,944 samples, 0.03%)</title><rect x="45.7408%" y="181" width="0.0251%" height="15" fill="rgb(222,165,49)" fg:x="41273358545" fg:w="22635944"/><text x="45.9908%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (56,335,324 samples, 0.06%)</title><rect x="45.9622%" y="101" width="0.0624%" height="15" fill="rgb(219,113,52)" fg:x="41473107658" fg:w="56335324"/><text x="46.2122%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54,869,204 samples, 0.06%)</title><rect x="45.9638%" y="85" width="0.0608%" height="15" fill="rgb(214,7,15)" fg:x="41474573778" fg:w="54869204"/><text x="46.2138%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (75,891,454 samples, 0.08%)</title><rect x="46.0246%" y="101" width="0.0841%" height="15" fill="rgb(235,32,4)" fg:x="41529442982" fg:w="75891454"/><text x="46.2746%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (723,101,376 samples, 0.80%)</title><rect x="45.7659%" y="181" width="0.8014%" height="15" fill="rgb(238,90,54)" fg:x="41295994489" fg:w="723101376"/><text x="46.0159%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (722,380,848 samples, 0.80%)</title><rect x="45.7667%" y="165" width="0.8006%" height="15" fill="rgb(213,208,19)" fg:x="41296715017" fg:w="722380848"/><text x="46.0167%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (722,380,848 samples, 0.80%)</title><rect x="45.7667%" y="149" width="0.8006%" height="15" fill="rgb(233,156,4)" fg:x="41296715017" fg:w="722380848"/><text x="46.0167%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (692,664,579 samples, 0.77%)</title><rect x="45.7996%" y="133" width="0.7676%" height="15" fill="rgb(207,194,5)" fg:x="41326431286" fg:w="692664579"/><text x="46.0496%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (584,640,454 samples, 0.65%)</title><rect x="45.9194%" y="117" width="0.6479%" height="15" fill="rgb(206,111,30)" fg:x="41434455411" fg:w="584640454"/><text x="46.1694%" y="127.50"></text></g><g><title>malloc (413,761,429 samples, 0.46%)</title><rect x="46.1087%" y="101" width="0.4585%" height="15" fill="rgb(243,70,54)" fg:x="41605334436" fg:w="413761429"/><text x="46.3587%" y="111.50"></text></g><g><title>_int_malloc (50,479,570 samples, 0.06%)</title><rect x="46.5113%" y="85" width="0.0559%" height="15" fill="rgb(242,28,8)" fg:x="41968616295" fg:w="50479570"/><text x="46.7613%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (135,482,120 samples, 0.15%)</title><rect x="46.5673%" y="181" width="0.1501%" height="15" fill="rgb(219,106,18)" fg:x="42019095865" fg:w="135482120"/><text x="46.8173%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (134,765,370 samples, 0.15%)</title><rect x="46.5681%" y="165" width="0.1494%" height="15" fill="rgb(244,222,10)" fg:x="42019812615" fg:w="134765370"/><text x="46.8181%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (944,691,662 samples, 1.05%)</title><rect x="45.6731%" y="261" width="1.0469%" height="15" fill="rgb(236,179,52)" fg:x="41212264006" fg:w="944691662"/><text x="45.9231%" y="271.50"></text></g><g><title>alloc::string::String::push_str (944,691,662 samples, 1.05%)</title><rect x="45.6731%" y="245" width="1.0469%" height="15" fill="rgb(213,23,39)" fg:x="41212264006" fg:w="944691662"/><text x="45.9231%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (944,691,662 samples, 1.05%)</title><rect x="45.6731%" y="229" width="1.0469%" height="15" fill="rgb(238,48,10)" fg:x="41212264006" fg:w="944691662"/><text x="45.9231%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (944,691,662 samples, 1.05%)</title><rect x="45.6731%" y="213" width="1.0469%" height="15" fill="rgb(251,196,23)" fg:x="41212264006" fg:w="944691662"/><text x="45.9231%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (944,691,662 samples, 1.05%)</title><rect x="45.6731%" y="197" width="1.0469%" height="15" fill="rgb(250,152,24)" fg:x="41212264006" fg:w="944691662"/><text x="45.9231%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad_integral (331,747,980 samples, 0.37%)</title><rect x="46.7201%" y="261" width="0.3677%" height="15" fill="rgb(209,150,17)" fg:x="42156955668" fg:w="331747980"/><text x="46.9701%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (98,503,439 samples, 0.11%)</title><rect x="47.0947%" y="245" width="0.1092%" height="15" fill="rgb(234,202,34)" fg:x="42494981122" fg:w="98503439"/><text x="47.3447%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (108,911,435 samples, 0.12%)</title><rect x="47.0899%" y="261" width="0.1207%" height="15" fill="rgb(253,148,53)" fg:x="42490642087" fg:w="108911435"/><text x="47.3399%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (25,642,317 samples, 0.03%)</title><rect x="47.2106%" y="261" width="0.0284%" height="15" fill="rgb(218,129,16)" fg:x="42599553522" fg:w="25642317"/><text x="47.4606%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (1,834,143,839 samples, 2.03%)</title><rect x="45.2139%" y="277" width="2.0327%" height="15" fill="rgb(216,85,19)" fg:x="40797927868" fg:w="1834143839"/><text x="45.4639%" y="287.50">c..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2,179,976,210 samples, 2.42%)</title><rect x="44.8386%" y="309" width="2.4159%" height="15" fill="rgb(235,228,7)" fg:x="40459211910" fg:w="2179976210"/><text x="45.0886%" y="319.50">&lt;T..</text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (2,179,976,210 samples, 2.42%)</title><rect x="44.8386%" y="293" width="2.4159%" height="15" fill="rgb(245,175,0)" fg:x="40459211910" fg:w="2179976210"/><text x="45.0886%" y="303.50">&lt;T..</text></g><g><title>__rustc::__rdl_alloc (46,845,053 samples, 0.05%)</title><rect x="47.3214%" y="149" width="0.0519%" height="15" fill="rgb(208,168,36)" fg:x="42699585161" fg:w="46845053"/><text x="47.5714%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46,131,856 samples, 0.05%)</title><rect x="47.3222%" y="133" width="0.0511%" height="15" fill="rgb(246,171,24)" fg:x="42700298358" fg:w="46131856"/><text x="47.5722%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (49,748,626 samples, 0.06%)</title><rect x="47.3733%" y="149" width="0.0551%" height="15" fill="rgb(215,142,24)" fg:x="42746430214" fg:w="49748626"/><text x="47.6233%" y="159.50"></text></g><g><title>_int_malloc (578,058,396 samples, 0.64%)</title><rect x="47.9896%" y="133" width="0.6406%" height="15" fill="rgb(250,187,7)" fg:x="43302505485" fg:w="578058396"/><text x="48.2396%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (34,063,533 samples, 0.04%)</title><rect x="48.5925%" y="117" width="0.0378%" height="15" fill="rgb(228,66,33)" fg:x="43846500348" fg:w="34063533"/><text x="48.8425%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,212,982,235 samples, 1.34%)</title><rect x="47.2911%" y="261" width="1.3443%" height="15" fill="rgb(234,215,21)" fg:x="42672188731" fg:w="1212982235"/><text x="47.5411%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,212,982,235 samples, 1.34%)</title><rect x="47.2911%" y="245" width="1.3443%" height="15" fill="rgb(222,191,20)" fg:x="42672188731" fg:w="1212982235"/><text x="47.5411%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,212,982,235 samples, 1.34%)</title><rect x="47.2911%" y="229" width="1.3443%" height="15" fill="rgb(245,79,54)" fg:x="42672188731" fg:w="1212982235"/><text x="47.5411%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,212,982,235 samples, 1.34%)</title><rect x="47.2911%" y="213" width="1.3443%" height="15" fill="rgb(240,10,37)" fg:x="42672188731" fg:w="1212982235"/><text x="47.5411%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,189,896,648 samples, 1.32%)</title><rect x="47.3167%" y="197" width="1.3187%" height="15" fill="rgb(214,192,32)" fg:x="42695274318" fg:w="1189896648"/><text x="47.5667%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,189,896,648 samples, 1.32%)</title><rect x="47.3167%" y="181" width="1.3187%" height="15" fill="rgb(209,36,54)" fg:x="42695274318" fg:w="1189896648"/><text x="47.5667%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,189,896,648 samples, 1.32%)</title><rect x="47.3167%" y="165" width="1.3187%" height="15" fill="rgb(220,10,11)" fg:x="42695274318" fg:w="1189896648"/><text x="47.5667%" y="175.50"></text></g><g><title>malloc (1,087,765,744 samples, 1.21%)</title><rect x="47.4298%" y="149" width="1.2055%" height="15" fill="rgb(221,106,17)" fg:x="42797405222" fg:w="1087765744"/><text x="47.6798%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,732,467,733 samples, 1.92%)</title><rect x="47.2545%" y="309" width="1.9200%" height="15" fill="rgb(251,142,44)" fg:x="42639188120" fg:w="1732467733"/><text x="47.5045%" y="319.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,732,467,733 samples, 1.92%)</title><rect x="47.2545%" y="293" width="1.9200%" height="15" fill="rgb(238,13,15)" fg:x="42639188120" fg:w="1732467733"/><text x="47.5045%" y="303.50">a..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,732,467,733 samples, 1.92%)</title><rect x="47.2545%" y="277" width="1.9200%" height="15" fill="rgb(208,107,27)" fg:x="42639188120" fg:w="1732467733"/><text x="47.5045%" y="287.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (486,484,887 samples, 0.54%)</title><rect x="48.6353%" y="261" width="0.5391%" height="15" fill="rgb(205,136,37)" fg:x="43885170966" fg:w="486484887"/><text x="48.8853%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (486,484,887 samples, 0.54%)</title><rect x="48.6353%" y="245" width="0.5391%" height="15" fill="rgb(250,205,27)" fg:x="43885170966" fg:w="486484887"/><text x="48.8853%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (479,616,546 samples, 0.53%)</title><rect x="48.6430%" y="229" width="0.5315%" height="15" fill="rgb(210,80,43)" fg:x="43892039307" fg:w="479616546"/><text x="48.8930%" y="239.50"></text></g><g><title>alloc::string::String::new (30,008,911 samples, 0.03%)</title><rect x="49.1745%" y="309" width="0.0333%" height="15" fill="rgb(247,160,36)" fg:x="44371655853" fg:w="30008911"/><text x="49.4245%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (58,763,480 samples, 0.07%)</title><rect x="49.7120%" y="197" width="0.0651%" height="15" fill="rgb(234,13,49)" fg:x="44856646751" fg:w="58763480"/><text x="49.9620%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (48,807,149 samples, 0.05%)</title><rect x="49.7230%" y="181" width="0.0541%" height="15" fill="rgb(234,122,0)" fg:x="44866603082" fg:w="48807149"/><text x="49.9730%" y="191.50"></text></g><g><title>__rustc::__rust_alloc (93,629,302 samples, 0.10%)</title><rect x="49.7771%" y="197" width="0.1038%" height="15" fill="rgb(207,146,38)" fg:x="44915410231" fg:w="93629302"/><text x="50.0271%" y="207.50"></text></g><g><title>alloc::string::String::reserve (918,850,517 samples, 1.02%)</title><rect x="49.2095%" y="293" width="1.0183%" height="15" fill="rgb(207,177,25)" fg:x="44403237661" fg:w="918850517"/><text x="49.4595%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (918,850,517 samples, 1.02%)</title><rect x="49.2095%" y="277" width="1.0183%" height="15" fill="rgb(211,178,42)" fg:x="44403237661" fg:w="918850517"/><text x="49.4595%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (918,850,517 samples, 1.02%)</title><rect x="49.2095%" y="261" width="1.0183%" height="15" fill="rgb(230,69,54)" fg:x="44403237661" fg:w="918850517"/><text x="49.4595%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (918,850,517 samples, 1.02%)</title><rect x="49.2095%" y="245" width="1.0183%" height="15" fill="rgb(214,135,41)" fg:x="44403237661" fg:w="918850517"/><text x="49.4595%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (912,517,360 samples, 1.01%)</title><rect x="49.2165%" y="229" width="1.0113%" height="15" fill="rgb(237,67,25)" fg:x="44409570818" fg:w="912517360"/><text x="49.4665%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (612,437,957 samples, 0.68%)</title><rect x="49.5491%" y="213" width="0.6787%" height="15" fill="rgb(222,189,50)" fg:x="44709650221" fg:w="612437957"/><text x="49.7991%" y="223.50"></text></g><g><title>malloc (313,048,645 samples, 0.35%)</title><rect x="49.8809%" y="197" width="0.3469%" height="15" fill="rgb(245,148,34)" fg:x="45009039533" fg:w="313048645"/><text x="50.1309%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (27,727,361 samples, 0.03%)</title><rect x="50.2278%" y="293" width="0.0307%" height="15" fill="rgb(222,29,6)" fg:x="45322088178" fg:w="27727361"/><text x="50.4778%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (27,727,361 samples, 0.03%)</title><rect x="50.2278%" y="277" width="0.0307%" height="15" fill="rgb(221,189,43)" fg:x="45322088178" fg:w="27727361"/><text x="50.4778%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (27,727,361 samples, 0.03%)</title><rect x="50.2278%" y="261" width="0.0307%" height="15" fill="rgb(207,36,27)" fg:x="45322088178" fg:w="27727361"/><text x="50.4778%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (27,727,361 samples, 0.03%)</title><rect x="50.2278%" y="245" width="0.0307%" height="15" fill="rgb(217,90,24)" fg:x="45322088178" fg:w="27727361"/><text x="50.4778%" y="255.50"></text></g><g><title>alloc::string::String::push (988,462,153 samples, 1.10%)</title><rect x="49.2077%" y="309" width="1.0955%" height="15" fill="rgb(224,66,35)" fg:x="44401664764" fg:w="988462153"/><text x="49.4577%" y="319.50"></text></g><g><title>core::char::methods::encode_utf8_raw_unchecked (36,635,029 samples, 0.04%)</title><rect x="50.2626%" y="293" width="0.0406%" height="15" fill="rgb(221,13,50)" fg:x="45353491888" fg:w="36635029"/><text x="50.5126%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (46,927,307 samples, 0.05%)</title><rect x="50.3573%" y="245" width="0.0520%" height="15" fill="rgb(236,68,49)" fg:x="45438972812" fg:w="46927307"/><text x="50.6073%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (46,927,307 samples, 0.05%)</title><rect x="50.3573%" y="229" width="0.0520%" height="15" fill="rgb(229,146,28)" fg:x="45438972812" fg:w="46927307"/><text x="50.6073%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (46,927,307 samples, 0.05%)</title><rect x="50.3573%" y="213" width="0.0520%" height="15" fill="rgb(225,31,38)" fg:x="45438972812" fg:w="46927307"/><text x="50.6073%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (46,927,307 samples, 0.05%)</title><rect x="50.3573%" y="197" width="0.0520%" height="15" fill="rgb(250,208,3)" fg:x="45438972812" fg:w="46927307"/><text x="50.6073%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (23,385,079 samples, 0.03%)</title><rect x="50.4093%" y="245" width="0.0259%" height="15" fill="rgb(246,54,23)" fg:x="45485900119" fg:w="23385079"/><text x="50.6593%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (30,697,519 samples, 0.03%)</title><rect x="50.4816%" y="181" width="0.0340%" height="15" fill="rgb(243,76,11)" fg:x="45551095996" fg:w="30697519"/><text x="50.7316%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (67,448,027 samples, 0.07%)</title><rect x="50.4593%" y="197" width="0.0747%" height="15" fill="rgb(245,21,50)" fg:x="45531021514" fg:w="67448027"/><text x="50.7093%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16,676,026 samples, 0.02%)</title><rect x="50.5156%" y="181" width="0.0185%" height="15" fill="rgb(228,9,43)" fg:x="45581793515" fg:w="16676026"/><text x="50.7656%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (219,705,398 samples, 0.24%)</title><rect x="50.9965%" y="165" width="0.2435%" height="15" fill="rgb(208,100,47)" fg:x="46015695903" fg:w="219705398"/><text x="51.2465%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (126,705,085 samples, 0.14%)</title><rect x="51.0995%" y="149" width="0.1404%" height="15" fill="rgb(232,26,8)" fg:x="46108696216" fg:w="126705085"/><text x="51.3495%" y="159.50"></text></g><g><title>__rustc::__rust_realloc (127,322,423 samples, 0.14%)</title><rect x="51.2400%" y="165" width="0.1411%" height="15" fill="rgb(216,166,38)" fg:x="46235401301" fg:w="127322423"/><text x="51.4900%" y="175.50"></text></g><g><title>_int_free_chunk (61,353,995 samples, 0.07%)</title><rect x="52.7868%" y="149" width="0.0680%" height="15" fill="rgb(251,202,51)" fg:x="47631183208" fg:w="61353995"/><text x="53.0368%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (520,054,513 samples, 0.58%)</title><rect x="53.7279%" y="133" width="0.5763%" height="15" fill="rgb(254,216,34)" fg:x="48480329696" fg:w="520054513"/><text x="53.9779%" y="143.50"></text></g><g><title>_int_free_chunk (72,321,120 samples, 0.08%)</title><rect x="54.3042%" y="133" width="0.0801%" height="15" fill="rgb(251,32,27)" fg:x="49000384209" fg:w="72321120"/><text x="54.5542%" y="143.50"></text></g><g><title>_int_free_create_chunk (256,598,940 samples, 0.28%)</title><rect x="54.4683%" y="117" width="0.2844%" height="15" fill="rgb(208,127,28)" fg:x="49148456598" fg:w="256598940"/><text x="54.7183%" y="127.50"></text></g><g><title>unlink_chunk.isra.0 (23,550,868 samples, 0.03%)</title><rect x="54.7266%" y="101" width="0.0261%" height="15" fill="rgb(224,137,22)" fg:x="49381504670" fg:w="23550868"/><text x="54.9766%" y="111.50"></text></g><g><title>_int_free_merge_chunk (333,086,350 samples, 0.37%)</title><rect x="54.3852%" y="133" width="0.3691%" height="15" fill="rgb(254,70,32)" fg:x="49073438919" fg:w="333086350"/><text x="54.6352%" y="143.50"></text></g><g><title>alloc_perturb (17,835,189 samples, 0.02%)</title><rect x="58.1192%" y="117" width="0.0198%" height="15" fill="rgb(229,75,37)" fg:x="52442751054" fg:w="17835189"/><text x="58.3692%" y="127.50"></text></g><g><title>malloc_consolidate (59,645,487 samples, 0.07%)</title><rect x="58.1390%" y="117" width="0.0661%" height="15" fill="rgb(252,64,23)" fg:x="52460586243" fg:w="59645487"/><text x="58.3890%" y="127.50"></text></g><g><title>_int_malloc (3,597,321,838 samples, 3.99%)</title><rect x="54.7543%" y="133" width="3.9867%" height="15" fill="rgb(232,162,48)" fg:x="49406525269" fg:w="3597321838"/><text x="55.0043%" y="143.50">_int..</text></g><g><title>unlink_chunk.isra.0 (479,001,705 samples, 0.53%)</title><rect x="58.2102%" y="117" width="0.5308%" height="15" fill="rgb(246,160,12)" fg:x="52524845402" fg:w="479001705"/><text x="58.4602%" y="127.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (83,224,335 samples, 0.09%)</title><rect x="58.7410%" y="133" width="0.0922%" height="15" fill="rgb(247,166,0)" fg:x="53003847107" fg:w="83224335"/><text x="58.9910%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7,578,577,590 samples, 8.40%)</title><rect x="50.4353%" y="245" width="8.3989%" height="15" fill="rgb(249,219,21)" fg:x="45509285198" fg:w="7578577590"/><text x="50.6853%" y="255.50">alloc::vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7,578,577,590 samples, 8.40%)</title><rect x="50.4353%" y="229" width="8.3989%" height="15" fill="rgb(205,209,3)" fg:x="45509285198" fg:w="7578577590"/><text x="50.6853%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (7,578,577,590 samples, 8.40%)</title><rect x="50.4353%" y="213" width="8.3989%" height="15" fill="rgb(243,44,1)" fg:x="45509285198" fg:w="7578577590"/><text x="50.6853%" y="223.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,489,393,247 samples, 8.30%)</title><rect x="50.5341%" y="197" width="8.3001%" height="15" fill="rgb(206,159,16)" fg:x="45598469541" fg:w="7489393247"/><text x="50.7841%" y="207.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (7,214,647,421 samples, 8.00%)</title><rect x="50.8386%" y="181" width="7.9956%" height="15" fill="rgb(244,77,30)" fg:x="45873215367" fg:w="7214647421"/><text x="51.0886%" y="191.50">alloc::raw_..</text></g><g><title>realloc (6,723,086,694 samples, 7.45%)</title><rect x="51.3833%" y="165" width="7.4508%" height="15" fill="rgb(218,69,12)" fg:x="46364776094" fg:w="6723086694"/><text x="51.6333%" y="175.50">realloc</text></g><g><title>_int_realloc (5,390,674,182 samples, 5.97%)</title><rect x="52.8600%" y="149" width="5.9742%" height="15" fill="rgb(212,87,7)" fg:x="47697188606" fg:w="5390674182"/><text x="53.1100%" y="159.50">_int_rea..</text></g><g><title>core::intrinsics::copy_nonoverlapping (841,982,939 samples, 0.93%)</title><rect x="58.8341%" y="245" width="0.9331%" height="15" fill="rgb(245,114,25)" fg:x="53087862788" fg:w="841982939"/><text x="59.0841%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (793,390,863 samples, 0.88%)</title><rect x="58.8880%" y="229" width="0.8793%" height="15" fill="rgb(210,61,42)" fg:x="53136454864" fg:w="793390863"/><text x="59.1380%" y="239.50"></text></g><g><title>alloc::string::String::push_str (8,548,066,805 samples, 9.47%)</title><rect x="50.3032%" y="309" width="9.4733%" height="15" fill="rgb(211,52,33)" fg:x="45390126917" fg:w="8548066805"/><text x="50.5532%" y="319.50">alloc::string:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8,548,066,805 samples, 9.47%)</title><rect x="50.3032%" y="293" width="9.4733%" height="15" fill="rgb(234,58,33)" fg:x="45390126917" fg:w="8548066805"/><text x="50.5532%" y="303.50">alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8,548,066,805 samples, 9.47%)</title><rect x="50.3032%" y="277" width="9.4733%" height="15" fill="rgb(220,115,36)" fg:x="45390126917" fg:w="8548066805"/><text x="50.5532%" y="287.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8,548,066,805 samples, 9.47%)</title><rect x="50.3032%" y="261" width="9.4733%" height="15" fill="rgb(243,153,54)" fg:x="45390126917" fg:w="8548066805"/><text x="50.5532%" y="271.50">alloc::vec::Ve..</text></g><g><title>__rustc::__rdl_dealloc (11,603,367 samples, 0.01%)</title><rect x="59.7966%" y="197" width="0.0129%" height="15" fill="rgb(251,47,18)" fg:x="53956270013" fg:w="11603367"/><text x="60.0466%" y="207.50"></text></g><g><title>__rustc::__rust_dealloc (179,293,629 samples, 0.20%)</title><rect x="59.8094%" y="197" width="0.1987%" height="15" fill="rgb(242,102,42)" fg:x="53967873380" fg:w="179293629"/><text x="60.0594%" y="207.50"></text></g><g><title>_int_free_create_chunk (263,516,454 samples, 0.29%)</title><rect x="61.1744%" y="149" width="0.2920%" height="15" fill="rgb(234,31,38)" fg:x="55199588846" fg:w="263516454"/><text x="61.4244%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (32,785,276 samples, 0.04%)</title><rect x="61.4302%" y="133" width="0.0363%" height="15" fill="rgb(221,117,51)" fg:x="55430320024" fg:w="32785276"/><text x="61.6802%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,524,992,473 samples, 1.69%)</title><rect x="59.7780%" y="229" width="1.6901%" height="15" fill="rgb(212,20,18)" fg:x="53939527755" fg:w="1524992473"/><text x="60.0280%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1,524,992,473 samples, 1.69%)</title><rect x="59.7780%" y="213" width="1.6901%" height="15" fill="rgb(245,133,36)" fg:x="53939527755" fg:w="1524992473"/><text x="60.0280%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,315,870,018 samples, 1.46%)</title><rect x="60.0098%" y="197" width="1.4583%" height="15" fill="rgb(212,6,19)" fg:x="54148650210" fg:w="1315870018"/><text x="60.2598%" y="207.50"></text></g><g><title>_int_free_chunk (571,912,350 samples, 0.63%)</title><rect x="60.8342%" y="181" width="0.6338%" height="15" fill="rgb(218,1,36)" fg:x="54892607878" fg:w="571912350"/><text x="61.0842%" y="191.50"></text></g><g><title>_int_free_merge_chunk (320,906,148 samples, 0.36%)</title><rect x="61.1124%" y="165" width="0.3556%" height="15" fill="rgb(246,84,54)" fg:x="55143614080" fg:w="320906148"/><text x="61.3624%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,531,599,079 samples, 1.70%)</title><rect x="59.7765%" y="309" width="1.6974%" height="15" fill="rgb(242,110,6)" fg:x="53938193722" fg:w="1531599079"/><text x="60.0265%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,531,599,079 samples, 1.70%)</title><rect x="59.7765%" y="293" width="1.6974%" height="15" fill="rgb(214,47,5)" fg:x="53938193722" fg:w="1531599079"/><text x="60.0265%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,531,599,079 samples, 1.70%)</title><rect x="59.7765%" y="277" width="1.6974%" height="15" fill="rgb(218,159,25)" fg:x="53938193722" fg:w="1531599079"/><text x="60.0265%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,531,599,079 samples, 1.70%)</title><rect x="59.7765%" y="261" width="1.6974%" height="15" fill="rgb(215,211,28)" fg:x="53938193722" fg:w="1531599079"/><text x="60.0265%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,530,265,046 samples, 1.70%)</title><rect x="59.7780%" y="245" width="1.6959%" height="15" fill="rgb(238,59,32)" fg:x="53939527755" fg:w="1530265046"/><text x="60.0280%" y="255.50"></text></g><g><title>server_lib::resp3::bulk_string_response (15,101,554,399 samples, 16.74%)</title><rect x="44.7542%" y="325" width="16.7362%" height="15" fill="rgb(226,82,3)" fg:x="40383106450" fg:w="15101554399"/><text x="45.0042%" y="335.50">server_lib::resp3::bulk_st..</text></g><g><title>core::str::&lt;impl str&gt;::len (14,868,048 samples, 0.02%)</title><rect x="61.4739%" y="309" width="0.0165%" height="15" fill="rgb(240,164,32)" fg:x="55469792801" fg:w="14868048"/><text x="61.7239%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (33,332,398 samples, 0.04%)</title><rect x="62.5472%" y="101" width="0.0369%" height="15" fill="rgb(232,46,7)" fg:x="56438292678" fg:w="33332398"/><text x="62.7972%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28,963,318 samples, 0.03%)</title><rect x="62.5521%" y="85" width="0.0321%" height="15" fill="rgb(229,129,53)" fg:x="56442661758" fg:w="28963318"/><text x="62.8021%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (27,552,867 samples, 0.03%)</title><rect x="62.5842%" y="101" width="0.0305%" height="15" fill="rgb(234,188,29)" fg:x="56471625076" fg:w="27552867"/><text x="62.8342%" y="111.50"></text></g><g><title>alloc_perturb (15,864,728 samples, 0.02%)</title><rect x="64.8111%" y="69" width="0.0176%" height="15" fill="rgb(246,141,4)" fg:x="58481084525" fg:w="15864728"/><text x="65.0611%" y="79.50"></text></g><g><title>malloc_consolidate (78,435,608 samples, 0.09%)</title><rect x="64.8287%" y="69" width="0.0869%" height="15" fill="rgb(229,23,39)" fg:x="58496949253" fg:w="78435608"/><text x="65.0787%" y="79.50"></text></g><g><title>_int_malloc (1,532,011,933 samples, 1.70%)</title><rect x="63.3470%" y="85" width="1.6978%" height="15" fill="rgb(206,12,3)" fg:x="57159935820" fg:w="1532011933"/><text x="63.5970%" y="95.50"></text></g><g><title>unlink_chunk.isra.0 (115,973,771 samples, 0.13%)</title><rect x="64.9163%" y="69" width="0.1285%" height="15" fill="rgb(252,226,20)" fg:x="58575973982" fg:w="115973771"/><text x="65.1663%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,264,538,651 samples, 2.51%)</title><rect x="62.5370%" y="213" width="2.5097%" height="15" fill="rgb(216,123,35)" fg:x="56429045951" fg:w="2264538651"/><text x="62.7870%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,264,538,651 samples, 2.51%)</title><rect x="62.5370%" y="197" width="2.5097%" height="15" fill="rgb(212,68,40)" fg:x="56429045951" fg:w="2264538651"/><text x="62.7870%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,264,538,651 samples, 2.51%)</title><rect x="62.5370%" y="181" width="2.5097%" height="15" fill="rgb(254,125,32)" fg:x="56429045951" fg:w="2264538651"/><text x="62.7870%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,264,538,651 samples, 2.51%)</title><rect x="62.5370%" y="165" width="2.5097%" height="15" fill="rgb(253,97,22)" fg:x="56429045951" fg:w="2264538651"/><text x="62.7870%" y="175.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,261,677,380 samples, 2.51%)</title><rect x="62.5402%" y="149" width="2.5065%" height="15" fill="rgb(241,101,14)" fg:x="56431907222" fg:w="2261677380"/><text x="62.7902%" y="159.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,261,677,380 samples, 2.51%)</title><rect x="62.5402%" y="133" width="2.5065%" height="15" fill="rgb(238,103,29)" fg:x="56431907222" fg:w="2261677380"/><text x="62.7902%" y="143.50">al..</text></g><g><title>alloc::alloc::alloc (2,261,677,380 samples, 2.51%)</title><rect x="62.5402%" y="117" width="2.5065%" height="15" fill="rgb(233,195,47)" fg:x="56431907222" fg:w="2261677380"/><text x="62.7902%" y="127.50">al..</text></g><g><title>malloc (2,188,140,424 samples, 2.42%)</title><rect x="62.6217%" y="101" width="2.4250%" height="15" fill="rgb(246,218,30)" fg:x="56505444178" fg:w="2188140424"/><text x="62.8717%" y="111.50">ma..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5,309,812,999 samples, 5.88%)</title><rect x="62.4883%" y="277" width="5.8846%" height="15" fill="rgb(219,145,47)" fg:x="56385129247" fg:w="5309812999"/><text x="62.7383%" y="287.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,265,896,295 samples, 5.84%)</title><rect x="62.5370%" y="261" width="5.8359%" height="15" fill="rgb(243,12,26)" fg:x="56429045951" fg:w="5265896295"/><text x="62.7870%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,265,896,295 samples, 5.84%)</title><rect x="62.5370%" y="245" width="5.8359%" height="15" fill="rgb(214,87,16)" fg:x="56429045951" fg:w="5265896295"/><text x="62.7870%" y="255.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,265,896,295 samples, 5.84%)</title><rect x="62.5370%" y="229" width="5.8359%" height="15" fill="rgb(208,99,42)" fg:x="56429045951" fg:w="5265896295"/><text x="62.7870%" y="239.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3,001,357,644 samples, 3.33%)</title><rect x="65.0466%" y="213" width="3.3262%" height="15" fill="rgb(253,99,2)" fg:x="58693584602" fg:w="3001357644"/><text x="65.2966%" y="223.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (3,001,357,644 samples, 3.33%)</title><rect x="65.0466%" y="197" width="3.3262%" height="15" fill="rgb(220,168,23)" fg:x="58693584602" fg:w="3001357644"/><text x="65.2966%" y="207.50">cor..</text></g><g><title>__memmove_avx_unaligned_erms (2,996,276,867 samples, 3.32%)</title><rect x="65.0523%" y="181" width="3.3206%" height="15" fill="rgb(242,38,24)" fg:x="58698665379" fg:w="2996276867"/><text x="65.3023%" y="191.50">__m..</text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (5,532,316,295 samples, 6.13%)</title><rect x="62.2425%" y="293" width="6.1311%" height="15" fill="rgb(225,182,9)" fg:x="56163299168" fg:w="5532316295"/><text x="62.4925%" y="303.50">&lt;server_..</text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (5,585,322,010 samples, 6.19%)</title><rect x="62.1913%" y="309" width="6.1899%" height="15" fill="rgb(243,178,37)" fg:x="56117135430" fg:w="5585322010"/><text x="62.4413%" y="319.50">&lt;server_..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (259,195,841 samples, 0.29%)</title><rect x="68.3822%" y="309" width="0.2873%" height="15" fill="rgb(232,139,19)" fg:x="61703370192" fg:w="259195841"/><text x="68.6322%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (259,195,841 samples, 0.29%)</title><rect x="68.3822%" y="293" width="0.2873%" height="15" fill="rgb(225,201,24)" fg:x="61703370192" fg:w="259195841"/><text x="68.6322%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::gt (42,403,093 samples, 0.05%)</title><rect x="68.6887%" y="293" width="0.0470%" height="15" fill="rgb(221,47,46)" fg:x="61979884883" fg:w="42403093"/><text x="68.9387%" y="303.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (42,403,093 samples, 0.05%)</title><rect x="68.6887%" y="277" width="0.0470%" height="15" fill="rgb(249,23,13)" fg:x="61979884883" fg:w="42403093"/><text x="68.9387%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26,667,742 samples, 0.03%)</title><rect x="68.7356%" y="293" width="0.0296%" height="15" fill="rgb(219,9,5)" fg:x="62022287976" fg:w="26667742"/><text x="68.9856%" y="303.50"></text></g><g><title>[[vdso]] (210,064,033 samples, 0.23%)</title><rect x="68.8682%" y="261" width="0.2328%" height="15" fill="rgb(254,171,16)" fg:x="62141859372" fg:w="210064033"/><text x="69.1182%" y="271.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (340,466,193 samples, 0.38%)</title><rect x="68.7871%" y="277" width="0.3773%" height="15" fill="rgb(230,171,20)" fg:x="62068764001" fg:w="340466193"/><text x="69.0371%" y="287.50"></text></g><g><title>__vdso_clock_gettime (57,306,789 samples, 0.06%)</title><rect x="69.1010%" y="261" width="0.0635%" height="15" fill="rgb(210,71,41)" fg:x="62351923405" fg:w="57306789"/><text x="69.3510%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (363,041,000 samples, 0.40%)</title><rect x="68.7652%" y="293" width="0.4023%" height="15" fill="rgb(206,173,20)" fg:x="62048955718" fg:w="363041000"/><text x="69.0152%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (71,986,001 samples, 0.08%)</title><rect x="69.1962%" y="277" width="0.0798%" height="15" fill="rgb(233,88,34)" fg:x="62437851854" fg:w="71986001"/><text x="69.4462%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (10,794,421 samples, 0.01%)</title><rect x="69.3424%" y="245" width="0.0120%" height="15" fill="rgb(223,209,46)" fg:x="62569746974" fg:w="10794421"/><text x="69.5924%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::ge (10,794,421 samples, 0.01%)</title><rect x="69.3424%" y="229" width="0.0120%" height="15" fill="rgb(250,43,18)" fg:x="62569746974" fg:w="10794421"/><text x="69.5924%" y="239.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (10,794,421 samples, 0.01%)</title><rect x="69.3424%" y="213" width="0.0120%" height="15" fill="rgb(208,13,10)" fg:x="62569746974" fg:w="10794421"/><text x="69.5924%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (170,674,490 samples, 0.19%)</title><rect x="69.1683%" y="293" width="0.1891%" height="15" fill="rgb(212,200,36)" fg:x="62412676342" fg:w="170674490"/><text x="69.4183%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (73,512,977 samples, 0.08%)</title><rect x="69.2760%" y="277" width="0.0815%" height="15" fill="rgb(225,90,30)" fg:x="62509837855" fg:w="73512977"/><text x="69.5260%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (71,094,377 samples, 0.08%)</title><rect x="69.2786%" y="261" width="0.0788%" height="15" fill="rgb(236,182,39)" fg:x="62512256455" fg:w="71094377"/><text x="69.5286%" y="271.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (623,828,822 samples, 0.69%)</title><rect x="68.6695%" y="309" width="0.6914%" height="15" fill="rgb(212,144,35)" fg:x="61962566033" fg:w="623828822"/><text x="68.9195%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,926,978 samples, 0.01%)</title><rect x="69.7103%" y="165" width="0.0143%" height="15" fill="rgb(228,63,44)" fg:x="62901757636" fg:w="12926978"/><text x="69.9603%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28,438,010 samples, 0.03%)</title><rect x="69.6960%" y="181" width="0.0315%" height="15" fill="rgb(228,109,6)" fg:x="62888821777" fg:w="28438010"/><text x="69.9460%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23,439,370 samples, 0.03%)</title><rect x="69.7430%" y="165" width="0.0260%" height="15" fill="rgb(238,117,24)" fg:x="62931267180" fg:w="23439370"/><text x="69.9930%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (113,213,981 samples, 0.13%)</title><rect x="69.6604%" y="229" width="0.1255%" height="15" fill="rgb(242,26,26)" fg:x="62856697515" fg:w="113213981"/><text x="69.9104%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (113,213,981 samples, 0.13%)</title><rect x="69.6604%" y="213" width="0.1255%" height="15" fill="rgb(221,92,48)" fg:x="62856697515" fg:w="113213981"/><text x="69.9104%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (113,213,981 samples, 0.13%)</title><rect x="69.6604%" y="197" width="0.1255%" height="15" fill="rgb(209,209,32)" fg:x="62856697515" fg:w="113213981"/><text x="69.9104%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52,651,709 samples, 0.06%)</title><rect x="69.7275%" y="181" width="0.0584%" height="15" fill="rgb(221,70,22)" fg:x="62917259787" fg:w="52651709"/><text x="69.9775%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15,204,946 samples, 0.02%)</title><rect x="69.7690%" y="165" width="0.0169%" height="15" fill="rgb(248,145,5)" fg:x="62954706550" fg:w="15204946"/><text x="70.0190%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (62,589,711 samples, 0.07%)</title><rect x="69.7858%" y="229" width="0.0694%" height="15" fill="rgb(226,116,26)" fg:x="62969911496" fg:w="62589711"/><text x="70.0358%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (54,502,203 samples, 0.06%)</title><rect x="69.7948%" y="213" width="0.0604%" height="15" fill="rgb(244,5,17)" fg:x="62977999004" fg:w="54502203"/><text x="70.0448%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (54,502,203 samples, 0.06%)</title><rect x="69.7948%" y="197" width="0.0604%" height="15" fill="rgb(252,159,33)" fg:x="62977999004" fg:w="54502203"/><text x="70.0448%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (54,502,203 samples, 0.06%)</title><rect x="69.7948%" y="181" width="0.0604%" height="15" fill="rgb(206,71,0)" fg:x="62977999004" fg:w="54502203"/><text x="70.0448%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (133,876,931 samples, 0.15%)</title><rect x="69.8552%" y="149" width="0.1484%" height="15" fill="rgb(233,118,54)" fg:x="63032501207" fg:w="133876931"/><text x="70.1052%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (90,155,715 samples, 0.10%)</title><rect x="69.9037%" y="133" width="0.0999%" height="15" fill="rgb(234,83,48)" fg:x="63076222423" fg:w="90155715"/><text x="70.1537%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,757,026 samples, 0.02%)</title><rect x="69.9872%" y="117" width="0.0164%" height="15" fill="rgb(228,3,54)" fg:x="63151621112" fg:w="14757026"/><text x="70.2372%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (457,565,488 samples, 0.51%)</title><rect x="69.6470%" y="261" width="0.5071%" height="15" fill="rgb(226,155,13)" fg:x="62844639247" fg:w="457565488"/><text x="69.8970%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (453,323,770 samples, 0.50%)</title><rect x="69.6517%" y="245" width="0.5024%" height="15" fill="rgb(241,28,37)" fg:x="62848880965" fg:w="453323770"/><text x="69.9017%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (269,703,528 samples, 0.30%)</title><rect x="69.8552%" y="229" width="0.2989%" height="15" fill="rgb(233,93,10)" fg:x="63032501207" fg:w="269703528"/><text x="70.1052%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (269,703,528 samples, 0.30%)</title><rect x="69.8552%" y="213" width="0.2989%" height="15" fill="rgb(225,113,19)" fg:x="63032501207" fg:w="269703528"/><text x="70.1052%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (269,703,528 samples, 0.30%)</title><rect x="69.8552%" y="197" width="0.2989%" height="15" fill="rgb(241,2,18)" fg:x="63032501207" fg:w="269703528"/><text x="70.1052%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (269,703,528 samples, 0.30%)</title><rect x="69.8552%" y="181" width="0.2989%" height="15" fill="rgb(228,207,21)" fg:x="63032501207" fg:w="269703528"/><text x="70.1052%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (269,703,528 samples, 0.30%)</title><rect x="69.8552%" y="165" width="0.2989%" height="15" fill="rgb(213,211,35)" fg:x="63032501207" fg:w="269703528"/><text x="70.1052%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (135,826,597 samples, 0.15%)</title><rect x="70.0036%" y="149" width="0.1505%" height="15" fill="rgb(209,83,10)" fg:x="63166378138" fg:w="135826597"/><text x="70.2536%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (115,468,140 samples, 0.13%)</title><rect x="70.0261%" y="133" width="0.1280%" height="15" fill="rgb(209,164,1)" fg:x="63186736595" fg:w="115468140"/><text x="70.2761%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (64,961,862 samples, 0.07%)</title><rect x="70.0821%" y="117" width="0.0720%" height="15" fill="rgb(213,184,43)" fg:x="63237242873" fg:w="64961862"/><text x="70.3321%" y="127.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20,702,867 samples, 0.02%)</title><rect x="70.1657%" y="213" width="0.0229%" height="15" fill="rgb(231,61,34)" fg:x="63312635315" fg:w="20702867"/><text x="70.4157%" y="223.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (20,702,867 samples, 0.02%)</title><rect x="70.1657%" y="197" width="0.0229%" height="15" fill="rgb(235,75,3)" fg:x="63312635315" fg:w="20702867"/><text x="70.4157%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (363,599,216 samples, 0.40%)</title><rect x="70.1886%" y="213" width="0.4030%" height="15" fill="rgb(220,106,47)" fg:x="63333338182" fg:w="363599216"/><text x="70.4386%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (363,599,216 samples, 0.40%)</title><rect x="70.1886%" y="197" width="0.4030%" height="15" fill="rgb(210,196,33)" fg:x="63333338182" fg:w="363599216"/><text x="70.4386%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (363,599,216 samples, 0.40%)</title><rect x="70.1886%" y="181" width="0.4030%" height="15" fill="rgb(229,154,42)" fg:x="63333338182" fg:w="363599216"/><text x="70.4386%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (29,557,244 samples, 0.03%)</title><rect x="70.5916%" y="213" width="0.0328%" height="15" fill="rgb(228,114,26)" fg:x="63696937398" fg:w="29557244"/><text x="70.8416%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (29,557,244 samples, 0.03%)</title><rect x="70.5916%" y="197" width="0.0328%" height="15" fill="rgb(208,144,1)" fg:x="63696937398" fg:w="29557244"/><text x="70.8416%" y="207.50"></text></g><g><title>hashbrown::control::tag::Tag::full (12,345,314 samples, 0.01%)</title><rect x="70.6243%" y="213" width="0.0137%" height="15" fill="rgb(239,112,37)" fg:x="63726494642" fg:w="12345314"/><text x="70.8743%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,806,467,295 samples, 3.11%)</title><rect x="70.6380%" y="197" width="3.1102%" height="15" fill="rgb(210,96,50)" fg:x="63738839956" fg:w="2806467295"/><text x="70.8880%" y="207.50">has..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,806,467,295 samples, 3.11%)</title><rect x="70.6380%" y="181" width="3.1102%" height="15" fill="rgb(222,178,2)" fg:x="63738839956" fg:w="2806467295"/><text x="70.8880%" y="191.50">&lt;Q ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,719,372,798 samples, 3.01%)</title><rect x="70.7345%" y="165" width="3.0137%" height="15" fill="rgb(226,74,18)" fg:x="63825934453" fg:w="2719372798"/><text x="70.9845%" y="175.50">cor..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,719,372,798 samples, 3.01%)</title><rect x="70.7345%" y="149" width="3.0137%" height="15" fill="rgb(225,67,54)" fg:x="63825934453" fg:w="2719372798"/><text x="70.9845%" y="159.50">cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,719,372,798 samples, 3.01%)</title><rect x="70.7345%" y="133" width="3.0137%" height="15" fill="rgb(251,92,32)" fg:x="63825934453" fg:w="2719372798"/><text x="70.9845%" y="143.50">cor..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,719,372,798 samples, 3.01%)</title><rect x="70.7345%" y="117" width="3.0137%" height="15" fill="rgb(228,149,22)" fg:x="63825934453" fg:w="2719372798"/><text x="70.9845%" y="127.50">cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,719,372,798 samples, 3.01%)</title><rect x="70.7345%" y="101" width="3.0137%" height="15" fill="rgb(243,54,13)" fg:x="63825934453" fg:w="2719372798"/><text x="70.9845%" y="111.50">&lt;[A..</text></g><g><title>__memcmp_avx2_movbe (1,232,442,248 samples, 1.37%)</title><rect x="72.3824%" y="85" width="1.3658%" height="15" fill="rgb(243,180,28)" fg:x="65312865003" fg:w="1232442248"/><text x="72.6324%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,812,865,496 samples, 3.12%)</title><rect x="70.6380%" y="213" width="3.1173%" height="15" fill="rgb(208,167,24)" fg:x="63738839956" fg:w="2812865496"/><text x="70.8880%" y="223.50">has..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4,036,318,445 samples, 4.47%)</title><rect x="69.3608%" y="309" width="4.4732%" height="15" fill="rgb(245,73,45)" fg:x="62586394855" fg:w="4036318445"/><text x="69.6108%" y="319.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4,036,318,445 samples, 4.47%)</title><rect x="69.3608%" y="293" width="4.4732%" height="15" fill="rgb(237,203,48)" fg:x="62586394855" fg:w="4036318445"/><text x="69.6108%" y="303.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4,036,318,445 samples, 4.47%)</title><rect x="69.3608%" y="277" width="4.4732%" height="15" fill="rgb(211,197,16)" fg:x="62586394855" fg:w="4036318445"/><text x="69.6108%" y="287.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,320,508,565 samples, 3.68%)</title><rect x="70.1541%" y="261" width="3.6799%" height="15" fill="rgb(243,99,51)" fg:x="63302204735" fg:w="3320508565"/><text x="70.4041%" y="271.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,320,508,565 samples, 3.68%)</title><rect x="70.1541%" y="245" width="3.6799%" height="15" fill="rgb(215,123,29)" fg:x="63302204735" fg:w="3320508565"/><text x="70.4041%" y="255.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,316,935,319 samples, 3.68%)</title><rect x="70.1581%" y="229" width="3.6760%" height="15" fill="rgb(239,186,37)" fg:x="63305777981" fg:w="3316935319"/><text x="70.4081%" y="239.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (71,007,848 samples, 0.08%)</title><rect x="73.7553%" y="213" width="0.0787%" height="15" fill="rgb(252,136,39)" fg:x="66551705452" fg:w="71007848"/><text x="74.0053%" y="223.50"></text></g><g><title>[[vdso]] (178,174,538 samples, 0.20%)</title><rect x="73.8979%" y="277" width="0.1975%" height="15" fill="rgb(223,213,32)" fg:x="66680368687" fg:w="178174538"/><text x="74.1479%" y="287.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (224,457,550 samples, 0.25%)</title><rect x="73.8652%" y="293" width="0.2488%" height="15" fill="rgb(233,115,5)" fg:x="66650801680" fg:w="224457550"/><text x="74.1152%" y="303.50"></text></g><g><title>__vdso_clock_gettime (16,716,005 samples, 0.02%)</title><rect x="74.0954%" y="277" width="0.0185%" height="15" fill="rgb(207,226,44)" fg:x="66858543225" fg:w="16716005"/><text x="74.3454%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (257,396,038 samples, 0.29%)</title><rect x="73.8340%" y="309" width="0.2853%" height="15" fill="rgb(208,126,0)" fg:x="66622713300" fg:w="257396038"/><text x="74.0840%" y="319.50"></text></g><g><title>server_lib::storage::Storage::get_entry (11,391,842,048 samples, 12.62%)</title><rect x="61.4951%" y="325" width="12.6249%" height="15" fill="rgb(244,66,21)" fg:x="55488947798" fg:w="11391842048"/><text x="61.7451%" y="335.50">server_lib::storage..</text></g><g><title>__rustc::__rust_dealloc (24,574,920 samples, 0.03%)</title><rect x="74.3036%" y="181" width="0.0272%" height="15" fill="rgb(222,97,12)" fg:x="67046429940" fg:w="24574920"/><text x="74.5536%" y="191.50"></text></g><g><title>_int_free_create_chunk (490,177,578 samples, 0.54%)</title><rect x="75.6361%" y="133" width="0.5432%" height="15" fill="rgb(219,213,19)" fg:x="68248794165" fg:w="490177578"/><text x="75.8861%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (223,320,686 samples, 0.25%)</title><rect x="75.9319%" y="117" width="0.2475%" height="15" fill="rgb(252,169,30)" fg:x="68515651057" fg:w="223320686"/><text x="76.1819%" y="127.50"></text></g><g><title>_int_free_chunk (1,098,813,201 samples, 1.22%)</title><rect x="75.0711%" y="165" width="1.2177%" height="15" fill="rgb(206,32,51)" fg:x="67738928525" fg:w="1098813201"/><text x="75.3211%" y="175.50"></text></g><g><title>_int_free_merge_chunk (936,199,763 samples, 1.04%)</title><rect x="75.2513%" y="149" width="1.0375%" height="15" fill="rgb(250,172,42)" fg:x="67901541963" fg:w="936199763"/><text x="75.5013%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (98,769,983 samples, 0.11%)</title><rect x="76.1793%" y="133" width="0.1095%" height="15" fill="rgb(209,34,43)" fg:x="68738971743" fg:w="98769983"/><text x="76.4293%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,792,736,992 samples, 1.99%)</title><rect x="74.3036%" y="213" width="1.9868%" height="15" fill="rgb(223,11,35)" fg:x="67046429940" fg:w="1792736992"/><text x="74.5536%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (1,792,736,992 samples, 1.99%)</title><rect x="74.3036%" y="197" width="1.9868%" height="15" fill="rgb(251,219,26)" fg:x="67046429940" fg:w="1792736992"/><text x="74.5536%" y="207.50">a..</text></g><g><title>cfree@GLIBC_2.2.5 (1,766,193,258 samples, 1.96%)</title><rect x="74.3330%" y="181" width="1.9574%" height="15" fill="rgb(231,119,3)" fg:x="67072973674" fg:w="1766193258"/><text x="74.5830%" y="191.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (1,798,270,193 samples, 1.99%)</title><rect x="74.2981%" y="293" width="1.9929%" height="15" fill="rgb(216,97,11)" fg:x="67041506152" fg:w="1798270193"/><text x="74.5481%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (1,794,701,567 samples, 1.99%)</title><rect x="74.3021%" y="277" width="1.9890%" height="15" fill="rgb(223,59,9)" fg:x="67045074778" fg:w="1794701567"/><text x="74.5521%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (1,794,701,567 samples, 1.99%)</title><rect x="74.3021%" y="261" width="1.9890%" height="15" fill="rgb(233,93,31)" fg:x="67045074778" fg:w="1794701567"/><text x="74.5521%" y="271.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,794,701,567 samples, 1.99%)</title><rect x="74.3021%" y="245" width="1.9890%" height="15" fill="rgb(239,81,33)" fg:x="67045074778" fg:w="1794701567"/><text x="74.5521%" y="255.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,793,346,405 samples, 1.99%)</title><rect x="74.3036%" y="229" width="1.9875%" height="15" fill="rgb(213,120,34)" fg:x="67046429940" fg:w="1793346405"/><text x="74.5536%" y="239.50">a..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (67,576,781 samples, 0.07%)</title><rect x="76.2911%" y="293" width="0.0749%" height="15" fill="rgb(243,49,53)" fg:x="68839776345" fg:w="67576781"/><text x="76.5411%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (67,576,781 samples, 0.07%)</title><rect x="76.2911%" y="277" width="0.0749%" height="15" fill="rgb(247,216,33)" fg:x="68839776345" fg:w="67576781"/><text x="76.5411%" y="287.50"></text></g><g><title>server_lib::storage::Storage::is_full (113,669,813 samples, 0.13%)</title><rect x="76.3660%" y="293" width="0.1260%" height="15" fill="rgb(226,26,14)" fg:x="68907353126" fg:w="113669813"/><text x="76.6160%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::len (113,669,813 samples, 0.13%)</title><rect x="76.3660%" y="277" width="0.1260%" height="15" fill="rgb(215,49,53)" fg:x="68907353126" fg:w="113669813"/><text x="76.6160%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (113,669,813 samples, 0.13%)</title><rect x="76.3660%" y="261" width="0.1260%" height="15" fill="rgb(245,162,40)" fg:x="68907353126" fg:w="113669813"/><text x="76.6160%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (113,669,813 samples, 0.13%)</title><rect x="76.3660%" y="245" width="0.1260%" height="15" fill="rgb(229,68,17)" fg:x="68907353126" fg:w="113669813"/><text x="76.6160%" y="255.50"></text></g><g><title>server_lib::storage::StorageValue::size_in_bytes (10,915,305 samples, 0.01%)</title><rect x="76.4919%" y="293" width="0.0121%" height="15" fill="rgb(213,182,10)" fg:x="69021022939" fg:w="10915305"/><text x="76.7419%" y="303.50"></text></g><g><title>core::mem::replace (50,636,387 samples, 0.06%)</title><rect x="76.5090%" y="261" width="0.0561%" height="15" fill="rgb(245,125,30)" fg:x="69036440067" fg:w="50636387"/><text x="76.7590%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (64,490,759 samples, 0.07%)</title><rect x="76.5658%" y="181" width="0.0715%" height="15" fill="rgb(232,202,2)" fg:x="69087691835" fg:w="64490759"/><text x="76.8158%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (64,490,759 samples, 0.07%)</title><rect x="76.5658%" y="165" width="0.0715%" height="15" fill="rgb(237,140,51)" fg:x="69087691835" fg:w="64490759"/><text x="76.8158%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (54,787,393 samples, 0.06%)</title><rect x="76.5766%" y="149" width="0.0607%" height="15" fill="rgb(236,157,25)" fg:x="69097395201" fg:w="54787393"/><text x="76.8266%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (65,757,540 samples, 0.07%)</title><rect x="76.5651%" y="261" width="0.0729%" height="15" fill="rgb(219,209,0)" fg:x="69087076454" fg:w="65757540"/><text x="76.8151%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (65,757,540 samples, 0.07%)</title><rect x="76.5651%" y="245" width="0.0729%" height="15" fill="rgb(240,116,54)" fg:x="69087076454" fg:w="65757540"/><text x="76.8151%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (65,757,540 samples, 0.07%)</title><rect x="76.5651%" y="229" width="0.0729%" height="15" fill="rgb(216,10,36)" fg:x="69087076454" fg:w="65757540"/><text x="76.8151%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65,757,540 samples, 0.07%)</title><rect x="76.5651%" y="213" width="0.0729%" height="15" fill="rgb(222,72,44)" fg:x="69087076454" fg:w="65757540"/><text x="76.8151%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (65,142,159 samples, 0.07%)</title><rect x="76.5658%" y="197" width="0.0722%" height="15" fill="rgb(232,159,9)" fg:x="69087691835" fg:w="65142159"/><text x="76.8158%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (12,811,001 samples, 0.01%)</title><rect x="76.6721%" y="229" width="0.0142%" height="15" fill="rgb(210,39,32)" fg:x="69183570449" fg:w="12811001"/><text x="76.9221%" y="239.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (206,436,087 samples, 0.23%)</title><rect x="76.6975%" y="213" width="0.2288%" height="15" fill="rgb(216,194,45)" fg:x="69206530573" fg:w="206436087"/><text x="76.9475%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (206,436,087 samples, 0.23%)</title><rect x="76.6975%" y="197" width="0.2288%" height="15" fill="rgb(218,18,35)" fg:x="69206530573" fg:w="206436087"/><text x="76.9475%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (206,436,087 samples, 0.23%)</title><rect x="76.6975%" y="181" width="0.2288%" height="15" fill="rgb(207,83,51)" fg:x="69206530573" fg:w="206436087"/><text x="76.9475%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (16,635,801 samples, 0.02%)</title><rect x="76.9263%" y="213" width="0.0184%" height="15" fill="rgb(225,63,43)" fg:x="69412966660" fg:w="16635801"/><text x="77.1763%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16,635,801 samples, 0.02%)</title><rect x="76.9263%" y="197" width="0.0184%" height="15" fill="rgb(207,57,36)" fg:x="69412966660" fg:w="16635801"/><text x="77.1763%" y="207.50"></text></g><g><title>hashbrown::control::tag::Tag::full (35,617,856 samples, 0.04%)</title><rect x="76.9447%" y="213" width="0.0395%" height="15" fill="rgb(216,99,33)" fg:x="69429602461" fg:w="35617856"/><text x="77.1947%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="197" width="1.6291%" height="15" fill="rgb(225,42,16)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="181" width="1.6291%" height="15" fill="rgb(220,201,45)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="165" width="1.6291%" height="15" fill="rgb(225,33,4)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="149" width="1.6291%" height="15" fill="rgb(224,33,50)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="159.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="133" width="1.6291%" height="15" fill="rgb(246,198,51)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="143.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="117" width="1.6291%" height="15" fill="rgb(205,22,4)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,469,953,438 samples, 1.63%)</title><rect x="77.0461%" y="101" width="1.6291%" height="15" fill="rgb(206,3,8)" fg:x="69521105072" fg:w="1469953438"/><text x="77.2961%" y="111.50"></text></g><g><title>__memcmp_avx2_movbe (686,457,677 samples, 0.76%)</title><rect x="77.9144%" y="85" width="0.7608%" height="15" fill="rgb(251,23,15)" fg:x="70304600833" fg:w="686457677"/><text x="78.1644%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (1,843,893,063 samples, 2.04%)</title><rect x="76.6380%" y="261" width="2.0435%" height="15" fill="rgb(252,88,28)" fg:x="69152833994" fg:w="1843893063"/><text x="76.8880%" y="271.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,843,893,063 samples, 2.04%)</title><rect x="76.6380%" y="245" width="2.0435%" height="15" fill="rgb(212,127,14)" fg:x="69152833994" fg:w="1843893063"/><text x="76.8880%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,800,345,607 samples, 2.00%)</title><rect x="76.6863%" y="229" width="1.9952%" height="15" fill="rgb(247,145,37)" fg:x="69196381450" fg:w="1800345607"/><text x="76.9363%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1,531,506,740 samples, 1.70%)</title><rect x="76.9842%" y="213" width="1.6973%" height="15" fill="rgb(209,117,53)" fg:x="69465220317" fg:w="1531506740"/><text x="77.2342%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11,802,607 samples, 0.01%)</title><rect x="78.7068%" y="181" width="0.0131%" height="15" fill="rgb(212,90,42)" fg:x="71019570151" fg:w="11802607"/><text x="78.9568%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11,605,806 samples, 0.01%)</title><rect x="78.7302%" y="165" width="0.0129%" height="15" fill="rgb(218,164,37)" fg:x="71040639355" fg:w="11605806"/><text x="78.9802%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (69,847,886 samples, 0.08%)</title><rect x="78.6823%" y="229" width="0.0774%" height="15" fill="rgb(246,65,34)" fg:x="70997490269" fg:w="69847886"/><text x="78.9323%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (69,847,886 samples, 0.08%)</title><rect x="78.6823%" y="213" width="0.0774%" height="15" fill="rgb(231,100,33)" fg:x="70997490269" fg:w="69847886"/><text x="78.9323%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (69,847,886 samples, 0.08%)</title><rect x="78.6823%" y="197" width="0.0774%" height="15" fill="rgb(228,126,14)" fg:x="70997490269" fg:w="69847886"/><text x="78.9323%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35,965,397 samples, 0.04%)</title><rect x="78.7199%" y="181" width="0.0399%" height="15" fill="rgb(215,173,21)" fg:x="71031372758" fg:w="35965397"/><text x="78.9699%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (15,092,994 samples, 0.02%)</title><rect x="78.7430%" y="165" width="0.0167%" height="15" fill="rgb(210,6,40)" fg:x="71052245161" fg:w="15092994"/><text x="78.9930%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (73,973,129 samples, 0.08%)</title><rect x="78.7597%" y="229" width="0.0820%" height="15" fill="rgb(212,48,18)" fg:x="71067338155" fg:w="73973129"/><text x="79.0097%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (71,143,383 samples, 0.08%)</title><rect x="78.7629%" y="213" width="0.0788%" height="15" fill="rgb(230,214,11)" fg:x="71070167901" fg:w="71143383"/><text x="79.0129%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (71,143,383 samples, 0.08%)</title><rect x="78.7629%" y="197" width="0.0788%" height="15" fill="rgb(254,105,39)" fg:x="71070167901" fg:w="71143383"/><text x="79.0129%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (71,143,383 samples, 0.08%)</title><rect x="78.7629%" y="181" width="0.0788%" height="15" fill="rgb(245,158,5)" fg:x="71070167901" fg:w="71143383"/><text x="79.0129%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (125,953,215 samples, 0.14%)</title><rect x="78.8479%" y="133" width="0.1396%" height="15" fill="rgb(249,208,11)" fg:x="71146866642" fg:w="125953215"/><text x="79.0979%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (84,480,476 samples, 0.09%)</title><rect x="78.8938%" y="117" width="0.0936%" height="15" fill="rgb(210,39,28)" fg:x="71188339381" fg:w="84480476"/><text x="79.1438%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19,800,667 samples, 0.02%)</title><rect x="78.9655%" y="101" width="0.0219%" height="15" fill="rgb(211,56,53)" fg:x="71253019190" fg:w="19800667"/><text x="79.2155%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (361,193,912 samples, 0.40%)</title><rect x="78.6815%" y="261" width="0.4003%" height="15" fill="rgb(226,201,30)" fg:x="70996727057" fg:w="361193912"/><text x="78.9315%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (360,430,700 samples, 0.40%)</title><rect x="78.6823%" y="245" width="0.3994%" height="15" fill="rgb(239,101,34)" fg:x="70997490269" fg:w="360430700"/><text x="78.9323%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (216,609,685 samples, 0.24%)</title><rect x="78.8417%" y="229" width="0.2401%" height="15" fill="rgb(226,209,5)" fg:x="71141311284" fg:w="216609685"/><text x="79.0917%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (211,054,327 samples, 0.23%)</title><rect x="78.8479%" y="213" width="0.2339%" height="15" fill="rgb(250,105,47)" fg:x="71146866642" fg:w="211054327"/><text x="79.0979%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (211,054,327 samples, 0.23%)</title><rect x="78.8479%" y="197" width="0.2339%" height="15" fill="rgb(230,72,3)" fg:x="71146866642" fg:w="211054327"/><text x="79.0979%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (211,054,327 samples, 0.23%)</title><rect x="78.8479%" y="181" width="0.2339%" height="15" fill="rgb(232,218,39)" fg:x="71146866642" fg:w="211054327"/><text x="79.0979%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (211,054,327 samples, 0.23%)</title><rect x="78.8479%" y="165" width="0.2339%" height="15" fill="rgb(248,166,6)" fg:x="71146866642" fg:w="211054327"/><text x="79.0979%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (211,054,327 samples, 0.23%)</title><rect x="78.8479%" y="149" width="0.2339%" height="15" fill="rgb(247,89,20)" fg:x="71146866642" fg:w="211054327"/><text x="79.0979%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (85,101,112 samples, 0.09%)</title><rect x="78.9875%" y="133" width="0.0943%" height="15" fill="rgb(248,130,54)" fg:x="71272819857" fg:w="85101112"/><text x="79.2375%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (73,682,641 samples, 0.08%)</title><rect x="79.0001%" y="117" width="0.0817%" height="15" fill="rgb(234,196,4)" fg:x="71284238328" fg:w="73682641"/><text x="79.2501%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (52,129,384 samples, 0.06%)</title><rect x="79.0240%" y="101" width="0.0578%" height="15" fill="rgb(250,143,31)" fg:x="71305791585" fg:w="52129384"/><text x="79.2740%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2,329,037,942 samples, 2.58%)</title><rect x="76.5040%" y="293" width="2.5811%" height="15" fill="rgb(211,110,34)" fg:x="69031938244" fg:w="2329037942"/><text x="76.7540%" y="303.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,329,037,942 samples, 2.58%)</title><rect x="76.5040%" y="277" width="2.5811%" height="15" fill="rgb(215,124,48)" fg:x="69031938244" fg:w="2329037942"/><text x="76.7540%" y="287.50">ha..</text></g><g><title>[[vdso]] (163,298,466 samples, 0.18%)</title><rect x="79.4056%" y="261" width="0.1810%" height="15" fill="rgb(216,46,13)" fg:x="71650103707" fg:w="163298466"/><text x="79.6556%" y="271.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (540,901,853 samples, 0.60%)</title><rect x="79.1038%" y="277" width="0.5994%" height="15" fill="rgb(205,184,25)" fg:x="71377791819" fg:w="540901853"/><text x="79.3538%" y="287.50"></text></g><g><title>__vdso_clock_gettime (105,291,499 samples, 0.12%)</title><rect x="79.5866%" y="261" width="0.1167%" height="15" fill="rgb(228,1,10)" fg:x="71813402173" fg:w="105291499"/><text x="79.8366%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (559,028,581 samples, 0.62%)</title><rect x="79.0852%" y="293" width="0.6195%" height="15" fill="rgb(213,116,27)" fg:x="71360976186" fg:w="559028581"/><text x="79.3352%" y="303.50"></text></g><g><title>server::process_request (54,380,123,993 samples, 60.27%)</title><rect x="19.4398%" y="341" width="60.2663%" height="15" fill="rgb(241,95,50)" fg:x="17541141561" fg:w="54380123993"/><text x="19.6898%" y="351.50">server::process_request</text></g><g><title>server_lib::storage::Storage::insert_entry (5,040,475,708 samples, 5.59%)</title><rect x="74.1200%" y="325" width="5.5861%" height="15" fill="rgb(238,48,32)" fg:x="66880789846" fg:w="5040475708"/><text x="74.3700%" y="335.50">server_..</text></g><g><title>server_lib::storage::Storage::insert_with_ttl (5,031,486,591 samples, 5.58%)</title><rect x="74.1300%" y="309" width="5.5761%" height="15" fill="rgb(235,113,49)" fg:x="66889778963" fg:w="5031486591"/><text x="74.3800%" y="319.50">server_..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (76,981,880 samples, 0.09%)</title><rect x="79.8367%" y="325" width="0.0853%" height="15" fill="rgb(205,127,43)" fg:x="72039109307" fg:w="76981880"/><text x="80.0867%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (151,260,201 samples, 0.17%)</title><rect x="79.9220%" y="325" width="0.1676%" height="15" fill="rgb(250,162,2)" fg:x="72116091187" fg:w="151260201"/><text x="80.1720%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (151,260,201 samples, 0.17%)</title><rect x="79.9220%" y="309" width="0.1676%" height="15" fill="rgb(220,13,41)" fg:x="72116091187" fg:w="151260201"/><text x="80.1720%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (151,260,201 samples, 0.17%)</title><rect x="79.9220%" y="293" width="0.1676%" height="15" fill="rgb(249,221,25)" fg:x="72116091187" fg:w="151260201"/><text x="80.1720%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (151,260,201 samples, 0.17%)</title><rect x="79.9220%" y="277" width="0.1676%" height="15" fill="rgb(215,208,19)" fg:x="72116091187" fg:w="151260201"/><text x="80.1720%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (21,032,750 samples, 0.02%)</title><rect x="80.0663%" y="261" width="0.0233%" height="15" fill="rgb(236,175,2)" fg:x="72246318638" fg:w="21032750"/><text x="80.3163%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (21,032,750 samples, 0.02%)</title><rect x="80.0663%" y="245" width="0.0233%" height="15" fill="rgb(241,52,2)" fg:x="72246318638" fg:w="21032750"/><text x="80.3163%" y="255.50"></text></g><g><title>server_lib::resp3::get_data_type (273,132,437 samples, 0.30%)</title><rect x="80.0896%" y="325" width="0.3027%" height="15" fill="rgb(248,140,14)" fg:x="72267351388" fg:w="273132437"/><text x="80.3396%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (156,224,527 samples, 0.17%)</title><rect x="81.7509%" y="309" width="0.1731%" height="15" fill="rgb(253,22,42)" fg:x="73766384869" fg:w="156224527"/><text x="82.0009%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (13,602,012 samples, 0.02%)</title><rect x="81.9255%" y="309" width="0.0151%" height="15" fill="rgb(234,61,47)" fg:x="73923878635" fg:w="13602012"/><text x="82.1755%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (41,265,417 samples, 0.05%)</title><rect x="81.9661%" y="149" width="0.0457%" height="15" fill="rgb(208,226,15)" fg:x="73960554261" fg:w="41265417"/><text x="82.2161%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (38,765,987 samples, 0.04%)</title><rect x="81.9689%" y="133" width="0.0430%" height="15" fill="rgb(217,221,4)" fg:x="73963053691" fg:w="38765987"/><text x="82.2189%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (42,380,478 samples, 0.05%)</title><rect x="82.0119%" y="149" width="0.0470%" height="15" fill="rgb(212,174,34)" fg:x="74001819678" fg:w="42380478"/><text x="82.2619%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (374,519,093 samples, 0.42%)</title><rect x="81.9617%" y="197" width="0.4151%" height="15" fill="rgb(253,83,4)" fg:x="73956542596" fg:w="374519093"/><text x="82.2117%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (374,519,093 samples, 0.42%)</title><rect x="81.9617%" y="181" width="0.4151%" height="15" fill="rgb(250,195,49)" fg:x="73956542596" fg:w="374519093"/><text x="82.2117%" y="191.50"></text></g><g><title>alloc::alloc::alloc (374,519,093 samples, 0.42%)</title><rect x="81.9617%" y="165" width="0.4151%" height="15" fill="rgb(241,192,25)" fg:x="73956542596" fg:w="374519093"/><text x="82.2117%" y="175.50"></text></g><g><title>malloc (286,861,533 samples, 0.32%)</title><rect x="82.0588%" y="149" width="0.3179%" height="15" fill="rgb(208,124,10)" fg:x="74044200156" fg:w="286861533"/><text x="82.3088%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (412,416,039 samples, 0.46%)</title><rect x="81.9432%" y="261" width="0.4571%" height="15" fill="rgb(222,33,0)" fg:x="73939854127" fg:w="412416039"/><text x="82.1932%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (412,416,039 samples, 0.46%)</title><rect x="81.9432%" y="245" width="0.4571%" height="15" fill="rgb(234,209,28)" fg:x="73939854127" fg:w="412416039"/><text x="82.1932%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (412,416,039 samples, 0.46%)</title><rect x="81.9432%" y="229" width="0.4571%" height="15" fill="rgb(224,11,23)" fg:x="73939854127" fg:w="412416039"/><text x="82.1932%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (412,416,039 samples, 0.46%)</title><rect x="81.9432%" y="213" width="0.4571%" height="15" fill="rgb(232,99,1)" fg:x="73939854127" fg:w="412416039"/><text x="82.1932%" y="223.50"></text></g><g><title>alloc::raw_vec::layout_array (21,208,477 samples, 0.02%)</title><rect x="82.3767%" y="197" width="0.0235%" height="15" fill="rgb(237,95,45)" fg:x="74331061689" fg:w="21208477"/><text x="82.6267%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (21,208,477 samples, 0.02%)</title><rect x="82.3767%" y="181" width="0.0235%" height="15" fill="rgb(208,109,11)" fg:x="74331061689" fg:w="21208477"/><text x="82.6267%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (21,208,477 samples, 0.02%)</title><rect x="82.3767%" y="165" width="0.0235%" height="15" fill="rgb(216,190,48)" fg:x="74331061689" fg:w="21208477"/><text x="82.6267%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (21,208,477 samples, 0.02%)</title><rect x="82.3767%" y="149" width="0.0235%" height="15" fill="rgb(251,171,36)" fg:x="74331061689" fg:w="21208477"/><text x="82.6267%" y="159.50"></text></g><g><title>core::intrinsics::unlikely (21,208,477 samples, 0.02%)</title><rect x="82.3767%" y="133" width="0.0235%" height="15" fill="rgb(230,62,22)" fg:x="74331061689" fg:w="21208477"/><text x="82.6267%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (725,278,234 samples, 0.80%)</title><rect x="81.9405%" y="309" width="0.8038%" height="15" fill="rgb(225,114,35)" fg:x="73937480647" fg:w="725278234"/><text x="82.1905%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (725,278,234 samples, 0.80%)</title><rect x="81.9405%" y="293" width="0.8038%" height="15" fill="rgb(215,118,42)" fg:x="73937480647" fg:w="725278234"/><text x="82.1905%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (725,278,234 samples, 0.80%)</title><rect x="81.9405%" y="277" width="0.8038%" height="15" fill="rgb(243,119,21)" fg:x="73937480647" fg:w="725278234"/><text x="82.1905%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (310,488,715 samples, 0.34%)</title><rect x="82.4002%" y="261" width="0.3441%" height="15" fill="rgb(252,177,53)" fg:x="74352270166" fg:w="310488715"/><text x="82.6502%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (310,488,715 samples, 0.34%)</title><rect x="82.4002%" y="245" width="0.3441%" height="15" fill="rgb(237,209,29)" fg:x="74352270166" fg:w="310488715"/><text x="82.6502%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (290,320,527 samples, 0.32%)</title><rect x="82.4226%" y="229" width="0.3217%" height="15" fill="rgb(212,65,23)" fg:x="74372438354" fg:w="290320527"/><text x="82.6726%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (460,300,447 samples, 0.51%)</title><rect x="82.7443%" y="309" width="0.5101%" height="15" fill="rgb(230,222,46)" fg:x="74662758881" fg:w="460300447"/><text x="82.9943%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (373,977,776 samples, 0.41%)</title><rect x="82.8400%" y="293" width="0.4145%" height="15" fill="rgb(215,135,32)" fg:x="74749081552" fg:w="373977776"/><text x="83.0900%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (196,377,760 samples, 0.22%)</title><rect x="83.0368%" y="277" width="0.2176%" height="15" fill="rgb(246,101,22)" fg:x="74926681568" fg:w="196377760"/><text x="83.2868%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46,035,395 samples, 0.05%)</title><rect x="83.3521%" y="245" width="0.0510%" height="15" fill="rgb(206,107,13)" fg:x="75211160304" fg:w="46035395"/><text x="83.6021%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (29,875,098 samples, 0.03%)</title><rect x="83.4031%" y="245" width="0.0331%" height="15" fill="rgb(250,100,44)" fg:x="75257195699" fg:w="29875098"/><text x="83.6531%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (147,839,856 samples, 0.16%)</title><rect x="83.7803%" y="229" width="0.1638%" height="15" fill="rgb(231,147,38)" fg:x="75597584403" fg:w="147839856"/><text x="84.0303%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73,925,228 samples, 0.08%)</title><rect x="83.8623%" y="213" width="0.0819%" height="15" fill="rgb(229,8,40)" fg:x="75671499031" fg:w="73925228"/><text x="84.1123%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (41,297,887 samples, 0.05%)</title><rect x="83.9442%" y="229" width="0.0458%" height="15" fill="rgb(221,135,30)" fg:x="75745424259" fg:w="41297887"/><text x="84.1942%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9,037,452 samples, 0.01%)</title><rect x="83.9900%" y="229" width="0.0100%" height="15" fill="rgb(249,193,18)" fg:x="75786722146" fg:w="9037452"/><text x="84.2400%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,255,315,322 samples, 1.39%)</title><rect x="83.4446%" y="245" width="1.3912%" height="15" fill="rgb(209,133,39)" fg:x="75294658095" fg:w="1255315322"/><text x="83.6946%" y="255.50"></text></g><g><title>malloc (754,213,819 samples, 0.84%)</title><rect x="84.0000%" y="229" width="0.8359%" height="15" fill="rgb(232,100,14)" fg:x="75795759598" fg:w="754213819"/><text x="84.2500%" y="239.50"></text></g><g><title>core::cmp::max (16,401,798 samples, 0.02%)</title><rect x="84.8358%" y="245" width="0.0182%" height="15" fill="rgb(224,185,1)" fg:x="76549973417" fg:w="16401798"/><text x="85.0858%" y="255.50"></text></g><g><title>core::cmp::Ord::max (16,401,798 samples, 0.02%)</title><rect x="84.8358%" y="229" width="0.0182%" height="15" fill="rgb(223,139,8)" fg:x="76549973417" fg:w="16401798"/><text x="85.0858%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,425,855,742 samples, 1.58%)</title><rect x="83.2763%" y="293" width="1.5802%" height="15" fill="rgb(232,213,38)" fg:x="75142795164" fg:w="1425855742"/><text x="83.5263%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,372,503,132 samples, 1.52%)</title><rect x="83.3355%" y="277" width="1.5211%" height="15" fill="rgb(207,94,22)" fg:x="75196147774" fg:w="1372503132"/><text x="83.5855%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,370,247,505 samples, 1.52%)</title><rect x="83.3380%" y="261" width="1.5186%" height="15" fill="rgb(219,183,54)" fg:x="75198403401" fg:w="1370247505"/><text x="83.5880%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (19,782,462 samples, 0.02%)</title><rect x="84.8565%" y="293" width="0.0219%" height="15" fill="rgb(216,185,54)" fg:x="76568650906" fg:w="19782462"/><text x="85.1065%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (19,782,462 samples, 0.02%)</title><rect x="84.8565%" y="277" width="0.0219%" height="15" fill="rgb(254,217,39)" fg:x="76568650906" fg:w="19782462"/><text x="85.1065%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (19,782,462 samples, 0.02%)</title><rect x="84.8565%" y="261" width="0.0219%" height="15" fill="rgb(240,178,23)" fg:x="76568650906" fg:w="19782462"/><text x="85.1065%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (19,782,462 samples, 0.02%)</title><rect x="84.8565%" y="245" width="0.0219%" height="15" fill="rgb(218,11,47)" fg:x="76568650906" fg:w="19782462"/><text x="85.1065%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,741,652,469 samples, 1.93%)</title><rect x="83.2545%" y="309" width="1.9302%" height="15" fill="rgb(218,51,51)" fg:x="75123059328" fg:w="1741652469"/><text x="83.5045%" y="319.50">a..</text></g><g><title>core::ptr::write (268,970,991 samples, 0.30%)</title><rect x="84.8865%" y="293" width="0.2981%" height="15" fill="rgb(238,126,27)" fg:x="76595740806" fg:w="268970991"/><text x="85.1365%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (29,171,058 samples, 0.03%)</title><rect x="85.1846%" y="309" width="0.0323%" height="15" fill="rgb(249,202,22)" fg:x="76864711797" fg:w="29171058"/><text x="85.4346%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (55,614,611 samples, 0.06%)</title><rect x="85.2984%" y="181" width="0.0616%" height="15" fill="rgb(254,195,49)" fg:x="76967356021" fg:w="55614611"/><text x="85.5484%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54,880,704 samples, 0.06%)</title><rect x="85.2992%" y="165" width="0.0608%" height="15" fill="rgb(208,123,14)" fg:x="76968089928" fg:w="54880704"/><text x="85.5492%" y="175.50"></text></g><g><title>__rustc::__rust_alloc (63,913,641 samples, 0.07%)</title><rect x="85.3600%" y="181" width="0.0708%" height="15" fill="rgb(224,200,8)" fg:x="77022970632" fg:w="63913641"/><text x="85.6100%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (519,046,166 samples, 0.58%)</title><rect x="85.2984%" y="229" width="0.5752%" height="15" fill="rgb(217,61,36)" fg:x="76967356021" fg:w="519046166"/><text x="85.5484%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (519,046,166 samples, 0.58%)</title><rect x="85.2984%" y="213" width="0.5752%" height="15" fill="rgb(206,35,45)" fg:x="76967356021" fg:w="519046166"/><text x="85.5484%" y="223.50"></text></g><g><title>alloc::alloc::alloc (519,046,166 samples, 0.58%)</title><rect x="85.2984%" y="197" width="0.5752%" height="15" fill="rgb(217,65,33)" fg:x="76967356021" fg:w="519046166"/><text x="85.5484%" y="207.50"></text></g><g><title>malloc (399,517,914 samples, 0.44%)</title><rect x="85.4308%" y="181" width="0.4428%" height="15" fill="rgb(222,158,48)" fg:x="77086884273" fg:w="399517914"/><text x="85.6808%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (604,819,093 samples, 0.67%)</title><rect x="85.2170%" y="309" width="0.6703%" height="15" fill="rgb(254,2,54)" fg:x="76893882855" fg:w="604819093"/><text x="85.4670%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (604,819,093 samples, 0.67%)</title><rect x="85.2170%" y="293" width="0.6703%" height="15" fill="rgb(250,143,38)" fg:x="76893882855" fg:w="604819093"/><text x="85.4670%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (581,031,248 samples, 0.64%)</title><rect x="85.2433%" y="277" width="0.6439%" height="15" fill="rgb(248,25,0)" fg:x="76917670700" fg:w="581031248"/><text x="85.4933%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (581,031,248 samples, 0.64%)</title><rect x="85.2433%" y="261" width="0.6439%" height="15" fill="rgb(206,152,27)" fg:x="76917670700" fg:w="581031248"/><text x="85.4933%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (581,031,248 samples, 0.64%)</title><rect x="85.2433%" y="245" width="0.6439%" height="15" fill="rgb(240,77,30)" fg:x="76917670700" fg:w="581031248"/><text x="85.4933%" y="255.50"></text></g><g><title>alloc::raw_vec::layout_array (12,299,761 samples, 0.01%)</title><rect x="85.8736%" y="229" width="0.0136%" height="15" fill="rgb(231,5,3)" fg:x="77486402187" fg:w="12299761"/><text x="86.1236%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (12,299,761 samples, 0.01%)</title><rect x="85.8736%" y="213" width="0.0136%" height="15" fill="rgb(207,226,32)" fg:x="77486402187" fg:w="12299761"/><text x="86.1236%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (159,748,002 samples, 0.18%)</title><rect x="85.8872%" y="309" width="0.1770%" height="15" fill="rgb(222,207,47)" fg:x="77498701948" fg:w="159748002"/><text x="86.1372%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (64,516,812 samples, 0.07%)</title><rect x="86.0819%" y="213" width="0.0715%" height="15" fill="rgb(229,115,45)" fg:x="77674364400" fg:w="64516812"/><text x="86.3319%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (346,295,321 samples, 0.38%)</title><rect x="86.0764%" y="245" width="0.3838%" height="15" fill="rgb(224,191,6)" fg:x="77669368828" fg:w="346295321"/><text x="86.3264%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (346,295,321 samples, 0.38%)</title><rect x="86.0764%" y="229" width="0.3838%" height="15" fill="rgb(230,227,24)" fg:x="77669368828" fg:w="346295321"/><text x="86.3264%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (276,782,937 samples, 0.31%)</title><rect x="86.1534%" y="213" width="0.3067%" height="15" fill="rgb(228,80,19)" fg:x="77738881212" fg:w="276782937"/><text x="86.4034%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (361,160,708 samples, 0.40%)</title><rect x="86.0675%" y="309" width="0.4003%" height="15" fill="rgb(247,229,0)" fg:x="77661399825" fg:w="361160708"/><text x="86.3175%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (361,160,708 samples, 0.40%)</title><rect x="86.0675%" y="293" width="0.4003%" height="15" fill="rgb(237,194,15)" fg:x="77661399825" fg:w="361160708"/><text x="86.3175%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (361,160,708 samples, 0.40%)</title><rect x="86.0675%" y="277" width="0.4003%" height="15" fill="rgb(219,203,20)" fg:x="77661399825" fg:w="361160708"/><text x="86.3175%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (353,191,705 samples, 0.39%)</title><rect x="86.0764%" y="261" width="0.3914%" height="15" fill="rgb(234,128,8)" fg:x="77669368828" fg:w="353191705"/><text x="86.3264%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (56,079,527 samples, 0.06%)</title><rect x="86.4678%" y="309" width="0.0621%" height="15" fill="rgb(248,202,8)" fg:x="78022560533" fg:w="56079527"/><text x="86.7178%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (56,079,527 samples, 0.06%)</title><rect x="86.4678%" y="293" width="0.0621%" height="15" fill="rgb(206,104,37)" fg:x="78022560533" fg:w="56079527"/><text x="86.7178%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (56,079,527 samples, 0.06%)</title><rect x="86.4678%" y="277" width="0.0621%" height="15" fill="rgb(223,8,27)" fg:x="78022560533" fg:w="56079527"/><text x="86.7178%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (56,079,527 samples, 0.06%)</title><rect x="86.4678%" y="261" width="0.0621%" height="15" fill="rgb(216,217,28)" fg:x="78022560533" fg:w="56079527"/><text x="86.7178%" y="271.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (12,956,279 samples, 0.01%)</title><rect x="86.5156%" y="245" width="0.0144%" height="15" fill="rgb(249,199,1)" fg:x="78065683781" fg:w="12956279"/><text x="86.7656%" y="255.50"></text></g><g><title>core::slice::index::get_noubcheck (12,956,279 samples, 0.01%)</title><rect x="86.5156%" y="229" width="0.0144%" height="15" fill="rgb(240,85,17)" fg:x="78065683781" fg:w="12956279"/><text x="86.7656%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (133,569,859 samples, 0.15%)</title><rect x="86.5300%" y="309" width="0.1480%" height="15" fill="rgb(206,108,45)" fg:x="78078640060" fg:w="133569859"/><text x="86.7800%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (133,569,859 samples, 0.15%)</title><rect x="86.5300%" y="293" width="0.1480%" height="15" fill="rgb(245,210,41)" fg:x="78078640060" fg:w="133569859"/><text x="86.7800%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (133,569,859 samples, 0.15%)</title><rect x="86.5300%" y="277" width="0.1480%" height="15" fill="rgb(206,13,37)" fg:x="78078640060" fg:w="133569859"/><text x="86.7800%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (133,569,859 samples, 0.15%)</title><rect x="86.5300%" y="261" width="0.1480%" height="15" fill="rgb(250,61,18)" fg:x="78078640060" fg:w="133569859"/><text x="86.7800%" y="271.50"></text></g><g><title>server_lib::resp3::get_data_type (158,495,644 samples, 0.18%)</title><rect x="86.6780%" y="309" width="0.1757%" height="15" fill="rgb(235,172,48)" fg:x="78212209919" fg:w="158495644"/><text x="86.9280%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (151,079,544 samples, 0.17%)</title><rect x="88.5313%" y="133" width="0.1674%" height="15" fill="rgb(249,201,17)" fg:x="79884523359" fg:w="151079544"/><text x="88.7813%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (142,687,346 samples, 0.16%)</title><rect x="88.5406%" y="117" width="0.1581%" height="15" fill="rgb(219,208,6)" fg:x="79892915557" fg:w="142687346"/><text x="88.7906%" y="127.50"></text></g><g><title>__rustc::__rust_alloc (151,636,292 samples, 0.17%)</title><rect x="88.6987%" y="133" width="0.1680%" height="15" fill="rgb(248,31,23)" fg:x="80035602903" fg:w="151636292"/><text x="88.9487%" y="143.50"></text></g><g><title>alloc_perturb (14,958,627 samples, 0.02%)</title><rect x="90.9555%" y="101" width="0.0166%" height="15" fill="rgb(245,15,42)" fg:x="82071941311" fg:w="14958627"/><text x="91.2055%" y="111.50"></text></g><g><title>malloc_consolidate (48,757,482 samples, 0.05%)</title><rect x="90.9721%" y="101" width="0.0540%" height="15" fill="rgb(222,217,39)" fg:x="82086899938" fg:w="48757482"/><text x="91.2221%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,329,481,893 samples, 2.58%)</title><rect x="88.5258%" y="181" width="2.5816%" height="15" fill="rgb(210,219,27)" fg:x="79879544074" fg:w="2329481893"/><text x="88.7758%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,329,481,893 samples, 2.58%)</title><rect x="88.5258%" y="165" width="2.5816%" height="15" fill="rgb(252,166,36)" fg:x="79879544074" fg:w="2329481893"/><text x="88.7758%" y="175.50">al..</text></g><g><title>alloc::alloc::alloc (2,329,481,893 samples, 2.58%)</title><rect x="88.5258%" y="149" width="2.5816%" height="15" fill="rgb(245,132,34)" fg:x="79879544074" fg:w="2329481893"/><text x="88.7758%" y="159.50">al..</text></g><g><title>malloc (2,020,114,195 samples, 2.24%)</title><rect x="88.8686%" y="133" width="2.2388%" height="15" fill="rgb(236,54,3)" fg:x="80188911772" fg:w="2020114195"/><text x="89.1186%" y="143.50">m..</text></g><g><title>_int_malloc (870,832,016 samples, 0.97%)</title><rect x="90.1423%" y="117" width="0.9651%" height="15" fill="rgb(241,173,43)" fg:x="81338193951" fg:w="870832016"/><text x="90.3923%" y="127.50"></text></g><g><title>unlink_chunk.isra.0 (72,887,913 samples, 0.08%)</title><rect x="91.0266%" y="101" width="0.0808%" height="15" fill="rgb(215,190,9)" fg:x="82136138054" fg:w="72887913"/><text x="91.2766%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,386,747,956 samples, 2.65%)</title><rect x="88.4685%" y="245" width="2.6451%" height="15" fill="rgb(242,101,16)" fg:x="79827847150" fg:w="2386747956"/><text x="88.7185%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,386,747,956 samples, 2.65%)</title><rect x="88.4685%" y="229" width="2.6451%" height="15" fill="rgb(223,190,21)" fg:x="79827847150" fg:w="2386747956"/><text x="88.7185%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,386,747,956 samples, 2.65%)</title><rect x="88.4685%" y="213" width="2.6451%" height="15" fill="rgb(215,228,25)" fg:x="79827847150" fg:w="2386747956"/><text x="88.7185%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,386,747,956 samples, 2.65%)</title><rect x="88.4685%" y="197" width="2.6451%" height="15" fill="rgb(225,36,22)" fg:x="79827847150" fg:w="2386747956"/><text x="88.7185%" y="207.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,969,809,373 samples, 3.29%)</title><rect x="88.3832%" y="293" width="3.2913%" height="15" fill="rgb(251,106,46)" fg:x="79750906088" fg:w="2969809373"/><text x="88.6332%" y="303.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,969,809,373 samples, 3.29%)</title><rect x="88.3832%" y="277" width="3.2913%" height="15" fill="rgb(208,90,1)" fg:x="79750906088" fg:w="2969809373"/><text x="88.6332%" y="287.50">all..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,969,809,373 samples, 3.29%)</title><rect x="88.3832%" y="261" width="3.2913%" height="15" fill="rgb(243,10,4)" fg:x="79750906088" fg:w="2969809373"/><text x="88.6332%" y="271.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (506,120,355 samples, 0.56%)</title><rect x="91.1136%" y="245" width="0.5609%" height="15" fill="rgb(212,137,27)" fg:x="82214595106" fg:w="506120355"/><text x="91.3636%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (506,120,355 samples, 0.56%)</title><rect x="91.1136%" y="229" width="0.5609%" height="15" fill="rgb(231,220,49)" fg:x="82214595106" fg:w="506120355"/><text x="91.3636%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (503,944,685 samples, 0.56%)</title><rect x="91.1160%" y="213" width="0.5585%" height="15" fill="rgb(237,96,20)" fg:x="82216770776" fg:w="503944685"/><text x="91.3660%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (14,063,459 samples, 0.02%)</title><rect x="91.6915%" y="277" width="0.0156%" height="15" fill="rgb(239,229,30)" fg:x="82736106469" fg:w="14063459"/><text x="91.9415%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (14,063,459 samples, 0.02%)</title><rect x="91.6915%" y="261" width="0.0156%" height="15" fill="rgb(219,65,33)" fg:x="82736106469" fg:w="14063459"/><text x="91.9415%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (14,063,459 samples, 0.02%)</title><rect x="91.6915%" y="245" width="0.0156%" height="15" fill="rgb(243,134,7)" fg:x="82736106469" fg:w="14063459"/><text x="91.9415%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (14,063,459 samples, 0.02%)</title><rect x="91.6915%" y="229" width="0.0156%" height="15" fill="rgb(216,177,54)" fg:x="82736106469" fg:w="14063459"/><text x="91.9415%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (71,276,204 samples, 0.08%)</title><rect x="91.6745%" y="293" width="0.0790%" height="15" fill="rgb(211,160,20)" fg:x="82720715461" fg:w="71276204"/><text x="91.9245%" y="303.50"></text></g><g><title>core::ptr::write (41,821,737 samples, 0.05%)</title><rect x="91.7071%" y="277" width="0.0463%" height="15" fill="rgb(239,85,39)" fg:x="82750169928" fg:w="41821737"/><text x="91.9571%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (120,765,346 samples, 0.13%)</title><rect x="91.8173%" y="165" width="0.1338%" height="15" fill="rgb(232,125,22)" fg:x="82849567230" fg:w="120765346"/><text x="92.0673%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (112,643,992 samples, 0.12%)</title><rect x="91.8263%" y="149" width="0.1248%" height="15" fill="rgb(244,57,34)" fg:x="82857688584" fg:w="112643992"/><text x="92.0763%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (104,043,525 samples, 0.12%)</title><rect x="91.9511%" y="165" width="0.1153%" height="15" fill="rgb(214,203,32)" fg:x="82970332576" fg:w="104043525"/><text x="92.2011%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (875,751,058 samples, 0.97%)</title><rect x="91.7535%" y="293" width="0.9705%" height="15" fill="rgb(207,58,43)" fg:x="82791991665" fg:w="875751058"/><text x="92.0035%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (875,751,058 samples, 0.97%)</title><rect x="91.7535%" y="277" width="0.9705%" height="15" fill="rgb(215,193,15)" fg:x="82791991665" fg:w="875751058"/><text x="92.0035%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (830,021,946 samples, 0.92%)</title><rect x="91.8042%" y="261" width="0.9199%" height="15" fill="rgb(232,15,44)" fg:x="82837720777" fg:w="830021946"/><text x="92.0542%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (830,021,946 samples, 0.92%)</title><rect x="91.8042%" y="245" width="0.9199%" height="15" fill="rgb(212,3,48)" fg:x="82837720777" fg:w="830021946"/><text x="92.0542%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (830,021,946 samples, 0.92%)</title><rect x="91.8042%" y="229" width="0.9199%" height="15" fill="rgb(218,128,7)" fg:x="82837720777" fg:w="830021946"/><text x="92.0542%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (824,621,486 samples, 0.91%)</title><rect x="91.8101%" y="213" width="0.9139%" height="15" fill="rgb(226,216,39)" fg:x="82843121237" fg:w="824621486"/><text x="92.0601%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (824,621,486 samples, 0.91%)</title><rect x="91.8101%" y="197" width="0.9139%" height="15" fill="rgb(243,47,51)" fg:x="82843121237" fg:w="824621486"/><text x="92.0601%" y="207.50"></text></g><g><title>alloc::alloc::alloc (824,621,486 samples, 0.91%)</title><rect x="91.8101%" y="181" width="0.9139%" height="15" fill="rgb(241,183,40)" fg:x="82843121237" fg:w="824621486"/><text x="92.0601%" y="191.50"></text></g><g><title>malloc (593,366,622 samples, 0.66%)</title><rect x="92.0664%" y="165" width="0.6576%" height="15" fill="rgb(231,217,32)" fg:x="83074376101" fg:w="593366622"/><text x="92.3164%" y="175.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (34,937,794 samples, 0.04%)</title><rect x="92.9699%" y="261" width="0.0387%" height="15" fill="rgb(229,61,38)" fg:x="83889616938" fg:w="34937794"/><text x="93.2199%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (16,184,913 samples, 0.02%)</title><rect x="92.9907%" y="245" width="0.0179%" height="15" fill="rgb(225,210,5)" fg:x="83908369819" fg:w="16184913"/><text x="93.2407%" y="255.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (262,576,465 samples, 0.29%)</title><rect x="92.7240%" y="293" width="0.2910%" height="15" fill="rgb(231,79,45)" fg:x="83667742723" fg:w="262576465"/><text x="92.9740%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (262,576,465 samples, 0.29%)</title><rect x="92.7240%" y="277" width="0.2910%" height="15" fill="rgb(224,100,7)" fg:x="83667742723" fg:w="262576465"/><text x="92.9740%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (31,007,108 samples, 0.03%)</title><rect x="93.0307%" y="197" width="0.0344%" height="15" fill="rgb(241,198,18)" fg:x="83944439497" fg:w="31007108"/><text x="93.2807%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (28,311,435 samples, 0.03%)</title><rect x="93.0337%" y="181" width="0.0314%" height="15" fill="rgb(252,97,53)" fg:x="83947135170" fg:w="28311435"/><text x="93.2837%" y="191.50"></text></g><g><title>__rustc::__rust_dealloc (74,698,701 samples, 0.08%)</title><rect x="93.0650%" y="197" width="0.0828%" height="15" fill="rgb(220,88,7)" fg:x="83975446605" fg:w="74698701"/><text x="93.3150%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="293" width="0.8878%" height="15" fill="rgb(213,176,14)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="277" width="0.8878%" height="15" fill="rgb(246,73,7)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="261" width="0.8878%" height="15" fill="rgb(245,64,36)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="245" width="0.8878%" height="15" fill="rgb(245,80,10)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="229" width="0.8878%" height="15" fill="rgb(232,107,50)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (801,100,135 samples, 0.89%)</title><rect x="93.0150%" y="213" width="0.8878%" height="15" fill="rgb(253,3,0)" fg:x="83930319188" fg:w="801100135"/><text x="93.2650%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (681,274,017 samples, 0.76%)</title><rect x="93.1478%" y="197" width="0.7550%" height="15" fill="rgb(212,99,53)" fg:x="84050145306" fg:w="681274017"/><text x="93.3978%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (45,089,120 samples, 0.05%)</title><rect x="93.9028%" y="293" width="0.0500%" height="15" fill="rgb(249,111,54)" fg:x="84731419323" fg:w="45089120"/><text x="94.1528%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45,089,120 samples, 0.05%)</title><rect x="93.9028%" y="277" width="0.0500%" height="15" fill="rgb(249,55,30)" fg:x="84731419323" fg:w="45089120"/><text x="94.1528%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (45,089,120 samples, 0.05%)</title><rect x="93.9028%" y="261" width="0.0500%" height="15" fill="rgb(237,47,42)" fg:x="84731419323" fg:w="45089120"/><text x="94.1528%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (558,182,273 samples, 0.62%)</title><rect x="93.9528%" y="293" width="0.6186%" height="15" fill="rgb(211,20,18)" fg:x="84776508443" fg:w="558182273"/><text x="94.2028%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (389,440,498 samples, 0.43%)</title><rect x="94.1398%" y="277" width="0.4316%" height="15" fill="rgb(231,203,46)" fg:x="84945250218" fg:w="389440498"/><text x="94.3898%" y="287.50"></text></g><g><title>core::str::validations::run_utf8_validation (200,220,421 samples, 0.22%)</title><rect x="94.3495%" y="261" width="0.2219%" height="15" fill="rgb(237,142,3)" fg:x="85134470295" fg:w="200220421"/><text x="94.5995%" y="271.50"></text></g><g><title>server_lib::resp3::parse_request (13,416,088,300 samples, 14.87%)</title><rect x="79.7061%" y="341" width="14.8683%" height="15" fill="rgb(241,107,1)" fg:x="71921265554" fg:w="13416088300"/><text x="79.9561%" y="351.50">server_lib::resp3::pars..</text></g><g><title>server_lib::resp3::parse_arrays (12,796,870,029 samples, 14.18%)</title><rect x="80.3923%" y="325" width="14.1820%" height="15" fill="rgb(229,83,13)" fg:x="72540483825" fg:w="12796870029"/><text x="80.6423%" y="335.50">server_lib::resp3::par..</text></g><g><title>server_lib::resp3::parse_bulk_strings (6,966,648,291 samples, 7.72%)</title><rect x="86.8536%" y="309" width="7.7207%" height="15" fill="rgb(241,91,40)" fg:x="78370705563" fg:w="6966648291"/><text x="87.1036%" y="319.50">server_lib:..</text></g><g><title>__send (136,301,836 samples, 0.15%)</title><rect x="94.9708%" y="325" width="0.1511%" height="15" fill="rgb(225,3,45)" fg:x="85695064698" fg:w="136301836"/><text x="95.2208%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9,624,586 samples, 0.01%)</title><rect x="95.1218%" y="325" width="0.0107%" height="15" fill="rgb(244,223,14)" fg:x="85831366534" fg:w="9624586"/><text x="95.3718%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9,624,586 samples, 0.01%)</title><rect x="95.1218%" y="309" width="0.0107%" height="15" fill="rgb(224,124,37)" fg:x="85831366534" fg:w="9624586"/><text x="95.3718%" y="319.50"></text></g><g><title>__syscall_cancel_arch (35,884,477 samples, 0.04%)</title><rect x="96.7001%" y="245" width="0.0398%" height="15" fill="rgb(251,171,30)" fg:x="87255459892" fg:w="35884477"/><text x="96.9501%" y="255.50"></text></g><g><title>__syscall_cancel_arch_end (227,547,161 samples, 0.25%)</title><rect x="96.7398%" y="245" width="0.2522%" height="15" fill="rgb(236,46,54)" fg:x="87291344369" fg:w="227547161"/><text x="96.9898%" y="255.50"></text></g><g><title>__send (1,441,452,490 samples, 1.60%)</title><rect x="95.4756%" y="293" width="1.5975%" height="15" fill="rgb(245,213,5)" fg:x="86150610362" fg:w="1441452490"/><text x="95.7256%" y="303.50"></text></g><g><title>__syscall_cancel (1,222,662,410 samples, 1.36%)</title><rect x="95.7181%" y="277" width="1.3550%" height="15" fill="rgb(230,144,27)" fg:x="86369400442" fg:w="1222662410"/><text x="95.9681%" y="287.50"></text></g><g><title>__internal_syscall_cancel (1,081,030,745 samples, 1.20%)</title><rect x="95.8751%" y="261" width="1.1980%" height="15" fill="rgb(220,86,6)" fg:x="86511032107" fg:w="1081030745"/><text x="96.1251%" y="271.50"></text></g><g><title>__syscall_cancel_arch_start (73,171,322 samples, 0.08%)</title><rect x="96.9920%" y="245" width="0.0811%" height="15" fill="rgb(240,20,13)" fg:x="87518891530" fg:w="73171322"/><text x="97.2420%" y="255.50"></text></g><g><title>__syscall_cancel (19,677,550 samples, 0.02%)</title><rect x="97.0731%" y="293" width="0.0218%" height="15" fill="rgb(217,89,34)" fg:x="87592062852" fg:w="19677550"/><text x="97.3231%" y="303.50"></text></g><g><title>std::io::Write::write_all (2,343,572,116 samples, 2.60%)</title><rect x="94.5744%" y="341" width="2.5972%" height="15" fill="rgb(229,13,5)" fg:x="85337353854" fg:w="2343572116"/><text x="94.8244%" y="351.50">st..</text></g><g><title>std::net::udp::UdpSocket::send (1,839,934,850 samples, 2.04%)</title><rect x="95.1325%" y="325" width="2.0391%" height="15" fill="rgb(244,67,35)" fg:x="85840991120" fg:w="1839934850"/><text x="95.3825%" y="335.50">s..</text></g><g><title>std::sys::net::connection::socket::UdpSocket::send (1,776,996,660 samples, 1.97%)</title><rect x="95.2023%" y="309" width="1.9693%" height="15" fill="rgb(221,40,2)" fg:x="85903929310" fg:w="1776996660"/><text x="95.4523%" y="319.50">s..</text></g><g><title>std::sys::pal::unix::cvt (69,185,568 samples, 0.08%)</title><rect x="97.0949%" y="293" width="0.0767%" height="15" fill="rgb(237,157,21)" fg:x="87611740402" fg:w="69185568"/><text x="97.3449%" y="303.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (52,329,555 samples, 0.06%)</title><rect x="97.1136%" y="277" width="0.0580%" height="15" fill="rgb(222,94,11)" fg:x="87628596415" fg:w="52329555"/><text x="97.3636%" y="287.50"></text></g><g><title>__internal_syscall_cancel (19,733,687 samples, 0.02%)</title><rect x="97.4278%" y="277" width="0.0219%" height="15" fill="rgb(249,113,6)" fg:x="87912120136" fg:w="19733687"/><text x="97.6778%" y="287.50"></text></g><g><title>__syscall_cancel_arch_end (205,236,549 samples, 0.23%)</title><rect x="98.1277%" y="245" width="0.2275%" height="15" fill="rgb(238,137,36)" fg:x="88543662212" fg:w="205236549"/><text x="98.3777%" y="255.50"></text></g><g><title>__libc_recv (1,056,652,231 samples, 1.17%)</title><rect x="97.2360%" y="293" width="1.1710%" height="15" fill="rgb(210,102,26)" fg:x="87738999869" fg:w="1056652231"/><text x="97.4860%" y="303.50"></text></g><g><title>__syscall_cancel (863,798,277 samples, 0.96%)</title><rect x="97.4497%" y="277" width="0.9573%" height="15" fill="rgb(218,30,30)" fg:x="87931853823" fg:w="863798277"/><text x="97.6997%" y="287.50"></text></g><g><title>__internal_syscall_cancel (811,946,656 samples, 0.90%)</title><rect x="97.5072%" y="261" width="0.8998%" height="15" fill="rgb(214,67,26)" fg:x="87983705444" fg:w="811946656"/><text x="97.7572%" y="271.50"></text></g><g><title>__syscall_cancel_arch_start (46,753,339 samples, 0.05%)</title><rect x="98.3552%" y="245" width="0.0518%" height="15" fill="rgb(251,9,53)" fg:x="88748898761" fg:w="46753339"/><text x="98.6052%" y="255.50"></text></g><g><title>server::handle_client (77,341,962,233 samples, 85.71%)</title><rect x="12.9344%" y="357" width="85.7135%" height="15" fill="rgb(228,204,25)" fg:x="11671068505" fg:w="77341962233"/><text x="13.1844%" y="367.50">server::handle_client</text></g><g><title>std::net::udp::UdpSocket::recv (1,332,104,768 samples, 1.48%)</title><rect x="97.1716%" y="341" width="1.4763%" height="15" fill="rgb(207,153,8)" fg:x="87680925970" fg:w="1332104768"/><text x="97.4216%" y="351.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (1,326,765,102 samples, 1.47%)</title><rect x="97.1775%" y="325" width="1.4704%" height="15" fill="rgb(242,9,16)" fg:x="87686265636" fg:w="1326765102"/><text x="97.4275%" y="335.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (1,326,765,102 samples, 1.47%)</title><rect x="97.1775%" y="309" width="1.4704%" height="15" fill="rgb(217,211,10)" fg:x="87686265636" fg:w="1326765102"/><text x="97.4275%" y="319.50"></text></g><g><title>std::sys::pal::unix::cvt (209,082,649 samples, 0.23%)</title><rect x="98.4162%" y="293" width="0.2317%" height="15" fill="rgb(219,228,52)" fg:x="88803948089" fg:w="209082649"/><text x="98.6662%" y="303.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (209,082,649 samples, 0.23%)</title><rect x="98.4162%" y="277" width="0.2317%" height="15" fill="rgb(231,92,29)" fg:x="88803948089" fg:w="209082649"/><text x="98.6662%" y="287.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (44,906,659 samples, 0.05%)</title><rect x="98.8383%" y="341" width="0.0498%" height="15" fill="rgb(232,8,23)" fg:x="89184798992" fg:w="44906659"/><text x="99.0883%" y="351.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (44,906,659 samples, 0.05%)</title><rect x="98.8383%" y="325" width="0.0498%" height="15" fill="rgb(216,211,34)" fg:x="89184798992" fg:w="44906659"/><text x="99.0883%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13,522,880 samples, 0.01%)</title><rect x="98.8880%" y="341" width="0.0150%" height="15" fill="rgb(236,151,0)" fg:x="89229705651" fg:w="13522880"/><text x="99.1380%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13,522,880 samples, 0.01%)</title><rect x="98.8880%" y="325" width="0.0150%" height="15" fill="rgb(209,168,3)" fg:x="89229705651" fg:w="13522880"/><text x="99.1380%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (13,522,880 samples, 0.01%)</title><rect x="98.8880%" y="309" width="0.0150%" height="15" fill="rgb(208,129,28)" fg:x="89229705651" fg:w="13522880"/><text x="99.1380%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (19,380,729 samples, 0.02%)</title><rect x="98.9094%" y="277" width="0.0215%" height="15" fill="rgb(229,78,22)" fg:x="89249029362" fg:w="19380729"/><text x="99.1594%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19,380,729 samples, 0.02%)</title><rect x="98.9094%" y="261" width="0.0215%" height="15" fill="rgb(228,187,13)" fg:x="89249029362" fg:w="19380729"/><text x="99.1594%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (19,380,729 samples, 0.02%)</title><rect x="98.9094%" y="245" width="0.0215%" height="15" fill="rgb(240,119,24)" fg:x="89249029362" fg:w="19380729"/><text x="99.1594%" y="255.50"></text></g><g><title>alloc::string::String::push_str (68,287,289 samples, 0.08%)</title><rect x="98.9094%" y="341" width="0.0757%" height="15" fill="rgb(209,194,42)" fg:x="89249029362" fg:w="68287289"/><text x="99.1594%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (68,287,289 samples, 0.08%)</title><rect x="98.9094%" y="325" width="0.0757%" height="15" fill="rgb(247,200,46)" fg:x="89249029362" fg:w="68287289"/><text x="99.1594%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (68,287,289 samples, 0.08%)</title><rect x="98.9094%" y="309" width="0.0757%" height="15" fill="rgb(218,76,16)" fg:x="89249029362" fg:w="68287289"/><text x="99.1594%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (68,287,289 samples, 0.08%)</title><rect x="98.9094%" y="293" width="0.0757%" height="15" fill="rgb(225,21,48)" fg:x="89249029362" fg:w="68287289"/><text x="99.1594%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48,906,560 samples, 0.05%)</title><rect x="98.9309%" y="277" width="0.0542%" height="15" fill="rgb(239,223,50)" fg:x="89268410091" fg:w="48906560"/><text x="99.1809%" y="287.50"></text></g><g><title>server_lib::resp3::bulk_string_response (322,761,906 samples, 0.36%)</title><rect x="98.6479%" y="357" width="0.3577%" height="15" fill="rgb(244,45,21)" fg:x="89013030738" fg:w="322761906"/><text x="98.8979%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="341" width="0.0205%" height="15" fill="rgb(232,33,43)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="325" width="0.0205%" height="15" fill="rgb(209,8,3)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="309" width="0.0205%" height="15" fill="rgb(214,25,53)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="293" width="0.0205%" height="15" fill="rgb(254,186,54)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="277" width="0.0205%" height="15" fill="rgb(208,174,49)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="261" width="0.0205%" height="15" fill="rgb(233,191,51)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (18,475,993 samples, 0.02%)</title><rect x="98.9851%" y="245" width="0.0205%" height="15" fill="rgb(222,134,10)" fg:x="89317316651" fg:w="18475993"/><text x="99.2351%" y="255.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (106,235,795 samples, 0.12%)</title><rect x="99.0103%" y="357" width="0.1177%" height="15" fill="rgb(230,226,20)" fg:x="89340020189" fg:w="106235795"/><text x="99.2603%" y="367.50"></text></g><g><title>server_lib::resp3::parse_request (15,890,087 samples, 0.02%)</title><rect x="99.1280%" y="357" width="0.0176%" height="15" fill="rgb(251,111,25)" fg:x="89446255984" fg:w="15890087"/><text x="99.3780%" y="367.50"></text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (66,380,798 samples, 0.07%)</title><rect x="99.2913%" y="341" width="0.0736%" height="15" fill="rgb(224,40,46)" fg:x="89593620964" fg:w="66380798"/><text x="99.5413%" y="351.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (66,380,798 samples, 0.07%)</title><rect x="99.2913%" y="325" width="0.0736%" height="15" fill="rgb(236,108,47)" fg:x="89593620964" fg:w="66380798"/><text x="99.5413%" y="335.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (65,484,478 samples, 0.07%)</title><rect x="99.3649%" y="341" width="0.0726%" height="15" fill="rgb(234,93,0)" fg:x="89660001762" fg:w="65484478"/><text x="99.6149%" y="351.50"></text></g><g><title>server_lib::storage::Storage::get_entry (266,848,095 samples, 0.30%)</title><rect x="99.1456%" y="357" width="0.2957%" height="15" fill="rgb(224,213,32)" fg:x="89462146071" fg:w="266848095"/><text x="99.3956%" y="367.50"></text></g><g><title>server_lib::storage::Storage::insert_entry (161,582,758 samples, 0.18%)</title><rect x="99.4414%" y="357" width="0.1791%" height="15" fill="rgb(251,11,48)" fg:x="89728994166" fg:w="161582758"/><text x="99.6914%" y="367.50"></text></g><g><title>std::io::Write::write_all (95,155,850 samples, 0.11%)</title><rect x="99.6256%" y="357" width="0.1055%" height="15" fill="rgb(236,173,5)" fg:x="89895237553" fg:w="95155850"/><text x="99.8756%" y="367.50"></text></g><g><title>std::net::udp::UdpSocket::send (13,776,564 samples, 0.02%)</title><rect x="99.7322%" y="357" width="0.0153%" height="15" fill="rgb(230,95,12)" fg:x="89991440479" fg:w="13776564"/><text x="99.9822%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (28,358,174 samples, 0.03%)</title><rect x="99.7475%" y="357" width="0.0314%" height="15" fill="rgb(232,209,1)" fg:x="90005217043" fg:w="28358174"/><text x="99.9975%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (20,812,051 samples, 0.02%)</title><rect x="99.7789%" y="357" width="0.0231%" height="15" fill="rgb(232,6,1)" fg:x="90033575217" fg:w="20812051"/><text x="100.0289%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (61,965,546 samples, 0.07%)</title><rect x="99.8040%" y="357" width="0.0687%" height="15" fill="rgb(210,224,50)" fg:x="90056211235" fg:w="61965546"/><text x="100.0540%" y="367.50"></text></g><g><title>std::time::SystemTime::now (40,495,562 samples, 0.04%)</title><rect x="99.8727%" y="357" width="0.0449%" height="15" fill="rgb(228,127,35)" fg:x="90118176781" fg:w="40495562"/><text x="100.1227%" y="367.50"></text></g><g><title>all (90,233,080,075 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(245,102,45)" fg:x="0" fg:w="90233080075"/><text x="0.2500%" y="399.50"></text></g><g><title>server (90,233,080,075 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(214,1,49)" fg:x="0" fg:w="90233080075"/><text x="0.2500%" y="383.50">server</text></g><g><title>unlink_chunk.isra.0 (71,458,793 samples, 0.08%)</title><rect x="99.9208%" y="357" width="0.0792%" height="15" fill="rgb(226,163,40)" fg:x="90161621282" fg:w="71458793"/><text x="100.1708%" y="367.50"></text></g></svg></svg>