<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="51668763971"><g><title>&lt;T as alloc::string::ToString&gt;::to_string (70,645,791 samples, 0.14%)</title><rect x="0.0000%" y="373" width="0.1367%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="70645791"/><text x="0.2500%" y="383.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="357" width="0.0164%" height="15" fill="rgb(217,0,24)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="341" width="0.0164%" height="15" fill="rgb(221,193,54)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="325" width="0.0164%" height="15" fill="rgb(248,212,6)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="309" width="0.0164%" height="15" fill="rgb(208,68,35)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="293" width="0.0164%" height="15" fill="rgb(232,128,0)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (8,474,260 samples, 0.02%)</title><rect x="0.1203%" y="277" width="0.0164%" height="15" fill="rgb(207,160,47)" fg:x="62171531" fg:w="8474260"/><text x="0.3703%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6,477,265 samples, 0.01%)</title><rect x="0.1242%" y="261" width="0.0125%" height="15" fill="rgb(228,23,34)" fg:x="64168526" fg:w="6477265"/><text x="0.3742%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,477,265 samples, 0.01%)</title><rect x="0.1242%" y="245" width="0.0125%" height="15" fill="rgb(218,30,26)" fg:x="64168526" fg:w="6477265"/><text x="0.3742%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58,879,395 samples, 0.11%)</title><rect x="0.1367%" y="373" width="0.1140%" height="15" fill="rgb(220,122,19)" fg:x="70645791" fg:w="58879395"/><text x="0.3867%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (5,651,697 samples, 0.01%)</title><rect x="0.2575%" y="373" width="0.0109%" height="15" fill="rgb(250,228,42)" fg:x="133028480" fg:w="5651697"/><text x="0.5075%" y="383.50"></text></g><g><title>alloc::string::String::push (5,651,697 samples, 0.01%)</title><rect x="0.2575%" y="357" width="0.0109%" height="15" fill="rgb(240,193,28)" fg:x="133028480" fg:w="5651697"/><text x="0.5075%" y="367.50"></text></g><g><title>alloc::string::String::len (5,651,697 samples, 0.01%)</title><rect x="0.2575%" y="341" width="0.0109%" height="15" fill="rgb(216,20,37)" fg:x="133028480" fg:w="5651697"/><text x="0.5075%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5,651,697 samples, 0.01%)</title><rect x="0.2575%" y="325" width="0.0109%" height="15" fill="rgb(206,188,39)" fg:x="133028480" fg:w="5651697"/><text x="0.5075%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5,651,697 samples, 0.01%)</title><rect x="0.2575%" y="309" width="0.0109%" height="15" fill="rgb(217,207,13)" fg:x="133028480" fg:w="5651697"/><text x="0.5075%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11,347,291 samples, 0.02%)</title><rect x="0.2684%" y="373" width="0.0220%" height="15" fill="rgb(231,73,38)" fg:x="138680177" fg:w="11347291"/><text x="0.5184%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18,954,678 samples, 0.04%)</title><rect x="0.2904%" y="373" width="0.0367%" height="15" fill="rgb(225,20,46)" fg:x="150027468" fg:w="18954678"/><text x="0.5404%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33,878,188 samples, 0.07%)</title><rect x="0.3270%" y="373" width="0.0656%" height="15" fill="rgb(210,31,41)" fg:x="168982146" fg:w="33878188"/><text x="0.5770%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (11,269,850 samples, 0.02%)</title><rect x="0.3708%" y="357" width="0.0218%" height="15" fill="rgb(221,200,47)" fg:x="191590484" fg:w="11269850"/><text x="0.6208%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17,660,534 samples, 0.03%)</title><rect x="0.3926%" y="373" width="0.0342%" height="15" fill="rgb(226,26,5)" fg:x="202860334" fg:w="17660534"/><text x="0.6426%" y="383.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (8,968,430 samples, 0.02%)</title><rect x="0.4268%" y="373" width="0.0174%" height="15" fill="rgb(249,33,26)" fg:x="220520868" fg:w="8968430"/><text x="0.6768%" y="383.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (13,099,936 samples, 0.03%)</title><rect x="0.4442%" y="373" width="0.0254%" height="15" fill="rgb(235,183,28)" fg:x="229489298" fg:w="13099936"/><text x="0.6942%" y="383.50"></text></g><g><title>[libc.so.6] (276,061,402 samples, 0.53%)</title><rect x="0.4714%" y="373" width="0.5343%" height="15" fill="rgb(221,5,38)" fg:x="243592242" fg:w="276061402"/><text x="0.7214%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18,070,561 samples, 0.03%)</title><rect x="1.0057%" y="357" width="0.0350%" height="15" fill="rgb(247,18,42)" fg:x="519653644" fg:w="18070561"/><text x="1.2557%" y="367.50"></text></g><g><title>cfree (5,909,423 samples, 0.01%)</title><rect x="1.0407%" y="357" width="0.0114%" height="15" fill="rgb(241,131,45)" fg:x="537724205" fg:w="5909423"/><text x="1.2907%" y="367.50"></text></g><g><title>[server] (30,626,991 samples, 0.06%)</title><rect x="1.0057%" y="373" width="0.0593%" height="15" fill="rgb(249,31,29)" fg:x="519653644" fg:w="30626991"/><text x="1.2557%" y="383.50"></text></g><g><title>malloc (6,647,007 samples, 0.01%)</title><rect x="1.0522%" y="357" width="0.0129%" height="15" fill="rgb(225,111,53)" fg:x="543633628" fg:w="6647007"/><text x="1.3022%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9,053,315 samples, 0.02%)</title><rect x="1.0696%" y="357" width="0.0175%" height="15" fill="rgb(238,160,17)" fg:x="552674774" fg:w="9053315"/><text x="1.3196%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,869,677 samples, 0.03%)</title><rect x="1.1244%" y="341" width="0.0288%" height="15" fill="rgb(214,148,48)" fg:x="580960367" fg:w="14869677"/><text x="1.3744%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (23,967,601 samples, 0.05%)</title><rect x="1.1532%" y="341" width="0.0464%" height="15" fill="rgb(232,36,49)" fg:x="595830044" fg:w="23967601"/><text x="1.4032%" y="351.50"></text></g><g><title>cfree (8,567,113 samples, 0.02%)</title><rect x="1.1996%" y="341" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="619797645" fg:w="8567113"/><text x="1.4496%" y="351.50"></text></g><g><title>server_lib::resp3::parse_arrays (56,543,211 samples, 0.11%)</title><rect x="1.2161%" y="341" width="0.1094%" height="15" fill="rgb(229,88,8)" fg:x="628364758" fg:w="56543211"/><text x="1.4661%" y="351.50"></text></g><g><title>[libc.so.6] (167,522,338 samples, 0.32%)</title><rect x="1.0872%" y="357" width="0.3242%" height="15" fill="rgb(213,181,19)" fg:x="561728089" fg:w="167522338"/><text x="1.3372%" y="367.50"></text></g><g><title>std::io::Write::write_all (44,342,458 samples, 0.09%)</title><rect x="1.3256%" y="341" width="0.0858%" height="15" fill="rgb(254,191,54)" fg:x="684907969" fg:w="44342458"/><text x="1.5756%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,214,236 samples, 0.03%)</title><rect x="1.4114%" y="341" width="0.0275%" height="15" fill="rgb(241,83,37)" fg:x="729250427" fg:w="14214236"/><text x="1.6614%" y="351.50"></text></g><g><title>[unknown] (53,079,216 samples, 0.10%)</title><rect x="1.4114%" y="357" width="0.1027%" height="15" fill="rgb(233,36,39)" fg:x="729250427" fg:w="53079216"/><text x="1.6614%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (38,864,980 samples, 0.08%)</title><rect x="1.4389%" y="341" width="0.0752%" height="15" fill="rgb(226,3,54)" fg:x="743464663" fg:w="38864980"/><text x="1.6889%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="325" width="0.0239%" height="15" fill="rgb(245,192,40)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="309" width="0.0239%" height="15" fill="rgb(238,167,29)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="293" width="0.0239%" height="15" fill="rgb(232,182,51)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="277" width="0.0239%" height="15" fill="rgb(231,60,39)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="261" width="0.0239%" height="15" fill="rgb(208,69,12)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12,326,560 samples, 0.02%)</title><rect x="1.4903%" y="245" width="0.0239%" height="15" fill="rgb(235,93,37)" fg:x="770003083" fg:w="12326560"/><text x="1.7403%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (12,769,059 samples, 0.02%)</title><rect x="1.5238%" y="357" width="0.0247%" height="15" fill="rgb(213,116,39)" fg:x="787304651" fg:w="12769059"/><text x="1.7738%" y="367.50"></text></g><g><title>cfree (20,669,924 samples, 0.04%)</title><rect x="1.5485%" y="357" width="0.0400%" height="15" fill="rgb(222,207,29)" fg:x="800073710" fg:w="20669924"/><text x="1.7985%" y="367.50"></text></g><g><title>malloc (30,846,938 samples, 0.06%)</title><rect x="1.6060%" y="357" width="0.0597%" height="15" fill="rgb(206,96,30)" fg:x="829775328" fg:w="30846938"/><text x="1.8560%" y="367.50"></text></g><g><title>recv (39,326,301 samples, 0.08%)</title><rect x="1.6706%" y="357" width="0.0761%" height="15" fill="rgb(218,138,4)" fg:x="863187554" fg:w="39326301"/><text x="1.9206%" y="367.50"></text></g><g><title>server::process_request (66,538,493 samples, 0.13%)</title><rect x="1.7467%" y="357" width="0.1288%" height="15" fill="rgb(250,191,14)" fg:x="902513855" fg:w="66538493"/><text x="1.9967%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (12,179,446 samples, 0.02%)</title><rect x="1.8519%" y="341" width="0.0236%" height="15" fill="rgb(239,60,40)" fg:x="956872902" fg:w="12179446"/><text x="2.1019%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12,179,446 samples, 0.02%)</title><rect x="1.8519%" y="325" width="0.0236%" height="15" fill="rgb(206,27,48)" fg:x="956872902" fg:w="12179446"/><text x="2.1019%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12,179,446 samples, 0.02%)</title><rect x="1.8519%" y="309" width="0.0236%" height="15" fill="rgb(225,35,8)" fg:x="956872902" fg:w="12179446"/><text x="2.1019%" y="319.50"></text></g><g><title>server_lib::resp3::bulk_string_response (27,132,124 samples, 0.05%)</title><rect x="1.8755%" y="357" width="0.0525%" height="15" fill="rgb(250,213,24)" fg:x="969052348" fg:w="27132124"/><text x="2.1255%" y="367.50"></text></g><g><title>std::io::Write::write_all (10,403,757 samples, 0.02%)</title><rect x="1.9325%" y="357" width="0.0201%" height="15" fill="rgb(247,123,22)" fg:x="998505498" fg:w="10403757"/><text x="2.1825%" y="367.50"></text></g><g><title>[unknown] (474,493,610 samples, 0.92%)</title><rect x="1.0650%" y="373" width="0.9183%" height="15" fill="rgb(231,138,38)" fg:x="550280635" fg:w="474493610"/><text x="1.3150%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (12,204,474 samples, 0.02%)</title><rect x="1.9597%" y="357" width="0.0236%" height="15" fill="rgb(231,145,46)" fg:x="1012569771" fg:w="12204474"/><text x="2.2097%" y="367.50"></text></g><g><title>__send (58,798,174 samples, 0.11%)</title><rect x="1.9868%" y="373" width="0.1138%" height="15" fill="rgb(251,118,11)" fg:x="1026541769" fg:w="58798174"/><text x="2.2368%" y="383.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::accept::_{{closure}} (112,003,433 samples, 0.22%)</title><rect x="2.1107%" y="197" width="0.2168%" height="15" fill="rgb(217,147,25)" fg:x="1090594927" fg:w="112003433"/><text x="2.3607%" y="207.50"></text></g><g><title>accept4 (112,003,433 samples, 0.22%)</title><rect x="2.1107%" y="181" width="0.2168%" height="15" fill="rgb(247,81,37)" fg:x="1090594927" fg:w="112003433"/><text x="2.3607%" y="191.50"></text></g><g><title>[libc.so.6] (112,003,433 samples, 0.22%)</title><rect x="2.1107%" y="165" width="0.2168%" height="15" fill="rgb(209,12,38)" fg:x="1090594927" fg:w="112003433"/><text x="2.3607%" y="175.50"></text></g><g><title>[libc.so.6] (110,421,984 samples, 0.21%)</title><rect x="2.1138%" y="149" width="0.2137%" height="15" fill="rgb(227,1,9)" fg:x="1092176376" fg:w="110421984"/><text x="2.3638%" y="159.50"></text></g><g><title>[libc.so.6] (108,874,489 samples, 0.21%)</title><rect x="2.1168%" y="133" width="0.2107%" height="15" fill="rgb(248,47,43)" fg:x="1093723871" fg:w="108874489"/><text x="2.3668%" y="143.50"></text></g><g><title>std::net::tcp::TcpListener::accept (114,309,468 samples, 0.22%)</title><rect x="2.1098%" y="261" width="0.2212%" height="15" fill="rgb(221,10,30)" fg:x="1090115191" fg:w="114309468"/><text x="2.3598%" y="271.50"></text></g><g><title>std::sys::net::connection::socket::TcpListener::accept (114,309,468 samples, 0.22%)</title><rect x="2.1098%" y="245" width="0.2212%" height="15" fill="rgb(210,229,1)" fg:x="1090115191" fg:w="114309468"/><text x="2.3598%" y="255.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::accept (113,829,732 samples, 0.22%)</title><rect x="2.1107%" y="229" width="0.2203%" height="15" fill="rgb(222,148,37)" fg:x="1090594927" fg:w="113829732"/><text x="2.3607%" y="239.50"></text></g><g><title>std::sys::pal::unix::cvt_r (113,829,732 samples, 0.22%)</title><rect x="2.1107%" y="213" width="0.2203%" height="15" fill="rgb(234,67,33)" fg:x="1090594927" fg:w="113829732"/><text x="2.3607%" y="223.50"></text></g><g><title>_start (197,597,330 samples, 0.38%)</title><rect x="2.1006%" y="373" width="0.3824%" height="15" fill="rgb(247,98,35)" fg:x="1085339943" fg:w="197597330"/><text x="2.3506%" y="383.50"></text></g><g><title>__libc_start_main (197,597,330 samples, 0.38%)</title><rect x="2.1006%" y="357" width="0.3824%" height="15" fill="rgb(247,138,52)" fg:x="1085339943" fg:w="197597330"/><text x="2.3506%" y="367.50"></text></g><g><title>[libc.so.6] (197,597,330 samples, 0.38%)</title><rect x="2.1006%" y="341" width="0.3824%" height="15" fill="rgb(213,79,30)" fg:x="1085339943" fg:w="197597330"/><text x="2.3506%" y="351.50"></text></g><g><title>main (197,597,330 samples, 0.38%)</title><rect x="2.1006%" y="325" width="0.3824%" height="15" fill="rgb(246,177,23)" fg:x="1085339943" fg:w="197597330"/><text x="2.3506%" y="335.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (196,923,955 samples, 0.38%)</title><rect x="2.1019%" y="309" width="0.3811%" height="15" fill="rgb(230,62,27)" fg:x="1086013318" fg:w="196923955"/><text x="2.3519%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (196,923,955 samples, 0.38%)</title><rect x="2.1019%" y="293" width="0.3811%" height="15" fill="rgb(216,154,8)" fg:x="1086013318" fg:w="196923955"/><text x="2.3519%" y="303.50"></text></g><g><title>server::main (196,923,955 samples, 0.38%)</title><rect x="2.1019%" y="277" width="0.3811%" height="15" fill="rgb(244,35,45)" fg:x="1086013318" fg:w="196923955"/><text x="2.3519%" y="287.50"></text></g><g><title>std::thread::sleep (78,512,614 samples, 0.15%)</title><rect x="2.3310%" y="261" width="0.1520%" height="15" fill="rgb(251,115,12)" fg:x="1204424659" fg:w="78512614"/><text x="2.5810%" y="271.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (78,512,614 samples, 0.15%)</title><rect x="2.3310%" y="245" width="0.1520%" height="15" fill="rgb(240,54,50)" fg:x="1204424659" fg:w="78512614"/><text x="2.5810%" y="255.50"></text></g><g><title>__nanosleep (78,512,614 samples, 0.15%)</title><rect x="2.3310%" y="229" width="0.1520%" height="15" fill="rgb(233,84,52)" fg:x="1204424659" fg:w="78512614"/><text x="2.5810%" y="239.50"></text></g><g><title>clock_nanosleep (78,512,614 samples, 0.15%)</title><rect x="2.3310%" y="213" width="0.1520%" height="15" fill="rgb(207,117,47)" fg:x="1204424659" fg:w="78512614"/><text x="2.5810%" y="223.50"></text></g><g><title>[libc.so.6] (76,965,119 samples, 0.15%)</title><rect x="2.3340%" y="197" width="0.1490%" height="15" fill="rgb(249,43,39)" fg:x="1205972154" fg:w="76965119"/><text x="2.5840%" y="207.50"></text></g><g><title>[libc.so.6] (70,034,712 samples, 0.14%)</title><rect x="2.3475%" y="181" width="0.1355%" height="15" fill="rgb(209,38,44)" fg:x="1212902561" fg:w="70034712"/><text x="2.5975%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (22,031,635 samples, 0.04%)</title><rect x="2.4830%" y="373" width="0.0426%" height="15" fill="rgb(236,212,23)" fg:x="1282937273" fg:w="22031635"/><text x="2.7330%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (32,392,964 samples, 0.06%)</title><rect x="2.5256%" y="373" width="0.0627%" height="15" fill="rgb(242,79,21)" fg:x="1304968908" fg:w="32392964"/><text x="2.7756%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (42,513,451 samples, 0.08%)</title><rect x="2.5883%" y="373" width="0.0823%" height="15" fill="rgb(211,96,35)" fg:x="1337361872" fg:w="42513451"/><text x="2.8383%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (103,434,097 samples, 0.20%)</title><rect x="2.6706%" y="373" width="0.2002%" height="15" fill="rgb(253,215,40)" fg:x="1379875323" fg:w="103434097"/><text x="2.9206%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27,327,614 samples, 0.05%)</title><rect x="2.8708%" y="373" width="0.0529%" height="15" fill="rgb(211,81,21)" fg:x="1483309420" fg:w="27327614"/><text x="3.1208%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10,732,665 samples, 0.02%)</title><rect x="2.9029%" y="357" width="0.0208%" height="15" fill="rgb(208,190,38)" fg:x="1499904369" fg:w="10732665"/><text x="3.1529%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (10,732,665 samples, 0.02%)</title><rect x="2.9029%" y="341" width="0.0208%" height="15" fill="rgb(235,213,38)" fg:x="1499904369" fg:w="10732665"/><text x="3.1529%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9,227,773 samples, 0.02%)</title><rect x="2.9058%" y="325" width="0.0179%" height="15" fill="rgb(237,122,38)" fg:x="1501409261" fg:w="9227773"/><text x="3.1558%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9,227,773 samples, 0.02%)</title><rect x="2.9058%" y="309" width="0.0179%" height="15" fill="rgb(244,218,35)" fg:x="1501409261" fg:w="9227773"/><text x="3.1558%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (13,376,434 samples, 0.03%)</title><rect x="2.9237%" y="373" width="0.0259%" height="15" fill="rgb(240,68,47)" fg:x="1510637034" fg:w="13376434"/><text x="3.1737%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (12,231,413 samples, 0.02%)</title><rect x="2.9496%" y="373" width="0.0237%" height="15" fill="rgb(210,16,53)" fg:x="1524013468" fg:w="12231413"/><text x="3.1996%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (11,130,806 samples, 0.02%)</title><rect x="2.9733%" y="373" width="0.0215%" height="15" fill="rgb(235,124,12)" fg:x="1536244881" fg:w="11130806"/><text x="3.2233%" y="383.50"></text></g><g><title>cfree (15,408,933 samples, 0.03%)</title><rect x="2.9948%" y="373" width="0.0298%" height="15" fill="rgb(224,169,11)" fg:x="1547375687" fg:w="15408933"/><text x="3.2448%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad (35,234,262 samples, 0.07%)</title><rect x="3.0246%" y="373" width="0.0682%" height="15" fill="rgb(250,166,2)" fg:x="1562784620" fg:w="35234262"/><text x="3.2746%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (7,360,109 samples, 0.01%)</title><rect x="3.0928%" y="373" width="0.0142%" height="15" fill="rgb(242,216,29)" fg:x="1598018882" fg:w="7360109"/><text x="3.3428%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (27,791,657 samples, 0.05%)</title><rect x="3.1071%" y="373" width="0.0538%" height="15" fill="rgb(230,116,27)" fg:x="1605378991" fg:w="27791657"/><text x="3.3571%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl usize&gt;::_fmt (40,864,952 samples, 0.08%)</title><rect x="3.1608%" y="373" width="0.0791%" height="15" fill="rgb(228,99,48)" fg:x="1633170648" fg:w="40864952"/><text x="3.4108%" y="383.50"></text></g><g><title>core::fmt::write (31,136,480 samples, 0.06%)</title><rect x="3.2399%" y="373" width="0.0603%" height="15" fill="rgb(253,11,6)" fg:x="1674035600" fg:w="31136480"/><text x="3.4899%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,474,307 samples, 0.03%)</title><rect x="3.3002%" y="373" width="0.0299%" height="15" fill="rgb(247,143,39)" fg:x="1705172080" fg:w="15474307"/><text x="3.5502%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (7,446,112 samples, 0.01%)</title><rect x="3.3301%" y="373" width="0.0144%" height="15" fill="rgb(236,97,10)" fg:x="1720646387" fg:w="7446112"/><text x="3.5801%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (85,116,786 samples, 0.16%)</title><rect x="3.5110%" y="325" width="0.1647%" height="15" fill="rgb(233,208,19)" fg:x="1814075060" fg:w="85116786"/><text x="3.7610%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (85,116,786 samples, 0.16%)</title><rect x="3.5110%" y="309" width="0.1647%" height="15" fill="rgb(216,164,2)" fg:x="1814075060" fg:w="85116786"/><text x="3.7610%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (85,116,786 samples, 0.16%)</title><rect x="3.5110%" y="293" width="0.1647%" height="15" fill="rgb(220,129,5)" fg:x="1814075060" fg:w="85116786"/><text x="3.7610%" y="303.50"></text></g><g><title>[libc.so.6] (5,191,417 samples, 0.01%)</title><rect x="3.6860%" y="261" width="0.0100%" height="15" fill="rgb(242,17,10)" fg:x="1904494185" fg:w="5191417"/><text x="3.9360%" y="271.50"></text></g><g><title>recv (11,636,178,184 samples, 22.52%)</title><rect x="3.6960%" y="261" width="22.5207%" height="15" fill="rgb(242,107,0)" fg:x="1909685602" fg:w="11636178184"/><text x="3.9460%" y="271.50">recv</text></g><g><title>[libc.so.6] (11,619,297,004 samples, 22.49%)</title><rect x="3.7287%" y="245" width="22.4880%" height="15" fill="rgb(251,28,31)" fg:x="1926566782" fg:w="11619297004"/><text x="3.9787%" y="255.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,608,744,757 samples, 22.47%)</title><rect x="3.7491%" y="229" width="22.4676%" height="15" fill="rgb(233,223,10)" fg:x="1937119029" fg:w="11608744757"/><text x="3.9991%" y="239.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,484,517,159 samples, 22.23%)</title><rect x="3.9895%" y="213" width="22.2272%" height="15" fill="rgb(215,21,27)" fg:x="2061346627" fg:w="11484517159"/><text x="4.2395%" y="223.50">[libc.so.6]</text></g><g><title>[unknown] (5,235,762 samples, 0.01%)</title><rect x="26.2066%" y="197" width="0.0101%" height="15" fill="rgb(232,23,21)" fg:x="13540628024" fg:w="5235762"/><text x="26.4566%" y="207.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (11,693,246,057 samples, 22.63%)</title><rect x="3.6757%" y="325" width="22.6312%" height="15" fill="rgb(244,5,23)" fg:x="1899191846" fg:w="11693246057"/><text x="3.9257%" y="335.50">&lt;std::net::tcp::TcpStream as std::io..</text></g><g><title>std::sys::net::connection::socket::TcpStream::read (11,693,246,057 samples, 22.63%)</title><rect x="3.6757%" y="309" width="22.6312%" height="15" fill="rgb(226,81,46)" fg:x="1899191846" fg:w="11693246057"/><text x="3.9257%" y="319.50">std::sys::net::connection::socket::T..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (11,693,246,057 samples, 22.63%)</title><rect x="3.6757%" y="293" width="22.6312%" height="15" fill="rgb(247,70,30)" fg:x="1899191846" fg:w="11693246057"/><text x="3.9257%" y="303.50">std::sys::net::connection::socket::u..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (11,693,246,057 samples, 22.63%)</title><rect x="3.6757%" y="277" width="22.6312%" height="15" fill="rgb(212,68,19)" fg:x="1899191846" fg:w="11693246057"/><text x="3.9257%" y="287.50">std::sys::net::connection::socket::u..</text></g><g><title>std::sys::pal::unix::cvt (46,574,117 samples, 0.09%)</title><rect x="26.2167%" y="261" width="0.0901%" height="15" fill="rgb(240,187,13)" fg:x="13545863786" fg:w="46574117"/><text x="26.4667%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16,610,942 samples, 0.03%)</title><rect x="26.3104%" y="325" width="0.0321%" height="15" fill="rgb(223,113,26)" fg:x="13594250336" fg:w="16610942"/><text x="26.5604%" y="335.50"></text></g><g><title>cfree (70,551,944 samples, 0.14%)</title><rect x="26.3425%" y="325" width="0.1365%" height="15" fill="rgb(206,192,2)" fg:x="13610861278" fg:w="70551944"/><text x="26.5925%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25,634,569 samples, 0.05%)</title><rect x="26.4818%" y="293" width="0.0496%" height="15" fill="rgb(241,108,4)" fg:x="13682798948" fg:w="25634569"/><text x="26.7318%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (214,842,522 samples, 0.42%)</title><rect x="26.4791%" y="325" width="0.4158%" height="15" fill="rgb(247,173,49)" fg:x="13681413222" fg:w="214842522"/><text x="26.7291%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (214,842,522 samples, 0.42%)</title><rect x="26.4791%" y="309" width="0.4158%" height="15" fill="rgb(224,114,35)" fg:x="13681413222" fg:w="214842522"/><text x="26.7291%" y="319.50"></text></g><g><title>cfree (187,822,227 samples, 0.36%)</title><rect x="26.5314%" y="293" width="0.3635%" height="15" fill="rgb(245,159,27)" fg:x="13708433517" fg:w="187822227"/><text x="26.7814%" y="303.50"></text></g><g><title>[libc.so.6] (87,065,345 samples, 0.17%)</title><rect x="26.7264%" y="277" width="0.1685%" height="15" fill="rgb(245,172,44)" fg:x="13809190399" fg:w="87065345"/><text x="26.9764%" y="287.50"></text></g><g><title>[libc.so.6] (55,476,716 samples, 0.11%)</title><rect x="26.7875%" y="261" width="0.1074%" height="15" fill="rgb(236,23,11)" fg:x="13840779028" fg:w="55476716"/><text x="27.0375%" y="271.50"></text></g><g><title>[libc.so.6] (38,857,557 samples, 0.08%)</title><rect x="26.8197%" y="245" width="0.0752%" height="15" fill="rgb(205,117,38)" fg:x="13857398187" fg:w="38857557"/><text x="27.0697%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,722,157 samples, 0.04%)</title><rect x="26.9514%" y="261" width="0.0401%" height="15" fill="rgb(237,72,25)" fg:x="13925473988" fg:w="20722157"/><text x="27.2014%" y="271.50"></text></g><g><title>cfree (157,826,725 samples, 0.31%)</title><rect x="26.9915%" y="261" width="0.3055%" height="15" fill="rgb(244,70,9)" fg:x="13946196145" fg:w="157826725"/><text x="27.2415%" y="271.50"></text></g><g><title>[libc.so.6] (27,765,580 samples, 0.05%)</title><rect x="27.2433%" y="245" width="0.0537%" height="15" fill="rgb(217,125,39)" fg:x="14076257290" fg:w="27765580"/><text x="27.4933%" y="255.50"></text></g><g><title>[libc.so.6] (13,729,292 samples, 0.03%)</title><rect x="27.2704%" y="229" width="0.0266%" height="15" fill="rgb(235,36,10)" fg:x="14090293578" fg:w="13729292"/><text x="27.5204%" y="239.50"></text></g><g><title>[libc.so.6] (12,276,687 samples, 0.02%)</title><rect x="27.2732%" y="213" width="0.0238%" height="15" fill="rgb(251,123,47)" fg:x="14091746183" fg:w="12276687"/><text x="27.5232%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (207,716,883 samples, 0.40%)</title><rect x="26.9446%" y="293" width="0.4020%" height="15" fill="rgb(221,13,13)" fg:x="13921957155" fg:w="207716883"/><text x="27.1946%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (207,716,883 samples, 0.40%)</title><rect x="26.9446%" y="277" width="0.4020%" height="15" fill="rgb(238,131,9)" fg:x="13921957155" fg:w="207716883"/><text x="27.1946%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (25,651,168 samples, 0.05%)</title><rect x="27.2970%" y="261" width="0.0496%" height="15" fill="rgb(211,50,8)" fg:x="14104022870" fg:w="25651168"/><text x="27.5470%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (236,107,522 samples, 0.46%)</title><rect x="26.8949%" y="325" width="0.4570%" height="15" fill="rgb(245,182,24)" fg:x="13896255744" fg:w="236107522"/><text x="27.1449%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (210,406,111 samples, 0.41%)</title><rect x="26.9446%" y="309" width="0.4072%" height="15" fill="rgb(242,14,37)" fg:x="13921957155" fg:w="210406111"/><text x="27.1946%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (24,213,800 samples, 0.05%)</title><rect x="27.6535%" y="213" width="0.0469%" height="15" fill="rgb(246,228,12)" fg:x="14288207892" fg:w="24213800"/><text x="27.9035%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="197" width="0.0115%" height="15" fill="rgb(213,55,15)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="181" width="0.0115%" height="15" fill="rgb(209,9,3)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="191.50"></text></g><g><title>alloc::string::String::as_str (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="165" width="0.0115%" height="15" fill="rgb(230,59,30)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="149" width="0.0115%" height="15" fill="rgb(209,121,21)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="133" width="0.0115%" height="15" fill="rgb(220,109,13)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="117" width="0.0115%" height="15" fill="rgb(232,18,1)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="101" width="0.0115%" height="15" fill="rgb(215,41,42)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,936,212 samples, 0.01%)</title><rect x="27.6888%" y="85" width="0.0115%" height="15" fill="rgb(224,123,36)" fg:x="14306485480" fg:w="5936212"/><text x="27.9388%" y="95.50"></text></g><g><title>[libc.so.6] (46,633,414 samples, 0.09%)</title><rect x="27.7204%" y="149" width="0.0903%" height="15" fill="rgb(240,125,3)" fg:x="14322808650" fg:w="46633414"/><text x="27.9704%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (199,684,315 samples, 0.39%)</title><rect x="27.7003%" y="213" width="0.3865%" height="15" fill="rgb(205,98,50)" fg:x="14312421692" fg:w="199684315"/><text x="27.9503%" y="223.50"></text></g><g><title>alloc::string::String::push_str (199,684,315 samples, 0.39%)</title><rect x="27.7003%" y="197" width="0.3865%" height="15" fill="rgb(205,185,37)" fg:x="14312421692" fg:w="199684315"/><text x="27.9503%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (199,684,315 samples, 0.39%)</title><rect x="27.7003%" y="181" width="0.3865%" height="15" fill="rgb(238,207,15)" fg:x="14312421692" fg:w="199684315"/><text x="27.9503%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (199,684,315 samples, 0.39%)</title><rect x="27.7003%" y="165" width="0.3865%" height="15" fill="rgb(213,199,42)" fg:x="14312421692" fg:w="199684315"/><text x="27.9503%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (142,663,943 samples, 0.28%)</title><rect x="27.8107%" y="149" width="0.2761%" height="15" fill="rgb(235,201,11)" fg:x="14369442064" fg:w="142663943"/><text x="28.0607%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (136,168,612 samples, 0.26%)</title><rect x="27.8233%" y="133" width="0.2635%" height="15" fill="rgb(207,46,11)" fg:x="14375937395" fg:w="136168612"/><text x="28.0733%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (95,128,741 samples, 0.18%)</title><rect x="27.9027%" y="117" width="0.1841%" height="15" fill="rgb(241,35,35)" fg:x="14416977266" fg:w="95128741"/><text x="28.1527%" y="127.50"></text></g><g><title>malloc (79,598,492 samples, 0.15%)</title><rect x="27.9328%" y="101" width="0.1541%" height="15" fill="rgb(243,32,47)" fg:x="14432507515" fg:w="79598492"/><text x="28.1828%" y="111.50"></text></g><g><title>[libc.so.6] (60,925,378 samples, 0.12%)</title><rect x="27.9689%" y="85" width="0.1179%" height="15" fill="rgb(247,202,23)" fg:x="14451180629" fg:w="60925378"/><text x="28.2189%" y="95.50"></text></g><g><title>core::fmt::Formatter::write_fmt (314,207,050 samples, 0.61%)</title><rect x="27.5602%" y="261" width="0.6081%" height="15" fill="rgb(219,102,11)" fg:x="14240038953" fg:w="314207050"/><text x="27.8102%" y="271.50"></text></g><g><title>core::fmt::write (314,207,050 samples, 0.61%)</title><rect x="27.5602%" y="245" width="0.6081%" height="15" fill="rgb(243,110,44)" fg:x="14240038953" fg:w="314207050"/><text x="27.8102%" y="255.50"></text></g><g><title>core::fmt::rt::Argument::fmt (268,123,778 samples, 0.52%)</title><rect x="27.6494%" y="229" width="0.5189%" height="15" fill="rgb(222,74,54)" fg:x="14286122225" fg:w="268123778"/><text x="27.8994%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad (42,139,996 samples, 0.08%)</title><rect x="28.0868%" y="213" width="0.0816%" height="15" fill="rgb(216,99,12)" fg:x="14512106007" fg:w="42139996"/><text x="28.3368%" y="223.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (344,344,762 samples, 0.67%)</title><rect x="27.5170%" y="277" width="0.6664%" height="15" fill="rgb(226,22,26)" fg:x="14217716402" fg:w="344344762"/><text x="27.7670%" y="287.50"></text></g><g><title>core::fmt::rt::&lt;impl core::fmt::Arguments&gt;::new_v1 (7,815,161 samples, 0.02%)</title><rect x="28.1684%" y="261" width="0.0151%" height="15" fill="rgb(217,163,10)" fg:x="14554246003" fg:w="7815161"/><text x="28.4184%" y="271.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (366,735,564 samples, 0.71%)</title><rect x="27.4984%" y="293" width="0.7098%" height="15" fill="rgb(213,25,53)" fg:x="14208063553" fg:w="366735564"/><text x="27.7484%" y="303.50"></text></g><g><title>alloc::string::String::new (12,737,953 samples, 0.02%)</title><rect x="28.1835%" y="277" width="0.0247%" height="15" fill="rgb(252,105,26)" fg:x="14562061164" fg:w="12737953"/><text x="28.4335%" y="287.50"></text></g><g><title>__rustc::__rust_alloc (24,519,871 samples, 0.05%)</title><rect x="28.2550%" y="149" width="0.0475%" height="15" fill="rgb(220,39,43)" fg:x="14598995898" fg:w="24519871"/><text x="28.5050%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (207,223,638 samples, 0.40%)</title><rect x="28.2081%" y="197" width="0.4011%" height="15" fill="rgb(229,68,48)" fg:x="14574799117" fg:w="207223638"/><text x="28.4581%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (207,223,638 samples, 0.40%)</title><rect x="28.2081%" y="181" width="0.4011%" height="15" fill="rgb(252,8,32)" fg:x="14574799117" fg:w="207223638"/><text x="28.4581%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (207,223,638 samples, 0.40%)</title><rect x="28.2081%" y="165" width="0.4011%" height="15" fill="rgb(223,20,43)" fg:x="14574799117" fg:w="207223638"/><text x="28.4581%" y="175.50"></text></g><g><title>malloc (158,506,986 samples, 0.31%)</title><rect x="28.3024%" y="149" width="0.3068%" height="15" fill="rgb(229,81,49)" fg:x="14623515769" fg:w="158506986"/><text x="28.5524%" y="159.50"></text></g><g><title>[libc.so.6] (42,686,173 samples, 0.08%)</title><rect x="28.5266%" y="133" width="0.0826%" height="15" fill="rgb(236,28,36)" fg:x="14739336582" fg:w="42686173"/><text x="28.7766%" y="143.50"></text></g><g><title>[libc.so.6] (12,942,931 samples, 0.03%)</title><rect x="28.5842%" y="117" width="0.0250%" height="15" fill="rgb(249,185,26)" fg:x="14769079824" fg:w="12942931"/><text x="28.8342%" y="127.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (282,421,485 samples, 0.55%)</title><rect x="28.2081%" y="261" width="0.5466%" height="15" fill="rgb(249,174,33)" fg:x="14574799117" fg:w="282421485"/><text x="28.4581%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (282,421,485 samples, 0.55%)</title><rect x="28.2081%" y="245" width="0.5466%" height="15" fill="rgb(233,201,37)" fg:x="14574799117" fg:w="282421485"/><text x="28.4581%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (282,421,485 samples, 0.55%)</title><rect x="28.2081%" y="229" width="0.5466%" height="15" fill="rgb(221,78,26)" fg:x="14574799117" fg:w="282421485"/><text x="28.4581%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (282,421,485 samples, 0.55%)</title><rect x="28.2081%" y="213" width="0.5466%" height="15" fill="rgb(250,127,30)" fg:x="14574799117" fg:w="282421485"/><text x="28.4581%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (75,197,847 samples, 0.15%)</title><rect x="28.6092%" y="197" width="0.1455%" height="15" fill="rgb(230,49,44)" fg:x="14782022755" fg:w="75197847"/><text x="28.8592%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75,197,847 samples, 0.15%)</title><rect x="28.6092%" y="181" width="0.1455%" height="15" fill="rgb(229,67,23)" fg:x="14782022755" fg:w="75197847"/><text x="28.8592%" y="191.50"></text></g><g><title>[libc.so.6] (60,845,563 samples, 0.12%)</title><rect x="28.6370%" y="165" width="0.1178%" height="15" fill="rgb(249,83,47)" fg:x="14796375039" fg:w="60845563"/><text x="28.8870%" y="175.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (653,727,578 samples, 1.27%)</title><rect x="27.4984%" y="309" width="1.2652%" height="15" fill="rgb(215,43,3)" fg:x="14208063553" fg:w="653727578"/><text x="27.7484%" y="319.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (286,992,014 samples, 0.56%)</title><rect x="28.2081%" y="293" width="0.5554%" height="15" fill="rgb(238,154,13)" fg:x="14574799117" fg:w="286992014"/><text x="28.4581%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (286,992,014 samples, 0.56%)</title><rect x="28.2081%" y="277" width="0.5554%" height="15" fill="rgb(219,56,2)" fg:x="14574799117" fg:w="286992014"/><text x="28.4581%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,664,863 samples, 0.07%)</title><rect x="28.7636%" y="309" width="0.0710%" height="15" fill="rgb(233,0,4)" fg:x="14861791131" fg:w="36664863"/><text x="29.0136%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8,248,401 samples, 0.02%)</title><rect x="28.8346%" y="309" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="14898455994" fg:w="8248401"/><text x="29.0846%" y="319.50"></text></g><g><title>alloc::string::String::as_str (8,248,401 samples, 0.02%)</title><rect x="28.8346%" y="293" width="0.0160%" height="15" fill="rgb(250,79,13)" fg:x="14898455994" fg:w="8248401"/><text x="29.0846%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (8,248,401 samples, 0.02%)</title><rect x="28.8346%" y="277" width="0.0160%" height="15" fill="rgb(211,146,34)" fg:x="14898455994" fg:w="8248401"/><text x="29.0846%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,588,339 samples, 0.01%)</title><rect x="28.8397%" y="261" width="0.0108%" height="15" fill="rgb(228,22,38)" fg:x="14901116056" fg:w="5588339"/><text x="29.0897%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,588,339 samples, 0.01%)</title><rect x="28.8397%" y="245" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="14901116056" fg:w="5588339"/><text x="29.0897%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,588,339 samples, 0.01%)</title><rect x="28.8397%" y="229" width="0.0108%" height="15" fill="rgb(221,155,16)" fg:x="14901116056" fg:w="5588339"/><text x="29.0897%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,588,339 samples, 0.01%)</title><rect x="28.8397%" y="213" width="0.0108%" height="15" fill="rgb(215,215,53)" fg:x="14901116056" fg:w="5588339"/><text x="29.0897%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (6,281,767 samples, 0.01%)</title><rect x="29.0446%" y="149" width="0.0122%" height="15" fill="rgb(223,4,10)" fg:x="15006970607" fg:w="6281767"/><text x="29.2946%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48,486,201 samples, 0.09%)</title><rect x="29.0401%" y="197" width="0.0938%" height="15" fill="rgb(234,103,6)" fg:x="15004678895" fg:w="48486201"/><text x="29.2901%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48,486,201 samples, 0.09%)</title><rect x="29.0401%" y="181" width="0.0938%" height="15" fill="rgb(227,97,0)" fg:x="15004678895" fg:w="48486201"/><text x="29.2901%" y="191.50"></text></g><g><title>alloc::alloc::alloc (48,486,201 samples, 0.09%)</title><rect x="29.0401%" y="165" width="0.0938%" height="15" fill="rgb(234,150,53)" fg:x="15004678895" fg:w="48486201"/><text x="29.2901%" y="175.50"></text></g><g><title>malloc (34,894,621 samples, 0.07%)</title><rect x="29.0664%" y="149" width="0.0675%" height="15" fill="rgb(228,201,54)" fg:x="15018270475" fg:w="34894621"/><text x="29.3164%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (61,901,381 samples, 0.12%)</title><rect x="29.0283%" y="277" width="0.1198%" height="15" fill="rgb(222,22,37)" fg:x="14998556395" fg:w="61901381"/><text x="29.2783%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (61,901,381 samples, 0.12%)</title><rect x="29.0283%" y="261" width="0.1198%" height="15" fill="rgb(237,53,32)" fg:x="14998556395" fg:w="61901381"/><text x="29.2783%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (61,901,381 samples, 0.12%)</title><rect x="29.0283%" y="245" width="0.1198%" height="15" fill="rgb(233,25,53)" fg:x="14998556395" fg:w="61901381"/><text x="29.2783%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (61,901,381 samples, 0.12%)</title><rect x="29.0283%" y="229" width="0.1198%" height="15" fill="rgb(210,40,34)" fg:x="14998556395" fg:w="61901381"/><text x="29.2783%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (61,901,381 samples, 0.12%)</title><rect x="29.0283%" y="213" width="0.1198%" height="15" fill="rgb(241,220,44)" fg:x="14998556395" fg:w="61901381"/><text x="29.2783%" y="223.50"></text></g><g><title>alloc::raw_vec::layout_array (7,292,680 samples, 0.01%)</title><rect x="29.1340%" y="197" width="0.0141%" height="15" fill="rgb(235,28,35)" fg:x="15053165096" fg:w="7292680"/><text x="29.3840%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (7,292,680 samples, 0.01%)</title><rect x="29.1340%" y="181" width="0.0141%" height="15" fill="rgb(210,56,17)" fg:x="15053165096" fg:w="7292680"/><text x="29.3840%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (7,292,680 samples, 0.01%)</title><rect x="29.1340%" y="165" width="0.0141%" height="15" fill="rgb(224,130,29)" fg:x="15053165096" fg:w="7292680"/><text x="29.3840%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (7,292,680 samples, 0.01%)</title><rect x="29.1340%" y="149" width="0.0141%" height="15" fill="rgb(235,212,8)" fg:x="15053165096" fg:w="7292680"/><text x="29.3840%" y="159.50"></text></g><g><title>core::intrinsics::unlikely (7,292,680 samples, 0.01%)</title><rect x="29.1340%" y="133" width="0.0141%" height="15" fill="rgb(223,33,50)" fg:x="15053165096" fg:w="7292680"/><text x="29.3840%" y="143.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (180,288,555 samples, 0.35%)</title><rect x="28.8733%" y="309" width="0.3489%" height="15" fill="rgb(219,149,13)" fg:x="14918459464" fg:w="180288555"/><text x="29.1233%" y="319.50"></text></g><g><title>alloc::str::convert_while_ascii (157,360,509 samples, 0.30%)</title><rect x="28.9176%" y="293" width="0.3046%" height="15" fill="rgb(250,156,29)" fg:x="14941387510" fg:w="157360509"/><text x="29.1676%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (38,290,243 samples, 0.07%)</title><rect x="29.1481%" y="277" width="0.0741%" height="15" fill="rgb(216,193,19)" fg:x="15060457776" fg:w="38290243"/><text x="29.3981%" y="287.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (35,077,298 samples, 0.07%)</title><rect x="29.1543%" y="261" width="0.0679%" height="15" fill="rgb(216,135,14)" fg:x="15063670721" fg:w="35077298"/><text x="29.4043%" y="271.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (721,595,754 samples, 1.40%)</title><rect x="29.4244%" y="293" width="1.3966%" height="15" fill="rgb(241,47,5)" fg:x="15203239979" fg:w="721595754"/><text x="29.6744%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (24,976,116 samples, 0.05%)</title><rect x="30.7727%" y="277" width="0.0483%" height="15" fill="rgb(233,42,35)" fg:x="15899859617" fg:w="24976116"/><text x="31.0227%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (24,976,116 samples, 0.05%)</title><rect x="30.7727%" y="261" width="0.0483%" height="15" fill="rgb(231,13,6)" fg:x="15899859617" fg:w="24976116"/><text x="31.0227%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (830,111,310 samples, 1.61%)</title><rect x="29.2287%" y="309" width="1.6066%" height="15" fill="rgb(207,181,40)" fg:x="15102117695" fg:w="830111310"/><text x="29.4787%" y="319.50"></text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (7,393,272 samples, 0.01%)</title><rect x="30.8210%" y="293" width="0.0143%" height="15" fill="rgb(254,173,49)" fg:x="15924835733" fg:w="7393272"/><text x="31.0710%" y="303.50"></text></g><g><title>cfree (273,889,501 samples, 0.53%)</title><rect x="30.8353%" y="309" width="0.5301%" height="15" fill="rgb(221,1,38)" fg:x="15932229005" fg:w="273889501"/><text x="31.0853%" y="319.50"></text></g><g><title>[libc.so.6] (117,932,497 samples, 0.23%)</title><rect x="31.1372%" y="293" width="0.2282%" height="15" fill="rgb(206,124,46)" fg:x="16088186009" fg:w="117932497"/><text x="31.3872%" y="303.50"></text></g><g><title>[libc.so.6] (99,090,676 samples, 0.19%)</title><rect x="31.1736%" y="277" width="0.1918%" height="15" fill="rgb(249,21,11)" fg:x="16107027830" fg:w="99090676"/><text x="31.4236%" y="287.50"></text></g><g><title>[libc.so.6] (65,671,633 samples, 0.13%)</title><rect x="31.2383%" y="261" width="0.1271%" height="15" fill="rgb(222,201,40)" fg:x="16140446873" fg:w="65671633"/><text x="31.4883%" y="271.50"></text></g><g><title>[libc.so.6] (15,818,200 samples, 0.03%)</title><rect x="31.3348%" y="245" width="0.0306%" height="15" fill="rgb(235,61,29)" fg:x="16190300306" fg:w="15818200"/><text x="31.5848%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (24,321,792 samples, 0.05%)</title><rect x="31.3654%" y="309" width="0.0471%" height="15" fill="rgb(219,207,3)" fg:x="16206118506" fg:w="24321792"/><text x="31.6154%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,982,888 samples, 0.03%)</title><rect x="31.4610%" y="261" width="0.0329%" height="15" fill="rgb(222,56,46)" fg:x="16255504787" fg:w="16982888"/><text x="31.7110%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (273,599,348 samples, 0.53%)</title><rect x="31.4125%" y="309" width="0.5295%" height="15" fill="rgb(239,76,54)" fg:x="16230440298" fg:w="273599348"/><text x="31.6625%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (248,534,859 samples, 0.48%)</title><rect x="31.4610%" y="293" width="0.4810%" height="15" fill="rgb(231,124,27)" fg:x="16255504787" fg:w="248534859"/><text x="31.7110%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (248,534,859 samples, 0.48%)</title><rect x="31.4610%" y="277" width="0.4810%" height="15" fill="rgb(249,195,6)" fg:x="16255504787" fg:w="248534859"/><text x="31.7110%" y="287.50"></text></g><g><title>cfree (231,551,971 samples, 0.45%)</title><rect x="31.4939%" y="261" width="0.4481%" height="15" fill="rgb(237,174,47)" fg:x="16272487675" fg:w="231551971"/><text x="31.7439%" y="271.50"></text></g><g><title>[libc.so.6] (35,286,771 samples, 0.07%)</title><rect x="31.8737%" y="245" width="0.0683%" height="15" fill="rgb(206,201,31)" fg:x="16468752875" fg:w="35286771"/><text x="32.1237%" y="255.50"></text></g><g><title>[libc.so.6] (16,688,786 samples, 0.03%)</title><rect x="31.9097%" y="229" width="0.0323%" height="15" fill="rgb(231,57,52)" fg:x="16487350860" fg:w="16688786"/><text x="32.1597%" y="239.50"></text></g><g><title>[libc.so.6] (13,977,169 samples, 0.03%)</title><rect x="31.9150%" y="213" width="0.0271%" height="15" fill="rgb(248,177,22)" fg:x="16490062477" fg:w="13977169"/><text x="32.1650%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (16,842,712 samples, 0.03%)</title><rect x="31.9495%" y="261" width="0.0326%" height="15" fill="rgb(215,211,37)" fg:x="16507903750" fg:w="16842712"/><text x="32.1995%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16,842,712 samples, 0.03%)</title><rect x="31.9495%" y="245" width="0.0326%" height="15" fill="rgb(241,128,51)" fg:x="16507903750" fg:w="16842712"/><text x="32.1995%" y="255.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (68,052,171 samples, 0.13%)</title><rect x="31.9821%" y="213" width="0.1317%" height="15" fill="rgb(227,165,31)" fg:x="16524746462" fg:w="68052171"/><text x="32.2321%" y="223.50"></text></g><g><title>syscall (68,052,171 samples, 0.13%)</title><rect x="31.9821%" y="197" width="0.1317%" height="15" fill="rgb(228,167,24)" fg:x="16524746462" fg:w="68052171"/><text x="32.2321%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::LockedStorage&gt;&gt; (87,245,179 samples, 0.17%)</title><rect x="31.9495%" y="309" width="0.1689%" height="15" fill="rgb(228,143,12)" fg:x="16507903750" fg:w="87245179"/><text x="32.1995%" y="319.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (87,245,179 samples, 0.17%)</title><rect x="31.9495%" y="293" width="0.1689%" height="15" fill="rgb(249,149,8)" fg:x="16507903750" fg:w="87245179"/><text x="32.1995%" y="303.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (87,245,179 samples, 0.17%)</title><rect x="31.9495%" y="277" width="0.1689%" height="15" fill="rgb(243,35,44)" fg:x="16507903750" fg:w="87245179"/><text x="32.1995%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (70,402,467 samples, 0.14%)</title><rect x="31.9821%" y="261" width="0.1363%" height="15" fill="rgb(246,89,9)" fg:x="16524746462" fg:w="70402467"/><text x="32.2321%" y="271.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (70,402,467 samples, 0.14%)</title><rect x="31.9821%" y="245" width="0.1363%" height="15" fill="rgb(233,213,13)" fg:x="16524746462" fg:w="70402467"/><text x="32.2321%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (70,402,467 samples, 0.14%)</title><rect x="31.9821%" y="229" width="0.1363%" height="15" fill="rgb(233,141,41)" fg:x="16524746462" fg:w="70402467"/><text x="32.2321%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (13,220,048 samples, 0.03%)</title><rect x="32.1282%" y="309" width="0.0256%" height="15" fill="rgb(239,167,4)" fg:x="16600239910" fg:w="13220048"/><text x="32.3782%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (13,220,048 samples, 0.03%)</title><rect x="32.1282%" y="293" width="0.0256%" height="15" fill="rgb(209,217,16)" fg:x="16600239910" fg:w="13220048"/><text x="32.3782%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (13,220,048 samples, 0.03%)</title><rect x="32.1282%" y="277" width="0.0256%" height="15" fill="rgb(219,88,35)" fg:x="16600239910" fg:w="13220048"/><text x="32.3782%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13,220,048 samples, 0.03%)</title><rect x="32.1282%" y="261" width="0.0256%" height="15" fill="rgb(220,193,23)" fg:x="16600239910" fg:w="13220048"/><text x="32.3782%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (32,175,829 samples, 0.06%)</title><rect x="32.1787%" y="277" width="0.0623%" height="15" fill="rgb(230,90,52)" fg:x="16626347603" fg:w="32175829"/><text x="32.4287%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (32,175,829 samples, 0.06%)</title><rect x="32.1787%" y="261" width="0.0623%" height="15" fill="rgb(252,106,19)" fg:x="16626347603" fg:w="32175829"/><text x="32.4287%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16,468,759 samples, 0.03%)</title><rect x="32.2410%" y="245" width="0.0319%" height="15" fill="rgb(206,74,20)" fg:x="16658523432" fg:w="16468759"/><text x="32.4910%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (16,468,759 samples, 0.03%)</title><rect x="32.2410%" y="229" width="0.0319%" height="15" fill="rgb(230,138,44)" fg:x="16658523432" fg:w="16468759"/><text x="32.4910%" y="239.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow::_{{closure}} (12,156,753 samples, 0.02%)</title><rect x="32.2729%" y="245" width="0.0235%" height="15" fill="rgb(235,182,43)" fg:x="16674992191" fg:w="12156753"/><text x="32.5229%" y="255.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (91,115,727 samples, 0.18%)</title><rect x="32.2964%" y="197" width="0.1763%" height="15" fill="rgb(242,16,51)" fg:x="16687148944" fg:w="91115727"/><text x="32.5464%" y="207.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (91,115,727 samples, 0.18%)</title><rect x="32.2964%" y="181" width="0.1763%" height="15" fill="rgb(248,9,4)" fg:x="16687148944" fg:w="91115727"/><text x="32.5464%" y="191.50"></text></g><g><title>syscall (91,115,727 samples, 0.18%)</title><rect x="32.2964%" y="165" width="0.1763%" height="15" fill="rgb(210,31,22)" fg:x="16687148944" fg:w="91115727"/><text x="32.5464%" y="175.50"></text></g><g><title>parking_lot_core::parking_lot::park (93,845,235 samples, 0.18%)</title><rect x="32.2964%" y="245" width="0.1816%" height="15" fill="rgb(239,54,39)" fg:x="16687148944" fg:w="93845235"/><text x="32.5464%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (93,845,235 samples, 0.18%)</title><rect x="32.2964%" y="229" width="0.1816%" height="15" fill="rgb(230,99,41)" fg:x="16687148944" fg:w="93845235"/><text x="32.5464%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (93,845,235 samples, 0.18%)</title><rect x="32.2964%" y="213" width="0.1816%" height="15" fill="rgb(253,106,12)" fg:x="16687148944" fg:w="93845235"/><text x="32.5464%" y="223.50"></text></g><g><title>core::hint::spin_loop (8,188,651 samples, 0.02%)</title><rect x="32.4897%" y="213" width="0.0158%" height="15" fill="rgb(213,46,41)" fg:x="16787032897" fg:w="8188651"/><text x="32.7397%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (8,188,651 samples, 0.02%)</title><rect x="32.4897%" y="197" width="0.0158%" height="15" fill="rgb(215,133,35)" fg:x="16787032897" fg:w="8188651"/><text x="32.7397%" y="207.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (14,995,604 samples, 0.03%)</title><rect x="32.4897%" y="229" width="0.0290%" height="15" fill="rgb(213,28,5)" fg:x="16787032897" fg:w="14995604"/><text x="32.7397%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6,806,953 samples, 0.01%)</title><rect x="32.5056%" y="213" width="0.0132%" height="15" fill="rgb(215,77,49)" fg:x="16795221548" fg:w="6806953"/><text x="32.7556%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6,806,953 samples, 0.01%)</title><rect x="32.5056%" y="197" width="0.0132%" height="15" fill="rgb(248,100,22)" fg:x="16795221548" fg:w="6806953"/><text x="32.7556%" y="207.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (787,665,482 samples, 1.52%)</title><rect x="32.1538%" y="309" width="1.5245%" height="15" fill="rgb(208,67,9)" fg:x="16613459958" fg:w="787665482"/><text x="32.4038%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (787,665,482 samples, 1.52%)</title><rect x="32.1538%" y="293" width="1.5245%" height="15" fill="rgb(219,133,21)" fg:x="16613459958" fg:w="787665482"/><text x="32.4038%" y="303.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (742,602,008 samples, 1.44%)</title><rect x="32.2410%" y="277" width="1.4372%" height="15" fill="rgb(246,46,29)" fg:x="16658523432" fg:w="742602008"/><text x="32.4910%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (742,602,008 samples, 1.44%)</title><rect x="32.2410%" y="261" width="1.4372%" height="15" fill="rgb(246,185,52)" fg:x="16658523432" fg:w="742602008"/><text x="32.4910%" y="271.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (620,131,261 samples, 1.20%)</title><rect x="32.4780%" y="245" width="1.2002%" height="15" fill="rgb(252,136,11)" fg:x="16780994179" fg:w="620131261"/><text x="32.7280%" y="255.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (599,096,939 samples, 1.16%)</title><rect x="32.5187%" y="229" width="1.1595%" height="15" fill="rgb(219,138,53)" fg:x="16802028501" fg:w="599096939"/><text x="32.7687%" y="239.50"></text></g><g><title>std::thread::yield_now (599,096,939 samples, 1.16%)</title><rect x="32.5187%" y="213" width="1.1595%" height="15" fill="rgb(211,51,23)" fg:x="16802028501" fg:w="599096939"/><text x="32.7687%" y="223.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (599,096,939 samples, 1.16%)</title><rect x="32.5187%" y="197" width="1.1595%" height="15" fill="rgb(247,221,28)" fg:x="16802028501" fg:w="599096939"/><text x="32.7687%" y="207.50"></text></g><g><title>__sched_yield (599,096,939 samples, 1.16%)</title><rect x="32.5187%" y="181" width="1.1595%" height="15" fill="rgb(251,222,45)" fg:x="16802028501" fg:w="599096939"/><text x="32.7687%" y="191.50"></text></g><g><title>__rustc::__rust_alloc (6,048,737 samples, 0.01%)</title><rect x="33.6976%" y="117" width="0.0117%" height="15" fill="rgb(217,162,53)" fg:x="17411125297" fg:w="6048737"/><text x="33.9476%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40,843,946 samples, 0.08%)</title><rect x="33.6976%" y="165" width="0.0790%" height="15" fill="rgb(229,93,14)" fg:x="17411125297" fg:w="40843946"/><text x="33.9476%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40,843,946 samples, 0.08%)</title><rect x="33.6976%" y="149" width="0.0790%" height="15" fill="rgb(209,67,49)" fg:x="17411125297" fg:w="40843946"/><text x="33.9476%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (40,843,946 samples, 0.08%)</title><rect x="33.6976%" y="133" width="0.0790%" height="15" fill="rgb(213,87,29)" fg:x="17411125297" fg:w="40843946"/><text x="33.9476%" y="143.50"></text></g><g><title>malloc (34,795,209 samples, 0.07%)</title><rect x="33.7093%" y="117" width="0.0673%" height="15" fill="rgb(205,151,52)" fg:x="17417174034" fg:w="34795209"/><text x="33.9593%" y="127.50"></text></g><g><title>[libc.so.6] (24,063,084 samples, 0.05%)</title><rect x="33.7301%" y="101" width="0.0466%" height="15" fill="rgb(253,215,39)" fg:x="17427906159" fg:w="24063084"/><text x="33.9801%" y="111.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="293" width="0.1473%" height="15" fill="rgb(221,220,41)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="303.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="277" width="0.1473%" height="15" fill="rgb(218,133,21)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="261" width="0.1473%" height="15" fill="rgb(221,193,43)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="271.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="245" width="0.1473%" height="15" fill="rgb(240,128,52)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="229" width="0.1473%" height="15" fill="rgb(253,114,12)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="213" width="0.1473%" height="15" fill="rgb(215,223,47)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="197" width="0.1473%" height="15" fill="rgb(248,225,23)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (76,087,268 samples, 0.15%)</title><rect x="33.6976%" y="181" width="0.1473%" height="15" fill="rgb(250,108,0)" fg:x="17411125297" fg:w="76087268"/><text x="33.9476%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35,243,322 samples, 0.07%)</title><rect x="33.7766%" y="165" width="0.0682%" height="15" fill="rgb(228,208,7)" fg:x="17451969243" fg:w="35243322"/><text x="34.0266%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35,243,322 samples, 0.07%)</title><rect x="33.7766%" y="149" width="0.0682%" height="15" fill="rgb(244,45,10)" fg:x="17451969243" fg:w="35243322"/><text x="34.0266%" y="159.50"></text></g><g><title>[libc.so.6] (35,243,322 samples, 0.07%)</title><rect x="33.7766%" y="133" width="0.0682%" height="15" fill="rgb(207,125,25)" fg:x="17451969243" fg:w="35243322"/><text x="34.0266%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (9,789,670 samples, 0.02%)</title><rect x="37.5833%" y="133" width="0.0189%" height="15" fill="rgb(210,195,18)" fg:x="19418806061" fg:w="9789670"/><text x="37.8333%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="261" width="0.3203%" height="15" fill="rgb(249,80,12)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="245" width="0.3203%" height="15" fill="rgb(221,65,9)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="229" width="0.3203%" height="15" fill="rgb(235,49,36)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="213" width="0.3203%" height="15" fill="rgb(225,32,20)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="197" width="0.3203%" height="15" fill="rgb(215,141,46)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="181" width="0.3203%" height="15" fill="rgb(250,160,47)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="165" width="0.3203%" height="15" fill="rgb(216,222,40)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="175.50"></text></g><g><title>alloc::alloc::alloc (165,479,207 samples, 0.32%)</title><rect x="37.5775%" y="149" width="0.3203%" height="15" fill="rgb(234,217,39)" fg:x="19415830611" fg:w="165479207"/><text x="37.8275%" y="159.50"></text></g><g><title>malloc (152,714,087 samples, 0.30%)</title><rect x="37.6022%" y="133" width="0.2956%" height="15" fill="rgb(207,178,40)" fg:x="19428595731" fg:w="152714087"/><text x="37.8522%" y="143.50"></text></g><g><title>[libc.so.6] (99,346,273 samples, 0.19%)</title><rect x="37.7055%" y="117" width="0.1923%" height="15" fill="rgb(221,136,13)" fg:x="19481963545" fg:w="99346273"/><text x="37.9555%" y="127.50"></text></g><g><title>[libc.so.6] (16,276,591 samples, 0.03%)</title><rect x="37.8663%" y="101" width="0.0315%" height="15" fill="rgb(249,199,10)" fg:x="19565033227" fg:w="16276591"/><text x="38.1163%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="261" width="0.6791%" height="15" fill="rgb(249,222,13)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="271.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="245" width="0.6791%" height="15" fill="rgb(244,185,38)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="229" width="0.6791%" height="15" fill="rgb(236,202,9)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="213" width="0.6791%" height="15" fill="rgb(250,229,37)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="197" width="0.6791%" height="15" fill="rgb(206,174,23)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="207.50"></text></g><g><title>&lt;u8 as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (350,859,235 samples, 0.68%)</title><rect x="37.8978%" y="181" width="0.6791%" height="15" fill="rgb(211,33,43)" fg:x="19581309818" fg:w="350859235"/><text x="38.1478%" y="191.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (1,756,421,534 samples, 3.40%)</title><rect x="38.5768%" y="261" width="3.3994%" height="15" fill="rgb(245,58,50)" fg:x="19932169053" fg:w="1756421534"/><text x="38.8268%" y="271.50">cor..</text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (1,059,058,962 samples, 2.05%)</title><rect x="39.9265%" y="245" width="2.0497%" height="15" fill="rgb(244,68,36)" fg:x="20629531625" fg:w="1059058962"/><text x="40.1765%" y="255.50">c..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (4,210,663,317 samples, 8.15%)</title><rect x="33.8448%" y="293" width="8.1493%" height="15" fill="rgb(232,229,15)" fg:x="17487212565" fg:w="4210663317"/><text x="34.0948%" y="303.50">alloc::str:..</text></g><g><title>alloc::str::convert_while_ascii (4,192,371,297 samples, 8.11%)</title><rect x="33.8802%" y="277" width="8.1139%" height="15" fill="rgb(254,30,23)" fg:x="17505504585" fg:w="4192371297"/><text x="34.1302%" y="287.50">alloc::str:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9,285,295 samples, 0.02%)</title><rect x="41.9762%" y="261" width="0.0180%" height="15" fill="rgb(235,160,14)" fg:x="21688590587" fg:w="9285295"/><text x="42.2262%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,285,295 samples, 0.02%)</title><rect x="41.9762%" y="245" width="0.0180%" height="15" fill="rgb(212,155,44)" fg:x="21688590587" fg:w="9285295"/><text x="42.2262%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,285,295 samples, 0.02%)</title><rect x="41.9762%" y="229" width="0.0180%" height="15" fill="rgb(226,2,50)" fg:x="21688590587" fg:w="9285295"/><text x="42.2262%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,646,195 samples, 0.01%)</title><rect x="41.9942%" y="293" width="0.0109%" height="15" fill="rgb(234,177,6)" fg:x="21697875882" fg:w="5646195"/><text x="42.2442%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5,646,195 samples, 0.01%)</title><rect x="41.9942%" y="277" width="0.0109%" height="15" fill="rgb(217,24,9)" fg:x="21697875882" fg:w="5646195"/><text x="42.2442%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,646,195 samples, 0.01%)</title><rect x="41.9942%" y="261" width="0.0109%" height="15" fill="rgb(220,13,46)" fg:x="21697875882" fg:w="5646195"/><text x="42.2442%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,646,195 samples, 0.01%)</title><rect x="41.9942%" y="245" width="0.0109%" height="15" fill="rgb(239,221,27)" fg:x="21697875882" fg:w="5646195"/><text x="42.2442%" y="255.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,646,195 samples, 0.01%)</title><rect x="41.9942%" y="229" width="0.0109%" height="15" fill="rgb(222,198,25)" fg:x="21697875882" fg:w="5646195"/><text x="42.2442%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (102,581,699 samples, 0.20%)</title><rect x="42.0051%" y="293" width="0.1985%" height="15" fill="rgb(211,99,13)" fg:x="21703522077" fg:w="102581699"/><text x="42.2551%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (98,835,367 samples, 0.19%)</title><rect x="42.0124%" y="277" width="0.1913%" height="15" fill="rgb(232,111,31)" fg:x="21707268409" fg:w="98835367"/><text x="42.2624%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (98,835,367 samples, 0.19%)</title><rect x="42.0124%" y="261" width="0.1913%" height="15" fill="rgb(245,82,37)" fg:x="21707268409" fg:w="98835367"/><text x="42.2624%" y="271.50"></text></g><g><title>cfree (96,242,991 samples, 0.19%)</title><rect x="42.0174%" y="245" width="0.1863%" height="15" fill="rgb(227,149,46)" fg:x="21709860785" fg:w="96242991"/><text x="42.2674%" y="255.50"></text></g><g><title>[libc.so.6] (49,497,018 samples, 0.10%)</title><rect x="42.1079%" y="229" width="0.0958%" height="15" fill="rgb(218,36,50)" fg:x="21756606758" fg:w="49497018"/><text x="42.3579%" y="239.50"></text></g><g><title>[libc.so.6] (46,094,373 samples, 0.09%)</title><rect x="42.1144%" y="213" width="0.0892%" height="15" fill="rgb(226,80,48)" fg:x="21760009403" fg:w="46094373"/><text x="42.3644%" y="223.50"></text></g><g><title>[libc.so.6] (19,585,779 samples, 0.04%)</title><rect x="42.1657%" y="197" width="0.0379%" height="15" fill="rgb(238,224,15)" fg:x="21786517997" fg:w="19585779"/><text x="42.4157%" y="207.50"></text></g><g><title>[libc.so.6] (10,617,723 samples, 0.02%)</title><rect x="42.1831%" y="181" width="0.0205%" height="15" fill="rgb(241,136,10)" fg:x="21795486053" fg:w="10617723"/><text x="42.4331%" y="191.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (19,116,038 samples, 0.04%)</title><rect x="42.2036%" y="277" width="0.0370%" height="15" fill="rgb(208,32,45)" fg:x="21806103776" fg:w="19116038"/><text x="42.4536%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (19,116,038 samples, 0.04%)</title><rect x="42.2036%" y="261" width="0.0370%" height="15" fill="rgb(207,135,9)" fg:x="21806103776" fg:w="19116038"/><text x="42.4536%" y="271.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (19,116,038 samples, 0.04%)</title><rect x="42.2036%" y="245" width="0.0370%" height="15" fill="rgb(206,86,44)" fg:x="21806103776" fg:w="19116038"/><text x="42.4536%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (18,214,893 samples, 0.04%)</title><rect x="42.2996%" y="245" width="0.0353%" height="15" fill="rgb(245,177,15)" fg:x="21855670809" fg:w="18214893"/><text x="42.5496%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (18,214,893 samples, 0.04%)</title><rect x="42.2996%" y="229" width="0.0353%" height="15" fill="rgb(206,64,50)" fg:x="21855670809" fg:w="18214893"/><text x="42.5496%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (14,191,442 samples, 0.03%)</title><rect x="42.3074%" y="213" width="0.0275%" height="15" fill="rgb(234,36,40)" fg:x="21859694260" fg:w="14191442"/><text x="42.5574%" y="223.50"></text></g><g><title>server::get_value_type (4,474,841,115 samples, 8.66%)</title><rect x="33.6782%" y="309" width="8.6606%" height="15" fill="rgb(213,64,8)" fg:x="17401125440" fg:w="4474841115"/><text x="33.9282%" y="319.50">server::get_..</text></g><g><title>core::str::&lt;impl str&gt;::parse (69,862,779 samples, 0.14%)</title><rect x="42.2036%" y="293" width="0.1352%" height="15" fill="rgb(210,75,36)" fg:x="21806103776" fg:w="69862779"/><text x="42.4536%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (50,746,741 samples, 0.10%)</title><rect x="42.2406%" y="277" width="0.0982%" height="15" fill="rgb(229,88,21)" fg:x="21825219814" fg:w="50746741"/><text x="42.4906%" y="287.50"></text></g><g><title>core::num::dec2flt::dec2flt (48,525,511 samples, 0.09%)</title><rect x="42.2449%" y="261" width="0.0939%" height="15" fill="rgb(252,204,47)" fg:x="21827441044" fg:w="48525511"/><text x="42.4949%" y="271.50"></text></g><g><title>core::fmt::Formatter::new (8,901,972 samples, 0.02%)</title><rect x="42.3605%" y="261" width="0.0172%" height="15" fill="rgb(208,77,27)" fg:x="21887144682" fg:w="8901972"/><text x="42.6105%" y="271.50"></text></g><g><title>[libc.so.6] (12,604,419 samples, 0.02%)</title><rect x="42.6245%" y="165" width="0.0244%" height="15" fill="rgb(221,76,26)" fg:x="22023535130" fg:w="12604419"/><text x="42.8745%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (50,577,973 samples, 0.10%)</title><rect x="42.7677%" y="133" width="0.0979%" height="15" fill="rgb(225,139,18)" fg:x="22097526449" fg:w="50577973"/><text x="43.0177%" y="143.50"></text></g><g><title>malloc (42,664,975 samples, 0.08%)</title><rect x="42.7830%" y="117" width="0.0826%" height="15" fill="rgb(230,137,11)" fg:x="22105439447" fg:w="42664975"/><text x="43.0330%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (163,300,165 samples, 0.32%)</title><rect x="42.5577%" y="229" width="0.3161%" height="15" fill="rgb(212,28,1)" fg:x="21989059612" fg:w="163300165"/><text x="42.8077%" y="239.50"></text></g><g><title>alloc::string::String::push_str (163,300,165 samples, 0.32%)</title><rect x="42.5577%" y="213" width="0.3161%" height="15" fill="rgb(248,164,17)" fg:x="21989059612" fg:w="163300165"/><text x="42.8077%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (163,300,165 samples, 0.32%)</title><rect x="42.5577%" y="197" width="0.3161%" height="15" fill="rgb(222,171,42)" fg:x="21989059612" fg:w="163300165"/><text x="42.8077%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (163,300,165 samples, 0.32%)</title><rect x="42.5577%" y="181" width="0.3161%" height="15" fill="rgb(243,84,45)" fg:x="21989059612" fg:w="163300165"/><text x="42.8077%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (116,220,228 samples, 0.22%)</title><rect x="42.6489%" y="165" width="0.2249%" height="15" fill="rgb(252,49,23)" fg:x="22036139549" fg:w="116220228"/><text x="42.8989%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (116,220,228 samples, 0.22%)</title><rect x="42.6489%" y="149" width="0.2249%" height="15" fill="rgb(215,19,7)" fg:x="22036139549" fg:w="116220228"/><text x="42.8989%" y="159.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (36,407,031 samples, 0.07%)</title><rect x="43.0296%" y="213" width="0.0705%" height="15" fill="rgb(238,81,41)" fg:x="22232837626" fg:w="36407031"/><text x="43.2796%" y="223.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (398,350,878 samples, 0.77%)</title><rect x="42.3466%" y="293" width="0.7710%" height="15" fill="rgb(210,199,37)" fg:x="21879949092" fg:w="398350878"/><text x="42.5966%" y="303.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (398,350,878 samples, 0.77%)</title><rect x="42.3466%" y="277" width="0.7710%" height="15" fill="rgb(244,192,49)" fg:x="21879949092" fg:w="398350878"/><text x="42.5966%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (382,253,316 samples, 0.74%)</title><rect x="42.3777%" y="261" width="0.7398%" height="15" fill="rgb(226,211,11)" fg:x="21896046654" fg:w="382253316"/><text x="42.6277%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl usize&gt;::_fmt (377,047,429 samples, 0.73%)</title><rect x="42.3878%" y="245" width="0.7297%" height="15" fill="rgb(236,162,54)" fg:x="21901252541" fg:w="377047429"/><text x="42.6378%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (125,940,193 samples, 0.24%)</title><rect x="42.8738%" y="229" width="0.2437%" height="15" fill="rgb(220,229,9)" fg:x="22152359777" fg:w="125940193"/><text x="43.1238%" y="239.50"></text></g><g><title>core::fmt::Formatter::sign_plus (9,055,313 samples, 0.02%)</title><rect x="43.1000%" y="213" width="0.0175%" height="15" fill="rgb(250,87,22)" fg:x="22269244657" fg:w="9055313"/><text x="43.3500%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (12,661,778 samples, 0.02%)</title><rect x="43.1572%" y="197" width="0.0245%" height="15" fill="rgb(239,43,17)" fg:x="22298773544" fg:w="12661778"/><text x="43.4072%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (195,152,722 samples, 0.38%)</title><rect x="43.1330%" y="245" width="0.3777%" height="15" fill="rgb(231,177,25)" fg:x="22286286463" fg:w="195152722"/><text x="43.3830%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (195,152,722 samples, 0.38%)</title><rect x="43.1330%" y="229" width="0.3777%" height="15" fill="rgb(219,179,1)" fg:x="22286286463" fg:w="195152722"/><text x="43.3830%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (195,152,722 samples, 0.38%)</title><rect x="43.1330%" y="213" width="0.3777%" height="15" fill="rgb(238,219,53)" fg:x="22286286463" fg:w="195152722"/><text x="43.3830%" y="223.50"></text></g><g><title>malloc (170,003,863 samples, 0.33%)</title><rect x="43.1817%" y="197" width="0.3290%" height="15" fill="rgb(232,167,36)" fg:x="22311435322" fg:w="170003863"/><text x="43.4317%" y="207.50"></text></g><g><title>[libc.so.6] (118,721,096 samples, 0.23%)</title><rect x="43.2809%" y="181" width="0.2298%" height="15" fill="rgb(244,19,51)" fg:x="22362718089" fg:w="118721096"/><text x="43.5309%" y="191.50"></text></g><g><title>[libc.so.6] (23,434,659 samples, 0.05%)</title><rect x="43.4653%" y="165" width="0.0454%" height="15" fill="rgb(224,6,22)" fg:x="22458004526" fg:w="23434659"/><text x="43.7153%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (285,373,520 samples, 0.55%)</title><rect x="43.1175%" y="293" width="0.5523%" height="15" fill="rgb(224,145,5)" fg:x="22278299970" fg:w="285373520"/><text x="43.3675%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (285,373,520 samples, 0.55%)</title><rect x="43.1175%" y="277" width="0.5523%" height="15" fill="rgb(234,130,49)" fg:x="22278299970" fg:w="285373520"/><text x="43.3675%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (285,373,520 samples, 0.55%)</title><rect x="43.1175%" y="261" width="0.5523%" height="15" fill="rgb(254,6,2)" fg:x="22278299970" fg:w="285373520"/><text x="43.3675%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (82,234,305 samples, 0.16%)</title><rect x="43.5107%" y="245" width="0.1592%" height="15" fill="rgb(208,96,46)" fg:x="22481439185" fg:w="82234305"/><text x="43.7607%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82,234,305 samples, 0.16%)</title><rect x="43.5107%" y="229" width="0.1592%" height="15" fill="rgb(239,3,39)" fg:x="22481439185" fg:w="82234305"/><text x="43.7607%" y="239.50"></text></g><g><title>[libc.so.6] (79,993,671 samples, 0.15%)</title><rect x="43.5150%" y="213" width="0.1548%" height="15" fill="rgb(233,210,1)" fg:x="22483679819" fg:w="79993671"/><text x="43.7650%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (7,975,427 samples, 0.02%)</title><rect x="43.8492%" y="213" width="0.0154%" height="15" fill="rgb(244,137,37)" fg:x="22656324967" fg:w="7975427"/><text x="44.0992%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (45,952,531 samples, 0.09%)</title><rect x="43.8157%" y="229" width="0.0889%" height="15" fill="rgb(240,136,2)" fg:x="22639013874" fg:w="45952531"/><text x="44.0657%" y="239.50"></text></g><g><title>malloc (20,666,011 samples, 0.04%)</title><rect x="43.8646%" y="213" width="0.0400%" height="15" fill="rgb(239,18,37)" fg:x="22664300394" fg:w="20666011"/><text x="44.1146%" y="223.50"></text></g><g><title>alloc::string::String::reserve (110,674,149 samples, 0.21%)</title><rect x="43.6935%" y="277" width="0.2142%" height="15" fill="rgb(218,185,22)" fg:x="22575884977" fg:w="110674149"/><text x="43.9435%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (108,361,677 samples, 0.21%)</title><rect x="43.6980%" y="261" width="0.2097%" height="15" fill="rgb(225,218,4)" fg:x="22578197449" fg:w="108361677"/><text x="43.9480%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (106,188,910 samples, 0.21%)</title><rect x="43.7022%" y="245" width="0.2055%" height="15" fill="rgb(230,182,32)" fg:x="22580370216" fg:w="106188910"/><text x="43.9522%" y="255.50"></text></g><g><title>alloc::string::String::push (119,451,101 samples, 0.23%)</title><rect x="43.6855%" y="293" width="0.2312%" height="15" fill="rgb(242,56,43)" fg:x="22571756556" fg:w="119451101"/><text x="43.9355%" y="303.50"></text></g><g><title>[libc.so.6] (115,136,331 samples, 0.22%)</title><rect x="44.0973%" y="245" width="0.2228%" height="15" fill="rgb(233,99,24)" fg:x="22784538006" fg:w="115136331"/><text x="44.3473%" y="255.50"></text></g><g><title>[unknown] (8,323,865 samples, 0.02%)</title><rect x="44.5380%" y="213" width="0.0161%" height="15" fill="rgb(234,209,42)" fg:x="23012252025" fg:w="8323865"/><text x="44.7880%" y="223.50"></text></g><g><title>__rustc::__rust_realloc (8,323,865 samples, 0.02%)</title><rect x="44.5380%" y="197" width="0.0161%" height="15" fill="rgb(227,7,12)" fg:x="23012252025" fg:w="8323865"/><text x="44.7880%" y="207.50"></text></g><g><title>__rustc::__rust_realloc (10,218,137 samples, 0.02%)</title><rect x="44.5541%" y="213" width="0.0198%" height="15" fill="rgb(245,203,43)" fg:x="23020575890" fg:w="10218137"/><text x="44.8041%" y="223.50"></text></g><g><title>__rustc::__rust_realloc (11,872,280 samples, 0.02%)</title><rect x="44.6721%" y="197" width="0.0230%" height="15" fill="rgb(238,205,33)" fg:x="23081530751" fg:w="11872280"/><text x="44.9221%" y="207.50"></text></g><g><title>[libc.so.6] (5,278,364 samples, 0.01%)</title><rect x="47.0066%" y="133" width="0.0102%" height="15" fill="rgb(231,56,7)" fg:x="24287726593" fg:w="5278364"/><text x="47.2566%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,605,585,311 samples, 3.11%)</title><rect x="43.9285%" y="261" width="3.1075%" height="15" fill="rgb(244,186,29)" fg:x="22697296347" fg:w="1605585311"/><text x="44.1785%" y="271.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,403,207,321 samples, 2.72%)</title><rect x="44.3202%" y="245" width="2.7158%" height="15" fill="rgb(234,111,31)" fg:x="22899674337" fg:w="1403207321"/><text x="44.5702%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,403,207,321 samples, 2.72%)</title><rect x="44.3202%" y="229" width="2.7158%" height="15" fill="rgb(241,149,10)" fg:x="22899674337" fg:w="1403207321"/><text x="44.5702%" y="239.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (1,272,087,631 samples, 2.46%)</title><rect x="44.5739%" y="213" width="2.4620%" height="15" fill="rgb(249,206,44)" fg:x="23030794027" fg:w="1272087631"/><text x="44.8239%" y="223.50">al..</text></g><g><title>realloc (1,209,478,627 samples, 2.34%)</title><rect x="44.6951%" y="197" width="2.3408%" height="15" fill="rgb(251,153,30)" fg:x="23093403031" fg:w="1209478627"/><text x="44.9451%" y="207.50">r..</text></g><g><title>[libc.so.6] (977,275,946 samples, 1.89%)</title><rect x="45.1445%" y="181" width="1.8914%" height="15" fill="rgb(239,152,38)" fg:x="23325605712" fg:w="977275946"/><text x="45.3945%" y="191.50">[..</text></g><g><title>[libc.so.6] (802,428,653 samples, 1.55%)</title><rect x="45.4829%" y="165" width="1.5530%" height="15" fill="rgb(249,139,47)" fg:x="23500453005" fg:w="802428653"/><text x="45.7329%" y="175.50"></text></g><g><title>[libc.so.6] (154,595,352 samples, 0.30%)</title><rect x="46.7367%" y="149" width="0.2992%" height="15" fill="rgb(244,64,35)" fg:x="24148286306" fg:w="154595352"/><text x="46.9867%" y="159.50"></text></g><g><title>__mprotect (9,876,701 samples, 0.02%)</title><rect x="47.0168%" y="133" width="0.0191%" height="15" fill="rgb(216,46,15)" fg:x="24293004957" fg:w="9876701"/><text x="47.2668%" y="143.50"></text></g><g><title>alloc::string::String::push_str (1,622,999,104 samples, 3.14%)</title><rect x="43.9167%" y="293" width="3.1412%" height="15" fill="rgb(250,74,19)" fg:x="22691207657" fg:w="1622999104"/><text x="44.1667%" y="303.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,622,999,104 samples, 3.14%)</title><rect x="43.9167%" y="277" width="3.1412%" height="15" fill="rgb(249,42,33)" fg:x="22691207657" fg:w="1622999104"/><text x="44.1667%" y="287.50">all..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (6,435,818 samples, 0.01%)</title><rect x="47.0454%" y="261" width="0.0125%" height="15" fill="rgb(242,149,17)" fg:x="24307770943" fg:w="6435818"/><text x="47.2954%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (6,435,818 samples, 0.01%)</title><rect x="47.0454%" y="245" width="0.0125%" height="15" fill="rgb(244,29,21)" fg:x="24307770943" fg:w="6435818"/><text x="47.2954%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6,435,818 samples, 0.01%)</title><rect x="47.0454%" y="229" width="0.0125%" height="15" fill="rgb(220,130,37)" fg:x="24307770943" fg:w="6435818"/><text x="47.2954%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,301,636 samples, 0.07%)</title><rect x="47.0578%" y="245" width="0.0741%" height="15" fill="rgb(211,67,2)" fg:x="24314206761" fg:w="38301636"/><text x="47.3078%" y="255.50"></text></g><g><title>server_lib::resp3::bulk_string_response (2,664,513,730 samples, 5.16%)</title><rect x="42.3389%" y="309" width="5.1569%" height="15" fill="rgb(235,68,52)" fg:x="21875966555" fg:w="2664513730"/><text x="42.5889%" y="319.50">server..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (226,273,524 samples, 0.44%)</title><rect x="47.0578%" y="293" width="0.4379%" height="15" fill="rgb(246,142,3)" fg:x="24314206761" fg:w="226273524"/><text x="47.3078%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (226,273,524 samples, 0.44%)</title><rect x="47.0578%" y="277" width="0.4379%" height="15" fill="rgb(241,25,7)" fg:x="24314206761" fg:w="226273524"/><text x="47.3078%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (226,273,524 samples, 0.44%)</title><rect x="47.0578%" y="261" width="0.4379%" height="15" fill="rgb(242,119,39)" fg:x="24314206761" fg:w="226273524"/><text x="47.3078%" y="271.50"></text></g><g><title>cfree (187,971,888 samples, 0.36%)</title><rect x="47.1320%" y="245" width="0.3638%" height="15" fill="rgb(241,98,45)" fg:x="24352508397" fg:w="187971888"/><text x="47.3820%" y="255.50"></text></g><g><title>[libc.so.6] (104,838,901 samples, 0.20%)</title><rect x="47.2929%" y="229" width="0.2029%" height="15" fill="rgb(254,28,30)" fg:x="24435641384" fg:w="104838901"/><text x="47.5429%" y="239.50"></text></g><g><title>[libc.so.6] (63,571,855 samples, 0.12%)</title><rect x="47.3727%" y="213" width="0.1230%" height="15" fill="rgb(241,142,54)" fg:x="24476908430" fg:w="63571855"/><text x="47.6227%" y="223.50"></text></g><g><title>[libc.so.6] (42,269,615 samples, 0.08%)</title><rect x="47.4140%" y="197" width="0.0818%" height="15" fill="rgb(222,85,15)" fg:x="24498210670" fg:w="42269615"/><text x="47.6640%" y="207.50"></text></g><g><title>[libc.so.6] (6,203,907 samples, 0.01%)</title><rect x="47.4838%" y="181" width="0.0120%" height="15" fill="rgb(210,85,47)" fg:x="24534276378" fg:w="6203907"/><text x="47.7338%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (45,498,057 samples, 0.09%)</title><rect x="47.5796%" y="293" width="0.0881%" height="15" fill="rgb(224,206,25)" fg:x="24583786890" fg:w="45498057"/><text x="47.8296%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (41,190,727 samples, 0.08%)</title><rect x="47.5879%" y="277" width="0.0797%" height="15" fill="rgb(243,201,19)" fg:x="24588094220" fg:w="41190727"/><text x="47.8379%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (41,190,727 samples, 0.08%)</title><rect x="47.5879%" y="261" width="0.0797%" height="15" fill="rgb(236,59,4)" fg:x="24588094220" fg:w="41190727"/><text x="47.8379%" y="271.50"></text></g><g><title>[libc.so.6] (5,988,305 samples, 0.01%)</title><rect x="47.8093%" y="85" width="0.0116%" height="15" fill="rgb(254,179,45)" fg:x="24702489962" fg:w="5988305"/><text x="48.0593%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (10,788,486 samples, 0.02%)</title><rect x="47.8209%" y="85" width="0.0209%" height="15" fill="rgb(226,14,10)" fg:x="24708478267" fg:w="10788486"/><text x="48.0709%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (620,993,278 samples, 1.20%)</title><rect x="47.7954%" y="197" width="1.2019%" height="15" fill="rgb(244,27,41)" fg:x="24695311095" fg:w="620993278"/><text x="48.0454%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (620,993,278 samples, 1.20%)</title><rect x="47.7954%" y="181" width="1.2019%" height="15" fill="rgb(235,35,32)" fg:x="24695311095" fg:w="620993278"/><text x="48.0454%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (620,993,278 samples, 1.20%)</title><rect x="47.7954%" y="165" width="1.2019%" height="15" fill="rgb(218,68,31)" fg:x="24695311095" fg:w="620993278"/><text x="48.0454%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (620,993,278 samples, 1.20%)</title><rect x="47.7954%" y="149" width="1.2019%" height="15" fill="rgb(207,120,37)" fg:x="24695311095" fg:w="620993278"/><text x="48.0454%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (618,782,270 samples, 1.20%)</title><rect x="47.7997%" y="133" width="1.1976%" height="15" fill="rgb(227,98,0)" fg:x="24697522103" fg:w="618782270"/><text x="48.0497%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (618,782,270 samples, 1.20%)</title><rect x="47.7997%" y="117" width="1.1976%" height="15" fill="rgb(207,7,3)" fg:x="24697522103" fg:w="618782270"/><text x="48.0497%" y="127.50"></text></g><g><title>alloc::alloc::alloc (618,782,270 samples, 1.20%)</title><rect x="47.7997%" y="101" width="1.1976%" height="15" fill="rgb(206,98,19)" fg:x="24697522103" fg:w="618782270"/><text x="48.0497%" y="111.50"></text></g><g><title>malloc (595,655,937 samples, 1.15%)</title><rect x="47.8445%" y="85" width="1.1528%" height="15" fill="rgb(217,5,26)" fg:x="24720648436" fg:w="595655937"/><text x="48.0945%" y="95.50"></text></g><g><title>[libc.so.6] (383,333,559 samples, 0.74%)</title><rect x="48.2554%" y="69" width="0.7419%" height="15" fill="rgb(235,190,38)" fg:x="24932970814" fg:w="383333559"/><text x="48.5054%" y="79.50"></text></g><g><title>[libc.so.6] (76,228,011 samples, 0.15%)</title><rect x="48.8498%" y="53" width="0.1475%" height="15" fill="rgb(247,86,24)" fg:x="25240076362" fg:w="76228011"/><text x="49.0998%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,059,402,564 samples, 2.05%)</title><rect x="47.7802%" y="261" width="2.0504%" height="15" fill="rgb(205,101,16)" fg:x="24687461623" fg:w="1059402564"/><text x="48.0302%" y="271.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,051,553,092 samples, 2.04%)</title><rect x="47.7954%" y="245" width="2.0352%" height="15" fill="rgb(246,168,33)" fg:x="24695311095" fg:w="1051553092"/><text x="48.0454%" y="255.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,051,553,092 samples, 2.04%)</title><rect x="47.7954%" y="229" width="2.0352%" height="15" fill="rgb(231,114,1)" fg:x="24695311095" fg:w="1051553092"/><text x="48.0454%" y="239.50">a..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (1,051,553,092 samples, 2.04%)</title><rect x="47.7954%" y="213" width="2.0352%" height="15" fill="rgb(207,184,53)" fg:x="24695311095" fg:w="1051553092"/><text x="48.0454%" y="223.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (430,559,814 samples, 0.83%)</title><rect x="48.9973%" y="197" width="0.8333%" height="15" fill="rgb(224,95,51)" fg:x="25316304373" fg:w="430559814"/><text x="49.2473%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (430,559,814 samples, 0.83%)</title><rect x="48.9973%" y="181" width="0.8333%" height="15" fill="rgb(212,188,45)" fg:x="25316304373" fg:w="430559814"/><text x="49.2473%" y="191.50"></text></g><g><title>[libc.so.6] (426,072,195 samples, 0.82%)</title><rect x="49.0060%" y="165" width="0.8246%" height="15" fill="rgb(223,154,38)" fg:x="25320791992" fg:w="426072195"/><text x="49.2560%" y="175.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (1,080,265,087 samples, 2.09%)</title><rect x="47.7444%" y="277" width="2.0908%" height="15" fill="rgb(251,22,52)" fg:x="24668916633" fg:w="1080265087"/><text x="47.9944%" y="287.50">&lt;..</text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (1,125,563,406 samples, 2.18%)</title><rect x="47.6676%" y="293" width="2.1784%" height="15" fill="rgb(229,209,22)" fg:x="24629284947" fg:w="1125563406"/><text x="47.9176%" y="303.50">&lt;..</text></g><g><title>&lt;std::time::SystemTime as core::clone::Clone&gt;::clone (5,666,633 samples, 0.01%)</title><rect x="49.8351%" y="277" width="0.0110%" height="15" fill="rgb(234,138,34)" fg:x="25749181720" fg:w="5666633"/><text x="50.0851%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,std::collections::hash::map::HashMap&lt;alloc::string::String,server_lib::storage::StorageEntry&gt;&gt;&gt; (46,720,377 samples, 0.09%)</title><rect x="49.8461%" y="293" width="0.0904%" height="15" fill="rgb(212,95,11)" fg:x="25754848353" fg:w="46720377"/><text x="50.0961%" y="303.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (46,720,377 samples, 0.09%)</title><rect x="49.8461%" y="277" width="0.0904%" height="15" fill="rgb(240,179,47)" fg:x="25754848353" fg:w="46720377"/><text x="50.0961%" y="287.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (46,720,377 samples, 0.09%)</title><rect x="49.8461%" y="261" width="0.0904%" height="15" fill="rgb(240,163,11)" fg:x="25754848353" fg:w="46720377"/><text x="50.0961%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46,720,377 samples, 0.09%)</title><rect x="49.8461%" y="245" width="0.0904%" height="15" fill="rgb(236,37,12)" fg:x="25754848353" fg:w="46720377"/><text x="50.0961%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46,720,377 samples, 0.09%)</title><rect x="49.8461%" y="229" width="0.0904%" height="15" fill="rgb(232,164,16)" fg:x="25754848353" fg:w="46720377"/><text x="50.0961%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (14,787,858 samples, 0.03%)</title><rect x="49.9365%" y="293" width="0.0286%" height="15" fill="rgb(244,205,15)" fg:x="25801568730" fg:w="14787858"/><text x="50.1865%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (14,787,858 samples, 0.03%)</title><rect x="49.9365%" y="277" width="0.0286%" height="15" fill="rgb(223,117,47)" fg:x="25801568730" fg:w="14787858"/><text x="50.1865%" y="287.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (69,654,499 samples, 0.13%)</title><rect x="49.9651%" y="293" width="0.1348%" height="15" fill="rgb(244,107,35)" fg:x="25816356588" fg:w="69654499"/><text x="50.2151%" y="303.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (69,654,499 samples, 0.13%)</title><rect x="49.9651%" y="277" width="0.1348%" height="15" fill="rgb(205,140,8)" fg:x="25816356588" fg:w="69654499"/><text x="50.2151%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (62,049,253 samples, 0.12%)</title><rect x="49.9798%" y="261" width="0.1201%" height="15" fill="rgb(228,84,46)" fg:x="25823961834" fg:w="62049253"/><text x="50.2298%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (62,049,253 samples, 0.12%)</title><rect x="49.9798%" y="245" width="0.1201%" height="15" fill="rgb(254,188,9)" fg:x="25823961834" fg:w="62049253"/><text x="50.2298%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::gt (135,832,304 samples, 0.26%)</title><rect x="50.1125%" y="277" width="0.2629%" height="15" fill="rgb(206,112,54)" fg:x="25892501080" fg:w="135832304"/><text x="50.3625%" y="287.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (135,832,304 samples, 0.26%)</title><rect x="50.1125%" y="261" width="0.2629%" height="15" fill="rgb(216,84,49)" fg:x="25892501080" fg:w="135832304"/><text x="50.3625%" y="271.50"></text></g><g><title>std::time::SystemTime::duration_since (25,321,465 samples, 0.05%)</title><rect x="50.3793%" y="277" width="0.0490%" height="15" fill="rgb(214,194,35)" fg:x="26030387142" fg:w="25321465"/><text x="50.6293%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (20,203,541 samples, 0.04%)</title><rect x="50.3893%" y="261" width="0.0391%" height="15" fill="rgb(249,28,3)" fg:x="26035505066" fg:w="20203541"/><text x="50.6393%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (20,203,541 samples, 0.04%)</title><rect x="50.3893%" y="245" width="0.0391%" height="15" fill="rgb(222,56,52)" fg:x="26035505066" fg:w="20203541"/><text x="50.6393%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (9,566,700 samples, 0.02%)</title><rect x="50.4098%" y="229" width="0.0185%" height="15" fill="rgb(245,217,50)" fg:x="26046141907" fg:w="9566700"/><text x="50.6598%" y="239.50"></text></g><g><title>core::cmp::PartialOrd::ge (9,566,700 samples, 0.02%)</title><rect x="50.4098%" y="213" width="0.0185%" height="15" fill="rgb(213,201,24)" fg:x="26046141907" fg:w="9566700"/><text x="50.6598%" y="223.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (9,566,700 samples, 0.02%)</title><rect x="50.4098%" y="197" width="0.0185%" height="15" fill="rgb(248,116,28)" fg:x="26046141907" fg:w="9566700"/><text x="50.6598%" y="207.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (248,277,480 samples, 0.48%)</title><rect x="50.0999%" y="293" width="0.4805%" height="15" fill="rgb(219,72,43)" fg:x="25886011087" fg:w="248277480"/><text x="50.3499%" y="303.50"></text></g><g><title>std::time::SystemTime::now (78,579,960 samples, 0.15%)</title><rect x="50.4284%" y="277" width="0.1521%" height="15" fill="rgb(209,138,14)" fg:x="26055708607" fg:w="78579960"/><text x="50.6784%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (78,579,960 samples, 0.15%)</title><rect x="50.4284%" y="261" width="0.1521%" height="15" fill="rgb(222,18,33)" fg:x="26055708607" fg:w="78579960"/><text x="50.6784%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (78,579,960 samples, 0.15%)</title><rect x="50.4284%" y="245" width="0.1521%" height="15" fill="rgb(213,199,7)" fg:x="26055708607" fg:w="78579960"/><text x="50.6784%" y="255.50"></text></g><g><title>clock_gettime (64,561,948 samples, 0.12%)</title><rect x="50.4555%" y="229" width="0.1250%" height="15" fill="rgb(250,110,10)" fg:x="26069726619" fg:w="64561948"/><text x="50.7055%" y="239.50"></text></g><g><title>__vdso_clock_gettime (35,747,526 samples, 0.07%)</title><rect x="50.5113%" y="213" width="0.0692%" height="15" fill="rgb(248,123,6)" fg:x="26098541041" fg:w="35747526"/><text x="50.7613%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,090,452 samples, 0.03%)</title><rect x="50.5925%" y="165" width="0.0331%" height="15" fill="rgb(206,91,31)" fg:x="26140538044" fg:w="17090452"/><text x="50.8425%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,967,410 samples, 0.03%)</title><rect x="50.5986%" y="149" width="0.0270%" height="15" fill="rgb(211,154,13)" fg:x="26143661086" fg:w="13967410"/><text x="50.8486%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (38,683,204 samples, 0.07%)</title><rect x="50.5850%" y="213" width="0.0749%" height="15" fill="rgb(225,148,7)" fg:x="26136657998" fg:w="38683204"/><text x="50.8350%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (38,683,204 samples, 0.07%)</title><rect x="50.5850%" y="197" width="0.0749%" height="15" fill="rgb(220,160,43)" fg:x="26136657998" fg:w="38683204"/><text x="50.8350%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (38,683,204 samples, 0.07%)</title><rect x="50.5850%" y="181" width="0.0749%" height="15" fill="rgb(213,52,39)" fg:x="26136657998" fg:w="38683204"/><text x="50.8350%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (17,712,706 samples, 0.03%)</title><rect x="50.6256%" y="165" width="0.0343%" height="15" fill="rgb(243,137,7)" fg:x="26157628496" fg:w="17712706"/><text x="50.8756%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11,084,555 samples, 0.02%)</title><rect x="50.6384%" y="149" width="0.0215%" height="15" fill="rgb(230,79,13)" fg:x="26164256647" fg:w="11084555"/><text x="50.8884%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (38,323,803 samples, 0.07%)</title><rect x="50.6679%" y="133" width="0.0742%" height="15" fill="rgb(247,105,23)" fg:x="26179481036" fg:w="38323803"/><text x="50.9179%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (12,861,442 samples, 0.02%)</title><rect x="50.7172%" y="117" width="0.0249%" height="15" fill="rgb(223,179,41)" fg:x="26204943397" fg:w="12861442"/><text x="50.9672%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (107,525,822 samples, 0.21%)</title><rect x="50.5804%" y="245" width="0.2081%" height="15" fill="rgb(218,9,34)" fg:x="26134288567" fg:w="107525822"/><text x="50.8304%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (105,156,391 samples, 0.20%)</title><rect x="50.5850%" y="229" width="0.2035%" height="15" fill="rgb(222,106,8)" fg:x="26136657998" fg:w="105156391"/><text x="50.8350%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (62,333,353 samples, 0.12%)</title><rect x="50.6679%" y="213" width="0.1206%" height="15" fill="rgb(211,220,0)" fg:x="26179481036" fg:w="62333353"/><text x="50.9179%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (62,333,353 samples, 0.12%)</title><rect x="50.6679%" y="197" width="0.1206%" height="15" fill="rgb(229,52,16)" fg:x="26179481036" fg:w="62333353"/><text x="50.9179%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (62,333,353 samples, 0.12%)</title><rect x="50.6679%" y="181" width="0.1206%" height="15" fill="rgb(212,155,18)" fg:x="26179481036" fg:w="62333353"/><text x="50.9179%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (62,333,353 samples, 0.12%)</title><rect x="50.6679%" y="165" width="0.1206%" height="15" fill="rgb(242,21,14)" fg:x="26179481036" fg:w="62333353"/><text x="50.9179%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (62,333,353 samples, 0.12%)</title><rect x="50.6679%" y="149" width="0.1206%" height="15" fill="rgb(222,19,48)" fg:x="26179481036" fg:w="62333353"/><text x="50.9179%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (24,009,550 samples, 0.05%)</title><rect x="50.7421%" y="133" width="0.0465%" height="15" fill="rgb(232,45,27)" fg:x="26217804839" fg:w="24009550"/><text x="50.9921%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21,918,431 samples, 0.04%)</title><rect x="50.7461%" y="117" width="0.0424%" height="15" fill="rgb(249,103,42)" fg:x="26219895958" fg:w="21918431"/><text x="50.9961%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (9,974,762 samples, 0.02%)</title><rect x="50.7692%" y="101" width="0.0193%" height="15" fill="rgb(246,81,33)" fg:x="26231839627" fg:w="9974762"/><text x="51.0192%" y="111.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,609,315 samples, 0.01%)</title><rect x="50.7885%" y="197" width="0.0109%" height="15" fill="rgb(252,33,42)" fg:x="26241814389" fg:w="5609315"/><text x="51.0385%" y="207.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5,609,315 samples, 0.01%)</title><rect x="50.7885%" y="181" width="0.0109%" height="15" fill="rgb(209,212,41)" fg:x="26241814389" fg:w="5609315"/><text x="51.0385%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (20,323,168 samples, 0.04%)</title><rect x="50.7994%" y="197" width="0.0393%" height="15" fill="rgb(207,154,6)" fg:x="26247423704" fg:w="20323168"/><text x="51.0494%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20,323,168 samples, 0.04%)</title><rect x="50.7994%" y="181" width="0.0393%" height="15" fill="rgb(223,64,47)" fg:x="26247423704" fg:w="20323168"/><text x="51.0494%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20,323,168 samples, 0.04%)</title><rect x="50.7994%" y="165" width="0.0393%" height="15" fill="rgb(211,161,38)" fg:x="26247423704" fg:w="20323168"/><text x="51.0494%" y="175.50"></text></g><g><title>alloc::str::&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="149" width="0.0262%" height="15" fill="rgb(219,138,40)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="133" width="0.0262%" height="15" fill="rgb(241,228,46)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="143.50"></text></g><g><title>alloc::string::String::as_str (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="117" width="0.0262%" height="15" fill="rgb(223,209,38)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="101" width="0.0262%" height="15" fill="rgb(236,164,45)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="85" width="0.0262%" height="15" fill="rgb(231,15,5)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="69" width="0.0262%" height="15" fill="rgb(252,35,15)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="53" width="0.0262%" height="15" fill="rgb(248,181,18)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (13,535,851 samples, 0.03%)</title><rect x="50.8464%" y="37" width="0.0262%" height="15" fill="rgb(233,39,42)" fg:x="26271680905" fg:w="13535851"/><text x="51.0964%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (316,657,870 samples, 0.61%)</title><rect x="50.8464%" y="197" width="0.6129%" height="15" fill="rgb(238,110,33)" fg:x="26271680905" fg:w="316657870"/><text x="51.0964%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (316,657,870 samples, 0.61%)</title><rect x="50.8464%" y="181" width="0.6129%" height="15" fill="rgb(233,195,10)" fg:x="26271680905" fg:w="316657870"/><text x="51.0964%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (316,657,870 samples, 0.61%)</title><rect x="50.8464%" y="165" width="0.6129%" height="15" fill="rgb(254,105,3)" fg:x="26271680905" fg:w="316657870"/><text x="51.0964%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (303,122,019 samples, 0.59%)</title><rect x="50.8725%" y="149" width="0.5867%" height="15" fill="rgb(221,225,9)" fg:x="26285216756" fg:w="303122019"/><text x="51.1225%" y="159.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (303,122,019 samples, 0.59%)</title><rect x="50.8725%" y="133" width="0.5867%" height="15" fill="rgb(224,227,45)" fg:x="26285216756" fg:w="303122019"/><text x="51.1225%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (303,122,019 samples, 0.59%)</title><rect x="50.8725%" y="117" width="0.5867%" height="15" fill="rgb(229,198,43)" fg:x="26285216756" fg:w="303122019"/><text x="51.1225%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (303,122,019 samples, 0.59%)</title><rect x="50.8725%" y="101" width="0.5867%" height="15" fill="rgb(206,209,35)" fg:x="26285216756" fg:w="303122019"/><text x="51.1225%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (303,122,019 samples, 0.59%)</title><rect x="50.8725%" y="85" width="0.5867%" height="15" fill="rgb(245,195,53)" fg:x="26285216756" fg:w="303122019"/><text x="51.1225%" y="95.50"></text></g><g><title>[libc.so.6] (131,341,581 samples, 0.25%)</title><rect x="51.2050%" y="69" width="0.2542%" height="15" fill="rgb(240,92,26)" fg:x="26456997194" fg:w="131341581"/><text x="51.4550%" y="79.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (456,977,722 samples, 0.88%)</title><rect x="50.5804%" y="293" width="0.8844%" height="15" fill="rgb(207,40,23)" fg:x="26134288567" fg:w="456977722"/><text x="50.8304%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (456,977,722 samples, 0.88%)</title><rect x="50.5804%" y="277" width="0.8844%" height="15" fill="rgb(223,111,35)" fg:x="26134288567" fg:w="456977722"/><text x="50.8304%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (456,977,722 samples, 0.88%)</title><rect x="50.5804%" y="261" width="0.8844%" height="15" fill="rgb(229,147,28)" fg:x="26134288567" fg:w="456977722"/><text x="50.8304%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (349,451,900 samples, 0.68%)</title><rect x="50.7885%" y="245" width="0.6763%" height="15" fill="rgb(211,29,28)" fg:x="26241814389" fg:w="349451900"/><text x="51.0385%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (349,451,900 samples, 0.68%)</title><rect x="50.7885%" y="229" width="0.6763%" height="15" fill="rgb(228,72,33)" fg:x="26241814389" fg:w="349451900"/><text x="51.0385%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (349,451,900 samples, 0.68%)</title><rect x="50.7885%" y="213" width="0.6763%" height="15" fill="rgb(205,214,31)" fg:x="26241814389" fg:w="349451900"/><text x="51.0385%" y="223.50"></text></g><g><title>server_lib::storage::LockedStorage::get_entry (2,099,968,575 samples, 4.06%)</title><rect x="47.5061%" y="309" width="4.0643%" height="15" fill="rgb(224,111,15)" fg:x="24545811568" fg:w="2099968575"/><text x="47.7561%" y="319.50">serv..</text></g><g><title>std::time::SystemTime::now (54,513,854 samples, 0.11%)</title><rect x="51.4649%" y="293" width="0.1055%" height="15" fill="rgb(253,21,26)" fg:x="26591266289" fg:w="54513854"/><text x="51.7149%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (54,513,854 samples, 0.11%)</title><rect x="51.4649%" y="277" width="0.1055%" height="15" fill="rgb(245,139,43)" fg:x="26591266289" fg:w="54513854"/><text x="51.7149%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (52,888,210 samples, 0.10%)</title><rect x="51.4680%" y="261" width="0.1024%" height="15" fill="rgb(252,170,7)" fg:x="26592891933" fg:w="52888210"/><text x="51.7180%" y="271.50"></text></g><g><title>clock_gettime (36,119,987 samples, 0.07%)</title><rect x="51.5005%" y="245" width="0.0699%" height="15" fill="rgb(231,118,14)" fg:x="26609660156" fg:w="36119987"/><text x="51.7505%" y="255.50"></text></g><g><title>__vdso_clock_gettime (36,119,987 samples, 0.07%)</title><rect x="51.5005%" y="229" width="0.0699%" height="15" fill="rgb(238,83,0)" fg:x="26609660156" fg:w="36119987"/><text x="51.7505%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (145,551,355 samples, 0.28%)</title><rect x="51.6421%" y="277" width="0.2817%" height="15" fill="rgb(221,39,39)" fg:x="26682818341" fg:w="145551355"/><text x="51.8921%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (145,551,355 samples, 0.28%)</title><rect x="51.6421%" y="261" width="0.2817%" height="15" fill="rgb(222,119,46)" fg:x="26682818341" fg:w="145551355"/><text x="51.8921%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (145,551,355 samples, 0.28%)</title><rect x="51.6421%" y="245" width="0.2817%" height="15" fill="rgb(222,165,49)" fg:x="26682818341" fg:w="145551355"/><text x="51.8921%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (143,648,245 samples, 0.28%)</title><rect x="51.6458%" y="229" width="0.2780%" height="15" fill="rgb(219,113,52)" fg:x="26684721451" fg:w="143648245"/><text x="51.8958%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (143,648,245 samples, 0.28%)</title><rect x="51.6458%" y="213" width="0.2780%" height="15" fill="rgb(214,7,15)" fg:x="26684721451" fg:w="143648245"/><text x="51.8958%" y="223.50"></text></g><g><title>cfree (141,064,971 samples, 0.27%)</title><rect x="51.6508%" y="197" width="0.2730%" height="15" fill="rgb(235,32,4)" fg:x="26687304725" fg:w="141064971"/><text x="51.9008%" y="207.50"></text></g><g><title>[libc.so.6] (70,386,153 samples, 0.14%)</title><rect x="51.7875%" y="181" width="0.1362%" height="15" fill="rgb(238,90,54)" fg:x="26757983543" fg:w="70386153"/><text x="52.0375%" y="191.50"></text></g><g><title>[libc.so.6] (64,211,995 samples, 0.12%)</title><rect x="51.7995%" y="165" width="0.1243%" height="15" fill="rgb(213,208,19)" fg:x="26764157701" fg:w="64211995"/><text x="52.0495%" y="175.50"></text></g><g><title>[libc.so.6] (46,487,074 samples, 0.09%)</title><rect x="51.8338%" y="149" width="0.0900%" height="15" fill="rgb(233,156,4)" fg:x="26781882622" fg:w="46487074"/><text x="52.0838%" y="159.50"></text></g><g><title>[libc.so.6] (11,824,305 samples, 0.02%)</title><rect x="51.9009%" y="133" width="0.0229%" height="15" fill="rgb(207,194,5)" fg:x="26816545391" fg:w="11824305"/><text x="52.1509%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,std::collections::hash::map::HashMap&lt;alloc::string::String,server_lib::storage::StorageEntry&gt;&gt;&gt; (11,345,808 samples, 0.02%)</title><rect x="51.9238%" y="277" width="0.0220%" height="15" fill="rgb(206,111,30)" fg:x="26828369696" fg:w="11345808"/><text x="52.1738%" y="287.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (11,345,808 samples, 0.02%)</title><rect x="51.9238%" y="261" width="0.0220%" height="15" fill="rgb(243,70,54)" fg:x="26828369696" fg:w="11345808"/><text x="52.1738%" y="271.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (11,345,808 samples, 0.02%)</title><rect x="51.9238%" y="245" width="0.0220%" height="15" fill="rgb(242,28,8)" fg:x="26828369696" fg:w="11345808"/><text x="52.1738%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (9,409,234 samples, 0.02%)</title><rect x="51.9275%" y="229" width="0.0182%" height="15" fill="rgb(219,106,18)" fg:x="26830306270" fg:w="9409234"/><text x="52.1775%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9,409,234 samples, 0.02%)</title><rect x="51.9275%" y="213" width="0.0182%" height="15" fill="rgb(244,222,10)" fg:x="26830306270" fg:w="9409234"/><text x="52.1775%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5,168,789 samples, 0.01%)</title><rect x="51.9457%" y="277" width="0.0100%" height="15" fill="rgb(236,179,52)" fg:x="26839715504" fg:w="5168789"/><text x="52.1957%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_add (5,168,789 samples, 0.01%)</title><rect x="51.9457%" y="261" width="0.0100%" height="15" fill="rgb(213,23,39)" fg:x="26839715504" fg:w="5168789"/><text x="52.1957%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16,935,769 samples, 0.03%)</title><rect x="51.9638%" y="261" width="0.0328%" height="15" fill="rgb(238,48,10)" fg:x="26849071089" fg:w="16935769"/><text x="52.2138%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (14,309,998 samples, 0.03%)</title><rect x="51.9689%" y="245" width="0.0277%" height="15" fill="rgb(251,196,23)" fg:x="26851696860" fg:w="14309998"/><text x="52.2189%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (14,309,998 samples, 0.03%)</title><rect x="51.9689%" y="229" width="0.0277%" height="15" fill="rgb(250,152,24)" fg:x="26851696860" fg:w="14309998"/><text x="52.2189%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockReadGuard&lt;parking_lot::raw_rwlock::RawRwLock,std::collections::hash::map::HashMap&lt;alloc::string::String,server_lib::storage::StorageEntry&gt;&gt;&gt; (7,170,802 samples, 0.01%)</title><rect x="51.9966%" y="261" width="0.0139%" height="15" fill="rgb(209,150,17)" fg:x="26866006858" fg:w="7170802"/><text x="52.2466%" y="271.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockReadGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (7,170,802 samples, 0.01%)</title><rect x="51.9966%" y="245" width="0.0139%" height="15" fill="rgb(234,202,34)" fg:x="26866006858" fg:w="7170802"/><text x="52.2466%" y="255.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_shared (7,170,802 samples, 0.01%)</title><rect x="51.9966%" y="229" width="0.0139%" height="15" fill="rgb(253,148,53)" fg:x="26866006858" fg:w="7170802"/><text x="52.2466%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (20,640,632 samples, 0.04%)</title><rect x="52.0105%" y="213" width="0.0399%" height="15" fill="rgb(218,129,16)" fg:x="26873177660" fg:w="20640632"/><text x="52.2605%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (20,640,632 samples, 0.04%)</title><rect x="52.0105%" y="197" width="0.0399%" height="15" fill="rgb(216,85,19)" fg:x="26873177660" fg:w="20640632"/><text x="52.2605%" y="207.50"></text></g><g><title>server_lib::storage::LockedStorage::is_full (61,228,698 samples, 0.12%)</title><rect x="51.9638%" y="277" width="0.1185%" height="15" fill="rgb(235,228,7)" fg:x="26849071089" fg:w="61228698"/><text x="52.2138%" y="287.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (37,122,127 samples, 0.07%)</title><rect x="52.0105%" y="261" width="0.0718%" height="15" fill="rgb(245,175,0)" fg:x="26873177660" fg:w="37122127"/><text x="52.2605%" y="271.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (37,122,127 samples, 0.07%)</title><rect x="52.0105%" y="245" width="0.0718%" height="15" fill="rgb(208,168,36)" fg:x="26873177660" fg:w="37122127"/><text x="52.2605%" y="255.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::try_lock_shared_fast (37,122,127 samples, 0.07%)</title><rect x="52.0105%" y="229" width="0.0718%" height="15" fill="rgb(246,171,24)" fg:x="26873177660" fg:w="37122127"/><text x="52.2605%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16,481,495 samples, 0.03%)</title><rect x="52.0504%" y="213" width="0.0319%" height="15" fill="rgb(215,142,24)" fg:x="26893818292" fg:w="16481495"/><text x="52.3004%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (16,481,495 samples, 0.03%)</title><rect x="52.0504%" y="197" width="0.0319%" height="15" fill="rgb(250,187,7)" fg:x="26893818292" fg:w="16481495"/><text x="52.3004%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,393,874 samples, 0.01%)</title><rect x="52.0966%" y="261" width="0.0104%" height="15" fill="rgb(228,66,33)" fg:x="26917650877" fg:w="5393874"/><text x="52.3466%" y="271.50"></text></g><g><title>cfree (8,708,550 samples, 0.02%)</title><rect x="52.1070%" y="261" width="0.0169%" height="15" fill="rgb(234,215,21)" fg:x="26923044751" fg:w="8708550"/><text x="52.3570%" y="271.50"></text></g><g><title>core::mem::replace (20,185,236 samples, 0.04%)</title><rect x="52.1248%" y="245" width="0.0391%" height="15" fill="rgb(222,191,20)" fg:x="26932257752" fg:w="20185236"/><text x="52.3748%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5,941,690 samples, 0.01%)</title><rect x="52.1639%" y="213" width="0.0115%" height="15" fill="rgb(245,79,54)" fg:x="26952442988" fg:w="5941690"/><text x="52.4139%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,941,690 samples, 0.01%)</title><rect x="52.1639%" y="197" width="0.0115%" height="15" fill="rgb(240,10,37)" fg:x="26952442988" fg:w="5941690"/><text x="52.4139%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5,941,690 samples, 0.01%)</title><rect x="52.1639%" y="181" width="0.0115%" height="15" fill="rgb(214,192,32)" fg:x="26952442988" fg:w="5941690"/><text x="52.4139%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5,941,690 samples, 0.01%)</title><rect x="52.1639%" y="165" width="0.0115%" height="15" fill="rgb(209,36,54)" fg:x="26952442988" fg:w="5941690"/><text x="52.4139%" y="175.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10,843,522 samples, 0.02%)</title><rect x="52.1754%" y="197" width="0.0210%" height="15" fill="rgb(220,10,11)" fg:x="26958384678" fg:w="10843522"/><text x="52.4254%" y="207.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (10,843,522 samples, 0.02%)</title><rect x="52.1754%" y="181" width="0.0210%" height="15" fill="rgb(221,106,17)" fg:x="26958384678" fg:w="10843522"/><text x="52.4254%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (17,163,737 samples, 0.03%)</title><rect x="52.1964%" y="197" width="0.0332%" height="15" fill="rgb(251,142,44)" fg:x="26969228200" fg:w="17163737"/><text x="52.4464%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17,163,737 samples, 0.03%)</title><rect x="52.1964%" y="181" width="0.0332%" height="15" fill="rgb(238,13,15)" fg:x="26969228200" fg:w="17163737"/><text x="52.4464%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17,163,737 samples, 0.03%)</title><rect x="52.1964%" y="165" width="0.0332%" height="15" fill="rgb(208,107,27)" fg:x="26969228200" fg:w="17163737"/><text x="52.4464%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (126,402,070 samples, 0.24%)</title><rect x="52.2296%" y="181" width="0.2446%" height="15" fill="rgb(205,136,37)" fg:x="26986391937" fg:w="126402070"/><text x="52.4796%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (126,402,070 samples, 0.24%)</title><rect x="52.2296%" y="165" width="0.2446%" height="15" fill="rgb(250,205,27)" fg:x="26986391937" fg:w="126402070"/><text x="52.4796%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (126,402,070 samples, 0.24%)</title><rect x="52.2296%" y="149" width="0.2446%" height="15" fill="rgb(210,80,43)" fg:x="26986391937" fg:w="126402070"/><text x="52.4796%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (126,402,070 samples, 0.24%)</title><rect x="52.2296%" y="133" width="0.2446%" height="15" fill="rgb(247,160,36)" fg:x="26986391937" fg:w="126402070"/><text x="52.4796%" y="143.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (126,402,070 samples, 0.24%)</title><rect x="52.2296%" y="117" width="0.2446%" height="15" fill="rgb(234,13,49)" fg:x="26986391937" fg:w="126402070"/><text x="52.4796%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (124,974,710 samples, 0.24%)</title><rect x="52.2324%" y="101" width="0.2419%" height="15" fill="rgb(234,122,0)" fg:x="26987819297" fg:w="124974710"/><text x="52.4824%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (124,974,710 samples, 0.24%)</title><rect x="52.2324%" y="85" width="0.2419%" height="15" fill="rgb(207,146,38)" fg:x="26987819297" fg:w="124974710"/><text x="52.4824%" y="95.50"></text></g><g><title>[libc.so.6] (61,813,409 samples, 0.12%)</title><rect x="52.3546%" y="69" width="0.1196%" height="15" fill="rgb(207,177,25)" fg:x="27050980598" fg:w="61813409"/><text x="52.6046%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (128,250,080 samples, 0.25%)</title><rect x="52.2296%" y="197" width="0.2482%" height="15" fill="rgb(211,178,42)" fg:x="26986391937" fg:w="128250080"/><text x="52.4796%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (163,548,499 samples, 0.32%)</title><rect x="52.1639%" y="245" width="0.3165%" height="15" fill="rgb(230,69,54)" fg:x="26952442988" fg:w="163548499"/><text x="52.4139%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (163,548,499 samples, 0.32%)</title><rect x="52.1639%" y="229" width="0.3165%" height="15" fill="rgb(214,135,41)" fg:x="26952442988" fg:w="163548499"/><text x="52.4139%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (157,606,809 samples, 0.31%)</title><rect x="52.1754%" y="213" width="0.3050%" height="15" fill="rgb(237,67,25)" fg:x="26958384678" fg:w="157606809"/><text x="52.4254%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (16,918,109 samples, 0.03%)</title><rect x="52.4902%" y="213" width="0.0327%" height="15" fill="rgb(222,189,50)" fg:x="27121021298" fg:w="16918109"/><text x="52.7402%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16,918,109 samples, 0.03%)</title><rect x="52.4902%" y="197" width="0.0327%" height="15" fill="rgb(245,148,34)" fg:x="27121021298" fg:w="16918109"/><text x="52.7402%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16,918,109 samples, 0.03%)</title><rect x="52.4902%" y="181" width="0.0327%" height="15" fill="rgb(222,29,6)" fg:x="27121021298" fg:w="16918109"/><text x="52.7402%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (10,483,054 samples, 0.02%)</title><rect x="52.5026%" y="165" width="0.0203%" height="15" fill="rgb(221,189,43)" fg:x="27127456353" fg:w="10483054"/><text x="52.7526%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24,857,532 samples, 0.05%)</title><rect x="52.5316%" y="117" width="0.0481%" height="15" fill="rgb(207,36,27)" fg:x="27142434004" fg:w="24857532"/><text x="52.7816%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (8,224,974 samples, 0.02%)</title><rect x="52.5638%" y="101" width="0.0159%" height="15" fill="rgb(217,90,24)" fg:x="27159066562" fg:w="8224974"/><text x="52.8138%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (61,148,686 samples, 0.12%)</title><rect x="52.4804%" y="245" width="0.1183%" height="15" fill="rgb(224,66,35)" fg:x="27115991487" fg:w="61148686"/><text x="52.7304%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (56,118,875 samples, 0.11%)</title><rect x="52.4902%" y="229" width="0.1086%" height="15" fill="rgb(221,13,50)" fg:x="27121021298" fg:w="56118875"/><text x="52.7402%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="213" width="0.0672%" height="15" fill="rgb(236,68,49)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="197" width="0.0672%" height="15" fill="rgb(229,146,28)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="181" width="0.0672%" height="15" fill="rgb(225,31,38)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="165" width="0.0672%" height="15" fill="rgb(250,208,3)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="149" width="0.0672%" height="15" fill="rgb(246,54,23)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (34,706,169 samples, 0.07%)</title><rect x="52.5316%" y="133" width="0.0672%" height="15" fill="rgb(243,76,11)" fg:x="27142434004" fg:w="34706169"/><text x="52.7816%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (9,848,637 samples, 0.02%)</title><rect x="52.5797%" y="117" width="0.0191%" height="15" fill="rgb(245,21,50)" fg:x="27167291536" fg:w="9848637"/><text x="52.8297%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,848,637 samples, 0.02%)</title><rect x="52.5797%" y="101" width="0.0191%" height="15" fill="rgb(228,9,43)" fg:x="27167291536" fg:w="9848637"/><text x="52.8297%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (266,386,590 samples, 0.52%)</title><rect x="52.0861%" y="277" width="0.5156%" height="15" fill="rgb(208,100,47)" fg:x="26912240256" fg:w="266386590"/><text x="52.3361%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (246,873,545 samples, 0.48%)</title><rect x="52.1239%" y="261" width="0.4778%" height="15" fill="rgb(232,26,8)" fg:x="26931753301" fg:w="246873545"/><text x="52.3739%" y="271.50"></text></g><g><title>clock_gettime (34,848,019 samples, 0.07%)</title><rect x="52.6173%" y="229" width="0.0674%" height="15" fill="rgb(216,166,38)" fg:x="27186721148" fg:w="34848019"/><text x="52.8673%" y="239.50"></text></g><g><title>__vdso_clock_gettime (18,091,616 samples, 0.04%)</title><rect x="52.6498%" y="213" width="0.0350%" height="15" fill="rgb(251,202,51)" fg:x="27203477551" fg:w="18091616"/><text x="52.8998%" y="223.50"></text></g><g><title>server::process_request (13,091,694,445 samples, 25.34%)</title><rect x="27.3519%" y="325" width="25.3377%" height="15" fill="rgb(254,216,34)" fg:x="14132363266" fg:w="13091694445"/><text x="27.6019%" y="335.50">server::process_request</text></g><g><title>server_lib::storage::LockedStorage::insert_entry (578,277,568 samples, 1.12%)</title><rect x="51.5704%" y="309" width="1.1192%" height="15" fill="rgb(251,32,27)" fg:x="26645780143" fg:w="578277568"/><text x="51.8204%" y="319.50"></text></g><g><title>server_lib::storage::LockedStorage::insert_with_ttl (575,973,863 samples, 1.11%)</title><rect x="51.5748%" y="293" width="1.1147%" height="15" fill="rgb(208,127,28)" fg:x="26648083848" fg:w="575973863"/><text x="51.8248%" y="303.50"></text></g><g><title>std::time::SystemTime::now (45,430,865 samples, 0.09%)</title><rect x="52.6017%" y="277" width="0.0879%" height="15" fill="rgb(224,137,22)" fg:x="27178626846" fg:w="45430865"/><text x="52.8517%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (45,430,865 samples, 0.09%)</title><rect x="52.6017%" y="261" width="0.0879%" height="15" fill="rgb(254,70,32)" fg:x="27178626846" fg:w="45430865"/><text x="52.8517%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (45,430,865 samples, 0.09%)</title><rect x="52.6017%" y="245" width="0.0879%" height="15" fill="rgb(229,75,37)" fg:x="27178626846" fg:w="45430865"/><text x="52.8517%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (20,101,475 samples, 0.04%)</title><rect x="52.7633%" y="309" width="0.0389%" height="15" fill="rgb(252,64,23)" fg:x="27262133706" fg:w="20101475"/><text x="53.0133%" y="319.50"></text></g><g><title>server_lib::resp3::get_data_type (89,984,253 samples, 0.17%)</title><rect x="52.8118%" y="309" width="0.1742%" height="15" fill="rgb(232,162,48)" fg:x="27287217650" fg:w="89984253"/><text x="53.0618%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,403,752 samples, 0.04%)</title><rect x="53.4144%" y="293" width="0.0395%" height="15" fill="rgb(246,160,12)" fg:x="27598544271" fg:w="20403752"/><text x="53.6644%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19,264,665 samples, 0.04%)</title><rect x="53.4539%" y="293" width="0.0373%" height="15" fill="rgb(247,166,0)" fg:x="27618948023" fg:w="19264665"/><text x="53.7039%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (58,115,972 samples, 0.11%)</title><rect x="53.4911%" y="245" width="0.1125%" height="15" fill="rgb(249,219,21)" fg:x="27638212688" fg:w="58115972"/><text x="53.7411%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (58,115,972 samples, 0.11%)</title><rect x="53.4911%" y="229" width="0.1125%" height="15" fill="rgb(205,209,3)" fg:x="27638212688" fg:w="58115972"/><text x="53.7411%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (58,115,972 samples, 0.11%)</title><rect x="53.4911%" y="213" width="0.1125%" height="15" fill="rgb(243,44,1)" fg:x="27638212688" fg:w="58115972"/><text x="53.7411%" y="223.50"></text></g><g><title>malloc (45,770,492 samples, 0.09%)</title><rect x="53.5150%" y="197" width="0.0886%" height="15" fill="rgb(206,159,16)" fg:x="27650558168" fg:w="45770492"/><text x="53.7650%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (91,853,904 samples, 0.18%)</title><rect x="53.4911%" y="293" width="0.1778%" height="15" fill="rgb(244,77,30)" fg:x="27638212688" fg:w="91853904"/><text x="53.7411%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (91,853,904 samples, 0.18%)</title><rect x="53.4911%" y="277" width="0.1778%" height="15" fill="rgb(218,69,12)" fg:x="27638212688" fg:w="91853904"/><text x="53.7411%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (91,853,904 samples, 0.18%)</title><rect x="53.4911%" y="261" width="0.1778%" height="15" fill="rgb(212,87,7)" fg:x="27638212688" fg:w="91853904"/><text x="53.7411%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33,737,932 samples, 0.07%)</title><rect x="53.6036%" y="245" width="0.0653%" height="15" fill="rgb(245,114,25)" fg:x="27696328660" fg:w="33737932"/><text x="53.8536%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33,737,932 samples, 0.07%)</title><rect x="53.6036%" y="229" width="0.0653%" height="15" fill="rgb(210,61,42)" fg:x="27696328660" fg:w="33737932"/><text x="53.8536%" y="239.50"></text></g><g><title>[libc.so.6] (27,732,968 samples, 0.05%)</title><rect x="53.6152%" y="213" width="0.0537%" height="15" fill="rgb(211,52,33)" fg:x="27702333624" fg:w="27732968"/><text x="53.8652%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (98,538,046 samples, 0.19%)</title><rect x="53.6689%" y="293" width="0.1907%" height="15" fill="rgb(234,58,33)" fg:x="27730066592" fg:w="98538046"/><text x="53.9189%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (84,752,200 samples, 0.16%)</title><rect x="53.6956%" y="277" width="0.1640%" height="15" fill="rgb(220,115,36)" fg:x="27743852438" fg:w="84752200"/><text x="53.9456%" y="287.50"></text></g><g><title>core::str::validations::run_utf8_validation (46,783,127 samples, 0.09%)</title><rect x="53.7691%" y="261" width="0.0905%" height="15" fill="rgb(243,153,54)" fg:x="27781821511" fg:w="46783127"/><text x="54.0191%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,085,742 samples, 0.02%)</title><rect x="53.8988%" y="229" width="0.0156%" height="15" fill="rgb(251,47,18)" fg:x="27848859154" fg:w="8085742"/><text x="54.1488%" y="239.50"></text></g><g><title>__rustc::__rust_alloc (41,508,551 samples, 0.08%)</title><rect x="54.0412%" y="213" width="0.0803%" height="15" fill="rgb(242,102,42)" fg:x="27922437664" fg:w="41508551"/><text x="54.2912%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (270,282,794 samples, 0.52%)</title><rect x="53.9145%" y="229" width="0.5231%" height="15" fill="rgb(234,31,38)" fg:x="27856944896" fg:w="270282794"/><text x="54.1645%" y="239.50"></text></g><g><title>malloc (159,026,144 samples, 0.31%)</title><rect x="54.1298%" y="213" width="0.3078%" height="15" fill="rgb(221,117,51)" fg:x="27968201546" fg:w="159026144"/><text x="54.3798%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (305,676,247 samples, 0.59%)</title><rect x="53.8690%" y="277" width="0.5916%" height="15" fill="rgb(212,20,18)" fg:x="27833447006" fg:w="305676247"/><text x="54.1190%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (296,746,989 samples, 0.57%)</title><rect x="53.8863%" y="261" width="0.5743%" height="15" fill="rgb(245,133,36)" fg:x="27842376264" fg:w="296746989"/><text x="54.1363%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (296,746,989 samples, 0.57%)</title><rect x="53.8863%" y="245" width="0.5743%" height="15" fill="rgb(212,6,19)" fg:x="27842376264" fg:w="296746989"/><text x="54.1363%" y="255.50"></text></g><g><title>malloc (7,320,975 samples, 0.01%)</title><rect x="54.4464%" y="229" width="0.0142%" height="15" fill="rgb(218,1,36)" fg:x="28131802278" fg:w="7320975"/><text x="54.6964%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (357,990,584 samples, 0.69%)</title><rect x="53.8596%" y="293" width="0.6929%" height="15" fill="rgb(246,84,54)" fg:x="27828604638" fg:w="357990584"/><text x="54.1096%" y="303.50"></text></g><g><title>core::ptr::write (47,471,969 samples, 0.09%)</title><rect x="54.4606%" y="277" width="0.0919%" height="15" fill="rgb(242,110,6)" fg:x="28139123253" fg:w="47471969"/><text x="54.7106%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (94,397,366 samples, 0.18%)</title><rect x="54.5525%" y="293" width="0.1827%" height="15" fill="rgb(214,47,5)" fg:x="28186595222" fg:w="94397366"/><text x="54.8025%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (94,397,366 samples, 0.18%)</title><rect x="54.5525%" y="277" width="0.1827%" height="15" fill="rgb(218,159,25)" fg:x="28186595222" fg:w="94397366"/><text x="54.8025%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (87,428,945 samples, 0.17%)</title><rect x="54.5660%" y="261" width="0.1692%" height="15" fill="rgb(215,211,28)" fg:x="28193563643" fg:w="87428945"/><text x="54.8160%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (87,428,945 samples, 0.17%)</title><rect x="54.5660%" y="245" width="0.1692%" height="15" fill="rgb(238,59,32)" fg:x="28193563643" fg:w="87428945"/><text x="54.8160%" y="255.50"></text></g><g><title>malloc (75,805,092 samples, 0.15%)</title><rect x="54.5885%" y="229" width="0.1467%" height="15" fill="rgb(226,82,3)" fg:x="28205187496" fg:w="75805092"/><text x="54.8385%" y="239.50"></text></g><g><title>cfree (53,489,681 samples, 0.10%)</title><rect x="54.7352%" y="293" width="0.1035%" height="15" fill="rgb(240,164,32)" fg:x="28280992588" fg:w="53489681"/><text x="54.9852%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,343,416 samples, 0.02%)</title><rect x="54.8482%" y="261" width="0.0181%" height="15" fill="rgb(232,46,7)" fg:x="28339406048" fg:w="9343416"/><text x="55.0982%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (43,928,416 samples, 0.09%)</title><rect x="54.8411%" y="293" width="0.0850%" height="15" fill="rgb(229,129,53)" fg:x="28335733512" fg:w="43928416"/><text x="55.0911%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (43,928,416 samples, 0.09%)</title><rect x="54.8411%" y="277" width="0.0850%" height="15" fill="rgb(234,188,29)" fg:x="28335733512" fg:w="43928416"/><text x="55.0911%" y="287.50"></text></g><g><title>cfree (30,912,464 samples, 0.06%)</title><rect x="54.8663%" y="261" width="0.0598%" height="15" fill="rgb(246,141,4)" fg:x="28348749464" fg:w="30912464"/><text x="55.1163%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9,967,050 samples, 0.02%)</title><rect x="54.9261%" y="293" width="0.0193%" height="15" fill="rgb(229,23,39)" fg:x="28379661928" fg:w="9967050"/><text x="55.1761%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9,967,050 samples, 0.02%)</title><rect x="54.9261%" y="277" width="0.0193%" height="15" fill="rgb(206,12,3)" fg:x="28379661928" fg:w="9967050"/><text x="55.1761%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,967,050 samples, 0.02%)</title><rect x="54.9261%" y="261" width="0.0193%" height="15" fill="rgb(252,226,20)" fg:x="28379661928" fg:w="9967050"/><text x="55.1761%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9,967,050 samples, 0.02%)</title><rect x="54.9261%" y="245" width="0.0193%" height="15" fill="rgb(216,123,35)" fg:x="28379661928" fg:w="9967050"/><text x="55.1761%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (48,510,785 samples, 0.09%)</title><rect x="54.9454%" y="293" width="0.0939%" height="15" fill="rgb(212,68,40)" fg:x="28389628978" fg:w="48510785"/><text x="55.1954%" y="303.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (48,510,785 samples, 0.09%)</title><rect x="54.9454%" y="277" width="0.0939%" height="15" fill="rgb(254,125,32)" fg:x="28389628978" fg:w="48510785"/><text x="55.1954%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (48,510,785 samples, 0.09%)</title><rect x="54.9454%" y="261" width="0.0939%" height="15" fill="rgb(253,97,22)" fg:x="28389628978" fg:w="48510785"/><text x="55.1954%" y="271.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (48,510,785 samples, 0.09%)</title><rect x="54.9454%" y="245" width="0.0939%" height="15" fill="rgb(241,101,14)" fg:x="28389628978" fg:w="48510785"/><text x="55.1954%" y="255.50"></text></g><g><title>server_lib::resp3::get_data_type (28,301,125 samples, 0.05%)</title><rect x="55.0393%" y="293" width="0.0548%" height="15" fill="rgb(238,103,29)" fg:x="28438139763" fg:w="28301125"/><text x="55.2893%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,968,508 samples, 0.06%)</title><rect x="55.4773%" y="277" width="0.0619%" height="15" fill="rgb(233,195,47)" fg:x="28664435003" fg:w="31968508"/><text x="55.7273%" y="287.50"></text></g><g><title>__rustc::__rust_alloc (56,315,784 samples, 0.11%)</title><rect x="55.6365%" y="181" width="0.1090%" height="15" fill="rgb(246,218,30)" fg:x="28746699105" fg:w="56315784"/><text x="55.8865%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (517,904,964 samples, 1.00%)</title><rect x="55.5865%" y="229" width="1.0024%" height="15" fill="rgb(219,145,47)" fg:x="28720873302" fg:w="517904964"/><text x="55.8365%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (517,904,964 samples, 1.00%)</title><rect x="55.5865%" y="213" width="1.0024%" height="15" fill="rgb(243,12,26)" fg:x="28720873302" fg:w="517904964"/><text x="55.8365%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (517,904,964 samples, 1.00%)</title><rect x="55.5865%" y="197" width="1.0024%" height="15" fill="rgb(214,87,16)" fg:x="28720873302" fg:w="517904964"/><text x="55.8365%" y="207.50"></text></g><g><title>malloc (435,763,377 samples, 0.84%)</title><rect x="55.7455%" y="181" width="0.8434%" height="15" fill="rgb(208,99,42)" fg:x="28803014889" fg:w="435763377"/><text x="55.9955%" y="191.50"></text></g><g><title>[libc.so.6] (180,705,510 samples, 0.35%)</title><rect x="56.2391%" y="165" width="0.3497%" height="15" fill="rgb(253,99,2)" fg:x="29058072756" fg:w="180705510"/><text x="56.4891%" y="175.50"></text></g><g><title>[libc.so.6] (25,090,668 samples, 0.05%)</title><rect x="56.5403%" y="149" width="0.0486%" height="15" fill="rgb(220,168,23)" fg:x="29213687598" fg:w="25090668"/><text x="56.7903%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (639,409,626 samples, 1.24%)</title><rect x="55.5392%" y="277" width="1.2375%" height="15" fill="rgb(242,38,24)" fg:x="28696403511" fg:w="639409626"/><text x="55.7892%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (639,409,626 samples, 1.24%)</title><rect x="55.5392%" y="261" width="1.2375%" height="15" fill="rgb(225,182,9)" fg:x="28696403511" fg:w="639409626"/><text x="55.7892%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (639,409,626 samples, 1.24%)</title><rect x="55.5392%" y="245" width="1.2375%" height="15" fill="rgb(243,178,37)" fg:x="28696403511" fg:w="639409626"/><text x="55.7892%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (97,034,871 samples, 0.19%)</title><rect x="56.5889%" y="229" width="0.1878%" height="15" fill="rgb(232,139,19)" fg:x="29238778266" fg:w="97034871"/><text x="56.8389%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (97,034,871 samples, 0.19%)</title><rect x="56.5889%" y="213" width="0.1878%" height="15" fill="rgb(225,201,24)" fg:x="29238778266" fg:w="97034871"/><text x="56.8389%" y="223.50"></text></g><g><title>[libc.so.6] (84,821,004 samples, 0.16%)</title><rect x="56.6125%" y="197" width="0.1642%" height="15" fill="rgb(221,47,46)" fg:x="29250992133" fg:w="84821004"/><text x="56.8625%" y="207.50"></text></g><g><title>alloc::string::String::from_utf8 (81,567,423 samples, 0.16%)</title><rect x="56.7767%" y="277" width="0.1579%" height="15" fill="rgb(249,23,13)" fg:x="29335813137" fg:w="81567423"/><text x="57.0267%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (77,432,843 samples, 0.15%)</title><rect x="56.7847%" y="261" width="0.1499%" height="15" fill="rgb(219,9,5)" fg:x="29339947717" fg:w="77432843"/><text x="57.0347%" y="271.50"></text></g><g><title>core::str::validations::run_utf8_validation (58,205,827 samples, 0.11%)</title><rect x="56.8219%" y="245" width="0.1127%" height="15" fill="rgb(254,171,16)" fg:x="29359174733" fg:w="58205827"/><text x="57.0719%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (24,315,001 samples, 0.05%)</title><rect x="56.9956%" y="213" width="0.0471%" height="15" fill="rgb(230,171,20)" fg:x="29448920560" fg:w="24315001"/><text x="57.2456%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (8,223,135 samples, 0.02%)</title><rect x="57.1026%" y="197" width="0.0159%" height="15" fill="rgb(210,71,41)" fg:x="29504222502" fg:w="8223135"/><text x="57.3526%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9,528,020 samples, 0.02%)</title><rect x="57.1185%" y="197" width="0.0184%" height="15" fill="rgb(206,173,20)" fg:x="29512445637" fg:w="9528020"/><text x="57.3685%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (115,642,719 samples, 0.22%)</title><rect x="57.0427%" y="213" width="0.2238%" height="15" fill="rgb(233,88,34)" fg:x="29473235561" fg:w="115642719"/><text x="57.2927%" y="223.50"></text></g><g><title>malloc (66,904,623 samples, 0.13%)</title><rect x="57.1370%" y="197" width="0.1295%" height="15" fill="rgb(223,209,46)" fg:x="29521973657" fg:w="66904623"/><text x="57.3870%" y="207.50"></text></g><g><title>[libc.so.6] (6,280,000 samples, 0.01%)</title><rect x="57.2543%" y="181" width="0.0122%" height="15" fill="rgb(250,43,18)" fg:x="29582598280" fg:w="6280000"/><text x="57.5043%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (166,485,623 samples, 0.32%)</title><rect x="56.9607%" y="261" width="0.3222%" height="15" fill="rgb(208,13,10)" fg:x="29430871095" fg:w="166485623"/><text x="57.2107%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (154,579,395 samples, 0.30%)</title><rect x="56.9837%" y="245" width="0.2992%" height="15" fill="rgb(212,200,36)" fg:x="29442777323" fg:w="154579395"/><text x="57.2337%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (154,579,395 samples, 0.30%)</title><rect x="56.9837%" y="229" width="0.2992%" height="15" fill="rgb(225,90,30)" fg:x="29442777323" fg:w="154579395"/><text x="57.2337%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10,974,616 samples, 0.02%)</title><rect x="57.2829%" y="261" width="0.0212%" height="15" fill="rgb(236,182,39)" fg:x="29597356718" fg:w="10974616"/><text x="57.5329%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10,974,616 samples, 0.02%)</title><rect x="57.2829%" y="245" width="0.0212%" height="15" fill="rgb(212,144,35)" fg:x="29597356718" fg:w="10974616"/><text x="57.5329%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (10,974,616 samples, 0.02%)</title><rect x="57.2829%" y="229" width="0.0212%" height="15" fill="rgb(228,63,44)" fg:x="29597356718" fg:w="10974616"/><text x="57.5329%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (10,974,616 samples, 0.02%)</title><rect x="57.2829%" y="213" width="0.0212%" height="15" fill="rgb(228,109,6)" fg:x="29597356718" fg:w="10974616"/><text x="57.5329%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (195,325,697 samples, 0.38%)</title><rect x="56.9346%" y="277" width="0.3780%" height="15" fill="rgb(238,117,24)" fg:x="29417380560" fg:w="195325697"/><text x="57.1846%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (7,262,421 samples, 0.01%)</title><rect x="57.3126%" y="277" width="0.0141%" height="15" fill="rgb(242,26,26)" fg:x="29612706257" fg:w="7262421"/><text x="57.5626%" y="287.50"></text></g><g><title>cfree (114,816,179 samples, 0.22%)</title><rect x="57.3266%" y="277" width="0.2222%" height="15" fill="rgb(221,92,48)" fg:x="29619968678" fg:w="114816179"/><text x="57.5766%" y="287.50"></text></g><g><title>[libc.so.6] (6,139,916 samples, 0.01%)</title><rect x="57.5370%" y="261" width="0.0119%" height="15" fill="rgb(209,209,32)" fg:x="29728644941" fg:w="6139916"/><text x="57.7870%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,962,695 samples, 0.03%)</title><rect x="57.5489%" y="245" width="0.0309%" height="15" fill="rgb(221,70,22)" fg:x="29734784857" fg:w="15962695"/><text x="57.7989%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (108,442,035 samples, 0.21%)</title><rect x="57.5489%" y="277" width="0.2099%" height="15" fill="rgb(248,145,5)" fg:x="29734784857" fg:w="108442035"/><text x="57.7989%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (108,442,035 samples, 0.21%)</title><rect x="57.5489%" y="261" width="0.2099%" height="15" fill="rgb(226,116,26)" fg:x="29734784857" fg:w="108442035"/><text x="57.7989%" y="271.50"></text></g><g><title>cfree (92,479,340 samples, 0.18%)</title><rect x="57.5798%" y="245" width="0.1790%" height="15" fill="rgb(244,5,17)" fg:x="29750747552" fg:w="92479340"/><text x="57.8298%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,859,784 samples, 0.01%)</title><rect x="57.7587%" y="277" width="0.0113%" height="15" fill="rgb(252,159,33)" fg:x="29843226892" fg:w="5859784"/><text x="58.0087%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,859,784 samples, 0.01%)</title><rect x="57.7587%" y="261" width="0.0113%" height="15" fill="rgb(206,71,0)" fg:x="29843226892" fg:w="5859784"/><text x="58.0087%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (5,859,784 samples, 0.01%)</title><rect x="57.7587%" y="245" width="0.0113%" height="15" fill="rgb(233,118,54)" fg:x="29843226892" fg:w="5859784"/><text x="58.0087%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (11,118,849 samples, 0.02%)</title><rect x="57.8706%" y="213" width="0.0215%" height="15" fill="rgb(234,83,48)" fg:x="29901048557" fg:w="11118849"/><text x="58.1206%" y="223.50"></text></g><g><title>server_lib::resp3::parse_request (2,692,761,527 samples, 5.21%)</title><rect x="52.6896%" y="325" width="5.2116%" height="15" fill="rgb(228,3,54)" fg:x="27224057711" fg:w="2692761527"/><text x="52.9396%" y="335.50">server..</text></g><g><title>server_lib::resp3::parse_arrays (2,539,617,335 samples, 4.92%)</title><rect x="52.9860%" y="309" width="4.9152%" height="15" fill="rgb(226,155,13)" fg:x="27377201903" fg:w="2539617335"/><text x="53.2360%" y="319.50">server..</text></g><g><title>server_lib::resp3::parse_bulk_strings (1,450,378,350 samples, 2.81%)</title><rect x="55.0941%" y="293" width="2.8071%" height="15" fill="rgb(241,28,37)" fg:x="28466440888" fg:w="1450378350"/><text x="55.3441%" y="303.50">se..</text></g><g><title>core::str::&lt;impl str&gt;::parse (67,732,562 samples, 0.13%)</title><rect x="57.7701%" y="277" width="0.1311%" height="15" fill="rgb(233,93,10)" fg:x="29849086676" fg:w="67732562"/><text x="58.0201%" y="287.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (67,732,562 samples, 0.13%)</title><rect x="57.7701%" y="261" width="0.1311%" height="15" fill="rgb(225,113,19)" fg:x="29849086676" fg:w="67732562"/><text x="58.0201%" y="271.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (67,732,562 samples, 0.13%)</title><rect x="57.7701%" y="245" width="0.1311%" height="15" fill="rgb(241,2,18)" fg:x="29849086676" fg:w="67732562"/><text x="58.0201%" y="255.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (67,732,562 samples, 0.13%)</title><rect x="57.7701%" y="229" width="0.1311%" height="15" fill="rgb(228,207,21)" fg:x="29849086676" fg:w="67732562"/><text x="58.0201%" y="239.50"></text></g><g><title>__send (21,264,076,556 samples, 41.15%)</title><rect x="57.9599%" y="277" width="41.1546%" height="15" fill="rgb(213,211,35)" fg:x="29947184399" fg:w="21264076556"/><text x="58.2099%" y="287.50">__send</text></g><g><title>[libc.so.6] (21,241,194,937 samples, 41.11%)</title><rect x="58.0042%" y="261" width="41.1103%" height="15" fill="rgb(209,83,10)" fg:x="29970066018" fg:w="21241194937"/><text x="58.2542%" y="271.50">[libc.so.6]</text></g><g><title>[libc.so.6] (21,192,273,960 samples, 41.02%)</title><rect x="58.0989%" y="245" width="41.0156%" height="15" fill="rgb(209,164,1)" fg:x="30018986995" fg:w="21192273960"/><text x="58.3489%" y="255.50">[libc.so.6]</text></g><g><title>[libc.so.6] (21,089,525,799 samples, 40.82%)</title><rect x="58.2978%" y="229" width="40.8168%" height="15" fill="rgb(213,184,43)" fg:x="30121735156" fg:w="21089525799"/><text x="58.5478%" y="239.50">[libc.so.6]</text></g><g><title>[unknown] (5,386,145 samples, 0.01%)</title><rect x="99.1041%" y="213" width="0.0104%" height="15" fill="rgb(231,61,34)" fg:x="51205874810" fg:w="5386145"/><text x="99.3541%" y="223.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (21,311,514,437 samples, 41.25%)</title><rect x="57.9557%" y="309" width="41.2464%" height="15" fill="rgb(235,75,3)" fg:x="29944996995" fg:w="21311514437"/><text x="58.2057%" y="319.50">&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write</text></g><g><title>std::sys::net::connection::socket::TcpStream::write (21,311,514,437 samples, 41.25%)</title><rect x="57.9557%" y="293" width="41.2464%" height="15" fill="rgb(220,106,47)" fg:x="29944996995" fg:w="21311514437"/><text x="58.2057%" y="303.50">std::sys::net::connection::socket::TcpStream::write</text></g><g><title>std::sys::pal::unix::cvt (45,250,477 samples, 0.09%)</title><rect x="99.1145%" y="277" width="0.0876%" height="15" fill="rgb(210,196,33)" fg:x="51211260955" fg:w="45250477"/><text x="99.3645%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49,530,145,501 samples, 95.86%)</title><rect x="3.3446%" y="373" width="95.8609%" height="15" fill="rgb(229,154,42)" fg:x="1728092499" fg:w="49530145501"/><text x="3.5946%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>server::main::_{{closure}} (49,518,913,045 samples, 95.84%)</title><rect x="3.3663%" y="357" width="95.8392%" height="15" fill="rgb(228,114,26)" fg:x="1739324955" fg:w="49518913045"/><text x="3.6163%" y="367.50">server::main::_{{closure}}</text></g><g><title>server::handle_client (49,518,913,045 samples, 95.84%)</title><rect x="3.3663%" y="341" width="95.8392%" height="15" fill="rgb(208,144,1)" fg:x="1739324955" fg:w="49518913045"/><text x="3.6163%" y="351.50">server::handle_client</text></g><g><title>std::io::Write::write_all (21,341,418,762 samples, 41.30%)</title><rect x="57.9012%" y="325" width="41.3043%" height="15" fill="rgb(239,112,37)" fg:x="29916819238" fg:w="21341418762"/><text x="58.1512%" y="335.50">std::io::Write::write_all</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (22,824,043 samples, 0.04%)</title><rect x="99.2055%" y="373" width="0.0442%" height="15" fill="rgb(210,96,50)" fg:x="51258238000" fg:w="22824043"/><text x="99.4555%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (28,702,595 samples, 0.06%)</title><rect x="99.2496%" y="373" width="0.0556%" height="15" fill="rgb(222,178,2)" fg:x="51281062043" fg:w="28702595"/><text x="99.4996%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,769,350 samples, 0.01%)</title><rect x="99.3052%" y="373" width="0.0131%" height="15" fill="rgb(226,74,18)" fg:x="51309764638" fg:w="6769350"/><text x="99.5552%" y="383.50"></text></g><g><title>malloc (53,986,502 samples, 0.10%)</title><rect x="99.3183%" y="373" width="0.1045%" height="15" fill="rgb(225,67,54)" fg:x="51316533988" fg:w="53986502"/><text x="99.5683%" y="383.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (11,303,924 samples, 0.02%)</title><rect x="99.4228%" y="373" width="0.0219%" height="15" fill="rgb(251,92,32)" fg:x="51370520490" fg:w="11303924"/><text x="99.6728%" y="383.50"></text></g><g><title>realloc (20,656,875 samples, 0.04%)</title><rect x="99.4484%" y="373" width="0.0400%" height="15" fill="rgb(228,149,22)" fg:x="51383762338" fg:w="20656875"/><text x="99.6984%" y="383.50"></text></g><g><title>recv (7,329,639 samples, 0.01%)</title><rect x="99.4884%" y="373" width="0.0142%" height="15" fill="rgb(243,54,13)" fg:x="51404419213" fg:w="7329639"/><text x="99.7384%" y="383.50"></text></g><g><title>server::get_value_type (34,781,174 samples, 0.07%)</title><rect x="99.5026%" y="373" width="0.0673%" height="15" fill="rgb(243,180,28)" fg:x="51411748852" fg:w="34781174"/><text x="99.7526%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (5,939,151 samples, 0.01%)</title><rect x="99.5584%" y="357" width="0.0115%" height="15" fill="rgb(208,167,24)" fg:x="51440590875" fg:w="5939151"/><text x="99.8084%" y="367.50"></text></g><g><title>server_lib::resp3::bulk_string_response (13,913,649 samples, 0.03%)</title><rect x="99.5789%" y="373" width="0.0269%" height="15" fill="rgb(245,73,45)" fg:x="51451191693" fg:w="13913649"/><text x="99.8289%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,066,909 samples, 0.01%)</title><rect x="99.5941%" y="357" width="0.0117%" height="15" fill="rgb(237,203,48)" fg:x="51459038433" fg:w="6066909"/><text x="99.8441%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,066,909 samples, 0.01%)</title><rect x="99.5941%" y="341" width="0.0117%" height="15" fill="rgb(211,197,16)" fg:x="51459038433" fg:w="6066909"/><text x="99.8441%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,066,909 samples, 0.01%)</title><rect x="99.5941%" y="325" width="0.0117%" height="15" fill="rgb(243,99,51)" fg:x="51459038433" fg:w="6066909"/><text x="99.8441%" y="335.50"></text></g><g><title>server_lib::resp3::get_data_type (14,610,921 samples, 0.03%)</title><rect x="99.6058%" y="373" width="0.0283%" height="15" fill="rgb(215,123,29)" fg:x="51465105342" fg:w="14610921"/><text x="99.8558%" y="383.50"></text></g><g><title>server_lib::resp3::parse_arrays (6,653,192 samples, 0.01%)</title><rect x="99.6341%" y="373" width="0.0129%" height="15" fill="rgb(239,186,37)" fg:x="51479716263" fg:w="6653192"/><text x="99.8841%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11,060,644 samples, 0.02%)</title><rect x="99.7545%" y="309" width="0.0214%" height="15" fill="rgb(252,136,39)" fg:x="51541927806" fg:w="11060644"/><text x="100.0045%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11,060,644 samples, 0.02%)</title><rect x="99.7545%" y="293" width="0.0214%" height="15" fill="rgb(223,213,32)" fg:x="51541927806" fg:w="11060644"/><text x="100.0045%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (11,060,644 samples, 0.02%)</title><rect x="99.7545%" y="277" width="0.0214%" height="15" fill="rgb(233,115,5)" fg:x="51541927806" fg:w="11060644"/><text x="100.0045%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12,691,965 samples, 0.02%)</title><rect x="99.7545%" y="357" width="0.0246%" height="15" fill="rgb(207,226,44)" fg:x="51541927806" fg:w="12691965"/><text x="100.0045%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,691,965 samples, 0.02%)</title><rect x="99.7545%" y="341" width="0.0246%" height="15" fill="rgb(208,126,0)" fg:x="51541927806" fg:w="12691965"/><text x="100.0045%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12,691,965 samples, 0.02%)</title><rect x="99.7545%" y="325" width="0.0246%" height="15" fill="rgb(244,66,21)" fg:x="51541927806" fg:w="12691965"/><text x="100.0045%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,895,194 samples, 0.01%)</title><rect x="99.7856%" y="357" width="0.0133%" height="15" fill="rgb(222,97,12)" fg:x="51557964637" fg:w="6895194"/><text x="100.0356%" y="367.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (79,897,988 samples, 0.15%)</title><rect x="99.6470%" y="373" width="0.1546%" height="15" fill="rgb(219,213,19)" fg:x="51486369455" fg:w="79897988"/><text x="99.8970%" y="383.50"></text></g><g><title>server_lib::storage::LockedStorage::get_entry (25,970,205 samples, 0.05%)</title><rect x="99.8016%" y="373" width="0.0503%" height="15" fill="rgb(252,169,30)" fg:x="51566267443" fg:w="25970205"/><text x="100.0516%" y="383.50"></text></g><g><title>server_lib::storage::LockedStorage::insert_entry (14,598,829 samples, 0.03%)</title><rect x="99.8519%" y="373" width="0.0283%" height="15" fill="rgb(206,32,51)" fg:x="51592237648" fg:w="14598829"/><text x="100.1019%" y="383.50"></text></g><g><title>server_lib::storage::LockedStorage::insert_with_ttl (24,179,565 samples, 0.05%)</title><rect x="99.8801%" y="373" width="0.0468%" height="15" fill="rgb(250,172,42)" fg:x="51606836477" fg:w="24179565"/><text x="100.1301%" y="383.50"></text></g><g><title>server_lib::storage::LockedStorage::is_full (16,310,263 samples, 0.03%)</title><rect x="99.9269%" y="373" width="0.0316%" height="15" fill="rgb(209,34,43)" fg:x="51631016042" fg:w="16310263"/><text x="100.1769%" y="383.50"></text></g><g><title>std::io::Write::write_all (19,931,978 samples, 0.04%)</title><rect x="99.9585%" y="373" width="0.0386%" height="15" fill="rgb(223,11,35)" fg:x="51647326305" fg:w="19931978"/><text x="100.2085%" y="383.50"></text></g><g><title>all (51,668,763,971 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(251,219,26)" fg:x="0" fg:w="51668763971"/><text x="0.2500%" y="415.50"></text></g><g><title>server (51,668,763,971 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(231,119,3)" fg:x="0" fg:w="51668763971"/><text x="0.2500%" y="399.50">server</text></g></svg></svg>