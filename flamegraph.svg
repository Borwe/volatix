<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="40718606836"><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (52,800,346 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1297%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="52800346"/><text x="0.2500%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14,296,498 samples, 0.04%)</title><rect x="0.0946%" y="357" width="0.0351%" height="15" fill="rgb(217,0,24)" fg:x="38503848" fg:w="14296498"/><text x="0.3446%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,296,498 samples, 0.04%)</title><rect x="0.0946%" y="341" width="0.0351%" height="15" fill="rgb(221,193,54)" fg:x="38503848" fg:w="14296498"/><text x="0.3446%" y="351.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (41,953,738 samples, 0.10%)</title><rect x="0.1297%" y="373" width="0.1030%" height="15" fill="rgb(248,212,6)" fg:x="52800346" fg:w="41953738"/><text x="0.3797%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11,137,086 samples, 0.03%)</title><rect x="0.2327%" y="373" width="0.0274%" height="15" fill="rgb(208,68,35)" fg:x="94754084" fg:w="11137086"/><text x="0.4827%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (26,726,470 samples, 0.07%)</title><rect x="0.2601%" y="373" width="0.0656%" height="15" fill="rgb(232,128,0)" fg:x="105891170" fg:w="26726470"/><text x="0.5101%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10,706,331 samples, 0.03%)</title><rect x="0.3257%" y="373" width="0.0263%" height="15" fill="rgb(207,160,47)" fg:x="132617640" fg:w="10706331"/><text x="0.5757%" y="383.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (4,328,329 samples, 0.01%)</title><rect x="0.3556%" y="373" width="0.0106%" height="15" fill="rgb(228,23,34)" fg:x="144798869" fg:w="4328329"/><text x="0.6056%" y="383.50"></text></g><g><title>[libc.so.6] (206,521,849 samples, 0.51%)</title><rect x="0.3700%" y="373" width="0.5072%" height="15" fill="rgb(218,30,26)" fg:x="150670747" fg:w="206521849"/><text x="0.6200%" y="383.50"></text></g><g><title>[libc.so.6] (4,152,970 samples, 0.01%)</title><rect x="0.8670%" y="357" width="0.0102%" height="15" fill="rgb(220,122,19)" fg:x="353039626" fg:w="4152970"/><text x="1.1170%" y="367.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (11,772,059 samples, 0.03%)</title><rect x="0.8814%" y="357" width="0.0289%" height="15" fill="rgb(250,228,42)" fg:x="358874396" fg:w="11772059"/><text x="1.1314%" y="367.50"></text></g><g><title>recv (13,586,403 samples, 0.03%)</title><rect x="0.9103%" y="357" width="0.0334%" height="15" fill="rgb(240,193,28)" fg:x="370646455" fg:w="13586403"/><text x="1.1603%" y="367.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (16,169,030 samples, 0.04%)</title><rect x="1.0897%" y="341" width="0.0397%" height="15" fill="rgb(216,20,37)" fg:x="443721550" fg:w="16169030"/><text x="1.3397%" y="351.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="325" width="0.0315%" height="15" fill="rgb(206,188,39)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="309" width="0.0315%" height="15" fill="rgb(217,207,13)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="293" width="0.0315%" height="15" fill="rgb(231,73,38)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="277" width="0.0315%" height="15" fill="rgb(225,20,46)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="261" width="0.0315%" height="15" fill="rgb(210,31,41)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="245" width="0.0315%" height="15" fill="rgb(221,200,47)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="229" width="0.0315%" height="15" fill="rgb(226,26,5)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,844,837 samples, 0.03%)</title><rect x="1.0979%" y="213" width="0.0315%" height="15" fill="rgb(249,33,26)" fg:x="447045743" fg:w="12844837"/><text x="1.3479%" y="223.50"></text></g><g><title>server::process_request (81,007,367 samples, 0.20%)</title><rect x="0.9436%" y="357" width="0.1989%" height="15" fill="rgb(235,183,28)" fg:x="384232858" fg:w="81007367"/><text x="1.1936%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="341" width="0.0131%" height="15" fill="rgb(221,5,38)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="325" width="0.0131%" height="15" fill="rgb(247,18,42)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="309" width="0.0131%" height="15" fill="rgb(241,131,45)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="293" width="0.0131%" height="15" fill="rgb(249,31,29)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="277" width="0.0131%" height="15" fill="rgb(225,111,53)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="261" width="0.0131%" height="15" fill="rgb(238,160,17)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (5,349,645 samples, 0.01%)</title><rect x="1.1294%" y="245" width="0.0131%" height="15" fill="rgb(214,148,48)" fg:x="459890580" fg:w="5349645"/><text x="1.3794%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8 (11,217,064 samples, 0.03%)</title><rect x="1.2003%" y="341" width="0.0275%" height="15" fill="rgb(232,36,49)" fg:x="488725598" fg:w="11217064"/><text x="1.4503%" y="351.50"></text></g><g><title>server_lib::resp3::parse_arrays (36,813,618 samples, 0.09%)</title><rect x="1.1426%" y="357" width="0.0904%" height="15" fill="rgb(209,103,24)" fg:x="465240225" fg:w="36813618"/><text x="1.3926%" y="367.50"></text></g><g><title>server_lib::resp3::parse_request (39,372,928 samples, 0.10%)</title><rect x="1.2330%" y="357" width="0.0967%" height="15" fill="rgb(229,88,8)" fg:x="502053843" fg:w="39372928"/><text x="1.4830%" y="367.50"></text></g><g><title>std::net::udp::UdpSocket::send (24,163,461 samples, 0.06%)</title><rect x="1.3297%" y="357" width="0.0593%" height="15" fill="rgb(213,181,19)" fg:x="541426771" fg:w="24163461"/><text x="1.5797%" y="367.50"></text></g><g><title>[server] (210,839,823 samples, 0.52%)</title><rect x="0.8772%" y="373" width="0.5178%" height="15" fill="rgb(254,191,54)" fg:x="357192596" fg:w="210839823"/><text x="1.1272%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="261" width="0.0175%" height="15" fill="rgb(241,83,37)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="245" width="0.0175%" height="15" fill="rgb(233,36,39)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="229" width="0.0175%" height="15" fill="rgb(226,3,54)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="213" width="0.0175%" height="15" fill="rgb(245,192,40)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="197" width="0.0175%" height="15" fill="rgb(238,167,29)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="181" width="0.0175%" height="15" fill="rgb(232,182,51)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="191.50"></text></g><g><title>alloc::alloc::alloc (7,136,848 samples, 0.02%)</title><rect x="1.4564%" y="165" width="0.0175%" height="15" fill="rgb(231,60,39)" fg:x="593023665" fg:w="7136848"/><text x="1.7064%" y="175.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (33,895,392 samples, 0.08%)</title><rect x="1.3950%" y="357" width="0.0832%" height="15" fill="rgb(208,69,12)" fg:x="568032419" fg:w="33895392"/><text x="1.6450%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8,904,146 samples, 0.02%)</title><rect x="1.4564%" y="341" width="0.0219%" height="15" fill="rgb(235,93,37)" fg:x="593023665" fg:w="8904146"/><text x="1.7064%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8,904,146 samples, 0.02%)</title><rect x="1.4564%" y="325" width="0.0219%" height="15" fill="rgb(213,116,39)" fg:x="593023665" fg:w="8904146"/><text x="1.7064%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8,904,146 samples, 0.02%)</title><rect x="1.4564%" y="309" width="0.0219%" height="15" fill="rgb(222,207,29)" fg:x="593023665" fg:w="8904146"/><text x="1.7064%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,904,146 samples, 0.02%)</title><rect x="1.4564%" y="293" width="0.0219%" height="15" fill="rgb(206,96,30)" fg:x="593023665" fg:w="8904146"/><text x="1.7064%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (8,904,146 samples, 0.02%)</title><rect x="1.4564%" y="277" width="0.0219%" height="15" fill="rgb(218,138,4)" fg:x="593023665" fg:w="8904146"/><text x="1.7064%" y="287.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (24,813,343 samples, 0.06%)</title><rect x="1.4783%" y="357" width="0.0609%" height="15" fill="rgb(250,191,14)" fg:x="601927811" fg:w="24813343"/><text x="1.7283%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (8,175,921 samples, 0.02%)</title><rect x="1.5191%" y="341" width="0.0201%" height="15" fill="rgb(239,60,40)" fg:x="618565233" fg:w="8175921"/><text x="1.7691%" y="351.50"></text></g><g><title>[libc.so.6] (13,487,525 samples, 0.03%)</title><rect x="1.5392%" y="357" width="0.0331%" height="15" fill="rgb(206,27,48)" fg:x="626741154" fg:w="13487525"/><text x="1.7892%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (8,296,303 samples, 0.02%)</title><rect x="1.5799%" y="357" width="0.0204%" height="15" fill="rgb(225,35,8)" fg:x="643298197" fg:w="8296303"/><text x="1.8299%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (28,257,197 samples, 0.07%)</title><rect x="1.6002%" y="357" width="0.0694%" height="15" fill="rgb(250,213,24)" fg:x="651594500" fg:w="28257197"/><text x="1.8502%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (13,439,521 samples, 0.03%)</title><rect x="1.6696%" y="357" width="0.0330%" height="15" fill="rgb(247,123,22)" fg:x="679851697" fg:w="13439521"/><text x="1.9196%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (13,439,521 samples, 0.03%)</title><rect x="1.6696%" y="341" width="0.0330%" height="15" fill="rgb(231,138,38)" fg:x="679851697" fg:w="13439521"/><text x="1.9196%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (27,859,185 samples, 0.07%)</title><rect x="1.7026%" y="357" width="0.0684%" height="15" fill="rgb(231,145,46)" fg:x="693291218" fg:w="27859185"/><text x="1.9526%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5,855,768 samples, 0.01%)</title><rect x="1.7567%" y="341" width="0.0144%" height="15" fill="rgb(251,118,11)" fg:x="715294635" fg:w="5855768"/><text x="2.0067%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5,855,768 samples, 0.01%)</title><rect x="1.7567%" y="325" width="0.0144%" height="15" fill="rgb(217,147,25)" fg:x="715294635" fg:w="5855768"/><text x="2.0067%" y="335.50"></text></g><g><title>alloc::alloc::realloc (5,855,768 samples, 0.01%)</title><rect x="1.7567%" y="309" width="0.0144%" height="15" fill="rgb(247,81,37)" fg:x="715294635" fg:w="5855768"/><text x="2.0067%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (6,026,387 samples, 0.01%)</title><rect x="1.7711%" y="357" width="0.0148%" height="15" fill="rgb(209,12,38)" fg:x="721150403" fg:w="6026387"/><text x="2.0211%" y="367.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (4,585,051 samples, 0.01%)</title><rect x="1.7859%" y="357" width="0.0113%" height="15" fill="rgb(227,1,9)" fg:x="727176790" fg:w="4585051"/><text x="2.0359%" y="367.50"></text></g><g><title>cfree (27,142,521 samples, 0.07%)</title><rect x="1.7971%" y="357" width="0.0667%" height="15" fill="rgb(248,47,43)" fg:x="731761841" fg:w="27142521"/><text x="2.0471%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (18,776,599 samples, 0.05%)</title><rect x="1.8905%" y="357" width="0.0461%" height="15" fill="rgb(221,10,30)" fg:x="769793165" fg:w="18776599"/><text x="2.1405%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28,744,319 samples, 0.07%)</title><rect x="1.9366%" y="357" width="0.0706%" height="15" fill="rgb(210,229,1)" fg:x="788569764" fg:w="28744319"/><text x="2.1866%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (4,530,733 samples, 0.01%)</title><rect x="1.9961%" y="341" width="0.0111%" height="15" fill="rgb(222,148,37)" fg:x="812783350" fg:w="4530733"/><text x="2.2461%" y="351.50"></text></g><g><title>malloc (16,883,413 samples, 0.04%)</title><rect x="2.0072%" y="357" width="0.0415%" height="15" fill="rgb(234,67,33)" fg:x="817314083" fg:w="16883413"/><text x="2.2572%" y="367.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (4,295,835 samples, 0.01%)</title><rect x="2.0547%" y="357" width="0.0106%" height="15" fill="rgb(247,98,35)" fg:x="836625333" fg:w="4295835"/><text x="2.3047%" y="367.50"></text></g><g><title>server::get_value_type (8,584,114 samples, 0.02%)</title><rect x="2.0652%" y="357" width="0.0211%" height="15" fill="rgb(247,138,52)" fg:x="840921168" fg:w="8584114"/><text x="2.3152%" y="367.50"></text></g><g><title>server::process_request (10,840,018 samples, 0.03%)</title><rect x="2.0863%" y="357" width="0.0266%" height="15" fill="rgb(213,79,30)" fg:x="849505282" fg:w="10840018"/><text x="2.3363%" y="367.50"></text></g><g><title>alloc::string::String::push_str (7,373,584 samples, 0.02%)</title><rect x="2.1489%" y="341" width="0.0181%" height="15" fill="rgb(246,177,23)" fg:x="874999434" fg:w="7373584"/><text x="2.3989%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7,373,584 samples, 0.02%)</title><rect x="2.1489%" y="325" width="0.0181%" height="15" fill="rgb(230,62,27)" fg:x="874999434" fg:w="7373584"/><text x="2.3989%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7,373,584 samples, 0.02%)</title><rect x="2.1489%" y="309" width="0.0181%" height="15" fill="rgb(216,154,8)" fg:x="874999434" fg:w="7373584"/><text x="2.3989%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7,373,584 samples, 0.02%)</title><rect x="2.1489%" y="293" width="0.0181%" height="15" fill="rgb(244,35,45)" fg:x="874999434" fg:w="7373584"/><text x="2.3989%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,373,584 samples, 0.02%)</title><rect x="2.1489%" y="277" width="0.0181%" height="15" fill="rgb(251,115,12)" fg:x="874999434" fg:w="7373584"/><text x="2.3989%" y="287.50"></text></g><g><title>server_lib::resp3::bulk_string_response (30,281,914 samples, 0.07%)</title><rect x="2.1129%" y="357" width="0.0744%" height="15" fill="rgb(240,54,50)" fg:x="860345300" fg:w="30281914"/><text x="2.3629%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="341" width="0.0203%" height="15" fill="rgb(233,84,52)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="325" width="0.0203%" height="15" fill="rgb(207,117,47)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="309" width="0.0203%" height="15" fill="rgb(249,43,39)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="293" width="0.0203%" height="15" fill="rgb(209,38,44)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="277" width="0.0203%" height="15" fill="rgb(236,212,23)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="261" width="0.0203%" height="15" fill="rgb(242,79,21)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (8,254,196 samples, 0.02%)</title><rect x="2.1670%" y="245" width="0.0203%" height="15" fill="rgb(211,96,35)" fg:x="882373018" fg:w="8254196"/><text x="2.4170%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,299,514 samples, 0.01%)</title><rect x="2.2288%" y="341" width="0.0106%" height="15" fill="rgb(253,215,40)" fg:x="907524626" fg:w="4299514"/><text x="2.4788%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,299,514 samples, 0.01%)</title><rect x="2.2288%" y="325" width="0.0106%" height="15" fill="rgb(211,81,21)" fg:x="907524626" fg:w="4299514"/><text x="2.4788%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (4,299,514 samples, 0.01%)</title><rect x="2.2288%" y="309" width="0.0106%" height="15" fill="rgb(208,190,38)" fg:x="907524626" fg:w="4299514"/><text x="2.4788%" y="319.50"></text></g><g><title>alloc::string::String::from_utf8 (10,482,677 samples, 0.03%)</title><rect x="2.2393%" y="341" width="0.0257%" height="15" fill="rgb(235,213,38)" fg:x="911824140" fg:w="10482677"/><text x="2.4893%" y="351.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (35,851,242 samples, 0.09%)</title><rect x="2.1951%" y="357" width="0.0880%" height="15" fill="rgb(237,122,38)" fg:x="893820019" fg:w="35851242"/><text x="2.4451%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="341" width="0.0181%" height="15" fill="rgb(244,218,35)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="325" width="0.0181%" height="15" fill="rgb(240,68,47)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="309" width="0.0181%" height="15" fill="rgb(210,16,53)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="293" width="0.0181%" height="15" fill="rgb(235,124,12)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="277" width="0.0181%" height="15" fill="rgb(224,169,11)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (7,364,444 samples, 0.02%)</title><rect x="2.2651%" y="261" width="0.0181%" height="15" fill="rgb(250,166,2)" fg:x="922306817" fg:w="7364444"/><text x="2.5151%" y="271.50"></text></g><g><title>server_lib::storage::Storage::get_entry (7,058,936 samples, 0.02%)</title><rect x="2.2883%" y="357" width="0.0173%" height="15" fill="rgb(242,216,29)" fg:x="931747750" fg:w="7058936"/><text x="2.5383%" y="367.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (25,664,040 samples, 0.06%)</title><rect x="2.3102%" y="357" width="0.0630%" height="15" fill="rgb(230,116,27)" fg:x="940692000" fg:w="25664040"/><text x="2.5602%" y="367.50"></text></g><g><title>std::io::Write::write_all (14,016,639 samples, 0.03%)</title><rect x="2.3733%" y="357" width="0.0344%" height="15" fill="rgb(228,99,48)" fg:x="966356040" fg:w="14016639"/><text x="2.6233%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (22,673,019 samples, 0.06%)</title><rect x="2.4077%" y="357" width="0.0557%" height="15" fill="rgb(253,11,6)" fg:x="980372679" fg:w="22673019"/><text x="2.6577%" y="367.50"></text></g><g><title>std::thread::yield_now (9,973,803 samples, 0.02%)</title><rect x="2.4634%" y="357" width="0.0245%" height="15" fill="rgb(247,143,39)" fg:x="1003045698" fg:w="9973803"/><text x="2.7134%" y="367.50"></text></g><g><title>[unknown] (448,929,657 samples, 1.10%)</title><rect x="1.3950%" y="373" width="1.1025%" height="15" fill="rgb(236,97,10)" fg:x="568032419" fg:w="448929657"/><text x="1.6450%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (54,825,901 samples, 0.13%)</title><rect x="2.4975%" y="373" width="0.1346%" height="15" fill="rgb(233,208,19)" fg:x="1016962076" fg:w="54825901"/><text x="2.7475%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14,628,008 samples, 0.04%)</title><rect x="2.5963%" y="357" width="0.0359%" height="15" fill="rgb(216,164,2)" fg:x="1057159969" fg:w="14628008"/><text x="2.8463%" y="367.50"></text></g><g><title>__rustc::__rdl_realloc (6,877,074 samples, 0.02%)</title><rect x="2.6322%" y="373" width="0.0169%" height="15" fill="rgb(220,129,5)" fg:x="1071787977" fg:w="6877074"/><text x="2.8822%" y="383.50"></text></g><g><title>__send (8,848,369 samples, 0.02%)</title><rect x="2.6533%" y="373" width="0.0217%" height="15" fill="rgb(242,17,10)" fg:x="1080401709" fg:w="8848369"/><text x="2.9033%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7,023,091 samples, 0.02%)</title><rect x="2.6873%" y="373" width="0.0172%" height="15" fill="rgb(242,107,0)" fg:x="1094246503" fg:w="7023091"/><text x="2.9373%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (75,620,927 samples, 0.19%)</title><rect x="2.7046%" y="373" width="0.1857%" height="15" fill="rgb(251,28,31)" fg:x="1101269594" fg:w="75620927"/><text x="2.9546%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (64,658,059 samples, 0.16%)</title><rect x="2.7315%" y="357" width="0.1588%" height="15" fill="rgb(233,223,10)" fg:x="1112232462" fg:w="64658059"/><text x="2.9815%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (56,826,762 samples, 0.14%)</title><rect x="2.8903%" y="373" width="0.1396%" height="15" fill="rgb(215,21,27)" fg:x="1176890521" fg:w="56826762"/><text x="3.1403%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (14,940,819 samples, 0.04%)</title><rect x="3.0299%" y="373" width="0.0367%" height="15" fill="rgb(232,23,21)" fg:x="1233717283" fg:w="14940819"/><text x="3.2799%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (7,241,419 samples, 0.02%)</title><rect x="3.0666%" y="373" width="0.0178%" height="15" fill="rgb(244,5,23)" fg:x="1248658102" fg:w="7241419"/><text x="3.3166%" y="383.50"></text></g><g><title>cfree (27,387,350 samples, 0.07%)</title><rect x="3.0843%" y="373" width="0.0673%" height="15" fill="rgb(226,81,46)" fg:x="1255899521" fg:w="27387350"/><text x="3.3343%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad (49,804,253 samples, 0.12%)</title><rect x="3.1516%" y="373" width="0.1223%" height="15" fill="rgb(247,70,30)" fg:x="1283286871" fg:w="49804253"/><text x="3.4016%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (25,535,428 samples, 0.06%)</title><rect x="3.2739%" y="373" width="0.0627%" height="15" fill="rgb(212,68,19)" fg:x="1333091124" fg:w="25535428"/><text x="3.5239%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (32,180,527 samples, 0.08%)</title><rect x="3.3366%" y="373" width="0.0790%" height="15" fill="rgb(240,187,13)" fg:x="1358626552" fg:w="32180527"/><text x="3.5866%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (8,225,804 samples, 0.02%)</title><rect x="3.4217%" y="373" width="0.0202%" height="15" fill="rgb(223,113,26)" fg:x="1393263557" fg:w="8225804"/><text x="3.6717%" y="383.50"></text></g><g><title>core::fmt::write (52,475,631 samples, 0.13%)</title><rect x="3.4419%" y="373" width="0.1289%" height="15" fill="rgb(206,192,2)" fg:x="1401489361" fg:w="52475631"/><text x="3.6919%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (22,894,797 samples, 0.06%)</title><rect x="3.5145%" y="357" width="0.0562%" height="15" fill="rgb(241,108,4)" fg:x="1431070195" fg:w="22894797"/><text x="3.7645%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (22,894,797 samples, 0.06%)</title><rect x="3.5145%" y="341" width="0.0562%" height="15" fill="rgb(247,173,49)" fg:x="1431070195" fg:w="22894797"/><text x="3.7645%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30,516,559 samples, 0.07%)</title><rect x="3.5708%" y="373" width="0.0749%" height="15" fill="rgb(224,114,35)" fg:x="1453964992" fg:w="30516559"/><text x="3.8208%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5,428,298 samples, 0.01%)</title><rect x="3.6324%" y="357" width="0.0133%" height="15" fill="rgb(245,159,27)" fg:x="1479053253" fg:w="5428298"/><text x="3.8824%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4,516,094 samples, 0.01%)</title><rect x="3.6457%" y="373" width="0.0111%" height="15" fill="rgb(245,172,44)" fg:x="1484481551" fg:w="4516094"/><text x="3.8957%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (53,843,157 samples, 0.13%)</title><rect x="3.6568%" y="373" width="0.1322%" height="15" fill="rgb(236,23,11)" fg:x="1488997645" fg:w="53843157"/><text x="3.9068%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (5,337,684 samples, 0.01%)</title><rect x="3.7759%" y="357" width="0.0131%" height="15" fill="rgb(205,117,38)" fg:x="1537503118" fg:w="5337684"/><text x="4.0259%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,337,684 samples, 0.01%)</title><rect x="3.7759%" y="341" width="0.0131%" height="15" fill="rgb(237,72,25)" fg:x="1537503118" fg:w="5337684"/><text x="4.0259%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (5,337,684 samples, 0.01%)</title><rect x="3.7759%" y="325" width="0.0131%" height="15" fill="rgb(244,70,9)" fg:x="1537503118" fg:w="5337684"/><text x="4.0259%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (50,202,453 samples, 0.12%)</title><rect x="3.7890%" y="373" width="0.1233%" height="15" fill="rgb(217,125,39)" fg:x="1542840802" fg:w="50202453"/><text x="4.0390%" y="383.50"></text></g><g><title>malloc (82,594,513 samples, 0.20%)</title><rect x="3.9123%" y="373" width="0.2028%" height="15" fill="rgb(235,36,10)" fg:x="1593043255" fg:w="82594513"/><text x="4.1623%" y="383.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (8,483,820 samples, 0.02%)</title><rect x="4.1152%" y="373" width="0.0208%" height="15" fill="rgb(251,123,47)" fg:x="1675637768" fg:w="8483820"/><text x="4.3652%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (10,373,503 samples, 0.03%)</title><rect x="4.6235%" y="341" width="0.0255%" height="15" fill="rgb(221,13,13)" fg:x="1882642985" fg:w="10373503"/><text x="4.8735%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (10,373,503 samples, 0.03%)</title><rect x="4.6235%" y="325" width="0.0255%" height="15" fill="rgb(238,131,9)" fg:x="1882642985" fg:w="10373503"/><text x="4.8735%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (62,012,398 samples, 0.15%)</title><rect x="4.6235%" y="357" width="0.1523%" height="15" fill="rgb(211,50,8)" fg:x="1882642985" fg:w="62012398"/><text x="4.8735%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (51,638,895 samples, 0.13%)</title><rect x="4.6490%" y="341" width="0.1268%" height="15" fill="rgb(245,182,24)" fg:x="1893016488" fg:w="51638895"/><text x="4.8990%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (51,638,895 samples, 0.13%)</title><rect x="4.6490%" y="325" width="0.1268%" height="15" fill="rgb(242,14,37)" fg:x="1893016488" fg:w="51638895"/><text x="4.8990%" y="335.50"></text></g><g><title>cfree (51,180,386 samples, 0.13%)</title><rect x="4.7846%" y="357" width="0.1257%" height="15" fill="rgb(246,228,12)" fg:x="1948239199" fg:w="51180386"/><text x="5.0346%" y="367.50"></text></g><g><title>__rustc::__rust_dealloc (8,787,058 samples, 0.02%)</title><rect x="4.9441%" y="261" width="0.0216%" height="15" fill="rgb(213,55,15)" fg:x="2013174458" fg:w="8787058"/><text x="5.1941%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (161,797,871 samples, 0.40%)</title><rect x="4.9148%" y="357" width="0.3974%" height="15" fill="rgb(209,9,3)" fg:x="2001225304" fg:w="161797871"/><text x="5.1648%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (161,797,871 samples, 0.40%)</title><rect x="4.9148%" y="341" width="0.3974%" height="15" fill="rgb(230,59,30)" fg:x="2001225304" fg:w="161797871"/><text x="5.1648%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (161,797,871 samples, 0.40%)</title><rect x="4.9148%" y="325" width="0.3974%" height="15" fill="rgb(209,121,21)" fg:x="2001225304" fg:w="161797871"/><text x="5.1648%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (157,141,315 samples, 0.39%)</title><rect x="4.9262%" y="309" width="0.3859%" height="15" fill="rgb(220,109,13)" fg:x="2005881860" fg:w="157141315"/><text x="5.1762%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (157,141,315 samples, 0.39%)</title><rect x="4.9262%" y="293" width="0.3859%" height="15" fill="rgb(232,18,1)" fg:x="2005881860" fg:w="157141315"/><text x="5.1762%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (157,141,315 samples, 0.39%)</title><rect x="4.9262%" y="277" width="0.3859%" height="15" fill="rgb(215,41,42)" fg:x="2005881860" fg:w="157141315"/><text x="5.1762%" y="287.50"></text></g><g><title>cfree (141,061,659 samples, 0.35%)</title><rect x="4.9657%" y="261" width="0.3464%" height="15" fill="rgb(224,123,36)" fg:x="2021961516" fg:w="141061659"/><text x="5.2157%" y="271.50"></text></g><g><title>[libc.so.6] (54,789,923 samples, 0.13%)</title><rect x="5.1776%" y="245" width="0.1346%" height="15" fill="rgb(240,125,3)" fg:x="2108233252" fg:w="54789923"/><text x="5.4276%" y="255.50"></text></g><g><title>[libc.so.6] (28,840,311 samples, 0.07%)</title><rect x="5.2413%" y="229" width="0.0708%" height="15" fill="rgb(205,98,50)" fg:x="2134182864" fg:w="28840311"/><text x="5.4913%" y="239.50"></text></g><g><title>[libc.so.6] (26,308,837 samples, 0.06%)</title><rect x="5.2475%" y="213" width="0.0646%" height="15" fill="rgb(205,185,37)" fg:x="2136714338" fg:w="26308837"/><text x="5.4975%" y="223.50"></text></g><g><title>[libc.so.6] (10,586,280 samples, 0.03%)</title><rect x="5.2861%" y="197" width="0.0260%" height="15" fill="rgb(238,207,15)" fg:x="2152436895" fg:w="10586280"/><text x="5.5361%" y="207.50"></text></g><g><title>__rustc::__rust_dealloc (7,008,934 samples, 0.02%)</title><rect x="5.4113%" y="293" width="0.0172%" height="15" fill="rgb(213,199,42)" fg:x="2203420614" fg:w="7008934"/><text x="5.6613%" y="303.50"></text></g><g><title>cfree (142,350,618 samples, 0.35%)</title><rect x="5.4285%" y="293" width="0.3496%" height="15" fill="rgb(235,201,11)" fg:x="2210429548" fg:w="142350618"/><text x="5.6785%" y="303.50"></text></g><g><title>[libc.so.6] (18,293,808 samples, 0.04%)</title><rect x="5.7332%" y="277" width="0.0449%" height="15" fill="rgb(207,46,11)" fg:x="2334486358" fg:w="18293808"/><text x="5.9832%" y="287.50"></text></g><g><title>[libc.so.6] (14,184,841 samples, 0.03%)</title><rect x="5.7433%" y="261" width="0.0348%" height="15" fill="rgb(241,35,35)" fg:x="2338595325" fg:w="14184841"/><text x="5.9933%" y="271.50"></text></g><g><title>[libc.so.6] (4,738,911 samples, 0.01%)</title><rect x="5.7665%" y="245" width="0.0116%" height="15" fill="rgb(243,32,47)" fg:x="2348041255" fg:w="4738911"/><text x="6.0165%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (218,408,497 samples, 0.54%)</title><rect x="5.3823%" y="325" width="0.5364%" height="15" fill="rgb(247,202,23)" fg:x="2191602987" fg:w="218408497"/><text x="5.6323%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (218,408,497 samples, 0.54%)</title><rect x="5.3823%" y="309" width="0.5364%" height="15" fill="rgb(219,102,11)" fg:x="2191602987" fg:w="218408497"/><text x="5.6323%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (57,231,318 samples, 0.14%)</title><rect x="5.7781%" y="293" width="0.1406%" height="15" fill="rgb(243,110,44)" fg:x="2352780166" fg:w="57231318"/><text x="6.0281%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (253,383,895 samples, 0.62%)</title><rect x="5.3121%" y="357" width="0.6223%" height="15" fill="rgb(222,74,54)" fg:x="2163023175" fg:w="253383895"/><text x="5.5621%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (224,804,083 samples, 0.55%)</title><rect x="5.3823%" y="341" width="0.5521%" height="15" fill="rgb(216,99,12)" fg:x="2191602987" fg:w="224804083"/><text x="5.6323%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;server_lib::resp3::RequestType&gt;&gt; (6,395,586 samples, 0.02%)</title><rect x="5.9187%" y="325" width="0.0157%" height="15" fill="rgb(226,22,26)" fg:x="2410011484" fg:w="6395586"/><text x="6.1687%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,395,586 samples, 0.02%)</title><rect x="5.9187%" y="309" width="0.0157%" height="15" fill="rgb(217,163,10)" fg:x="2410011484" fg:w="6395586"/><text x="6.1687%" y="319.50"></text></g><g><title>recv (35,972,405 samples, 0.09%)</title><rect x="5.9344%" y="357" width="0.0883%" height="15" fill="rgb(213,25,53)" fg:x="2416407070" fg:w="35972405"/><text x="6.1844%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (5,409,413 samples, 0.01%)</title><rect x="6.2932%" y="277" width="0.0133%" height="15" fill="rgb(252,105,26)" fg:x="2562508278" fg:w="5409413"/><text x="6.5432%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,310,684 samples, 0.03%)</title><rect x="6.4226%" y="261" width="0.0253%" height="15" fill="rgb(220,39,43)" fg:x="2615184576" fg:w="10310684"/><text x="6.6726%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,310,684 samples, 0.03%)</title><rect x="6.4226%" y="245" width="0.0253%" height="15" fill="rgb(229,68,48)" fg:x="2615184576" fg:w="10310684"/><text x="6.6726%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10,310,684 samples, 0.03%)</title><rect x="6.4226%" y="229" width="0.0253%" height="15" fill="rgb(252,8,32)" fg:x="2615184576" fg:w="10310684"/><text x="6.6726%" y="239.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (15,008,897 samples, 0.04%)</title><rect x="6.4563%" y="245" width="0.0369%" height="15" fill="rgb(223,20,43)" fg:x="2628933475" fg:w="15008897"/><text x="6.7063%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (5,189,854 samples, 0.01%)</title><rect x="6.4805%" y="229" width="0.0127%" height="15" fill="rgb(229,81,49)" fg:x="2638752518" fg:w="5189854"/><text x="6.7305%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (9,016,274 samples, 0.02%)</title><rect x="6.5577%" y="85" width="0.0221%" height="15" fill="rgb(236,28,36)" fg:x="2670220975" fg:w="9016274"/><text x="6.8077%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc (8,752,649 samples, 0.02%)</title><rect x="6.6028%" y="69" width="0.0215%" height="15" fill="rgb(249,185,26)" fg:x="2688574463" fg:w="8752649"/><text x="6.8528%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,752,649 samples, 0.02%)</title><rect x="6.6028%" y="53" width="0.0215%" height="15" fill="rgb(249,174,33)" fg:x="2688574463" fg:w="8752649"/><text x="6.8528%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5,273,474 samples, 0.01%)</title><rect x="6.6312%" y="69" width="0.0130%" height="15" fill="rgb(233,201,37)" fg:x="2700133592" fg:w="5273474"/><text x="6.8812%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (148,776,515 samples, 0.37%)</title><rect x="6.5872%" y="85" width="0.3654%" height="15" fill="rgb(221,78,26)" fg:x="2682200012" fg:w="148776515"/><text x="6.8372%" y="95.50"></text></g><g><title>malloc (125,569,461 samples, 0.31%)</title><rect x="6.6442%" y="69" width="0.3084%" height="15" fill="rgb(250,127,30)" fg:x="2705407066" fg:w="125569461"/><text x="6.8942%" y="79.50"></text></g><g><title>[libc.so.6] (59,443,278 samples, 0.15%)</title><rect x="6.8066%" y="53" width="0.1460%" height="15" fill="rgb(230,49,44)" fg:x="2771533249" fg:w="59443278"/><text x="7.0566%" y="63.50"></text></g><g><title>[libc.so.6] (17,054,228 samples, 0.04%)</title><rect x="6.9107%" y="37" width="0.0419%" height="15" fill="rgb(229,67,23)" fg:x="2813922299" fg:w="17054228"/><text x="7.1607%" y="47.50"></text></g><g><title>alloc::raw_vec::layout_array (5,347,073 samples, 0.01%)</title><rect x="6.9525%" y="85" width="0.0131%" height="15" fill="rgb(249,83,47)" fg:x="2830976527" fg:w="5347073"/><text x="7.2025%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::repeat (5,347,073 samples, 0.01%)</title><rect x="6.9525%" y="69" width="0.0131%" height="15" fill="rgb(215,43,3)" fg:x="2830976527" fg:w="5347073"/><text x="7.2025%" y="79.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (13,785,663 samples, 0.03%)</title><rect x="6.9657%" y="85" width="0.0339%" height="15" fill="rgb(238,154,13)" fg:x="2836323600" fg:w="13785663"/><text x="7.2157%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (207,978,699 samples, 0.51%)</title><rect x="6.5032%" y="165" width="0.5108%" height="15" fill="rgb(219,56,2)" fg:x="2648027751" fg:w="207978699"/><text x="6.7532%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (205,854,518 samples, 0.51%)</title><rect x="6.5085%" y="149" width="0.5056%" height="15" fill="rgb(233,0,4)" fg:x="2650151932" fg:w="205854518"/><text x="6.7585%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (205,854,518 samples, 0.51%)</title><rect x="6.5085%" y="133" width="0.5056%" height="15" fill="rgb(235,30,7)" fg:x="2650151932" fg:w="205854518"/><text x="6.7585%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (192,997,455 samples, 0.47%)</title><rect x="6.5400%" y="117" width="0.4740%" height="15" fill="rgb(250,79,13)" fg:x="2663008995" fg:w="192997455"/><text x="6.7900%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (192,997,455 samples, 0.47%)</title><rect x="6.5400%" y="101" width="0.4740%" height="15" fill="rgb(211,146,34)" fg:x="2663008995" fg:w="192997455"/><text x="6.7900%" y="111.50"></text></g><g><title>core::cmp::max (5,897,187 samples, 0.01%)</title><rect x="6.9995%" y="85" width="0.0145%" height="15" fill="rgb(228,22,38)" fg:x="2850109263" fg:w="5897187"/><text x="7.2495%" y="95.50"></text></g><g><title>core::cmp::Ord::max (5,897,187 samples, 0.01%)</title><rect x="6.9995%" y="69" width="0.0145%" height="15" fill="rgb(235,168,5)" fg:x="2850109263" fg:w="5897187"/><text x="7.2495%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (328,576,163 samples, 0.81%)</title><rect x="6.4932%" y="245" width="0.8069%" height="15" fill="rgb(221,155,16)" fg:x="2643942372" fg:w="328576163"/><text x="6.7432%" y="255.50"></text></g><g><title>alloc::string::String::push_str (328,576,163 samples, 0.81%)</title><rect x="6.4932%" y="229" width="0.8069%" height="15" fill="rgb(215,215,53)" fg:x="2643942372" fg:w="328576163"/><text x="6.7432%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (328,576,163 samples, 0.81%)</title><rect x="6.4932%" y="213" width="0.8069%" height="15" fill="rgb(223,4,10)" fg:x="2643942372" fg:w="328576163"/><text x="6.7432%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (328,576,163 samples, 0.81%)</title><rect x="6.4932%" y="197" width="0.8069%" height="15" fill="rgb(234,103,6)" fg:x="2643942372" fg:w="328576163"/><text x="6.7432%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (328,576,163 samples, 0.81%)</title><rect x="6.4932%" y="181" width="0.8069%" height="15" fill="rgb(227,97,0)" fg:x="2643942372" fg:w="328576163"/><text x="6.7432%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (116,512,085 samples, 0.29%)</title><rect x="7.0140%" y="165" width="0.2861%" height="15" fill="rgb(234,150,53)" fg:x="2856006450" fg:w="116512085"/><text x="7.2640%" y="175.50"></text></g><g><title>[libc.so.6] (114,768,549 samples, 0.28%)</title><rect x="7.0183%" y="149" width="0.2819%" height="15" fill="rgb(228,201,54)" fg:x="2857749986" fg:w="114768549"/><text x="7.2683%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (4,546,855 samples, 0.01%)</title><rect x="7.3001%" y="245" width="0.0112%" height="15" fill="rgb(222,22,37)" fg:x="2972518535" fg:w="4546855"/><text x="7.5501%" y="255.50"></text></g><g><title>core::fmt::write (496,260,764 samples, 1.22%)</title><rect x="6.3065%" y="277" width="1.2188%" height="15" fill="rgb(237,53,32)" fg:x="2567917691" fg:w="496260764"/><text x="6.5565%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (435,244,980 samples, 1.07%)</title><rect x="6.4563%" y="261" width="1.0689%" height="15" fill="rgb(233,25,53)" fg:x="2628933475" fg:w="435244980"/><text x="6.7063%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad (87,113,065 samples, 0.21%)</title><rect x="7.3113%" y="245" width="0.2139%" height="15" fill="rgb(210,40,34)" fg:x="2977065390" fg:w="87113065"/><text x="7.5613%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (512,533,836 samples, 1.26%)</title><rect x="6.2932%" y="293" width="1.2587%" height="15" fill="rgb(241,220,44)" fg:x="2562508278" fg:w="512533836"/><text x="6.5432%" y="303.50"></text></g><g><title>malloc (10,863,659 samples, 0.03%)</title><rect x="7.5253%" y="277" width="0.0267%" height="15" fill="rgb(235,28,35)" fg:x="3064178455" fg:w="10863659"/><text x="7.7753%" y="287.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (546,736,486 samples, 1.34%)</title><rect x="6.2157%" y="309" width="1.3427%" height="15" fill="rgb(210,56,17)" fg:x="2530930194" fg:w="546736486"/><text x="6.4657%" y="319.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (554,371,672 samples, 1.36%)</title><rect x="6.2090%" y="325" width="1.3615%" height="15" fill="rgb(224,130,29)" fg:x="2528231382" fg:w="554371672"/><text x="6.4590%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (15,615,049 samples, 0.04%)</title><rect x="7.5992%" y="117" width="0.0383%" height="15" fill="rgb(235,212,8)" fg:x="3094277723" fg:w="15615049"/><text x="7.8492%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15,615,049 samples, 0.04%)</title><rect x="7.5992%" y="101" width="0.0383%" height="15" fill="rgb(223,33,50)" fg:x="3094277723" fg:w="15615049"/><text x="7.8492%" y="111.50"></text></g><g><title>__rustc::__rust_alloc (4,496,812 samples, 0.01%)</title><rect x="7.6375%" y="117" width="0.0110%" height="15" fill="rgb(219,149,13)" fg:x="3109892772" fg:w="4496812"/><text x="7.8875%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (184,276,222 samples, 0.45%)</title><rect x="7.5705%" y="229" width="0.4526%" height="15" fill="rgb(250,156,29)" fg:x="3082603054" fg:w="184276222"/><text x="7.8205%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (184,276,222 samples, 0.45%)</title><rect x="7.5705%" y="213" width="0.4526%" height="15" fill="rgb(216,193,19)" fg:x="3082603054" fg:w="184276222"/><text x="7.8205%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (184,276,222 samples, 0.45%)</title><rect x="7.5705%" y="197" width="0.4526%" height="15" fill="rgb(216,135,14)" fg:x="3082603054" fg:w="184276222"/><text x="7.8205%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (184,276,222 samples, 0.45%)</title><rect x="7.5705%" y="181" width="0.4526%" height="15" fill="rgb(241,47,5)" fg:x="3082603054" fg:w="184276222"/><text x="7.8205%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (175,716,595 samples, 0.43%)</title><rect x="7.5915%" y="165" width="0.4315%" height="15" fill="rgb(233,42,35)" fg:x="3091162681" fg:w="175716595"/><text x="7.8415%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (175,716,595 samples, 0.43%)</title><rect x="7.5915%" y="149" width="0.4315%" height="15" fill="rgb(231,13,6)" fg:x="3091162681" fg:w="175716595"/><text x="7.8415%" y="159.50"></text></g><g><title>alloc::alloc::alloc (175,716,595 samples, 0.43%)</title><rect x="7.5915%" y="133" width="0.4315%" height="15" fill="rgb(207,181,40)" fg:x="3091162681" fg:w="175716595"/><text x="7.8415%" y="143.50"></text></g><g><title>malloc (152,489,692 samples, 0.37%)</title><rect x="7.6486%" y="117" width="0.3745%" height="15" fill="rgb(254,173,49)" fg:x="3114389584" fg:w="152489692"/><text x="7.8986%" y="127.50"></text></g><g><title>[libc.so.6] (51,370,806 samples, 0.13%)</title><rect x="7.8969%" y="101" width="0.1262%" height="15" fill="rgb(221,1,38)" fg:x="3215508470" fg:w="51370806"/><text x="8.1469%" y="111.50"></text></g><g><title>[libc.so.6] (11,092,358 samples, 0.03%)</title><rect x="7.9958%" y="85" width="0.0272%" height="15" fill="rgb(206,124,46)" fg:x="3255786918" fg:w="11092358"/><text x="8.2458%" y="95.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (806,525,799 samples, 1.98%)</title><rect x="6.2019%" y="341" width="1.9807%" height="15" fill="rgb(249,21,11)" fg:x="2525347513" fg:w="806525799"/><text x="6.4519%" y="351.50">&lt;..</text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="325" width="0.6122%" height="15" fill="rgb(222,201,40)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="335.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="309" width="0.6122%" height="15" fill="rgb(235,61,29)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="293" width="0.6122%" height="15" fill="rgb(219,207,3)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="277" width="0.6122%" height="15" fill="rgb(222,56,46)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="261" width="0.6122%" height="15" fill="rgb(239,76,54)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (249,270,258 samples, 0.61%)</title><rect x="7.5705%" y="245" width="0.6122%" height="15" fill="rgb(231,124,27)" fg:x="3082603054" fg:w="249270258"/><text x="7.8205%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (64,994,036 samples, 0.16%)</title><rect x="8.0231%" y="229" width="0.1596%" height="15" fill="rgb(249,195,6)" fg:x="3266879276" fg:w="64994036"/><text x="8.2731%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64,994,036 samples, 0.16%)</title><rect x="8.0231%" y="213" width="0.1596%" height="15" fill="rgb(237,174,47)" fg:x="3266879276" fg:w="64994036"/><text x="8.2731%" y="223.50"></text></g><g><title>[libc.so.6] (61,546,612 samples, 0.15%)</title><rect x="8.0315%" y="197" width="0.1512%" height="15" fill="rgb(206,201,31)" fg:x="3270326700" fg:w="61546612"/><text x="8.2815%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5,554,727 samples, 0.01%)</title><rect x="8.1827%" y="341" width="0.0136%" height="15" fill="rgb(231,57,52)" fg:x="3331873312" fg:w="5554727"/><text x="8.4327%" y="351.50"></text></g><g><title>alloc::string::String::as_str (5,554,727 samples, 0.01%)</title><rect x="8.1827%" y="325" width="0.0136%" height="15" fill="rgb(248,177,22)" fg:x="3331873312" fg:w="5554727"/><text x="8.4327%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (5,554,727 samples, 0.01%)</title><rect x="8.1827%" y="309" width="0.0136%" height="15" fill="rgb(215,211,37)" fg:x="3331873312" fg:w="5554727"/><text x="8.4327%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,151,921 samples, 0.02%)</title><rect x="8.1963%" y="341" width="0.0151%" height="15" fill="rgb(241,128,51)" fg:x="3337428039" fg:w="6151921"/><text x="8.4463%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (6,151,921 samples, 0.02%)</title><rect x="8.1963%" y="325" width="0.0151%" height="15" fill="rgb(227,165,31)" fg:x="3337428039" fg:w="6151921"/><text x="8.4463%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6,151,921 samples, 0.02%)</title><rect x="8.1963%" y="309" width="0.0151%" height="15" fill="rgb(228,167,24)" fg:x="3337428039" fg:w="6151921"/><text x="8.4463%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (11,235,797 samples, 0.03%)</title><rect x="8.2236%" y="341" width="0.0276%" height="15" fill="rgb(228,143,12)" fg:x="3348554800" fg:w="11235797"/><text x="8.4736%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (5,643,755 samples, 0.01%)</title><rect x="8.4133%" y="181" width="0.0139%" height="15" fill="rgb(249,149,8)" fg:x="3425776757" fg:w="5643755"/><text x="8.6633%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5,643,755 samples, 0.01%)</title><rect x="8.4133%" y="165" width="0.0139%" height="15" fill="rgb(243,35,44)" fg:x="3425776757" fg:w="5643755"/><text x="8.6633%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (41,969,337 samples, 0.10%)</title><rect x="8.4041%" y="309" width="0.1031%" height="15" fill="rgb(246,89,9)" fg:x="3422016772" fg:w="41969337"/><text x="8.6541%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41,969,337 samples, 0.10%)</title><rect x="8.4041%" y="293" width="0.1031%" height="15" fill="rgb(233,213,13)" fg:x="3422016772" fg:w="41969337"/><text x="8.6541%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41,969,337 samples, 0.10%)</title><rect x="8.4041%" y="277" width="0.1031%" height="15" fill="rgb(233,141,41)" fg:x="3422016772" fg:w="41969337"/><text x="8.6541%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41,969,337 samples, 0.10%)</title><rect x="8.4041%" y="261" width="0.1031%" height="15" fill="rgb(239,167,4)" fg:x="3422016772" fg:w="41969337"/><text x="8.6541%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,969,337 samples, 0.10%)</title><rect x="8.4041%" y="245" width="0.1031%" height="15" fill="rgb(209,217,16)" fg:x="3422016772" fg:w="41969337"/><text x="8.6541%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40,502,075 samples, 0.10%)</title><rect x="8.4077%" y="229" width="0.0995%" height="15" fill="rgb(219,88,35)" fg:x="3423484034" fg:w="40502075"/><text x="8.6577%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40,502,075 samples, 0.10%)</title><rect x="8.4077%" y="213" width="0.0995%" height="15" fill="rgb(220,193,23)" fg:x="3423484034" fg:w="40502075"/><text x="8.6577%" y="223.50"></text></g><g><title>alloc::alloc::alloc (40,502,075 samples, 0.10%)</title><rect x="8.4077%" y="197" width="0.0995%" height="15" fill="rgb(230,90,52)" fg:x="3423484034" fg:w="40502075"/><text x="8.6577%" y="207.50"></text></g><g><title>malloc (32,565,597 samples, 0.08%)</title><rect x="8.4272%" y="181" width="0.0800%" height="15" fill="rgb(252,106,19)" fg:x="3431420512" fg:w="32565597"/><text x="8.6772%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (117,050,250 samples, 0.29%)</title><rect x="8.2512%" y="341" width="0.2875%" height="15" fill="rgb(206,74,20)" fg:x="3359790597" fg:w="117050250"/><text x="8.5012%" y="351.50"></text></g><g><title>alloc::str::convert_while_ascii (88,347,031 samples, 0.22%)</title><rect x="8.3217%" y="325" width="0.2170%" height="15" fill="rgb(230,138,44)" fg:x="3388493816" fg:w="88347031"/><text x="8.5717%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (12,854,738 samples, 0.03%)</title><rect x="8.5071%" y="309" width="0.0316%" height="15" fill="rgb(235,182,43)" fg:x="3463986109" fg:w="12854738"/><text x="8.7571%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (8,345,381 samples, 0.02%)</title><rect x="8.5182%" y="293" width="0.0205%" height="15" fill="rgb(242,16,51)" fg:x="3468495466" fg:w="8345381"/><text x="8.7682%" y="303.50"></text></g><g><title>alloc::string::String::as_str (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="341" width="0.0115%" height="15" fill="rgb(248,9,4)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="325" width="0.0115%" height="15" fill="rgb(210,31,22)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="309" width="0.0115%" height="15" fill="rgb(239,54,39)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="293" width="0.0115%" height="15" fill="rgb(230,99,41)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="277" width="0.0115%" height="15" fill="rgb(253,106,12)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,688,942 samples, 0.01%)</title><rect x="8.5387%" y="261" width="0.0115%" height="15" fill="rgb(213,46,41)" fg:x="3476840847" fg:w="4688942"/><text x="8.7887%" y="271.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (717,688,204 samples, 1.76%)</title><rect x="8.8253%" y="325" width="1.7626%" height="15" fill="rgb(215,133,35)" fg:x="3593549293" fg:w="717688204"/><text x="9.0753%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (22,881,278 samples, 0.06%)</title><rect x="10.5317%" y="309" width="0.0562%" height="15" fill="rgb(213,28,5)" fg:x="4288356219" fg:w="22881278"/><text x="10.7817%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (22,881,278 samples, 0.06%)</title><rect x="10.5317%" y="293" width="0.0562%" height="15" fill="rgb(215,77,49)" fg:x="4288356219" fg:w="22881278"/><text x="10.7817%" y="303.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (834,194,628 samples, 2.05%)</title><rect x="8.5502%" y="341" width="2.0487%" height="15" fill="rgb(248,100,22)" fg:x="3481529789" fg:w="834194628"/><text x="8.8002%" y="351.50">a..</text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (4,486,920 samples, 0.01%)</title><rect x="10.5879%" y="325" width="0.0110%" height="15" fill="rgb(208,67,9)" fg:x="4311237497" fg:w="4486920"/><text x="10.8379%" y="335.50"></text></g><g><title>cfree (131,513,133 samples, 0.32%)</title><rect x="10.5989%" y="341" width="0.3230%" height="15" fill="rgb(219,133,21)" fg:x="4315724417" fg:w="131513133"/><text x="10.8489%" y="351.50"></text></g><g><title>[libc.so.6] (53,295,209 samples, 0.13%)</title><rect x="10.7910%" y="325" width="0.1309%" height="15" fill="rgb(246,46,29)" fg:x="4393942341" fg:w="53295209"/><text x="11.0410%" y="335.50"></text></g><g><title>[libc.so.6] (34,223,416 samples, 0.08%)</title><rect x="10.8378%" y="309" width="0.0840%" height="15" fill="rgb(246,185,52)" fg:x="4413014134" fg:w="34223416"/><text x="11.0878%" y="319.50"></text></g><g><title>[libc.so.6] (19,776,438 samples, 0.05%)</title><rect x="10.8733%" y="293" width="0.0486%" height="15" fill="rgb(252,136,11)" fg:x="4427461112" fg:w="19776438"/><text x="11.1233%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (12,983,211 samples, 0.03%)</title><rect x="10.9219%" y="341" width="0.0319%" height="15" fill="rgb(219,138,53)" fg:x="4447237550" fg:w="12983211"/><text x="11.1719%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (159,897,037 samples, 0.39%)</title><rect x="10.9538%" y="341" width="0.3927%" height="15" fill="rgb(211,51,23)" fg:x="4460220761" fg:w="159897037"/><text x="11.2038%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (159,897,037 samples, 0.39%)</title><rect x="10.9538%" y="325" width="0.3927%" height="15" fill="rgb(247,221,28)" fg:x="4460220761" fg:w="159897037"/><text x="11.2038%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (159,897,037 samples, 0.39%)</title><rect x="10.9538%" y="309" width="0.3927%" height="15" fill="rgb(251,222,45)" fg:x="4460220761" fg:w="159897037"/><text x="11.2038%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (159,897,037 samples, 0.39%)</title><rect x="10.9538%" y="293" width="0.3927%" height="15" fill="rgb(217,162,53)" fg:x="4460220761" fg:w="159897037"/><text x="11.2038%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (152,919,808 samples, 0.38%)</title><rect x="10.9709%" y="277" width="0.3756%" height="15" fill="rgb(229,93,14)" fg:x="4467197990" fg:w="152919808"/><text x="11.2209%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (152,919,808 samples, 0.38%)</title><rect x="10.9709%" y="261" width="0.3756%" height="15" fill="rgb(209,67,49)" fg:x="4467197990" fg:w="152919808"/><text x="11.2209%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (152,919,808 samples, 0.38%)</title><rect x="10.9709%" y="245" width="0.3756%" height="15" fill="rgb(213,87,29)" fg:x="4467197990" fg:w="152919808"/><text x="11.2209%" y="255.50"></text></g><g><title>cfree (137,739,267 samples, 0.34%)</title><rect x="11.0082%" y="229" width="0.3383%" height="15" fill="rgb(205,151,52)" fg:x="4482378531" fg:w="137739267"/><text x="11.2582%" y="239.50"></text></g><g><title>[libc.so.6] (25,425,581 samples, 0.06%)</title><rect x="11.2840%" y="213" width="0.0624%" height="15" fill="rgb(253,215,39)" fg:x="4594692217" fg:w="25425581"/><text x="11.5340%" y="223.50"></text></g><g><title>[libc.so.6] (19,910,572 samples, 0.05%)</title><rect x="11.2976%" y="197" width="0.0489%" height="15" fill="rgb(221,220,41)" fg:x="4600207226" fg:w="19910572"/><text x="11.5476%" y="207.50"></text></g><g><title>[libc.so.6] (14,100,672 samples, 0.03%)</title><rect x="11.3118%" y="181" width="0.0346%" height="15" fill="rgb(218,133,21)" fg:x="4606017126" fg:w="14100672"/><text x="11.5618%" y="191.50"></text></g><g><title>[libc.so.6] (10,017,858 samples, 0.02%)</title><rect x="11.3219%" y="165" width="0.0246%" height="15" fill="rgb(221,193,43)" fg:x="4610099940" fg:w="10017858"/><text x="11.5719%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt;&gt; (20,770,178 samples, 0.05%)</title><rect x="11.3465%" y="341" width="0.0510%" height="15" fill="rgb(240,128,52)" fg:x="4620117798" fg:w="20770178"/><text x="11.5965%" y="351.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,770,178 samples, 0.05%)</title><rect x="11.3465%" y="325" width="0.0510%" height="15" fill="rgb(253,114,12)" fg:x="4620117798" fg:w="20770178"/><text x="11.5965%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20,770,178 samples, 0.05%)</title><rect x="11.3465%" y="309" width="0.0510%" height="15" fill="rgb(215,223,47)" fg:x="4620117798" fg:w="20770178"/><text x="11.5965%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_sub (20,770,178 samples, 0.05%)</title><rect x="11.3465%" y="293" width="0.0510%" height="15" fill="rgb(248,225,23)" fg:x="4620117798" fg:w="20770178"/><text x="11.5965%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (35,554,701 samples, 0.09%)</title><rect x="11.3975%" y="293" width="0.0873%" height="15" fill="rgb(250,108,0)" fg:x="4640887976" fg:w="35554701"/><text x="11.6475%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35,554,701 samples, 0.09%)</title><rect x="11.3975%" y="277" width="0.0873%" height="15" fill="rgb(228,208,7)" fg:x="4640887976" fg:w="35554701"/><text x="11.6475%" y="287.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (13,437,930 samples, 0.03%)</title><rect x="11.4848%" y="245" width="0.0330%" height="15" fill="rgb(244,45,10)" fg:x="4676442677" fg:w="13437930"/><text x="11.7348%" y="255.50"></text></g><g><title>syscall (13,437,930 samples, 0.03%)</title><rect x="11.4848%" y="229" width="0.0330%" height="15" fill="rgb(207,125,25)" fg:x="4676442677" fg:w="13437930"/><text x="11.7348%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (52,429,247 samples, 0.13%)</title><rect x="11.3975%" y="341" width="0.1288%" height="15" fill="rgb(210,195,18)" fg:x="4640887976" fg:w="52429247"/><text x="11.6475%" y="351.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (52,429,247 samples, 0.13%)</title><rect x="11.3975%" y="325" width="0.1288%" height="15" fill="rgb(249,80,12)" fg:x="4640887976" fg:w="52429247"/><text x="11.6475%" y="335.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (52,429,247 samples, 0.13%)</title><rect x="11.3975%" y="309" width="0.1288%" height="15" fill="rgb(221,65,9)" fg:x="4640887976" fg:w="52429247"/><text x="11.6475%" y="319.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (16,874,546 samples, 0.04%)</title><rect x="11.4848%" y="293" width="0.0414%" height="15" fill="rgb(235,49,36)" fg:x="4676442677" fg:w="16874546"/><text x="11.7348%" y="303.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (16,874,546 samples, 0.04%)</title><rect x="11.4848%" y="277" width="0.0414%" height="15" fill="rgb(225,32,20)" fg:x="4676442677" fg:w="16874546"/><text x="11.7348%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (16,874,546 samples, 0.04%)</title><rect x="11.4848%" y="261" width="0.0414%" height="15" fill="rgb(215,141,46)" fg:x="4676442677" fg:w="16874546"/><text x="11.7348%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (27,327,591 samples, 0.07%)</title><rect x="11.5262%" y="341" width="0.0671%" height="15" fill="rgb(250,160,47)" fg:x="4693317223" fg:w="27327591"/><text x="11.7762%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (27,327,591 samples, 0.07%)</title><rect x="11.5262%" y="325" width="0.0671%" height="15" fill="rgb(216,222,40)" fg:x="4693317223" fg:w="27327591"/><text x="11.7762%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (27,327,591 samples, 0.07%)</title><rect x="11.5262%" y="309" width="0.0671%" height="15" fill="rgb(234,217,39)" fg:x="4693317223" fg:w="27327591"/><text x="11.7762%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (27,327,591 samples, 0.07%)</title><rect x="11.5262%" y="293" width="0.0671%" height="15" fill="rgb(207,178,40)" fg:x="4693317223" fg:w="27327591"/><text x="11.7762%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (21,123,348 samples, 0.05%)</title><rect x="11.6294%" y="309" width="0.0519%" height="15" fill="rgb(221,136,13)" fg:x="4735338510" fg:w="21123348"/><text x="11.8794%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (21,123,348 samples, 0.05%)</title><rect x="11.6294%" y="293" width="0.0519%" height="15" fill="rgb(249,199,10)" fg:x="4735338510" fg:w="21123348"/><text x="11.8794%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14,339,963 samples, 0.04%)</title><rect x="11.6966%" y="277" width="0.0352%" height="15" fill="rgb(249,222,13)" fg:x="4762695879" fg:w="14339963"/><text x="11.9466%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (14,339,963 samples, 0.04%)</title><rect x="11.6966%" y="261" width="0.0352%" height="15" fill="rgb(244,185,38)" fg:x="4762695879" fg:w="14339963"/><text x="11.9466%" y="271.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow::_{{closure}} (15,184,763 samples, 0.04%)</title><rect x="11.7318%" y="277" width="0.0373%" height="15" fill="rgb(236,202,9)" fg:x="4777035842" fg:w="15184763"/><text x="11.9818%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5,907,634 samples, 0.01%)</title><rect x="11.7546%" y="261" width="0.0145%" height="15" fill="rgb(250,229,37)" fg:x="4786312971" fg:w="5907634"/><text x="12.0046%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5,907,634 samples, 0.01%)</title><rect x="11.7546%" y="245" width="0.0145%" height="15" fill="rgb(206,174,23)" fg:x="4786312971" fg:w="5907634"/><text x="12.0046%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::park (73,005,922 samples, 0.18%)</title><rect x="11.7691%" y="277" width="0.1793%" height="15" fill="rgb(211,33,43)" fg:x="4792220605" fg:w="73005922"/><text x="12.0191%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (73,005,922 samples, 0.18%)</title><rect x="11.7691%" y="261" width="0.1793%" height="15" fill="rgb(245,58,50)" fg:x="4792220605" fg:w="73005922"/><text x="12.0191%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (70,610,120 samples, 0.17%)</title><rect x="11.7750%" y="245" width="0.1734%" height="15" fill="rgb(244,68,36)" fg:x="4794616407" fg:w="70610120"/><text x="12.0250%" y="255.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (70,610,120 samples, 0.17%)</title><rect x="11.7750%" y="229" width="0.1734%" height="15" fill="rgb(232,229,15)" fg:x="4794616407" fg:w="70610120"/><text x="12.0250%" y="239.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (67,351,454 samples, 0.17%)</title><rect x="11.7830%" y="213" width="0.1654%" height="15" fill="rgb(254,30,23)" fg:x="4797875073" fg:w="67351454"/><text x="12.0330%" y="223.50"></text></g><g><title>syscall (67,351,454 samples, 0.17%)</title><rect x="11.7830%" y="197" width="0.1654%" height="15" fill="rgb(235,160,14)" fg:x="4797875073" fg:w="67351454"/><text x="12.0330%" y="207.50"></text></g><g><title>core::hint::spin_loop (10,543,956 samples, 0.03%)</title><rect x="11.9673%" y="245" width="0.0259%" height="15" fill="rgb(212,155,44)" fg:x="4872918102" fg:w="10543956"/><text x="12.2173%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (10,543,956 samples, 0.03%)</title><rect x="11.9673%" y="229" width="0.0259%" height="15" fill="rgb(226,2,50)" fg:x="4872918102" fg:w="10543956"/><text x="12.2173%" y="239.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (18,982,443 samples, 0.05%)</title><rect x="11.9673%" y="261" width="0.0466%" height="15" fill="rgb(234,177,6)" fg:x="4872918102" fg:w="18982443"/><text x="12.2173%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,438,487 samples, 0.02%)</title><rect x="11.9932%" y="245" width="0.0207%" height="15" fill="rgb(217,24,9)" fg:x="4883462058" fg:w="8438487"/><text x="12.2432%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,438,487 samples, 0.02%)</title><rect x="11.9932%" y="229" width="0.0207%" height="15" fill="rgb(220,13,46)" fg:x="4883462058" fg:w="8438487"/><text x="12.2432%" y="239.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (621,645,477 samples, 1.53%)</title><rect x="11.6966%" y="293" width="1.5267%" height="15" fill="rgb(239,221,27)" fg:x="4762695879" fg:w="621645477"/><text x="11.9466%" y="303.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (519,114,829 samples, 1.27%)</title><rect x="11.9484%" y="277" width="1.2749%" height="15" fill="rgb(222,198,25)" fg:x="4865226527" fg:w="519114829"/><text x="12.1984%" y="287.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (492,440,811 samples, 1.21%)</title><rect x="12.0139%" y="261" width="1.2094%" height="15" fill="rgb(211,99,13)" fg:x="4891900545" fg:w="492440811"/><text x="12.2639%" y="271.50"></text></g><g><title>__sched_yield (492,440,811 samples, 1.21%)</title><rect x="12.0139%" y="245" width="1.2094%" height="15" fill="rgb(232,111,31)" fg:x="4891900545" fg:w="492440811"/><text x="12.2639%" y="255.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (665,766,944 samples, 1.64%)</title><rect x="11.5933%" y="341" width="1.6350%" height="15" fill="rgb(245,82,37)" fg:x="4720644814" fg:w="665766944"/><text x="11.8433%" y="351.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (665,766,944 samples, 1.64%)</title><rect x="11.5933%" y="325" width="1.6350%" height="15" fill="rgb(227,149,46)" fg:x="4720644814" fg:w="665766944"/><text x="11.8433%" y="335.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (629,949,900 samples, 1.55%)</title><rect x="11.6813%" y="309" width="1.5471%" height="15" fill="rgb(218,36,50)" fg:x="4756461858" fg:w="629949900"/><text x="11.9313%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="197" width="0.0511%" height="15" fill="rgb(226,80,48)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="181" width="0.0511%" height="15" fill="rgb(238,224,15)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="165" width="0.0511%" height="15" fill="rgb(241,136,10)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="149" width="0.0511%" height="15" fill="rgb(208,32,45)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="133" width="0.0511%" height="15" fill="rgb(207,135,9)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="117" width="0.0511%" height="15" fill="rgb(206,86,44)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="127.50"></text></g><g><title>alloc::alloc::alloc (20,822,470 samples, 0.05%)</title><rect x="13.2503%" y="101" width="0.0511%" height="15" fill="rgb(245,177,15)" fg:x="5395352221" fg:w="20822470"/><text x="13.5003%" y="111.50"></text></g><g><title>malloc (18,958,335 samples, 0.05%)</title><rect x="13.2549%" y="85" width="0.0466%" height="15" fill="rgb(206,64,50)" fg:x="5397216356" fg:w="18958335"/><text x="13.5049%" y="95.50"></text></g><g><title>[libc.so.6] (8,991,937 samples, 0.02%)</title><rect x="13.2794%" y="69" width="0.0221%" height="15" fill="rgb(234,36,40)" fg:x="5407182754" fg:w="8991937"/><text x="13.5294%" y="79.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="325" width="0.1217%" height="15" fill="rgb(213,64,8)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="335.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="309" width="0.1217%" height="15" fill="rgb(210,75,36)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="293" width="0.1217%" height="15" fill="rgb(229,88,21)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="277" width="0.1217%" height="15" fill="rgb(252,204,47)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="261" width="0.1217%" height="15" fill="rgb(208,77,27)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="245" width="0.1217%" height="15" fill="rgb(221,76,26)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="229" width="0.1217%" height="15" fill="rgb(225,139,18)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (49,564,943 samples, 0.12%)</title><rect x="13.2503%" y="213" width="0.1217%" height="15" fill="rgb(230,137,11)" fg:x="5395352221" fg:w="49564943"/><text x="13.5003%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28,742,473 samples, 0.07%)</title><rect x="13.3015%" y="197" width="0.0706%" height="15" fill="rgb(212,28,1)" fg:x="5416174691" fg:w="28742473"/><text x="13.5515%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28,742,473 samples, 0.07%)</title><rect x="13.3015%" y="181" width="0.0706%" height="15" fill="rgb(248,164,17)" fg:x="5416174691" fg:w="28742473"/><text x="13.5515%" y="191.50"></text></g><g><title>[libc.so.6] (28,742,473 samples, 0.07%)</title><rect x="13.3015%" y="165" width="0.0706%" height="15" fill="rgb(222,171,42)" fg:x="5416174691" fg:w="28742473"/><text x="13.5515%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (8,949,843 samples, 0.02%)</title><rect x="13.8471%" y="165" width="0.0220%" height="15" fill="rgb(243,84,45)" fg:x="5638340925" fg:w="8949843"/><text x="14.0971%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,949,843 samples, 0.02%)</title><rect x="13.8471%" y="149" width="0.0220%" height="15" fill="rgb(252,49,23)" fg:x="5638340925" fg:w="8949843"/><text x="14.0971%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (117,370,914 samples, 0.29%)</title><rect x="13.8365%" y="293" width="0.2882%" height="15" fill="rgb(215,19,7)" fg:x="5634016974" fg:w="117370914"/><text x="14.0865%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (117,370,914 samples, 0.29%)</title><rect x="13.8365%" y="277" width="0.2882%" height="15" fill="rgb(238,81,41)" fg:x="5634016974" fg:w="117370914"/><text x="14.0865%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (117,370,914 samples, 0.29%)</title><rect x="13.8365%" y="261" width="0.2882%" height="15" fill="rgb(210,199,37)" fg:x="5634016974" fg:w="117370914"/><text x="14.0865%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (117,370,914 samples, 0.29%)</title><rect x="13.8365%" y="245" width="0.2882%" height="15" fill="rgb(244,192,49)" fg:x="5634016974" fg:w="117370914"/><text x="14.0865%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (117,370,914 samples, 0.29%)</title><rect x="13.8365%" y="229" width="0.2882%" height="15" fill="rgb(226,211,11)" fg:x="5634016974" fg:w="117370914"/><text x="14.0865%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (115,381,859 samples, 0.28%)</title><rect x="13.8414%" y="213" width="0.2834%" height="15" fill="rgb(236,162,54)" fg:x="5636006029" fg:w="115381859"/><text x="14.0914%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115,381,859 samples, 0.28%)</title><rect x="13.8414%" y="197" width="0.2834%" height="15" fill="rgb(220,229,9)" fg:x="5636006029" fg:w="115381859"/><text x="14.0914%" y="207.50"></text></g><g><title>alloc::alloc::alloc (115,381,859 samples, 0.28%)</title><rect x="13.8414%" y="181" width="0.2834%" height="15" fill="rgb(250,87,22)" fg:x="5636006029" fg:w="115381859"/><text x="14.0914%" y="191.50"></text></g><g><title>malloc (98,436,730 samples, 0.24%)</title><rect x="13.8830%" y="165" width="0.2417%" height="15" fill="rgb(239,43,17)" fg:x="5652951158" fg:w="98436730"/><text x="14.1330%" y="175.50"></text></g><g><title>[libc.so.6] (58,134,847 samples, 0.14%)</title><rect x="13.9819%" y="149" width="0.1428%" height="15" fill="rgb(231,177,25)" fg:x="5693253041" fg:w="58134847"/><text x="14.2319%" y="159.50"></text></g><g><title>[libc.so.6] (5,257,511 samples, 0.01%)</title><rect x="14.1118%" y="133" width="0.0129%" height="15" fill="rgb(219,179,1)" fg:x="5746130377" fg:w="5257511"/><text x="14.3618%" y="143.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (387,582,071 samples, 0.95%)</title><rect x="13.3721%" y="325" width="0.9519%" height="15" fill="rgb(238,219,53)" fg:x="5444917164" fg:w="387582071"/><text x="13.6221%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (373,374,999 samples, 0.92%)</title><rect x="13.4070%" y="309" width="0.9170%" height="15" fill="rgb(232,167,36)" fg:x="5459124236" fg:w="373374999"/><text x="13.6570%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (81,111,347 samples, 0.20%)</title><rect x="14.1247%" y="293" width="0.1992%" height="15" fill="rgb(244,19,51)" fg:x="5751387888" fg:w="81111347"/><text x="14.3747%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (24,798,940 samples, 0.06%)</title><rect x="14.2630%" y="277" width="0.0609%" height="15" fill="rgb(224,6,22)" fg:x="5807700295" fg:w="24798940"/><text x="14.5130%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="325" width="0.1843%" height="15" fill="rgb(224,145,5)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="309" width="0.1843%" height="15" fill="rgb(234,130,49)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="293" width="0.1843%" height="15" fill="rgb(254,6,2)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="277" width="0.1843%" height="15" fill="rgb(208,96,46)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="261" width="0.1843%" height="15" fill="rgb(239,3,39)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="245" width="0.1843%" height="15" fill="rgb(233,210,1)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="229" width="0.1843%" height="15" fill="rgb(244,137,37)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="239.50"></text></g><g><title>cfree (75,037,710 samples, 0.18%)</title><rect x="14.3298%" y="213" width="0.1843%" height="15" fill="rgb(240,136,2)" fg:x="5834910401" fg:w="75037710"/><text x="14.5798%" y="223.50"></text></g><g><title>[libc.so.6] (41,455,418 samples, 0.10%)</title><rect x="14.4123%" y="197" width="0.1018%" height="15" fill="rgb(239,18,37)" fg:x="5868492693" fg:w="41455418"/><text x="14.6623%" y="207.50"></text></g><g><title>[libc.so.6] (31,667,591 samples, 0.08%)</title><rect x="14.4363%" y="181" width="0.0778%" height="15" fill="rgb(218,185,22)" fg:x="5878280520" fg:w="31667591"/><text x="14.6863%" y="191.50"></text></g><g><title>[libc.so.6] (16,872,769 samples, 0.04%)</title><rect x="14.4727%" y="165" width="0.0414%" height="15" fill="rgb(225,218,4)" fg:x="5893075342" fg:w="16872769"/><text x="14.7227%" y="175.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (11,110,907 samples, 0.03%)</title><rect x="14.5141%" y="309" width="0.0273%" height="15" fill="rgb(230,182,32)" fg:x="5909948111" fg:w="11110907"/><text x="14.7641%" y="319.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (11,110,907 samples, 0.03%)</title><rect x="14.5141%" y="293" width="0.0273%" height="15" fill="rgb(242,56,43)" fg:x="5909948111" fg:w="11110907"/><text x="14.7641%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (11,110,907 samples, 0.03%)</title><rect x="14.5141%" y="277" width="0.0273%" height="15" fill="rgb(233,99,24)" fg:x="5909948111" fg:w="11110907"/><text x="14.7641%" y="287.50"></text></g><g><title>server::get_value_type (567,857,258 samples, 1.39%)</title><rect x="13.2328%" y="341" width="1.3946%" height="15" fill="rgb(234,209,42)" fg:x="5388215222" fg:w="567857258"/><text x="13.4828%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (46,124,369 samples, 0.11%)</title><rect x="14.5141%" y="325" width="0.1133%" height="15" fill="rgb(227,7,12)" fg:x="5909948111" fg:w="46124369"/><text x="14.7641%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (35,013,462 samples, 0.09%)</title><rect x="14.5414%" y="309" width="0.0860%" height="15" fill="rgb(245,203,43)" fg:x="5921059018" fg:w="35013462"/><text x="14.7914%" y="319.50"></text></g><g><title>core::num::dec2flt::dec2flt (25,037,195 samples, 0.06%)</title><rect x="14.5659%" y="293" width="0.0615%" height="15" fill="rgb(238,205,33)" fg:x="5931035285" fg:w="25037195"/><text x="14.8159%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (16,007,240 samples, 0.04%)</title><rect x="14.5881%" y="277" width="0.0393%" height="15" fill="rgb(231,56,7)" fg:x="5940065240" fg:w="16007240"/><text x="14.8381%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (10,560,404 samples, 0.03%)</title><rect x="14.6015%" y="261" width="0.0259%" height="15" fill="rgb(244,186,29)" fg:x="5945512076" fg:w="10560404"/><text x="14.8515%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (19,955,070 samples, 0.05%)</title><rect x="14.6615%" y="277" width="0.0490%" height="15" fill="rgb(234,111,31)" fg:x="5969976483" fg:w="19955070"/><text x="14.9115%" y="287.50"></text></g><g><title>alloc::string::String::push_str (4,684,733 samples, 0.01%)</title><rect x="14.6990%" y="261" width="0.0115%" height="15" fill="rgb(241,149,10)" fg:x="5985246820" fg:w="4684733"/><text x="14.9490%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,684,733 samples, 0.01%)</title><rect x="14.6990%" y="245" width="0.0115%" height="15" fill="rgb(249,206,44)" fg:x="5985246820" fg:w="4684733"/><text x="14.9490%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,684,733 samples, 0.01%)</title><rect x="14.6990%" y="229" width="0.0115%" height="15" fill="rgb(251,153,30)" fg:x="5985246820" fg:w="4684733"/><text x="14.9490%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,684,733 samples, 0.01%)</title><rect x="14.6990%" y="213" width="0.0115%" height="15" fill="rgb(239,152,38)" fg:x="5985246820" fg:w="4684733"/><text x="14.9490%" y="223.50"></text></g><g><title>[unknown] (22,627,786 samples, 0.06%)</title><rect x="14.6615%" y="293" width="0.0556%" height="15" fill="rgb(249,139,47)" fg:x="5969976483" fg:w="22627786"/><text x="14.9115%" y="303.50"></text></g><g><title>core::fmt::Formatter::new (6,767,291 samples, 0.02%)</title><rect x="14.7256%" y="293" width="0.0166%" height="15" fill="rgb(244,64,35)" fg:x="5996054405" fg:w="6767291"/><text x="14.9756%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4,583,699 samples, 0.01%)</title><rect x="14.8758%" y="197" width="0.0113%" height="15" fill="rgb(216,46,15)" fg:x="6057228535" fg:w="4583699"/><text x="15.1258%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (13,880,176 samples, 0.03%)</title><rect x="14.9243%" y="117" width="0.0341%" height="15" fill="rgb(250,74,19)" fg:x="6076972463" fg:w="13880176"/><text x="15.1743%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (5,849,376 samples, 0.01%)</title><rect x="14.9880%" y="101" width="0.0144%" height="15" fill="rgb(249,42,33)" fg:x="6102910415" fg:w="5849376"/><text x="15.2380%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5,849,376 samples, 0.01%)</title><rect x="14.9880%" y="85" width="0.0144%" height="15" fill="rgb(242,149,17)" fg:x="6102910415" fg:w="5849376"/><text x="15.2380%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6,010,183 samples, 0.01%)</title><rect x="15.0104%" y="101" width="0.0148%" height="15" fill="rgb(244,29,21)" fg:x="6112005729" fg:w="6010183"/><text x="15.2604%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (49,224,846 samples, 0.12%)</title><rect x="14.9584%" y="117" width="0.1209%" height="15" fill="rgb(220,130,37)" fg:x="6090852639" fg:w="49224846"/><text x="15.2084%" y="127.50"></text></g><g><title>malloc (22,061,573 samples, 0.05%)</title><rect x="15.0251%" y="101" width="0.0542%" height="15" fill="rgb(211,67,2)" fg:x="6118015912" fg:w="22061573"/><text x="15.2751%" y="111.50"></text></g><g><title>[libc.so.6] (7,764,880 samples, 0.02%)</title><rect x="15.0602%" y="85" width="0.0191%" height="15" fill="rgb(235,68,52)" fg:x="6132312605" fg:w="7764880"/><text x="15.3102%" y="95.50"></text></g><g><title>alloc::raw_vec::layout_array (11,999,976 samples, 0.03%)</title><rect x="15.0793%" y="117" width="0.0295%" height="15" fill="rgb(246,142,3)" fg:x="6140077485" fg:w="11999976"/><text x="15.3293%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::repeat (11,999,976 samples, 0.03%)</title><rect x="15.0793%" y="101" width="0.0295%" height="15" fill="rgb(241,25,7)" fg:x="6140077485" fg:w="11999976"/><text x="15.3293%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (11,999,976 samples, 0.03%)</title><rect x="15.0793%" y="85" width="0.0295%" height="15" fill="rgb(242,119,39)" fg:x="6140077485" fg:w="11999976"/><text x="15.3293%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (11,999,976 samples, 0.03%)</title><rect x="15.0793%" y="69" width="0.0295%" height="15" fill="rgb(241,98,45)" fg:x="6140077485" fg:w="11999976"/><text x="15.3293%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11,999,976 samples, 0.03%)</title><rect x="15.0793%" y="53" width="0.0295%" height="15" fill="rgb(254,28,30)" fg:x="6140077485" fg:w="11999976"/><text x="15.3293%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (100,027,903 samples, 0.25%)</title><rect x="14.8871%" y="197" width="0.2457%" height="15" fill="rgb(241,142,54)" fg:x="6061812234" fg:w="100027903"/><text x="15.1371%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (100,027,903 samples, 0.25%)</title><rect x="14.8871%" y="181" width="0.2457%" height="15" fill="rgb(222,85,15)" fg:x="6061812234" fg:w="100027903"/><text x="15.1371%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (100,027,903 samples, 0.25%)</title><rect x="14.8871%" y="165" width="0.2457%" height="15" fill="rgb(210,85,47)" fg:x="6061812234" fg:w="100027903"/><text x="15.1371%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (89,811,617 samples, 0.22%)</title><rect x="14.9122%" y="149" width="0.2206%" height="15" fill="rgb(224,206,25)" fg:x="6072028520" fg:w="89811617"/><text x="15.1622%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (89,811,617 samples, 0.22%)</title><rect x="14.9122%" y="133" width="0.2206%" height="15" fill="rgb(243,201,19)" fg:x="6072028520" fg:w="89811617"/><text x="15.1622%" y="143.50"></text></g><g><title>core::cmp::max (7,307,878 samples, 0.02%)</title><rect x="15.1148%" y="117" width="0.0179%" height="15" fill="rgb(236,59,4)" fg:x="6154532259" fg:w="7307878"/><text x="15.3648%" y="127.50"></text></g><g><title>core::cmp::Ord::max (7,307,878 samples, 0.02%)</title><rect x="15.1148%" y="101" width="0.0179%" height="15" fill="rgb(254,179,45)" fg:x="6154532259" fg:w="7307878"/><text x="15.3648%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (136,293,573 samples, 0.33%)</title><rect x="14.8369%" y="277" width="0.3347%" height="15" fill="rgb(226,14,10)" fg:x="6041386394" fg:w="136293573"/><text x="15.0869%" y="287.50"></text></g><g><title>alloc::string::String::push_str (136,293,573 samples, 0.33%)</title><rect x="14.8369%" y="261" width="0.3347%" height="15" fill="rgb(244,27,41)" fg:x="6041386394" fg:w="136293573"/><text x="15.0869%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (136,293,573 samples, 0.33%)</title><rect x="14.8369%" y="245" width="0.3347%" height="15" fill="rgb(235,35,32)" fg:x="6041386394" fg:w="136293573"/><text x="15.0869%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (136,293,573 samples, 0.33%)</title><rect x="14.8369%" y="229" width="0.3347%" height="15" fill="rgb(218,68,31)" fg:x="6041386394" fg:w="136293573"/><text x="15.0869%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (136,293,573 samples, 0.33%)</title><rect x="14.8369%" y="213" width="0.3347%" height="15" fill="rgb(207,120,37)" fg:x="6041386394" fg:w="136293573"/><text x="15.0869%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15,839,830 samples, 0.04%)</title><rect x="15.1327%" y="197" width="0.0389%" height="15" fill="rgb(227,98,0)" fg:x="6161840137" fg:w="15839830"/><text x="15.3827%" y="207.50"></text></g><g><title>[libc.so.6] (15,839,830 samples, 0.04%)</title><rect x="15.1327%" y="181" width="0.0389%" height="15" fill="rgb(207,7,3)" fg:x="6161840137" fg:w="15839830"/><text x="15.3827%" y="191.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (54,900,990 samples, 0.13%)</title><rect x="15.3448%" y="261" width="0.1348%" height="15" fill="rgb(206,98,19)" fg:x="6248208894" fg:w="54900990"/><text x="15.5948%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral (128,082,968 samples, 0.31%)</title><rect x="15.1716%" y="277" width="0.3146%" height="15" fill="rgb(217,5,26)" fg:x="6177679967" fg:w="128082968"/><text x="15.4216%" y="287.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (344,065,419 samples, 0.84%)</title><rect x="14.6464%" y="325" width="0.8450%" height="15" fill="rgb(235,190,38)" fg:x="5963820976" fg:w="344065419"/><text x="14.8964%" y="335.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (344,065,419 samples, 0.84%)</title><rect x="14.6464%" y="309" width="0.8450%" height="15" fill="rgb(247,86,24)" fg:x="5963820976" fg:w="344065419"/><text x="14.8964%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (305,064,699 samples, 0.75%)</title><rect x="14.7422%" y="293" width="0.7492%" height="15" fill="rgb(205,101,16)" fg:x="6002821696" fg:w="305064699"/><text x="14.9922%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (10,953,299 samples, 0.03%)</title><rect x="15.5029%" y="165" width="0.0269%" height="15" fill="rgb(246,168,33)" fg:x="6312575608" fg:w="10953299"/><text x="15.7529%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10,953,299 samples, 0.03%)</title><rect x="15.5029%" y="149" width="0.0269%" height="15" fill="rgb(231,114,1)" fg:x="6312575608" fg:w="10953299"/><text x="15.7529%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (183,458,556 samples, 0.45%)</title><rect x="15.4980%" y="277" width="0.4506%" height="15" fill="rgb(207,184,53)" fg:x="6310557829" fg:w="183458556"/><text x="15.7480%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (183,458,556 samples, 0.45%)</title><rect x="15.4980%" y="261" width="0.4506%" height="15" fill="rgb(224,95,51)" fg:x="6310557829" fg:w="183458556"/><text x="15.7480%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (183,458,556 samples, 0.45%)</title><rect x="15.4980%" y="245" width="0.4506%" height="15" fill="rgb(212,188,45)" fg:x="6310557829" fg:w="183458556"/><text x="15.7480%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (183,458,556 samples, 0.45%)</title><rect x="15.4980%" y="229" width="0.4506%" height="15" fill="rgb(223,154,38)" fg:x="6310557829" fg:w="183458556"/><text x="15.7480%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (181,440,777 samples, 0.45%)</title><rect x="15.5029%" y="213" width="0.4456%" height="15" fill="rgb(251,22,52)" fg:x="6312575608" fg:w="181440777"/><text x="15.7529%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (181,440,777 samples, 0.45%)</title><rect x="15.5029%" y="197" width="0.4456%" height="15" fill="rgb(229,209,22)" fg:x="6312575608" fg:w="181440777"/><text x="15.7529%" y="207.50"></text></g><g><title>alloc::alloc::alloc (181,440,777 samples, 0.45%)</title><rect x="15.5029%" y="181" width="0.4456%" height="15" fill="rgb(234,138,34)" fg:x="6312575608" fg:w="181440777"/><text x="15.7529%" y="191.50"></text></g><g><title>malloc (170,487,478 samples, 0.42%)</title><rect x="15.5298%" y="165" width="0.4187%" height="15" fill="rgb(212,95,11)" fg:x="6323528907" fg:w="170487478"/><text x="15.7798%" y="175.50"></text></g><g><title>[libc.so.6] (109,468,766 samples, 0.27%)</title><rect x="15.6797%" y="149" width="0.2688%" height="15" fill="rgb(240,179,47)" fg:x="6384547619" fg:w="109468766"/><text x="15.9297%" y="159.50"></text></g><g><title>[libc.so.6] (30,549,964 samples, 0.08%)</title><rect x="15.8735%" y="133" width="0.0750%" height="15" fill="rgb(240,163,11)" fg:x="6463466421" fg:w="30549964"/><text x="16.1235%" y="143.50"></text></g><g><title>__mprotect (7,248,851 samples, 0.02%)</title><rect x="15.9307%" y="117" width="0.0178%" height="15" fill="rgb(236,37,12)" fg:x="6486767534" fg:w="7248851"/><text x="16.1807%" y="127.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (263,089,606 samples, 0.65%)</title><rect x="15.4914%" y="325" width="0.6461%" height="15" fill="rgb(232,164,16)" fg:x="6307886395" fg:w="263089606"/><text x="15.7414%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (263,089,606 samples, 0.65%)</title><rect x="15.4914%" y="309" width="0.6461%" height="15" fill="rgb(244,205,15)" fg:x="6307886395" fg:w="263089606"/><text x="15.7414%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (263,089,606 samples, 0.65%)</title><rect x="15.4914%" y="293" width="0.6461%" height="15" fill="rgb(223,117,47)" fg:x="6307886395" fg:w="263089606"/><text x="15.7414%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (76,959,616 samples, 0.19%)</title><rect x="15.9485%" y="277" width="0.1890%" height="15" fill="rgb(244,107,35)" fg:x="6494016385" fg:w="76959616"/><text x="16.1985%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76,959,616 samples, 0.19%)</title><rect x="15.9485%" y="261" width="0.1890%" height="15" fill="rgb(205,140,8)" fg:x="6494016385" fg:w="76959616"/><text x="16.1985%" y="271.50"></text></g><g><title>[libc.so.6] (74,546,601 samples, 0.18%)</title><rect x="15.9544%" y="245" width="0.1831%" height="15" fill="rgb(228,84,46)" fg:x="6496429400" fg:w="74546601"/><text x="16.2044%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,023,429 samples, 0.01%)</title><rect x="16.1523%" y="213" width="0.0123%" height="15" fill="rgb(254,188,9)" fg:x="6576999492" fg:w="5023429"/><text x="16.4023%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,502,086 samples, 0.01%)</title><rect x="16.1647%" y="213" width="0.0135%" height="15" fill="rgb(206,112,54)" fg:x="6582022921" fg:w="5502086"/><text x="16.4147%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (10,521,522 samples, 0.03%)</title><rect x="16.1970%" y="197" width="0.0258%" height="15" fill="rgb(216,84,49)" fg:x="6595176608" fg:w="10521522"/><text x="16.4470%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10,521,522 samples, 0.03%)</title><rect x="16.1970%" y="181" width="0.0258%" height="15" fill="rgb(214,194,35)" fg:x="6595176608" fg:w="10521522"/><text x="16.4470%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (55,602,872 samples, 0.14%)</title><rect x="16.1782%" y="213" width="0.1366%" height="15" fill="rgb(249,28,3)" fg:x="6587525007" fg:w="55602872"/><text x="16.4282%" y="223.50"></text></g><g><title>malloc (33,165,999 samples, 0.08%)</title><rect x="16.2333%" y="197" width="0.0815%" height="15" fill="rgb(222,56,52)" fg:x="6609961880" fg:w="33165999"/><text x="16.4833%" y="207.50"></text></g><g><title>alloc::string::String::push (79,407,150 samples, 0.20%)</title><rect x="16.1375%" y="325" width="0.1950%" height="15" fill="rgb(245,217,50)" fg:x="6570976001" fg:w="79407150"/><text x="16.3875%" y="335.50"></text></g><g><title>alloc::string::String::reserve (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="309" width="0.1906%" height="15" fill="rgb(213,201,24)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="293" width="0.1906%" height="15" fill="rgb(248,116,28)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="277" width="0.1906%" height="15" fill="rgb(219,72,43)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="261" width="0.1906%" height="15" fill="rgb(209,138,14)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="245" width="0.1906%" height="15" fill="rgb(222,18,33)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (77,603,466 samples, 0.19%)</title><rect x="16.1420%" y="229" width="0.1906%" height="15" fill="rgb(213,199,7)" fg:x="6572779685" fg:w="77603466"/><text x="16.3920%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8,232,706 samples, 0.02%)</title><rect x="16.3493%" y="261" width="0.0202%" height="15" fill="rgb(250,110,10)" fg:x="6657217636" fg:w="8232706"/><text x="16.5993%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,232,706 samples, 0.02%)</title><rect x="16.3493%" y="245" width="0.0202%" height="15" fill="rgb(248,123,6)" fg:x="6657217636" fg:w="8232706"/><text x="16.5993%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,232,706 samples, 0.02%)</title><rect x="16.3493%" y="229" width="0.0202%" height="15" fill="rgb(206,91,31)" fg:x="6657217636" fg:w="8232706"/><text x="16.5993%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,232,706 samples, 0.02%)</title><rect x="16.3493%" y="213" width="0.0202%" height="15" fill="rgb(211,154,13)" fg:x="6657217636" fg:w="8232706"/><text x="16.5993%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4,439,754 samples, 0.01%)</title><rect x="16.3695%" y="261" width="0.0109%" height="15" fill="rgb(225,148,7)" fg:x="6665450342" fg:w="4439754"/><text x="16.6195%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (13,361,911 samples, 0.03%)</title><rect x="16.4047%" y="213" width="0.0328%" height="15" fill="rgb(220,160,43)" fg:x="6679746116" fg:w="13361911"/><text x="16.6547%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (8,424,038 samples, 0.02%)</title><rect x="16.4168%" y="197" width="0.0207%" height="15" fill="rgb(213,52,39)" fg:x="6684683989" fg:w="8424038"/><text x="16.6668%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9,536,758 samples, 0.02%)</title><rect x="16.4644%" y="181" width="0.0234%" height="15" fill="rgb(243,137,7)" fg:x="6704074211" fg:w="9536758"/><text x="16.7144%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (17,206,379 samples, 0.04%)</title><rect x="16.4878%" y="181" width="0.0423%" height="15" fill="rgb(230,79,13)" fg:x="6713610969" fg:w="17206379"/><text x="16.7378%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (9,019,632 samples, 0.02%)</title><rect x="16.5301%" y="181" width="0.0222%" height="15" fill="rgb(247,105,23)" fg:x="6730817348" fg:w="9019632"/><text x="16.7801%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (41,265,872 samples, 0.10%)</title><rect x="16.5787%" y="117" width="0.1013%" height="15" fill="rgb(223,179,41)" fg:x="6750614487" fg:w="41265872"/><text x="16.8287%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (21,105,909 samples, 0.05%)</title><rect x="16.6282%" y="101" width="0.0518%" height="15" fill="rgb(218,9,34)" fg:x="6770774450" fg:w="21105909"/><text x="16.8782%" y="111.50"></text></g><g><title>[libc.so.6] (10,039,651 samples, 0.02%)</title><rect x="19.4190%" y="53" width="0.0247%" height="15" fill="rgb(222,106,8)" fg:x="7907147303" fg:w="10039651"/><text x="19.6690%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,184,488,793 samples, 2.91%)</title><rect x="16.5615%" y="165" width="2.9090%" height="15" fill="rgb(211,220,0)" fg:x="6743593246" fg:w="1184488793"/><text x="16.8115%" y="175.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (1,184,488,793 samples, 2.91%)</title><rect x="16.5615%" y="149" width="2.9090%" height="15" fill="rgb(229,52,16)" fg:x="6743593246" fg:w="1184488793"/><text x="16.8115%" y="159.50">al..</text></g><g><title>alloc::alloc::realloc (1,177,467,552 samples, 2.89%)</title><rect x="16.5787%" y="133" width="2.8917%" height="15" fill="rgb(212,155,18)" fg:x="6750614487" fg:w="1177467552"/><text x="16.8287%" y="143.50">al..</text></g><g><title>realloc (1,133,754,828 samples, 2.78%)</title><rect x="16.6861%" y="117" width="2.7844%" height="15" fill="rgb(242,21,14)" fg:x="6794327211" fg:w="1133754828"/><text x="16.9361%" y="127.50">re..</text></g><g><title>[libc.so.6] (941,019,836 samples, 2.31%)</title><rect x="17.1594%" y="101" width="2.3110%" height="15" fill="rgb(222,19,48)" fg:x="6987062203" fg:w="941019836"/><text x="17.4094%" y="111.50">[..</text></g><g><title>[libc.so.6] (792,735,245 samples, 1.95%)</title><rect x="17.5236%" y="85" width="1.9469%" height="15" fill="rgb(232,45,27)" fg:x="7135346794" fg:w="792735245"/><text x="17.7736%" y="95.50">[..</text></g><g><title>[libc.so.6] (188,465,713 samples, 0.46%)</title><rect x="19.0076%" y="69" width="0.4628%" height="15" fill="rgb(249,103,42)" fg:x="7739616326" fg:w="188465713"/><text x="19.2576%" y="79.50"></text></g><g><title>__mprotect (10,895,085 samples, 0.03%)</title><rect x="19.4437%" y="53" width="0.0268%" height="15" fill="rgb(246,81,33)" fg:x="7917186954" fg:w="10895085"/><text x="19.6937%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,208,566,649 samples, 2.97%)</title><rect x="16.5522%" y="181" width="2.9681%" height="15" fill="rgb(252,33,42)" fg:x="6739836980" fg:w="1208566649"/><text x="16.8022%" y="191.50">all..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (20,321,590 samples, 0.05%)</title><rect x="19.4704%" y="165" width="0.0499%" height="15" fill="rgb(209,212,41)" fg:x="7928082039" fg:w="20321590"/><text x="19.7204%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (10,727,157 samples, 0.03%)</title><rect x="19.5203%" y="181" width="0.0263%" height="15" fill="rgb(207,154,6)" fg:x="7948403629" fg:w="10727157"/><text x="19.7703%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (10,727,157 samples, 0.03%)</title><rect x="19.5203%" y="165" width="0.0263%" height="15" fill="rgb(223,64,47)" fg:x="7948403629" fg:w="10727157"/><text x="19.7703%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (8,557,171 samples, 0.02%)</title><rect x="19.5257%" y="149" width="0.0210%" height="15" fill="rgb(211,161,38)" fg:x="7950573615" fg:w="8557171"/><text x="19.7757%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (8,557,171 samples, 0.02%)</title><rect x="19.5257%" y="133" width="0.0210%" height="15" fill="rgb(219,138,40)" fg:x="7950573615" fg:w="8557171"/><text x="19.7757%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (8,557,171 samples, 0.02%)</title><rect x="19.5257%" y="117" width="0.0210%" height="15" fill="rgb(241,228,46)" fg:x="7950573615" fg:w="8557171"/><text x="19.7757%" y="127.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (16,634,379 samples, 0.04%)</title><rect x="19.5467%" y="181" width="0.0409%" height="15" fill="rgb(223,209,38)" fg:x="7959130786" fg:w="16634379"/><text x="19.7967%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,310,750,445 samples, 3.22%)</title><rect x="16.3804%" y="261" width="3.2190%" height="15" fill="rgb(236,164,45)" fg:x="6669890096" fg:w="1310750445"/><text x="16.6304%" y="271.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,310,750,445 samples, 3.22%)</title><rect x="16.3804%" y="245" width="3.2190%" height="15" fill="rgb(231,15,5)" fg:x="6669890096" fg:w="1310750445"/><text x="16.6304%" y="255.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,310,750,445 samples, 3.22%)</title><rect x="16.3804%" y="229" width="3.2190%" height="15" fill="rgb(252,35,15)" fg:x="6669890096" fg:w="1310750445"/><text x="16.6304%" y="239.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,287,532,514 samples, 3.16%)</title><rect x="16.4375%" y="213" width="3.1620%" height="15" fill="rgb(248,181,18)" fg:x="6693108027" fg:w="1287532514"/><text x="16.6875%" y="223.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,287,532,514 samples, 3.16%)</title><rect x="16.4375%" y="197" width="3.1620%" height="15" fill="rgb(233,39,42)" fg:x="6693108027" fg:w="1287532514"/><text x="16.6875%" y="207.50">all..</text></g><g><title>core::cmp::max (4,875,376 samples, 0.01%)</title><rect x="19.5875%" y="181" width="0.0120%" height="15" fill="rgb(238,110,33)" fg:x="7975765165" fg:w="4875376"/><text x="19.8375%" y="191.50"></text></g><g><title>core::cmp::Ord::max (4,875,376 samples, 0.01%)</title><rect x="19.5875%" y="165" width="0.0120%" height="15" fill="rgb(233,195,10)" fg:x="7975765165" fg:w="4875376"/><text x="19.8375%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (135,107,337 samples, 0.33%)</title><rect x="19.5995%" y="261" width="0.3318%" height="15" fill="rgb(254,105,3)" fg:x="7980640541" fg:w="135107337"/><text x="19.8495%" y="271.50"></text></g><g><title>[libc.so.6] (135,107,337 samples, 0.33%)</title><rect x="19.5995%" y="245" width="0.3318%" height="15" fill="rgb(221,225,9)" fg:x="7980640541" fg:w="135107337"/><text x="19.8495%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1,467,433,838 samples, 3.60%)</title><rect x="16.3325%" y="325" width="3.6038%" height="15" fill="rgb(224,227,45)" fg:x="6650383151" fg:w="1467433838"/><text x="16.5825%" y="335.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,467,433,838 samples, 3.60%)</title><rect x="16.3325%" y="309" width="3.6038%" height="15" fill="rgb(229,198,43)" fg:x="6650383151" fg:w="1467433838"/><text x="16.5825%" y="319.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,467,433,838 samples, 3.60%)</title><rect x="16.3325%" y="293" width="3.6038%" height="15" fill="rgb(206,209,35)" fg:x="6650383151" fg:w="1467433838"/><text x="16.5825%" y="303.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,467,433,838 samples, 3.60%)</title><rect x="16.3325%" y="277" width="3.6038%" height="15" fill="rgb(245,195,53)" fg:x="6650383151" fg:w="1467433838"/><text x="16.5825%" y="287.50">allo..</text></g><g><title>__rustc::__rust_dealloc (12,151,868 samples, 0.03%)</title><rect x="19.9525%" y="213" width="0.0298%" height="15" fill="rgb(240,92,26)" fg:x="8124387239" fg:w="12151868"/><text x="20.2025%" y="223.50"></text></g><g><title>server_lib::resp3::bulk_string_response (2,360,264,573 samples, 5.80%)</title><rect x="14.6274%" y="341" width="5.7965%" height="15" fill="rgb(207,40,23)" fg:x="5956072480" fg:w="2360264573"/><text x="14.8774%" y="351.50">server_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (198,520,064 samples, 0.49%)</title><rect x="19.9364%" y="325" width="0.4875%" height="15" fill="rgb(223,111,35)" fg:x="8117816989" fg:w="198520064"/><text x="20.1864%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (198,520,064 samples, 0.49%)</title><rect x="19.9364%" y="309" width="0.4875%" height="15" fill="rgb(229,147,28)" fg:x="8117816989" fg:w="198520064"/><text x="20.1864%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (198,520,064 samples, 0.49%)</title><rect x="19.9364%" y="293" width="0.4875%" height="15" fill="rgb(211,29,28)" fg:x="8117816989" fg:w="198520064"/><text x="20.1864%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (198,520,064 samples, 0.49%)</title><rect x="19.9364%" y="277" width="0.4875%" height="15" fill="rgb(228,72,33)" fg:x="8117816989" fg:w="198520064"/><text x="20.1864%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (196,364,865 samples, 0.48%)</title><rect x="19.9417%" y="261" width="0.4822%" height="15" fill="rgb(205,214,31)" fg:x="8119972188" fg:w="196364865"/><text x="20.1917%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (196,364,865 samples, 0.48%)</title><rect x="19.9417%" y="245" width="0.4822%" height="15" fill="rgb(224,111,15)" fg:x="8119972188" fg:w="196364865"/><text x="20.1917%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (196,364,865 samples, 0.48%)</title><rect x="19.9417%" y="229" width="0.4822%" height="15" fill="rgb(253,21,26)" fg:x="8119972188" fg:w="196364865"/><text x="20.1917%" y="239.50"></text></g><g><title>cfree (179,797,946 samples, 0.44%)</title><rect x="19.9824%" y="213" width="0.4416%" height="15" fill="rgb(245,139,43)" fg:x="8136539107" fg:w="179797946"/><text x="20.2324%" y="223.50"></text></g><g><title>[libc.so.6] (90,006,191 samples, 0.22%)</title><rect x="20.2029%" y="197" width="0.2210%" height="15" fill="rgb(252,170,7)" fg:x="8226330862" fg:w="90006191"/><text x="20.4529%" y="207.50"></text></g><g><title>[libc.so.6] (56,390,277 samples, 0.14%)</title><rect x="20.2854%" y="181" width="0.1385%" height="15" fill="rgb(231,118,14)" fg:x="8259946776" fg:w="56390277"/><text x="20.5354%" y="191.50"></text></g><g><title>[libc.so.6] (39,063,425 samples, 0.10%)</title><rect x="20.3280%" y="165" width="0.0959%" height="15" fill="rgb(238,83,0)" fg:x="8277273628" fg:w="39063425"/><text x="20.5780%" y="175.50"></text></g><g><title>__rustc::__rust_alloc (5,993,352 samples, 0.01%)</title><rect x="20.7048%" y="117" width="0.0147%" height="15" fill="rgb(221,39,39)" fg:x="8430699968" fg:w="5993352"/><text x="20.9548%" y="127.50"></text></g><g><title>core::ptr::read_volatile (7,150,965 samples, 0.02%)</title><rect x="20.7195%" y="117" width="0.0176%" height="15" fill="rgb(222,119,46)" fg:x="8436693320" fg:w="7150965"/><text x="20.9695%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="229" width="0.8111%" height="15" fill="rgb(222,165,49)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="213" width="0.8111%" height="15" fill="rgb(219,113,52)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="197" width="0.8111%" height="15" fill="rgb(214,7,15)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="181" width="0.8111%" height="15" fill="rgb(235,32,4)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="165" width="0.8111%" height="15" fill="rgb(238,90,54)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="149" width="0.8111%" height="15" fill="rgb(213,208,19)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="159.50"></text></g><g><title>alloc::alloc::alloc (330,287,776 samples, 0.81%)</title><rect x="20.6981%" y="133" width="0.8111%" height="15" fill="rgb(233,156,4)" fg:x="8427965330" fg:w="330287776"/><text x="20.9481%" y="143.50"></text></g><g><title>malloc (314,408,821 samples, 0.77%)</title><rect x="20.7371%" y="117" width="0.7722%" height="15" fill="rgb(207,194,5)" fg:x="8443844285" fg:w="314408821"/><text x="20.9871%" y="127.50"></text></g><g><title>[libc.so.6] (227,563,062 samples, 0.56%)</title><rect x="20.9503%" y="101" width="0.5589%" height="15" fill="rgb(206,111,30)" fg:x="8530690044" fg:w="227563062"/><text x="21.2003%" y="111.50"></text></g><g><title>[libc.so.6] (23,789,745 samples, 0.06%)</title><rect x="21.4508%" y="85" width="0.0584%" height="15" fill="rgb(243,70,54)" fg:x="8734463361" fg:w="23789745"/><text x="21.7008%" y="95.50"></text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (642,133,082 samples, 1.58%)</title><rect x="20.5411%" y="325" width="1.5770%" height="15" fill="rgb(242,28,8)" fg:x="8364046872" fg:w="642133082"/><text x="20.7911%" y="335.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (613,985,294 samples, 1.51%)</title><rect x="20.6102%" y="309" width="1.5079%" height="15" fill="rgb(219,106,18)" fg:x="8392194660" fg:w="613985294"/><text x="20.8602%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (583,467,859 samples, 1.43%)</title><rect x="20.6852%" y="293" width="1.4329%" height="15" fill="rgb(244,222,10)" fg:x="8422712095" fg:w="583467859"/><text x="20.9352%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (578,214,624 samples, 1.42%)</title><rect x="20.6981%" y="277" width="1.4200%" height="15" fill="rgb(236,179,52)" fg:x="8427965330" fg:w="578214624"/><text x="20.9481%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (578,214,624 samples, 1.42%)</title><rect x="20.6981%" y="261" width="1.4200%" height="15" fill="rgb(213,23,39)" fg:x="8427965330" fg:w="578214624"/><text x="20.9481%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (578,214,624 samples, 1.42%)</title><rect x="20.6981%" y="245" width="1.4200%" height="15" fill="rgb(238,48,10)" fg:x="8427965330" fg:w="578214624"/><text x="20.9481%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (247,926,848 samples, 0.61%)</title><rect x="21.5092%" y="229" width="0.6089%" height="15" fill="rgb(251,196,23)" fg:x="8758253106" fg:w="247926848"/><text x="21.7592%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (247,926,848 samples, 0.61%)</title><rect x="21.5092%" y="213" width="0.6089%" height="15" fill="rgb(250,152,24)" fg:x="8758253106" fg:w="247926848"/><text x="21.7592%" y="223.50"></text></g><g><title>[libc.so.6] (245,728,186 samples, 0.60%)</title><rect x="21.5146%" y="197" width="0.6035%" height="15" fill="rgb(209,150,17)" fg:x="8760451768" fg:w="245728186"/><text x="21.7646%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17,890,327 samples, 0.04%)</title><rect x="22.1250%" y="325" width="0.0439%" height="15" fill="rgb(234,202,34)" fg:x="9009007105" fg:w="17890327"/><text x="22.3750%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (17,890,327 samples, 0.04%)</title><rect x="22.1250%" y="309" width="0.0439%" height="15" fill="rgb(253,148,53)" fg:x="9009007105" fg:w="17890327"/><text x="22.3750%" y="319.50"></text></g><g><title>clock_gettime (7,168,841 samples, 0.02%)</title><rect x="22.1814%" y="309" width="0.0176%" height="15" fill="rgb(218,129,16)" fg:x="9031964617" fg:w="7168841"/><text x="22.4314%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::gt (47,395,477 samples, 0.12%)</title><rect x="22.1990%" y="309" width="0.1164%" height="15" fill="rgb(216,85,19)" fg:x="9039133458" fg:w="47395477"/><text x="22.4490%" y="319.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (47,395,477 samples, 0.12%)</title><rect x="22.1990%" y="293" width="0.1164%" height="15" fill="rgb(235,228,7)" fg:x="9039133458" fg:w="47395477"/><text x="22.4490%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (6,438,733 samples, 0.02%)</title><rect x="22.3154%" y="309" width="0.0158%" height="15" fill="rgb(245,175,0)" fg:x="9086528935" fg:w="6438733"/><text x="22.5654%" y="319.50"></text></g><g><title>clock_gettime (67,097,567 samples, 0.16%)</title><rect x="22.3608%" y="293" width="0.1648%" height="15" fill="rgb(208,168,36)" fg:x="9104994988" fg:w="67097567"/><text x="22.6108%" y="303.50"></text></g><g><title>__vdso_clock_gettime (35,649,014 samples, 0.09%)</title><rect x="22.4380%" y="277" width="0.0875%" height="15" fill="rgb(246,171,24)" fg:x="9136443541" fg:w="35649014"/><text x="22.6880%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (6,498,553 samples, 0.02%)</title><rect x="22.5256%" y="293" width="0.0160%" height="15" fill="rgb(215,142,24)" fg:x="9172092555" fg:w="6498553"/><text x="22.7756%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (91,894,029 samples, 0.23%)</title><rect x="22.3312%" y="309" width="0.2257%" height="15" fill="rgb(250,187,7)" fg:x="9092967668" fg:w="91894029"/><text x="22.5812%" y="319.50"></text></g><g><title>std::sys::pal::unix::cvt (6,270,589 samples, 0.02%)</title><rect x="22.5415%" y="293" width="0.0154%" height="15" fill="rgb(228,66,33)" fg:x="9178591108" fg:w="6270589"/><text x="22.7915%" y="303.50"></text></g><g><title>&lt;i32 as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (6,270,589 samples, 0.02%)</title><rect x="22.5415%" y="277" width="0.0154%" height="15" fill="rgb(234,215,21)" fg:x="9178591108" fg:w="6270589"/><text x="22.7915%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (10,872,097 samples, 0.03%)</title><rect x="22.5806%" y="293" width="0.0267%" height="15" fill="rgb(222,191,20)" fg:x="9194494228" fg:w="10872097"/><text x="22.8306%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (34,744,230 samples, 0.09%)</title><rect x="22.5648%" y="309" width="0.0853%" height="15" fill="rgb(245,79,54)" fg:x="9188067907" fg:w="34744230"/><text x="22.8148%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (17,445,812 samples, 0.04%)</title><rect x="22.6073%" y="293" width="0.0428%" height="15" fill="rgb(240,10,37)" fg:x="9205366325" fg:w="17445812"/><text x="22.8573%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (17,445,812 samples, 0.04%)</title><rect x="22.6073%" y="277" width="0.0428%" height="15" fill="rgb(214,192,32)" fg:x="9205366325" fg:w="17445812"/><text x="22.8573%" y="287.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (199,906,746 samples, 0.49%)</title><rect x="22.1690%" y="325" width="0.4909%" height="15" fill="rgb(209,36,54)" fg:x="9026897432" fg:w="199906746"/><text x="22.4190%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6,424,883 samples, 0.02%)</title><rect x="22.7543%" y="197" width="0.0158%" height="15" fill="rgb(220,10,11)" fg:x="9265213667" fg:w="6424883"/><text x="23.0043%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (27,067,170 samples, 0.07%)</title><rect x="22.7347%" y="245" width="0.0665%" height="15" fill="rgb(221,106,17)" fg:x="9257253862" fg:w="27067170"/><text x="22.9847%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27,067,170 samples, 0.07%)</title><rect x="22.7347%" y="229" width="0.0665%" height="15" fill="rgb(251,142,44)" fg:x="9257253862" fg:w="27067170"/><text x="22.9847%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27,067,170 samples, 0.07%)</title><rect x="22.7347%" y="213" width="0.0665%" height="15" fill="rgb(238,13,15)" fg:x="9257253862" fg:w="27067170"/><text x="22.9847%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12,682,482 samples, 0.03%)</title><rect x="22.7700%" y="197" width="0.0311%" height="15" fill="rgb(208,107,27)" fg:x="9271638550" fg:w="12682482"/><text x="23.0200%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,220,391 samples, 0.02%)</title><rect x="22.7810%" y="181" width="0.0202%" height="15" fill="rgb(205,136,37)" fg:x="9276100641" fg:w="8220391"/><text x="23.0310%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,703,033 samples, 0.01%)</title><rect x="22.8012%" y="245" width="0.0116%" height="15" fill="rgb(250,205,27)" fg:x="9284321032" fg:w="4703033"/><text x="23.0512%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4,703,033 samples, 0.01%)</title><rect x="22.8012%" y="229" width="0.0116%" height="15" fill="rgb(210,80,43)" fg:x="9284321032" fg:w="4703033"/><text x="23.0512%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4,703,033 samples, 0.01%)</title><rect x="22.8012%" y="213" width="0.0116%" height="15" fill="rgb(247,160,36)" fg:x="9284321032" fg:w="4703033"/><text x="23.0512%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4,703,033 samples, 0.01%)</title><rect x="22.8012%" y="197" width="0.0116%" height="15" fill="rgb(234,13,49)" fg:x="9284321032" fg:w="4703033"/><text x="23.0512%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49,065,293 samples, 0.12%)</title><rect x="22.8127%" y="165" width="0.1205%" height="15" fill="rgb(234,122,0)" fg:x="9289024065" fg:w="49065293"/><text x="23.0627%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (35,489,367 samples, 0.09%)</title><rect x="22.8461%" y="149" width="0.0872%" height="15" fill="rgb(207,146,38)" fg:x="9302599991" fg:w="35489367"/><text x="23.0961%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (108,946,289 samples, 0.27%)</title><rect x="22.7347%" y="277" width="0.2676%" height="15" fill="rgb(207,177,25)" fg:x="9257253862" fg:w="108946289"/><text x="22.9847%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (108,946,289 samples, 0.27%)</title><rect x="22.7347%" y="261" width="0.2676%" height="15" fill="rgb(211,178,42)" fg:x="9257253862" fg:w="108946289"/><text x="22.9847%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (77,176,086 samples, 0.19%)</title><rect x="22.8127%" y="245" width="0.1895%" height="15" fill="rgb(230,69,54)" fg:x="9289024065" fg:w="77176086"/><text x="23.0627%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (77,176,086 samples, 0.19%)</title><rect x="22.8127%" y="229" width="0.1895%" height="15" fill="rgb(214,135,41)" fg:x="9289024065" fg:w="77176086"/><text x="23.0627%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (77,176,086 samples, 0.19%)</title><rect x="22.8127%" y="213" width="0.1895%" height="15" fill="rgb(237,67,25)" fg:x="9289024065" fg:w="77176086"/><text x="23.0627%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (77,176,086 samples, 0.19%)</title><rect x="22.8127%" y="197" width="0.1895%" height="15" fill="rgb(222,189,50)" fg:x="9289024065" fg:w="77176086"/><text x="23.0627%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (77,176,086 samples, 0.19%)</title><rect x="22.8127%" y="181" width="0.1895%" height="15" fill="rgb(245,148,34)" fg:x="9289024065" fg:w="77176086"/><text x="23.0627%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (28,110,793 samples, 0.07%)</title><rect x="22.9332%" y="165" width="0.0690%" height="15" fill="rgb(222,29,6)" fg:x="9338089358" fg:w="28110793"/><text x="23.1832%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18,684,133 samples, 0.05%)</title><rect x="22.9564%" y="149" width="0.0459%" height="15" fill="rgb(221,189,43)" fg:x="9347516018" fg:w="18684133"/><text x="23.2064%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (11,473,378 samples, 0.03%)</title><rect x="22.9741%" y="133" width="0.0282%" height="15" fill="rgb(207,36,27)" fg:x="9354726773" fg:w="11473378"/><text x="23.2241%" y="143.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (68,215,149 samples, 0.17%)</title><rect x="23.0122%" y="229" width="0.1675%" height="15" fill="rgb(217,90,24)" fg:x="9370242679" fg:w="68215149"/><text x="23.2622%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (68,215,149 samples, 0.17%)</title><rect x="23.0122%" y="213" width="0.1675%" height="15" fill="rgb(224,66,35)" fg:x="9370242679" fg:w="68215149"/><text x="23.2622%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68,215,149 samples, 0.17%)</title><rect x="23.0122%" y="197" width="0.1675%" height="15" fill="rgb(221,13,50)" fg:x="9370242679" fg:w="68215149"/><text x="23.2622%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (5,093,269 samples, 0.01%)</title><rect x="23.1797%" y="229" width="0.0125%" height="15" fill="rgb(236,68,49)" fg:x="9438457828" fg:w="5093269"/><text x="23.4297%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,093,269 samples, 0.01%)</title><rect x="23.1797%" y="213" width="0.0125%" height="15" fill="rgb(229,146,28)" fg:x="9438457828" fg:w="5093269"/><text x="23.4297%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (261,250,112 samples, 0.64%)</title><rect x="23.1922%" y="213" width="0.6416%" height="15" fill="rgb(225,31,38)" fg:x="9443551097" fg:w="261250112"/><text x="23.4422%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (261,250,112 samples, 0.64%)</title><rect x="23.1922%" y="197" width="0.6416%" height="15" fill="rgb(250,208,3)" fg:x="9443551097" fg:w="261250112"/><text x="23.4422%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (250,530,474 samples, 0.62%)</title><rect x="23.2186%" y="181" width="0.6153%" height="15" fill="rgb(246,54,23)" fg:x="9454270735" fg:w="250530474"/><text x="23.4686%" y="191.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (250,530,474 samples, 0.62%)</title><rect x="23.2186%" y="165" width="0.6153%" height="15" fill="rgb(243,76,11)" fg:x="9454270735" fg:w="250530474"/><text x="23.4686%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (250,530,474 samples, 0.62%)</title><rect x="23.2186%" y="149" width="0.6153%" height="15" fill="rgb(245,21,50)" fg:x="9454270735" fg:w="250530474"/><text x="23.4686%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (250,530,474 samples, 0.62%)</title><rect x="23.2186%" y="133" width="0.6153%" height="15" fill="rgb(228,9,43)" fg:x="9454270735" fg:w="250530474"/><text x="23.4686%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (250,530,474 samples, 0.62%)</title><rect x="23.2186%" y="117" width="0.6153%" height="15" fill="rgb(208,100,47)" fg:x="9454270735" fg:w="250530474"/><text x="23.4686%" y="127.50"></text></g><g><title>[libc.so.6] (123,170,295 samples, 0.30%)</title><rect x="23.5313%" y="101" width="0.3025%" height="15" fill="rgb(232,26,8)" fg:x="9581630914" fg:w="123170295"/><text x="23.7813%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (264,006,707 samples, 0.65%)</title><rect x="23.1922%" y="229" width="0.6484%" height="15" fill="rgb(216,166,38)" fg:x="9443551097" fg:w="264006707"/><text x="23.4422%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (492,742,878 samples, 1.21%)</title><rect x="22.6599%" y="325" width="1.2101%" height="15" fill="rgb(251,202,51)" fg:x="9226804178" fg:w="492742878"/><text x="22.9099%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (492,742,878 samples, 1.21%)</title><rect x="22.6599%" y="309" width="1.2101%" height="15" fill="rgb(254,216,34)" fg:x="9226804178" fg:w="492742878"/><text x="22.9099%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (492,742,878 samples, 1.21%)</title><rect x="22.6599%" y="293" width="1.2101%" height="15" fill="rgb(251,32,27)" fg:x="9226804178" fg:w="492742878"/><text x="22.9099%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (353,346,905 samples, 0.87%)</title><rect x="23.0023%" y="277" width="0.8678%" height="15" fill="rgb(208,127,28)" fg:x="9366200151" fg:w="353346905"/><text x="23.2523%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (353,346,905 samples, 0.87%)</title><rect x="23.0023%" y="261" width="0.8678%" height="15" fill="rgb(224,137,22)" fg:x="9366200151" fg:w="353346905"/><text x="23.2523%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (353,346,905 samples, 0.87%)</title><rect x="23.0023%" y="245" width="0.8678%" height="15" fill="rgb(254,70,32)" fg:x="9366200151" fg:w="353346905"/><text x="23.2523%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (11,989,252 samples, 0.03%)</title><rect x="23.8406%" y="229" width="0.0294%" height="15" fill="rgb(229,75,37)" fg:x="9707557804" fg:w="11989252"/><text x="24.0906%" y="239.50"></text></g><g><title>server_lib::storage::Storage::get_entry (1,440,181,256 samples, 3.54%)</title><rect x="20.4239%" y="341" width="3.5369%" height="15" fill="rgb(252,64,23)" fg:x="8316337053" fg:w="1440181256"/><text x="20.6739%" y="351.50">ser..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (36,971,253 samples, 0.09%)</title><rect x="23.8700%" y="325" width="0.0908%" height="15" fill="rgb(232,162,48)" fg:x="9719547056" fg:w="36971253"/><text x="24.1200%" y="335.50"></text></g><g><title>clock_gettime (20,850,304 samples, 0.05%)</title><rect x="23.9096%" y="309" width="0.0512%" height="15" fill="rgb(246,160,12)" fg:x="9735668005" fg:w="20850304"/><text x="24.1596%" y="319.50"></text></g><g><title>__vdso_clock_gettime (18,620,780 samples, 0.05%)</title><rect x="23.9151%" y="293" width="0.0457%" height="15" fill="rgb(247,166,0)" fg:x="9737897529" fg:w="18620780"/><text x="24.1651%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (135,674,312 samples, 0.33%)</title><rect x="23.9919%" y="309" width="0.3332%" height="15" fill="rgb(249,219,21)" fg:x="9769178154" fg:w="135674312"/><text x="24.2419%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="293" width="0.3317%" height="15" fill="rgb(205,209,3)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="277" width="0.3317%" height="15" fill="rgb(243,44,1)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="261" width="0.3317%" height="15" fill="rgb(206,159,16)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="245" width="0.3317%" height="15" fill="rgb(244,77,30)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="229" width="0.3317%" height="15" fill="rgb(218,69,12)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="213" width="0.3317%" height="15" fill="rgb(212,87,7)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="223.50"></text></g><g><title>cfree (135,057,365 samples, 0.33%)</title><rect x="23.9934%" y="197" width="0.3317%" height="15" fill="rgb(245,114,25)" fg:x="9769795101" fg:w="135057365"/><text x="24.2434%" y="207.50"></text></g><g><title>[libc.so.6] (91,381,288 samples, 0.22%)</title><rect x="24.1007%" y="181" width="0.2244%" height="15" fill="rgb(210,61,42)" fg:x="9813471178" fg:w="91381288"/><text x="24.3507%" y="191.50"></text></g><g><title>[libc.so.6] (73,313,432 samples, 0.18%)</title><rect x="24.1451%" y="165" width="0.1800%" height="15" fill="rgb(211,52,33)" fg:x="9831539034" fg:w="73313432"/><text x="24.3951%" y="175.50"></text></g><g><title>[libc.so.6] (45,079,605 samples, 0.11%)</title><rect x="24.2144%" y="149" width="0.1107%" height="15" fill="rgb(234,58,33)" fg:x="9859772861" fg:w="45079605"/><text x="24.4644%" y="159.50"></text></g><g><title>[libc.so.6] (8,736,496 samples, 0.02%)</title><rect x="24.3037%" y="133" width="0.0215%" height="15" fill="rgb(220,115,36)" fg:x="9896115970" fg:w="8736496"/><text x="24.5537%" y="143.50"></text></g><g><title>core::mem::replace (11,648,628 samples, 0.03%)</title><rect x="24.3431%" y="277" width="0.0286%" height="15" fill="rgb(243,153,54)" fg:x="9912154966" fg:w="11648628"/><text x="24.5931%" y="287.50"></text></g><g><title>__rustc::__rust_dealloc (4,374,706 samples, 0.01%)</title><rect x="24.3782%" y="165" width="0.0107%" height="15" fill="rgb(251,47,18)" fg:x="9926477491" fg:w="4374706"/><text x="24.6282%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="277" width="0.0490%" height="15" fill="rgb(242,102,42)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="261" width="0.0490%" height="15" fill="rgb(234,31,38)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="245" width="0.0490%" height="15" fill="rgb(221,117,51)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="229" width="0.0490%" height="15" fill="rgb(212,20,18)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="213" width="0.0490%" height="15" fill="rgb(245,133,36)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="197" width="0.0490%" height="15" fill="rgb(212,6,19)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (19,964,590 samples, 0.05%)</title><rect x="24.3717%" y="181" width="0.0490%" height="15" fill="rgb(218,1,36)" fg:x="9923803594" fg:w="19964590"/><text x="24.6217%" y="191.50"></text></g><g><title>cfree (12,915,987 samples, 0.03%)</title><rect x="24.3890%" y="165" width="0.0317%" height="15" fill="rgb(246,84,54)" fg:x="9930852197" fg:w="12915987"/><text x="24.6390%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (25,814,495 samples, 0.06%)</title><rect x="24.4401%" y="229" width="0.0634%" height="15" fill="rgb(242,110,6)" fg:x="9951651682" fg:w="25814495"/><text x="24.6901%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (25,814,495 samples, 0.06%)</title><rect x="24.4401%" y="213" width="0.0634%" height="15" fill="rgb(214,47,5)" fg:x="9951651682" fg:w="25814495"/><text x="24.6901%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25,814,495 samples, 0.06%)</title><rect x="24.4401%" y="197" width="0.0634%" height="15" fill="rgb(218,159,25)" fg:x="9951651682" fg:w="25814495"/><text x="24.6901%" y="207.50"></text></g><g><title>hashbrown::control::tag::Tag::full (4,448,985 samples, 0.01%)</title><rect x="24.5132%" y="229" width="0.0109%" height="15" fill="rgb(215,211,28)" fg:x="9981450106" fg:w="4448985"/><text x="24.7632%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (144,523,318 samples, 0.35%)</title><rect x="24.4207%" y="277" width="0.3549%" height="15" fill="rgb(238,59,32)" fg:x="9943768184" fg:w="144523318"/><text x="24.6707%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (144,523,318 samples, 0.35%)</title><rect x="24.4207%" y="261" width="0.3549%" height="15" fill="rgb(226,82,3)" fg:x="9943768184" fg:w="144523318"/><text x="24.6707%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (142,523,320 samples, 0.35%)</title><rect x="24.4256%" y="245" width="0.3500%" height="15" fill="rgb(240,164,32)" fg:x="9945768182" fg:w="142523320"/><text x="24.6756%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (102,392,411 samples, 0.25%)</title><rect x="24.5242%" y="229" width="0.2515%" height="15" fill="rgb(232,46,7)" fg:x="9985899091" fg:w="102392411"/><text x="24.7742%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="213" width="0.2463%" height="15" fill="rgb(229,129,53)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="197" width="0.2463%" height="15" fill="rgb(234,188,29)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="181" width="0.2463%" height="15" fill="rgb(246,141,4)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="165" width="0.2463%" height="15" fill="rgb(229,23,39)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="175.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="149" width="0.2463%" height="15" fill="rgb(206,12,3)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="133" width="0.2463%" height="15" fill="rgb(252,226,20)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (100,273,155 samples, 0.25%)</title><rect x="24.5294%" y="117" width="0.2463%" height="15" fill="rgb(216,123,35)" fg:x="9988018347" fg:w="100273155"/><text x="24.7794%" y="127.50"></text></g><g><title>[libc.so.6] (56,717,374 samples, 0.14%)</title><rect x="24.6363%" y="101" width="0.1393%" height="15" fill="rgb(212,68,40)" fg:x="10031574128" fg:w="56717374"/><text x="24.8863%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,198,294 samples, 0.02%)</title><rect x="24.7808%" y="197" width="0.0177%" height="15" fill="rgb(254,125,32)" fg:x="10090406062" fg:w="7198294"/><text x="25.0308%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14,948,700 samples, 0.04%)</title><rect x="24.7756%" y="245" width="0.0367%" height="15" fill="rgb(253,97,22)" fg:x="10088291502" fg:w="14948700"/><text x="25.0256%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14,948,700 samples, 0.04%)</title><rect x="24.7756%" y="229" width="0.0367%" height="15" fill="rgb(241,101,14)" fg:x="10088291502" fg:w="14948700"/><text x="25.0256%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14,948,700 samples, 0.04%)</title><rect x="24.7756%" y="213" width="0.0367%" height="15" fill="rgb(238,103,29)" fg:x="10088291502" fg:w="14948700"/><text x="25.0256%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5,635,846 samples, 0.01%)</title><rect x="24.7985%" y="197" width="0.0138%" height="15" fill="rgb(233,195,47)" fg:x="10097604356" fg:w="5635846"/><text x="25.0485%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (13,098,010 samples, 0.03%)</title><rect x="24.8123%" y="245" width="0.0322%" height="15" fill="rgb(246,218,30)" fg:x="10103240202" fg:w="13098010"/><text x="25.0623%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (8,430,318 samples, 0.02%)</title><rect x="24.8238%" y="229" width="0.0207%" height="15" fill="rgb(219,145,47)" fg:x="10107907894" fg:w="8430318"/><text x="25.0738%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (8,430,318 samples, 0.02%)</title><rect x="24.8238%" y="213" width="0.0207%" height="15" fill="rgb(243,12,26)" fg:x="10107907894" fg:w="8430318"/><text x="25.0738%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8,430,318 samples, 0.02%)</title><rect x="24.8238%" y="197" width="0.0207%" height="15" fill="rgb(214,87,16)" fg:x="10107907894" fg:w="8430318"/><text x="25.0738%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,427,860 samples, 0.04%)</title><rect x="24.8491%" y="149" width="0.0354%" height="15" fill="rgb(208,99,42)" fg:x="10118214735" fg:w="14427860"/><text x="25.0991%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (10,675,065 samples, 0.03%)</title><rect x="24.8583%" y="133" width="0.0262%" height="15" fill="rgb(253,99,2)" fg:x="10121967530" fg:w="10675065"/><text x="25.1083%" y="143.50"></text></g><g><title>core::cmp::min (4,327,869 samples, 0.01%)</title><rect x="24.9255%" y="117" width="0.0106%" height="15" fill="rgb(220,168,23)" fg:x="10149297232" fg:w="4327869"/><text x="25.1755%" y="127.50"></text></g><g><title>core::cmp::Ord::min (4,327,869 samples, 0.01%)</title><rect x="24.9255%" y="101" width="0.0106%" height="15" fill="rgb(242,38,24)" fg:x="10149297232" fg:w="4327869"/><text x="25.1755%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (247,997,819 samples, 0.61%)</title><rect x="24.3388%" y="309" width="0.6091%" height="15" fill="rgb(225,182,9)" fg:x="9910409189" fg:w="247997819"/><text x="24.5888%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (247,997,819 samples, 0.61%)</title><rect x="24.3388%" y="293" width="0.6091%" height="15" fill="rgb(243,178,37)" fg:x="9910409189" fg:w="247997819"/><text x="24.5888%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (70,115,506 samples, 0.17%)</title><rect x="24.7756%" y="277" width="0.1722%" height="15" fill="rgb(232,139,19)" fg:x="10088291502" fg:w="70115506"/><text x="25.0256%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (70,115,506 samples, 0.17%)</title><rect x="24.7756%" y="261" width="0.1722%" height="15" fill="rgb(225,201,24)" fg:x="10088291502" fg:w="70115506"/><text x="25.0256%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (42,068,796 samples, 0.10%)</title><rect x="24.8445%" y="245" width="0.1033%" height="15" fill="rgb(221,47,46)" fg:x="10116338212" fg:w="42068796"/><text x="25.0945%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (40,192,273 samples, 0.10%)</title><rect x="24.8491%" y="229" width="0.0987%" height="15" fill="rgb(249,23,13)" fg:x="10118214735" fg:w="40192273"/><text x="25.0991%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (40,192,273 samples, 0.10%)</title><rect x="24.8491%" y="213" width="0.0987%" height="15" fill="rgb(219,9,5)" fg:x="10118214735" fg:w="40192273"/><text x="25.0991%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (40,192,273 samples, 0.10%)</title><rect x="24.8491%" y="197" width="0.0987%" height="15" fill="rgb(254,171,16)" fg:x="10118214735" fg:w="40192273"/><text x="25.0991%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (40,192,273 samples, 0.10%)</title><rect x="24.8491%" y="181" width="0.0987%" height="15" fill="rgb(230,171,20)" fg:x="10118214735" fg:w="40192273"/><text x="25.0991%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (40,192,273 samples, 0.10%)</title><rect x="24.8491%" y="165" width="0.0987%" height="15" fill="rgb(210,71,41)" fg:x="10118214735" fg:w="40192273"/><text x="25.0991%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (25,764,413 samples, 0.06%)</title><rect x="24.8846%" y="149" width="0.0633%" height="15" fill="rgb(206,173,20)" fg:x="10132642595" fg:w="25764413"/><text x="25.1346%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25,764,413 samples, 0.06%)</title><rect x="24.8846%" y="133" width="0.0633%" height="15" fill="rgb(233,88,34)" fg:x="10132642595" fg:w="25764413"/><text x="25.1346%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (4,781,907 samples, 0.01%)</title><rect x="24.9361%" y="117" width="0.0117%" height="15" fill="rgb(223,209,46)" fg:x="10153625101" fg:w="4781907"/><text x="25.1861%" y="127.50"></text></g><g><title>clock_gettime (42,131,473 samples, 0.10%)</title><rect x="24.9537%" y="293" width="0.1035%" height="15" fill="rgb(250,43,18)" fg:x="10160790436" fg:w="42131473"/><text x="25.2037%" y="303.50"></text></g><g><title>__vdso_clock_gettime (23,231,078 samples, 0.06%)</title><rect x="25.0001%" y="277" width="0.0571%" height="15" fill="rgb(208,13,10)" fg:x="10179690831" fg:w="23231078"/><text x="25.2501%" y="287.50"></text></g><g><title>server::process_request (7,752,853,990 samples, 19.04%)</title><rect x="6.0227%" y="357" width="19.0401%" height="15" fill="rgb(212,200,36)" fg:x="2452379475" fg:w="7752853990"/><text x="6.2727%" y="367.50">server::process_request</text></g><g><title>server_lib::storage::Storage::insert_entry (448,715,156 samples, 1.10%)</title><rect x="23.9608%" y="341" width="1.1020%" height="15" fill="rgb(225,90,30)" fg:x="9756518309" fg:w="448715156"/><text x="24.2108%" y="351.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (448,715,156 samples, 1.10%)</title><rect x="23.9608%" y="325" width="1.1020%" height="15" fill="rgb(236,182,39)" fg:x="9756518309" fg:w="448715156"/><text x="24.2108%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (46,826,457 samples, 0.12%)</title><rect x="24.9478%" y="309" width="0.1150%" height="15" fill="rgb(212,144,35)" fg:x="10158407008" fg:w="46826457"/><text x="25.1978%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11,371,205 samples, 0.03%)</title><rect x="25.1076%" y="341" width="0.0279%" height="15" fill="rgb(228,63,44)" fg:x="10223479108" fg:w="11371205"/><text x="25.3576%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24,229,182 samples, 0.06%)</title><rect x="25.1356%" y="341" width="0.0595%" height="15" fill="rgb(228,109,6)" fg:x="10234850313" fg:w="24229182"/><text x="25.3856%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24,229,182 samples, 0.06%)</title><rect x="25.1356%" y="325" width="0.0595%" height="15" fill="rgb(238,117,24)" fg:x="10234850313" fg:w="24229182"/><text x="25.3856%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24,229,182 samples, 0.06%)</title><rect x="25.1356%" y="309" width="0.0595%" height="15" fill="rgb(242,26,26)" fg:x="10234850313" fg:w="24229182"/><text x="25.3856%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24,229,182 samples, 0.06%)</title><rect x="25.1356%" y="293" width="0.0595%" height="15" fill="rgb(221,92,48)" fg:x="10234850313" fg:w="24229182"/><text x="25.3856%" y="303.50"></text></g><g><title>server_lib::resp3::get_data_type (41,390,798 samples, 0.10%)</title><rect x="25.1951%" y="341" width="0.1017%" height="15" fill="rgb(209,209,32)" fg:x="10259079495" fg:w="41390798"/><text x="25.4451%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6,265,492 samples, 0.02%)</title><rect x="25.6364%" y="325" width="0.0154%" height="15" fill="rgb(221,70,22)" fg:x="10438775598" fg:w="6265492"/><text x="25.8864%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (8,623,378 samples, 0.02%)</title><rect x="25.6860%" y="165" width="0.0212%" height="15" fill="rgb(248,145,5)" fg:x="10458990667" fg:w="8623378"/><text x="25.9360%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,623,378 samples, 0.02%)</title><rect x="25.6860%" y="149" width="0.0212%" height="15" fill="rgb(226,116,26)" fg:x="10458990667" fg:w="8623378"/><text x="25.9360%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35,101,263 samples, 0.09%)</title><rect x="25.6860%" y="213" width="0.0862%" height="15" fill="rgb(244,5,17)" fg:x="10458990667" fg:w="35101263"/><text x="25.9360%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35,101,263 samples, 0.09%)</title><rect x="25.6860%" y="197" width="0.0862%" height="15" fill="rgb(252,159,33)" fg:x="10458990667" fg:w="35101263"/><text x="25.9360%" y="207.50"></text></g><g><title>alloc::alloc::alloc (35,101,263 samples, 0.09%)</title><rect x="25.6860%" y="181" width="0.0862%" height="15" fill="rgb(206,71,0)" fg:x="10458990667" fg:w="35101263"/><text x="25.9360%" y="191.50"></text></g><g><title>malloc (26,477,885 samples, 0.07%)</title><rect x="25.7072%" y="165" width="0.0650%" height="15" fill="rgb(233,118,54)" fg:x="10467614045" fg:w="26477885"/><text x="25.9572%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47,154,739 samples, 0.12%)</title><rect x="25.6611%" y="277" width="0.1158%" height="15" fill="rgb(234,83,48)" fg:x="10448847341" fg:w="47154739"/><text x="25.9111%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47,154,739 samples, 0.12%)</title><rect x="25.6611%" y="261" width="0.1158%" height="15" fill="rgb(228,3,54)" fg:x="10448847341" fg:w="47154739"/><text x="25.9111%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (47,154,739 samples, 0.12%)</title><rect x="25.6611%" y="245" width="0.1158%" height="15" fill="rgb(226,155,13)" fg:x="10448847341" fg:w="47154739"/><text x="25.9111%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (47,154,739 samples, 0.12%)</title><rect x="25.6611%" y="229" width="0.1158%" height="15" fill="rgb(241,28,37)" fg:x="10448847341" fg:w="47154739"/><text x="25.9111%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (75,847,324 samples, 0.19%)</title><rect x="25.6611%" y="325" width="0.1863%" height="15" fill="rgb(233,93,10)" fg:x="10448847341" fg:w="75847324"/><text x="25.9111%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (75,847,324 samples, 0.19%)</title><rect x="25.6611%" y="309" width="0.1863%" height="15" fill="rgb(225,113,19)" fg:x="10448847341" fg:w="75847324"/><text x="25.9111%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (75,847,324 samples, 0.19%)</title><rect x="25.6611%" y="293" width="0.1863%" height="15" fill="rgb(241,2,18)" fg:x="10448847341" fg:w="75847324"/><text x="25.9111%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28,692,585 samples, 0.07%)</title><rect x="25.7769%" y="277" width="0.0705%" height="15" fill="rgb(228,207,21)" fg:x="10496002080" fg:w="28692585"/><text x="26.0269%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28,692,585 samples, 0.07%)</title><rect x="25.7769%" y="261" width="0.0705%" height="15" fill="rgb(213,211,35)" fg:x="10496002080" fg:w="28692585"/><text x="26.0269%" y="271.50"></text></g><g><title>[libc.so.6] (27,141,084 samples, 0.07%)</title><rect x="25.7807%" y="245" width="0.0667%" height="15" fill="rgb(209,83,10)" fg:x="10497553581" fg:w="27141084"/><text x="26.0307%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8 (74,867,469 samples, 0.18%)</title><rect x="25.8474%" y="325" width="0.1839%" height="15" fill="rgb(209,164,1)" fg:x="10524694665" fg:w="74867469"/><text x="26.0974%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (69,075,150 samples, 0.17%)</title><rect x="25.8616%" y="309" width="0.1696%" height="15" fill="rgb(213,184,43)" fg:x="10530486984" fg:w="69075150"/><text x="26.1116%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (27,551,093 samples, 0.07%)</title><rect x="25.9636%" y="293" width="0.0677%" height="15" fill="rgb(231,61,34)" fg:x="10572011041" fg:w="27551093"/><text x="26.2136%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,843,664 samples, 0.01%)</title><rect x="26.1299%" y="261" width="0.0144%" height="15" fill="rgb(235,75,3)" fg:x="10639719931" fg:w="5843664"/><text x="26.3799%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,198,309 samples, 0.02%)</title><rect x="26.1442%" y="261" width="0.0201%" height="15" fill="rgb(220,106,47)" fg:x="10645563595" fg:w="8198309"/><text x="26.3942%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (44,891,397 samples, 0.11%)</title><rect x="26.3004%" y="245" width="0.1102%" height="15" fill="rgb(210,196,33)" fg:x="10709157130" fg:w="44891397"/><text x="26.5504%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28,032,464 samples, 0.07%)</title><rect x="26.3418%" y="229" width="0.0688%" height="15" fill="rgb(229,154,42)" fg:x="10726016063" fg:w="28032464"/><text x="26.5918%" y="239.50"></text></g><g><title>__rustc::__rust_alloc (25,707,436 samples, 0.06%)</title><rect x="26.4106%" y="245" width="0.0631%" height="15" fill="rgb(228,114,26)" fg:x="10754048527" fg:w="25707436"/><text x="26.6606%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (247,459,163 samples, 0.61%)</title><rect x="26.1644%" y="261" width="0.6077%" height="15" fill="rgb(208,144,1)" fg:x="10653761904" fg:w="247459163"/><text x="26.4144%" y="271.50"></text></g><g><title>malloc (118,511,084 samples, 0.29%)</title><rect x="26.4810%" y="245" width="0.2910%" height="15" fill="rgb(239,112,37)" fg:x="10782709983" fg:w="118511084"/><text x="26.7310%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (298,763,640 samples, 0.73%)</title><rect x="26.0519%" y="309" width="0.7337%" height="15" fill="rgb(210,96,50)" fg:x="10607957070" fg:w="298763640"/><text x="26.3019%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (275,167,164 samples, 0.68%)</title><rect x="26.1098%" y="293" width="0.6758%" height="15" fill="rgb(222,178,2)" fg:x="10631553546" fg:w="275167164"/><text x="26.3598%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (275,167,164 samples, 0.68%)</title><rect x="26.1098%" y="277" width="0.6758%" height="15" fill="rgb(226,74,18)" fg:x="10631553546" fg:w="275167164"/><text x="26.3598%" y="287.50"></text></g><g><title>core::cmp::max (5,499,643 samples, 0.01%)</title><rect x="26.7721%" y="261" width="0.0135%" height="15" fill="rgb(225,67,54)" fg:x="10901221067" fg:w="5499643"/><text x="27.0221%" y="271.50"></text></g><g><title>core::cmp::Ord::max (5,499,643 samples, 0.01%)</title><rect x="26.7721%" y="245" width="0.0135%" height="15" fill="rgb(251,92,32)" fg:x="10901221067" fg:w="5499643"/><text x="27.0221%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5,268,544 samples, 0.01%)</title><rect x="26.7856%" y="309" width="0.0129%" height="15" fill="rgb(228,149,22)" fg:x="10906720710" fg:w="5268544"/><text x="27.0356%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,268,544 samples, 0.01%)</title><rect x="26.7856%" y="293" width="0.0129%" height="15" fill="rgb(243,54,13)" fg:x="10906720710" fg:w="5268544"/><text x="27.0356%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,268,544 samples, 0.01%)</title><rect x="26.7856%" y="277" width="0.0129%" height="15" fill="rgb(243,180,28)" fg:x="10906720710" fg:w="5268544"/><text x="27.0356%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,268,544 samples, 0.01%)</title><rect x="26.7856%" y="261" width="0.0129%" height="15" fill="rgb(208,167,24)" fg:x="10906720710" fg:w="5268544"/><text x="27.0356%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (350,488,058 samples, 0.86%)</title><rect x="26.0312%" y="325" width="0.8608%" height="15" fill="rgb(245,73,45)" fg:x="10599562134" fg:w="350488058"/><text x="26.2812%" y="335.50"></text></g><g><title>core::ptr::write (34,204,417 samples, 0.08%)</title><rect x="26.8080%" y="309" width="0.0840%" height="15" fill="rgb(237,203,48)" fg:x="10915845775" fg:w="34204417"/><text x="27.0580%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (17,177,504 samples, 0.04%)</title><rect x="26.9453%" y="197" width="0.0422%" height="15" fill="rgb(211,197,16)" fg:x="10971764935" fg:w="17177504"/><text x="27.1953%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17,177,504 samples, 0.04%)</title><rect x="26.9453%" y="181" width="0.0422%" height="15" fill="rgb(243,99,51)" fg:x="10971764935" fg:w="17177504"/><text x="27.1953%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70,565,870 samples, 0.17%)</title><rect x="26.9453%" y="245" width="0.1733%" height="15" fill="rgb(215,123,29)" fg:x="10971764935" fg:w="70565870"/><text x="27.1953%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70,565,870 samples, 0.17%)</title><rect x="26.9453%" y="229" width="0.1733%" height="15" fill="rgb(239,186,37)" fg:x="10971764935" fg:w="70565870"/><text x="27.1953%" y="239.50"></text></g><g><title>alloc::alloc::alloc (70,565,870 samples, 0.17%)</title><rect x="26.9453%" y="213" width="0.1733%" height="15" fill="rgb(252,136,39)" fg:x="10971764935" fg:w="70565870"/><text x="27.1953%" y="223.50"></text></g><g><title>malloc (53,388,366 samples, 0.13%)</title><rect x="26.9875%" y="197" width="0.1311%" height="15" fill="rgb(223,213,32)" fg:x="10988942439" fg:w="53388366"/><text x="27.2375%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (101,685,666 samples, 0.25%)</title><rect x="26.8920%" y="325" width="0.2497%" height="15" fill="rgb(233,115,5)" fg:x="10950050192" fg:w="101685666"/><text x="27.1420%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (101,685,666 samples, 0.25%)</title><rect x="26.8920%" y="309" width="0.2497%" height="15" fill="rgb(207,226,44)" fg:x="10950050192" fg:w="101685666"/><text x="27.1420%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (91,102,372 samples, 0.22%)</title><rect x="26.9180%" y="293" width="0.2237%" height="15" fill="rgb(208,126,0)" fg:x="10960633486" fg:w="91102372"/><text x="27.1680%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (91,102,372 samples, 0.22%)</title><rect x="26.9180%" y="277" width="0.2237%" height="15" fill="rgb(244,66,21)" fg:x="10960633486" fg:w="91102372"/><text x="27.1680%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (91,102,372 samples, 0.22%)</title><rect x="26.9180%" y="261" width="0.2237%" height="15" fill="rgb(222,97,12)" fg:x="10960633486" fg:w="91102372"/><text x="27.1680%" y="271.50"></text></g><g><title>alloc::raw_vec::layout_array (9,405,053 samples, 0.02%)</title><rect x="27.1186%" y="245" width="0.0231%" height="15" fill="rgb(219,213,19)" fg:x="11042330805" fg:w="9405053"/><text x="27.3686%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat (9,405,053 samples, 0.02%)</title><rect x="27.1186%" y="229" width="0.0231%" height="15" fill="rgb(252,169,30)" fg:x="11042330805" fg:w="9405053"/><text x="27.3686%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (9,405,053 samples, 0.02%)</title><rect x="27.1186%" y="213" width="0.0231%" height="15" fill="rgb(206,32,51)" fg:x="11042330805" fg:w="9405053"/><text x="27.3686%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (9,405,053 samples, 0.02%)</title><rect x="27.1186%" y="197" width="0.0231%" height="15" fill="rgb(250,172,42)" fg:x="11042330805" fg:w="9405053"/><text x="27.3686%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (9,405,053 samples, 0.02%)</title><rect x="27.1186%" y="181" width="0.0231%" height="15" fill="rgb(209,34,43)" fg:x="11042330805" fg:w="9405053"/><text x="27.3686%" y="191.50"></text></g><g><title>cfree (42,741,109 samples, 0.10%)</title><rect x="27.1417%" y="325" width="0.1050%" height="15" fill="rgb(223,11,35)" fg:x="11051735858" fg:w="42741109"/><text x="27.3917%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="325" width="0.0587%" height="15" fill="rgb(251,219,26)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="309" width="0.0587%" height="15" fill="rgb(231,119,3)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="293" width="0.0587%" height="15" fill="rgb(216,97,11)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="277" width="0.0587%" height="15" fill="rgb(223,59,9)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="261" width="0.0587%" height="15" fill="rgb(233,93,31)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (23,882,618 samples, 0.06%)</title><rect x="27.2550%" y="245" width="0.0587%" height="15" fill="rgb(239,81,33)" fg:x="11097856359" fg:w="23882618"/><text x="27.5050%" y="255.50"></text></g><g><title>cfree (21,501,381 samples, 0.05%)</title><rect x="27.2608%" y="229" width="0.0528%" height="15" fill="rgb(213,120,34)" fg:x="11100237596" fg:w="21501381"/><text x="27.5108%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14,753,947 samples, 0.04%)</title><rect x="27.3137%" y="325" width="0.0362%" height="15" fill="rgb(243,49,53)" fg:x="11121738977" fg:w="14753947"/><text x="27.5637%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14,753,947 samples, 0.04%)</title><rect x="27.3137%" y="309" width="0.0362%" height="15" fill="rgb(247,216,33)" fg:x="11121738977" fg:w="14753947"/><text x="27.5637%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (14,753,947 samples, 0.04%)</title><rect x="27.3137%" y="293" width="0.0362%" height="15" fill="rgb(226,26,14)" fg:x="11121738977" fg:w="14753947"/><text x="27.5637%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (14,753,947 samples, 0.04%)</title><rect x="27.3137%" y="277" width="0.0362%" height="15" fill="rgb(215,49,53)" fg:x="11121738977" fg:w="14753947"/><text x="27.5637%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (5,908,115 samples, 0.01%)</title><rect x="27.3354%" y="261" width="0.0145%" height="15" fill="rgb(245,162,40)" fg:x="11130584809" fg:w="5908115"/><text x="27.5854%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (5,908,115 samples, 0.01%)</title><rect x="27.3354%" y="245" width="0.0145%" height="15" fill="rgb(229,68,17)" fg:x="11130584809" fg:w="5908115"/><text x="27.5854%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (28,085,310 samples, 0.07%)</title><rect x="27.3499%" y="325" width="0.0690%" height="15" fill="rgb(213,182,10)" fg:x="11136492924" fg:w="28085310"/><text x="27.5999%" y="335.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (28,085,310 samples, 0.07%)</title><rect x="27.3499%" y="309" width="0.0690%" height="15" fill="rgb(245,125,30)" fg:x="11136492924" fg:w="28085310"/><text x="27.5999%" y="319.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (28,085,310 samples, 0.07%)</title><rect x="27.3499%" y="293" width="0.0690%" height="15" fill="rgb(232,202,2)" fg:x="11136492924" fg:w="28085310"/><text x="27.5999%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (28,085,310 samples, 0.07%)</title><rect x="27.3499%" y="277" width="0.0690%" height="15" fill="rgb(237,140,51)" fg:x="11136492924" fg:w="28085310"/><text x="27.5999%" y="287.50"></text></g><g><title>server_lib::resp3::get_data_type (13,459,566 samples, 0.03%)</title><rect x="27.4189%" y="325" width="0.0331%" height="15" fill="rgb(236,157,25)" fg:x="11164578234" fg:w="13459566"/><text x="27.6689%" y="335.50"></text></g><g><title>__rustc::__rust_dealloc (10,920,945 samples, 0.03%)</title><rect x="27.8907%" y="309" width="0.0268%" height="15" fill="rgb(219,209,0)" fg:x="11356691007" fg:w="10920945"/><text x="28.1407%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (24,883,984 samples, 0.06%)</title><rect x="28.0249%" y="149" width="0.0611%" height="15" fill="rgb(240,116,54)" fg:x="11411348759" fg:w="24883984"/><text x="28.2749%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24,883,984 samples, 0.06%)</title><rect x="28.0249%" y="133" width="0.0611%" height="15" fill="rgb(216,10,36)" fg:x="11411348759" fg:w="24883984"/><text x="28.2749%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (5,412,554 samples, 0.01%)</title><rect x="28.0860%" y="149" width="0.0133%" height="15" fill="rgb(222,72,44)" fg:x="11436232743" fg:w="5412554"/><text x="28.3360%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (345,504,684 samples, 0.85%)</title><rect x="28.0031%" y="197" width="0.8485%" height="15" fill="rgb(232,159,9)" fg:x="11402482962" fg:w="345504684"/><text x="28.2531%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (345,504,684 samples, 0.85%)</title><rect x="28.0031%" y="181" width="0.8485%" height="15" fill="rgb(210,39,32)" fg:x="11402482962" fg:w="345504684"/><text x="28.2531%" y="191.50"></text></g><g><title>alloc::alloc::alloc (345,504,684 samples, 0.85%)</title><rect x="28.0031%" y="165" width="0.8485%" height="15" fill="rgb(216,194,45)" fg:x="11402482962" fg:w="345504684"/><text x="28.2531%" y="175.50"></text></g><g><title>malloc (306,342,349 samples, 0.75%)</title><rect x="28.0993%" y="149" width="0.7523%" height="15" fill="rgb(218,18,35)" fg:x="11441645297" fg:w="306342349"/><text x="28.3493%" y="159.50"></text></g><g><title>[libc.so.6] (133,374,507 samples, 0.33%)</title><rect x="28.5241%" y="133" width="0.3276%" height="15" fill="rgb(207,83,51)" fg:x="11614613139" fg:w="133374507"/><text x="28.7741%" y="143.50"></text></g><g><title>[libc.so.6] (20,830,808 samples, 0.05%)</title><rect x="28.8005%" y="117" width="0.0512%" height="15" fill="rgb(225,63,43)" fg:x="11727156838" fg:w="20830808"/><text x="29.0505%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (383,057,095 samples, 0.94%)</title><rect x="27.9212%" y="261" width="0.9407%" height="15" fill="rgb(207,57,36)" fg:x="11369129223" fg:w="383057095"/><text x="28.1712%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (383,057,095 samples, 0.94%)</title><rect x="27.9212%" y="245" width="0.9407%" height="15" fill="rgb(216,99,33)" fg:x="11369129223" fg:w="383057095"/><text x="28.1712%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (383,057,095 samples, 0.94%)</title><rect x="27.9212%" y="229" width="0.9407%" height="15" fill="rgb(225,42,16)" fg:x="11369129223" fg:w="383057095"/><text x="28.1712%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (383,057,095 samples, 0.94%)</title><rect x="27.9212%" y="213" width="0.9407%" height="15" fill="rgb(220,201,45)" fg:x="11369129223" fg:w="383057095"/><text x="28.1712%" y="223.50"></text></g><g><title>alloc::raw_vec::layout_array (4,198,672 samples, 0.01%)</title><rect x="28.8516%" y="197" width="0.0103%" height="15" fill="rgb(225,33,4)" fg:x="11747987646" fg:w="4198672"/><text x="29.1016%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4,198,672 samples, 0.01%)</title><rect x="28.8516%" y="181" width="0.0103%" height="15" fill="rgb(224,33,50)" fg:x="11747987646" fg:w="4198672"/><text x="29.1016%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (4,198,672 samples, 0.01%)</title><rect x="28.8516%" y="165" width="0.0103%" height="15" fill="rgb(246,198,51)" fg:x="11747987646" fg:w="4198672"/><text x="29.1016%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4,198,672 samples, 0.01%)</title><rect x="28.8516%" y="149" width="0.0103%" height="15" fill="rgb(205,22,4)" fg:x="11747987646" fg:w="4198672"/><text x="29.1016%" y="159.50"></text></g><g><title>core::intrinsics::unlikely (4,198,672 samples, 0.01%)</title><rect x="28.8516%" y="133" width="0.0103%" height="15" fill="rgb(206,3,8)" fg:x="11747987646" fg:w="4198672"/><text x="29.1016%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (460,686,485 samples, 1.13%)</title><rect x="27.9175%" y="309" width="1.1314%" height="15" fill="rgb(251,23,15)" fg:x="11367611952" fg:w="460686485"/><text x="28.1675%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (460,686,485 samples, 1.13%)</title><rect x="27.9175%" y="293" width="1.1314%" height="15" fill="rgb(252,88,28)" fg:x="11367611952" fg:w="460686485"/><text x="28.1675%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (460,686,485 samples, 1.13%)</title><rect x="27.9175%" y="277" width="1.1314%" height="15" fill="rgb(212,127,14)" fg:x="11367611952" fg:w="460686485"/><text x="28.1675%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (76,112,119 samples, 0.19%)</title><rect x="28.8620%" y="261" width="0.1869%" height="15" fill="rgb(247,145,37)" fg:x="11752186318" fg:w="76112119"/><text x="29.1120%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76,112,119 samples, 0.19%)</title><rect x="28.8620%" y="245" width="0.1869%" height="15" fill="rgb(209,117,53)" fg:x="11752186318" fg:w="76112119"/><text x="29.1120%" y="255.50"></text></g><g><title>[libc.so.6] (73,370,193 samples, 0.18%)</title><rect x="28.8687%" y="229" width="0.1802%" height="15" fill="rgb(212,90,42)" fg:x="11754928244" fg:w="73370193"/><text x="29.1187%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (83,105,957 samples, 0.20%)</title><rect x="29.0489%" y="309" width="0.2041%" height="15" fill="rgb(218,164,37)" fg:x="11828298437" fg:w="83105957"/><text x="29.2989%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (70,993,227 samples, 0.17%)</title><rect x="29.0786%" y="293" width="0.1744%" height="15" fill="rgb(246,65,34)" fg:x="11840411167" fg:w="70993227"/><text x="29.3286%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (36,136,843 samples, 0.09%)</title><rect x="29.1642%" y="277" width="0.0887%" height="15" fill="rgb(231,100,33)" fg:x="11875267551" fg:w="36136843"/><text x="29.4142%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (8,686,723 samples, 0.02%)</title><rect x="29.3940%" y="245" width="0.0213%" height="15" fill="rgb(228,126,14)" fg:x="11968838050" fg:w="8686723"/><text x="29.6440%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (5,515,426 samples, 0.01%)</title><rect x="29.4154%" y="245" width="0.0135%" height="15" fill="rgb(215,173,21)" fg:x="11977524773" fg:w="5515426"/><text x="29.6654%" y="255.50"></text></g><g><title>__rustc::__rdl_alloc (4,586,366 samples, 0.01%)</title><rect x="29.5260%" y="229" width="0.0113%" height="15" fill="rgb(210,6,40)" fg:x="12022567800" fg:w="4586366"/><text x="29.7760%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,586,366 samples, 0.01%)</title><rect x="29.5260%" y="213" width="0.0113%" height="15" fill="rgb(212,48,18)" fg:x="12022567800" fg:w="4586366"/><text x="29.7760%" y="223.50"></text></g><g><title>__rustc::__rust_alloc (5,814,570 samples, 0.01%)</title><rect x="29.5372%" y="229" width="0.0143%" height="15" fill="rgb(230,214,11)" fg:x="12027154166" fg:w="5814570"/><text x="29.7872%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13,787,279 samples, 0.03%)</title><rect x="29.5515%" y="229" width="0.0339%" height="15" fill="rgb(254,105,39)" fg:x="12032968736" fg:w="13787279"/><text x="29.8015%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (135,836,567 samples, 0.33%)</title><rect x="29.4289%" y="245" width="0.3336%" height="15" fill="rgb(245,158,5)" fg:x="11983040199" fg:w="135836567"/><text x="29.6789%" y="255.50"></text></g><g><title>malloc (72,120,751 samples, 0.18%)</title><rect x="29.5854%" y="229" width="0.1771%" height="15" fill="rgb(249,208,11)" fg:x="12046756015" fg:w="72120751"/><text x="29.8354%" y="239.50"></text></g><g><title>core::cmp::max (10,272,564 samples, 0.03%)</title><rect x="29.7625%" y="245" width="0.0252%" height="15" fill="rgb(210,39,28)" fg:x="12118876766" fg:w="10272564"/><text x="30.0125%" y="255.50"></text></g><g><title>core::cmp::Ord::max (10,272,564 samples, 0.03%)</title><rect x="29.7625%" y="229" width="0.0252%" height="15" fill="rgb(211,56,53)" fg:x="12118876766" fg:w="10272564"/><text x="30.0125%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (211,121,279 samples, 0.52%)</title><rect x="29.2751%" y="293" width="0.5185%" height="15" fill="rgb(226,201,30)" fg:x="11920423127" fg:w="211121279"/><text x="29.5251%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (182,415,405 samples, 0.45%)</title><rect x="29.3456%" y="277" width="0.4480%" height="15" fill="rgb(239,101,34)" fg:x="11949129001" fg:w="182415405"/><text x="29.5956%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (179,252,025 samples, 0.44%)</title><rect x="29.3534%" y="261" width="0.4402%" height="15" fill="rgb(226,209,5)" fg:x="11952292381" fg:w="179252025"/><text x="29.6034%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8,533,987 samples, 0.02%)</title><rect x="29.7936%" y="293" width="0.0210%" height="15" fill="rgb(250,105,47)" fg:x="12131544406" fg:w="8533987"/><text x="30.0436%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8,533,987 samples, 0.02%)</title><rect x="29.7936%" y="277" width="0.0210%" height="15" fill="rgb(230,72,3)" fg:x="12131544406" fg:w="8533987"/><text x="30.0436%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (8,533,987 samples, 0.02%)</title><rect x="29.7936%" y="261" width="0.0210%" height="15" fill="rgb(232,218,39)" fg:x="12131544406" fg:w="8533987"/><text x="30.0436%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (8,533,987 samples, 0.02%)</title><rect x="29.7936%" y="245" width="0.0210%" height="15" fill="rgb(248,166,6)" fg:x="12131544406" fg:w="8533987"/><text x="30.0436%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (234,960,160 samples, 0.58%)</title><rect x="29.2530%" y="309" width="0.5770%" height="15" fill="rgb(247,89,20)" fg:x="11911404394" fg:w="234960160"/><text x="29.5030%" y="319.50"></text></g><g><title>core::ptr::write (6,286,161 samples, 0.02%)</title><rect x="29.8146%" y="293" width="0.0154%" height="15" fill="rgb(248,130,54)" fg:x="12140078393" fg:w="6286161"/><text x="30.0646%" y="303.50"></text></g><g><title>cfree (95,643,464 samples, 0.23%)</title><rect x="29.8360%" y="309" width="0.2349%" height="15" fill="rgb(234,196,4)" fg:x="12148792186" fg:w="95643464"/><text x="30.0860%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89,429,946 samples, 0.22%)</title><rect x="30.0709%" y="245" width="0.2196%" height="15" fill="rgb(250,143,31)" fg:x="12244435650" fg:w="89429946"/><text x="30.3209%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (89,429,946 samples, 0.22%)</title><rect x="30.0709%" y="229" width="0.2196%" height="15" fill="rgb(211,110,34)" fg:x="12244435650" fg:w="89429946"/><text x="30.3209%" y="239.50"></text></g><g><title>cfree (86,289,776 samples, 0.21%)</title><rect x="30.0786%" y="213" width="0.2119%" height="15" fill="rgb(215,124,48)" fg:x="12247575820" fg:w="86289776"/><text x="30.3286%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (92,692,115 samples, 0.23%)</title><rect x="30.0709%" y="309" width="0.2276%" height="15" fill="rgb(216,46,13)" fg:x="12244435650" fg:w="92692115"/><text x="30.3209%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (92,692,115 samples, 0.23%)</title><rect x="30.0709%" y="293" width="0.2276%" height="15" fill="rgb(205,184,25)" fg:x="12244435650" fg:w="92692115"/><text x="30.3209%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92,692,115 samples, 0.23%)</title><rect x="30.0709%" y="277" width="0.2276%" height="15" fill="rgb(228,1,10)" fg:x="12244435650" fg:w="92692115"/><text x="30.3209%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (92,692,115 samples, 0.23%)</title><rect x="30.0709%" y="261" width="0.2276%" height="15" fill="rgb(213,116,27)" fg:x="12244435650" fg:w="92692115"/><text x="30.3209%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,051,290 samples, 0.01%)</title><rect x="30.2985%" y="309" width="0.0124%" height="15" fill="rgb(241,95,50)" fg:x="12337127765" fg:w="5051290"/><text x="30.5485%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,051,290 samples, 0.01%)</title><rect x="30.2985%" y="293" width="0.0124%" height="15" fill="rgb(238,48,32)" fg:x="12337127765" fg:w="5051290"/><text x="30.5485%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (5,051,290 samples, 0.01%)</title><rect x="30.2985%" y="277" width="0.0124%" height="15" fill="rgb(235,113,49)" fg:x="12337127765" fg:w="5051290"/><text x="30.5485%" y="287.50"></text></g><g><title>server_lib::resp3::parse_request (2,194,578,054 samples, 5.39%)</title><rect x="25.0628%" y="357" width="5.3896%" height="15" fill="rgb(205,127,43)" fg:x="10205233465" fg:w="2194578054"/><text x="25.3128%" y="367.50">server_..</text></g><g><title>server_lib::resp3::parse_arrays (2,099,341,226 samples, 5.16%)</title><rect x="25.2967%" y="341" width="5.1557%" height="15" fill="rgb(250,162,2)" fg:x="10300470293" fg:w="2099341226"/><text x="25.5467%" y="351.50">server..</text></g><g><title>server_lib::resp3::parse_bulk_strings (1,221,773,719 samples, 3.00%)</title><rect x="27.4519%" y="325" width="3.0005%" height="15" fill="rgb(220,13,41)" fg:x="11178037800" fg:w="1221773719"/><text x="27.7019%" y="335.50">ser..</text></g><g><title>core::str::&lt;impl str&gt;::parse (57,632,464 samples, 0.14%)</title><rect x="30.3109%" y="309" width="0.1415%" height="15" fill="rgb(249,221,25)" fg:x="12342179055" fg:w="57632464"/><text x="30.5609%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (57,632,464 samples, 0.14%)</title><rect x="30.3109%" y="293" width="0.1415%" height="15" fill="rgb(215,208,19)" fg:x="12342179055" fg:w="57632464"/><text x="30.5609%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (57,632,464 samples, 0.14%)</title><rect x="30.3109%" y="277" width="0.1415%" height="15" fill="rgb(236,175,2)" fg:x="12342179055" fg:w="57632464"/><text x="30.5609%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (57,632,464 samples, 0.14%)</title><rect x="30.3109%" y="261" width="0.1415%" height="15" fill="rgb(241,52,2)" fg:x="12342179055" fg:w="57632464"/><text x="30.5609%" y="271.50"></text></g><g><title>__send (13,787,159 samples, 0.03%)</title><rect x="30.5421%" y="341" width="0.0339%" height="15" fill="rgb(248,140,14)" fg:x="12436336819" fg:w="13787159"/><text x="30.7921%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12,182,182 samples, 0.03%)</title><rect x="30.5760%" y="341" width="0.0299%" height="15" fill="rgb(253,22,42)" fg:x="12450123978" fg:w="12182182"/><text x="30.8260%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12,182,182 samples, 0.03%)</title><rect x="30.5760%" y="325" width="0.0299%" height="15" fill="rgb(234,61,47)" fg:x="12450123978" fg:w="12182182"/><text x="30.8260%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,326,791 samples, 0.02%)</title><rect x="30.5904%" y="309" width="0.0155%" height="15" fill="rgb(208,226,15)" fg:x="12455979369" fg:w="6326791"/><text x="30.8404%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (6,326,791 samples, 0.02%)</title><rect x="30.5904%" y="293" width="0.0155%" height="15" fill="rgb(217,221,4)" fg:x="12455979369" fg:w="6326791"/><text x="30.8404%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (6,326,791 samples, 0.02%)</title><rect x="30.5904%" y="277" width="0.0155%" height="15" fill="rgb(212,174,34)" fg:x="12455979369" fg:w="6326791"/><text x="30.8404%" y="287.50"></text></g><g><title>core::slice::index::get_noubcheck (6,326,791 samples, 0.02%)</title><rect x="30.5904%" y="261" width="0.0155%" height="15" fill="rgb(253,83,4)" fg:x="12455979369" fg:w="6326791"/><text x="30.8404%" y="271.50"></text></g><g><title>[libc.so.6] (8,639,106 samples, 0.02%)</title><rect x="30.7050%" y="309" width="0.0212%" height="15" fill="rgb(250,195,49)" fg:x="12502629033" fg:w="8639106"/><text x="30.9550%" y="319.50"></text></g><g><title>__send (16,396,849,813 samples, 40.27%)</title><rect x="30.7262%" y="309" width="40.2687%" height="15" fill="rgb(241,192,25)" fg:x="12511268139" fg:w="16396849813"/><text x="30.9762%" y="319.50">__send</text></g><g><title>[libc.so.6] (16,372,140,341 samples, 40.21%)</title><rect x="30.7869%" y="293" width="40.2080%" height="15" fill="rgb(208,124,10)" fg:x="12535977611" fg:w="16372140341"/><text x="31.0369%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (16,334,812,870 samples, 40.12%)</title><rect x="30.8785%" y="277" width="40.1163%" height="15" fill="rgb(222,33,0)" fg:x="12573305082" fg:w="16334812870"/><text x="31.1285%" y="287.50">[libc.so.6]</text></g><g><title>[libc.so.6] (16,195,327,665 samples, 39.77%)</title><rect x="31.2211%" y="261" width="39.7738%" height="15" fill="rgb(234,209,28)" fg:x="12712790287" fg:w="16195327665"/><text x="31.4711%" y="271.50">[libc.so.6]</text></g><g><title>std::io::Write::write_all (16,523,266,600 samples, 40.58%)</title><rect x="30.4524%" y="357" width="40.5792%" height="15" fill="rgb(224,11,23)" fg:x="12399811519" fg:w="16523266600"/><text x="30.7024%" y="367.50">std::io::Write::write_all</text></g><g><title>std::net::udp::UdpSocket::send (16,460,771,959 samples, 40.43%)</title><rect x="30.6059%" y="341" width="40.4257%" height="15" fill="rgb(232,99,1)" fg:x="12462306160" fg:w="16460771959"/><text x="30.8559%" y="351.50">std::net::udp::UdpSocket::send</text></g><g><title>std::sys::net::connection::socket::UdpSocket::send (16,439,538,972 samples, 40.37%)</title><rect x="30.6581%" y="325" width="40.3735%" height="15" fill="rgb(237,95,45)" fg:x="12483539147" fg:w="16439538972"/><text x="30.9081%" y="335.50">std::sys::net::connection::socket::UdpSocket::send</text></g><g><title>std::sys::pal::unix::cvt (14,960,167 samples, 0.04%)</title><rect x="70.9949%" y="309" width="0.0367%" height="15" fill="rgb(208,109,11)" fg:x="28908117952" fg:w="14960167"/><text x="71.2449%" y="319.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (14,960,167 samples, 0.04%)</title><rect x="70.9949%" y="293" width="0.0367%" height="15" fill="rgb(216,190,48)" fg:x="28908117952" fg:w="14960167"/><text x="71.2449%" y="303.50"></text></g><g><title>[libc.so.6] (8,375,426 samples, 0.02%)</title><rect x="71.0511%" y="309" width="0.0206%" height="15" fill="rgb(251,171,36)" fg:x="28931008995" fg:w="8375426"/><text x="71.3011%" y="319.50"></text></g><g><title>recv (11,581,681,167 samples, 28.44%)</title><rect x="71.0716%" y="309" width="28.4432%" height="15" fill="rgb(230,62,22)" fg:x="28939384421" fg:w="11581681167"/><text x="71.3216%" y="319.50">recv</text></g><g><title>[libc.so.6] (11,576,211,137 samples, 28.43%)</title><rect x="71.0851%" y="293" width="28.4298%" height="15" fill="rgb(225,114,35)" fg:x="28944854451" fg:w="11576211137"/><text x="71.3351%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,553,227,926 samples, 28.37%)</title><rect x="71.1415%" y="277" width="28.3733%" height="15" fill="rgb(215,118,42)" fg:x="28967837662" fg:w="11553227926"/><text x="71.3915%" y="287.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,419,832,639 samples, 28.05%)</title><rect x="71.4691%" y="261" width="28.0457%" height="15" fill="rgb(243,119,21)" fg:x="29101232949" fg:w="11419832639"/><text x="71.7191%" y="271.50">[libc.so.6]</text></g><g><title>server::handle_client (38,856,585,668 samples, 95.43%)</title><rect x="4.1467%" y="373" width="95.4271%" height="15" fill="rgb(252,177,53)" fg:x="1688494663" fg:w="38856585668"/><text x="4.3967%" y="383.50">server::handle_client</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::recv (11,622,002,212 samples, 28.54%)</title><rect x="71.0316%" y="357" width="28.5422%" height="15" fill="rgb(237,209,29)" fg:x="28923078119" fg:w="11622002212"/><text x="71.2816%" y="367.50">std::os::unix::net::datagram::UnixDatagram::re..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (11,617,009,512 samples, 28.53%)</title><rect x="71.0439%" y="341" width="28.5300%" height="15" fill="rgb(212,65,23)" fg:x="28928070819" fg:w="11617009512"/><text x="71.2939%" y="351.50">std::sys::net::connection::socket::unix::Socke..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (11,617,009,512 samples, 28.53%)</title><rect x="71.0439%" y="325" width="28.5300%" height="15" fill="rgb(230,222,46)" fg:x="28928070819" fg:w="11617009512"/><text x="71.2939%" y="335.50">std::sys::net::connection::socket::unix::Socke..</text></g><g><title>std::sys::pal::unix::cvt (24,014,743 samples, 0.06%)</title><rect x="99.5149%" y="309" width="0.0590%" height="15" fill="rgb(215,135,32)" fg:x="40521065588" fg:w="24014743"/><text x="99.7649%" y="319.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (24,014,743 samples, 0.06%)</title><rect x="99.5149%" y="293" width="0.0590%" height="15" fill="rgb(246,101,22)" fg:x="40521065588" fg:w="24014743"/><text x="99.7649%" y="303.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5,133,857 samples, 0.01%)</title><rect x="99.5888%" y="357" width="0.0126%" height="15" fill="rgb(206,107,13)" fg:x="40551167898" fg:w="5133857"/><text x="99.8388%" y="367.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (5,133,857 samples, 0.01%)</title><rect x="99.5888%" y="341" width="0.0126%" height="15" fill="rgb(250,100,44)" fg:x="40551167898" fg:w="5133857"/><text x="99.8388%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="309" width="0.0192%" height="15" fill="rgb(231,147,38)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="293" width="0.0192%" height="15" fill="rgb(229,8,40)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="277" width="0.0192%" height="15" fill="rgb(221,135,30)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="261" width="0.0192%" height="15" fill="rgb(249,193,18)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="245" width="0.0192%" height="15" fill="rgb(209,133,39)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="229" width="0.0192%" height="15" fill="rgb(232,100,14)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="239.50"></text></g><g><title>alloc::alloc::alloc (7,813,051 samples, 0.02%)</title><rect x="99.6014%" y="213" width="0.0192%" height="15" fill="rgb(224,185,1)" fg:x="40556301755" fg:w="7813051"/><text x="99.8514%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9,934,307 samples, 0.02%)</title><rect x="99.6014%" y="357" width="0.0244%" height="15" fill="rgb(223,139,8)" fg:x="40556301755" fg:w="9934307"/><text x="99.8514%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9,934,307 samples, 0.02%)</title><rect x="99.6014%" y="341" width="0.0244%" height="15" fill="rgb(232,213,38)" fg:x="40556301755" fg:w="9934307"/><text x="99.8514%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (9,934,307 samples, 0.02%)</title><rect x="99.6014%" y="325" width="0.0244%" height="15" fill="rgb(207,94,22)" fg:x="40556301755" fg:w="9934307"/><text x="99.8514%" y="335.50"></text></g><g><title>alloc::string::String::push_str (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="357" width="0.0275%" height="15" fill="rgb(219,183,54)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="341" width="0.0275%" height="15" fill="rgb(216,185,54)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="325" width="0.0275%" height="15" fill="rgb(254,217,39)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="309" width="0.0275%" height="15" fill="rgb(240,178,23)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="293" width="0.0275%" height="15" fill="rgb(218,11,47)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="277" width="0.0275%" height="15" fill="rgb(218,51,51)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (11,203,964 samples, 0.03%)</title><rect x="99.6258%" y="261" width="0.0275%" height="15" fill="rgb(238,126,27)" fg:x="40566236062" fg:w="11203964"/><text x="99.8758%" y="271.50"></text></g><g><title>server_lib::resp3::bulk_string_response (41,800,742 samples, 0.10%)</title><rect x="99.5738%" y="373" width="0.1027%" height="15" fill="rgb(249,202,22)" fg:x="40545080331" fg:w="41800742"/><text x="99.8238%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="357" width="0.0232%" height="15" fill="rgb(254,195,49)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="341" width="0.0232%" height="15" fill="rgb(208,123,14)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="325" width="0.0232%" height="15" fill="rgb(224,200,8)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="309" width="0.0232%" height="15" fill="rgb(217,61,36)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="293" width="0.0232%" height="15" fill="rgb(206,35,45)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="277" width="0.0232%" height="15" fill="rgb(217,65,33)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (9,441,047 samples, 0.02%)</title><rect x="99.6533%" y="261" width="0.0232%" height="15" fill="rgb(222,158,48)" fg:x="40577440026" fg:w="9441047"/><text x="99.9033%" y="271.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (31,854,378 samples, 0.08%)</title><rect x="99.6765%" y="373" width="0.0782%" height="15" fill="rgb(254,2,54)" fg:x="40586881073" fg:w="31854378"/><text x="99.9265%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8 (9,302,333 samples, 0.02%)</title><rect x="99.7319%" y="357" width="0.0228%" height="15" fill="rgb(250,143,38)" fg:x="40609433118" fg:w="9302333"/><text x="99.9819%" y="367.50"></text></g><g><title>server_lib::storage::Storage::get_entry (21,258,958 samples, 0.05%)</title><rect x="99.7599%" y="373" width="0.0522%" height="15" fill="rgb(248,25,0)" fg:x="40620833335" fg:w="21258958"/><text x="100.0099%" y="383.50"></text></g><g><title>server_lib::storage::Storage::insert_entry (16,815,839 samples, 0.04%)</title><rect x="99.8121%" y="373" width="0.0413%" height="15" fill="rgb(206,152,27)" fg:x="40642092293" fg:w="16815839"/><text x="100.0621%" y="383.50"></text></g><g><title>std::io::Write::write_all (30,406,978 samples, 0.07%)</title><rect x="99.8534%" y="373" width="0.0747%" height="15" fill="rgb(240,77,30)" fg:x="40658908132" fg:w="30406978"/><text x="100.1034%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (7,765,401 samples, 0.02%)</title><rect x="99.9281%" y="373" width="0.0191%" height="15" fill="rgb(231,5,3)" fg:x="40689315110" fg:w="7765401"/><text x="100.1781%" y="383.50"></text></g><g><title>std::time::SystemTime::duration_since (9,379,897 samples, 0.02%)</title><rect x="99.9471%" y="373" width="0.0230%" height="15" fill="rgb(207,226,32)" fg:x="40697080511" fg:w="9379897"/><text x="100.1971%" y="383.50"></text></g><g><title>all (40,718,606,836 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(222,207,47)" fg:x="0" fg:w="40718606836"/><text x="0.2500%" y="415.50"></text></g><g><title>server (40,718,606,836 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(229,115,45)" fg:x="0" fg:w="40718606836"/><text x="0.2500%" y="399.50">server</text></g><g><title>std::time::SystemTime::now (12,146,428 samples, 0.03%)</title><rect x="99.9702%" y="373" width="0.0298%" height="15" fill="rgb(224,191,6)" fg:x="40706460408" fg:w="12146428"/><text x="100.2202%" y="383.50"></text></g></svg></svg>