<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="39445991774"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="373" width="0.0194%" height="15" fill="rgb(227,0,7)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="357" width="0.0194%" height="15" fill="rgb(217,0,24)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="341" width="0.0194%" height="15" fill="rgb(221,193,54)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="325" width="0.0194%" height="15" fill="rgb(248,212,6)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="309" width="0.0194%" height="15" fill="rgb(208,68,35)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="293" width="0.0194%" height="15" fill="rgb(232,128,0)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="303.50"></text></g><g><title>alloc::alloc::alloc (7,639,912 samples, 0.02%)</title><rect x="0.0555%" y="277" width="0.0194%" height="15" fill="rgb(207,160,47)" fg:x="21905841" fg:w="7639912"/><text x="0.3055%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (41,515,010 samples, 0.11%)</title><rect x="0.0000%" y="389" width="0.1052%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="41515010"/><text x="0.2500%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,969,257 samples, 0.03%)</title><rect x="0.0749%" y="373" width="0.0303%" height="15" fill="rgb(218,30,26)" fg:x="29545753" fg:w="11969257"/><text x="0.3249%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,969,257 samples, 0.03%)</title><rect x="0.0749%" y="357" width="0.0303%" height="15" fill="rgb(220,122,19)" fg:x="29545753" fg:w="11969257"/><text x="0.3249%" y="367.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (39,925,037 samples, 0.10%)</title><rect x="0.1052%" y="389" width="0.1012%" height="15" fill="rgb(250,228,42)" fg:x="41515010" fg:w="39925037"/><text x="0.3552%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14,776,423 samples, 0.04%)</title><rect x="0.2065%" y="389" width="0.0375%" height="15" fill="rgb(240,193,28)" fg:x="81440047" fg:w="14776423"/><text x="0.4565%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (47,218,937 samples, 0.12%)</title><rect x="0.2439%" y="389" width="0.1197%" height="15" fill="rgb(216,20,37)" fg:x="96216470" fg:w="47218937"/><text x="0.4939%" y="399.50"></text></g><g><title>alloc::string::String::push_str (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="373" width="0.0220%" height="15" fill="rgb(206,188,39)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="357" width="0.0220%" height="15" fill="rgb(217,207,13)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="341" width="0.0220%" height="15" fill="rgb(231,73,38)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="325" width="0.0220%" height="15" fill="rgb(225,20,46)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="309" width="0.0220%" height="15" fill="rgb(210,31,41)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="293" width="0.0220%" height="15" fill="rgb(221,200,47)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (8,671,446 samples, 0.02%)</title><rect x="0.3416%" y="277" width="0.0220%" height="15" fill="rgb(226,26,5)" fg:x="134763961" fg:w="8671446"/><text x="0.5916%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16,804,216 samples, 0.04%)</title><rect x="0.3636%" y="389" width="0.0426%" height="15" fill="rgb(249,33,26)" fg:x="143435407" fg:w="16804216"/><text x="0.6136%" y="399.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (8,961,600 samples, 0.02%)</title><rect x="0.4062%" y="389" width="0.0227%" height="15" fill="rgb(235,183,28)" fg:x="160239623" fg:w="8961600"/><text x="0.6562%" y="399.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (21,510,899 samples, 0.05%)</title><rect x="0.4371%" y="389" width="0.0545%" height="15" fill="rgb(221,5,38)" fg:x="172413638" fg:w="21510899"/><text x="0.6871%" y="399.50"></text></g><g><title>[libc.so.6] (196,610,643 samples, 0.50%)</title><rect x="0.4958%" y="389" width="0.4984%" height="15" fill="rgb(247,18,42)" fg:x="195559920" fg:w="196610643"/><text x="0.7458%" y="399.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (32,321,468 samples, 0.08%)</title><rect x="0.9942%" y="373" width="0.0819%" height="15" fill="rgb(241,131,45)" fg:x="392170563" fg:w="32321468"/><text x="1.2442%" y="383.50"></text></g><g><title>recv (4,547,439 samples, 0.01%)</title><rect x="1.0839%" y="373" width="0.0115%" height="15" fill="rgb(249,31,29)" fg:x="427574118" fg:w="4547439"/><text x="1.3339%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="357" width="0.0298%" height="15" fill="rgb(225,111,53)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="341" width="0.0298%" height="15" fill="rgb(238,160,17)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="325" width="0.0298%" height="15" fill="rgb(214,148,48)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="309" width="0.0298%" height="15" fill="rgb(232,36,49)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="293" width="0.0298%" height="15" fill="rgb(209,103,24)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="277" width="0.0298%" height="15" fill="rgb(229,88,8)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (11,736,551 samples, 0.03%)</title><rect x="1.3045%" y="261" width="0.0298%" height="15" fill="rgb(213,181,19)" fg:x="514572484" fg:w="11736551"/><text x="1.5545%" y="271.50"></text></g><g><title>server::process_request (97,117,810 samples, 0.25%)</title><rect x="1.0955%" y="373" width="0.2462%" height="15" fill="rgb(254,191,54)" fg:x="432121557" fg:w="97117810"/><text x="1.3455%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="309" width="0.0314%" height="15" fill="rgb(241,83,37)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="293" width="0.0314%" height="15" fill="rgb(233,36,39)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="277" width="0.0314%" height="15" fill="rgb(226,3,54)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="261" width="0.0314%" height="15" fill="rgb(245,192,40)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="245" width="0.0314%" height="15" fill="rgb(238,167,29)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="229" width="0.0314%" height="15" fill="rgb(232,182,51)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="239.50"></text></g><g><title>alloc::alloc::alloc (12,397,328 samples, 0.03%)</title><rect x="1.4309%" y="213" width="0.0314%" height="15" fill="rgb(231,60,39)" fg:x="564444392" fg:w="12397328"/><text x="1.6809%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16,628,526 samples, 0.04%)</title><rect x="1.4309%" y="357" width="0.0422%" height="15" fill="rgb(208,69,12)" fg:x="564444392" fg:w="16628526"/><text x="1.6809%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16,628,526 samples, 0.04%)</title><rect x="1.4309%" y="341" width="0.0422%" height="15" fill="rgb(235,93,37)" fg:x="564444392" fg:w="16628526"/><text x="1.6809%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (16,628,526 samples, 0.04%)</title><rect x="1.4309%" y="325" width="0.0422%" height="15" fill="rgb(213,116,39)" fg:x="564444392" fg:w="16628526"/><text x="1.6809%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,231,198 samples, 0.01%)</title><rect x="1.4624%" y="309" width="0.0107%" height="15" fill="rgb(222,207,29)" fg:x="576841720" fg:w="4231198"/><text x="1.7124%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,231,198 samples, 0.01%)</title><rect x="1.4624%" y="293" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="576841720" fg:w="4231198"/><text x="1.7124%" y="303.50"></text></g><g><title>alloc::string::String::from_utf8 (10,824,380 samples, 0.03%)</title><rect x="1.4731%" y="357" width="0.0274%" height="15" fill="rgb(218,138,4)" fg:x="581072918" fg:w="10824380"/><text x="1.7231%" y="367.50"></text></g><g><title>server_lib::resp3::parse_arrays (64,196,194 samples, 0.16%)</title><rect x="1.3417%" y="373" width="0.1627%" height="15" fill="rgb(250,191,14)" fg:x="529239367" fg:w="64196194"/><text x="1.5917%" y="383.50"></text></g><g><title>server_lib::resp3::parse_request (67,256,978 samples, 0.17%)</title><rect x="1.5044%" y="373" width="0.1705%" height="15" fill="rgb(239,60,40)" fg:x="593435561" fg:w="67256978"/><text x="1.7544%" y="383.50"></text></g><g><title>[server] (283,633,662 samples, 0.72%)</title><rect x="0.9942%" y="389" width="0.7190%" height="15" fill="rgb(206,27,48)" fg:x="392170563" fg:w="283633662"/><text x="1.2442%" y="399.50"></text></g><g><title>std::net::udp::UdpSocket::send (15,111,686 samples, 0.04%)</title><rect x="1.6749%" y="373" width="0.0383%" height="15" fill="rgb(225,35,8)" fg:x="660692539" fg:w="15111686"/><text x="1.9249%" y="383.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (22,604,177 samples, 0.06%)</title><rect x="1.7132%" y="373" width="0.0573%" height="15" fill="rgb(250,213,24)" fg:x="675804225" fg:w="22604177"/><text x="1.9632%" y="383.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (23,470,790 samples, 0.06%)</title><rect x="1.7705%" y="373" width="0.0595%" height="15" fill="rgb(247,123,22)" fg:x="698408402" fg:w="23470790"/><text x="2.0205%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (5,428,905 samples, 0.01%)</title><rect x="1.8163%" y="357" width="0.0138%" height="15" fill="rgb(231,138,38)" fg:x="716450287" fg:w="5428905"/><text x="2.0663%" y="367.50"></text></g><g><title>[libc.so.6] (24,730,918 samples, 0.06%)</title><rect x="1.8300%" y="373" width="0.0627%" height="15" fill="rgb(231,145,46)" fg:x="721879192" fg:w="24730918"/><text x="2.0800%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (10,479,559 samples, 0.03%)</title><rect x="1.8927%" y="373" width="0.0266%" height="15" fill="rgb(251,118,11)" fg:x="746610110" fg:w="10479559"/><text x="2.1427%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (29,638,447 samples, 0.08%)</title><rect x="1.9193%" y="373" width="0.0751%" height="15" fill="rgb(217,147,25)" fg:x="757089669" fg:w="29638447"/><text x="2.1693%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,578,923 samples, 0.02%)</title><rect x="1.9944%" y="373" width="0.0192%" height="15" fill="rgb(247,81,37)" fg:x="786728116" fg:w="7578923"/><text x="2.2444%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,578,923 samples, 0.02%)</title><rect x="1.9944%" y="357" width="0.0192%" height="15" fill="rgb(209,12,38)" fg:x="786728116" fg:w="7578923"/><text x="2.2444%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (18,471,336 samples, 0.05%)</title><rect x="2.0137%" y="373" width="0.0468%" height="15" fill="rgb(227,1,9)" fg:x="794307039" fg:w="18471336"/><text x="2.2637%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5,989,101 samples, 0.02%)</title><rect x="2.0453%" y="357" width="0.0152%" height="15" fill="rgb(248,47,43)" fg:x="806789274" fg:w="5989101"/><text x="2.2953%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5,989,101 samples, 0.02%)</title><rect x="2.0453%" y="341" width="0.0152%" height="15" fill="rgb(221,10,30)" fg:x="806789274" fg:w="5989101"/><text x="2.2953%" y="351.50"></text></g><g><title>alloc::alloc::realloc (5,989,101 samples, 0.02%)</title><rect x="2.0453%" y="325" width="0.0152%" height="15" fill="rgb(210,229,1)" fg:x="806789274" fg:w="5989101"/><text x="2.2953%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (7,192,436 samples, 0.02%)</title><rect x="2.0605%" y="373" width="0.0182%" height="15" fill="rgb(222,148,37)" fg:x="812778375" fg:w="7192436"/><text x="2.3105%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (12,437,493 samples, 0.03%)</title><rect x="2.0787%" y="373" width="0.0315%" height="15" fill="rgb(234,67,33)" fg:x="819970811" fg:w="12437493"/><text x="2.3287%" y="383.50"></text></g><g><title>cfree (15,204,377 samples, 0.04%)</title><rect x="2.1102%" y="373" width="0.0385%" height="15" fill="rgb(247,98,35)" fg:x="832408304" fg:w="15204377"/><text x="2.3602%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (6,509,977 samples, 0.02%)</title><rect x="2.1488%" y="373" width="0.0165%" height="15" fill="rgb(247,138,52)" fg:x="847612681" fg:w="6509977"/><text x="2.3988%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (11,730,966 samples, 0.03%)</title><rect x="2.1739%" y="373" width="0.0297%" height="15" fill="rgb(213,79,30)" fg:x="857503009" fg:w="11730966"/><text x="2.4239%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (8,874,912 samples, 0.02%)</title><rect x="2.2036%" y="373" width="0.0225%" height="15" fill="rgb(246,177,23)" fg:x="869233975" fg:w="8874912"/><text x="2.4536%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,430,320 samples, 0.02%)</title><rect x="2.2261%" y="373" width="0.0188%" height="15" fill="rgb(230,62,27)" fg:x="878108887" fg:w="7430320"/><text x="2.4761%" y="383.50"></text></g><g><title>malloc (21,394,435 samples, 0.05%)</title><rect x="2.2449%" y="373" width="0.0542%" height="15" fill="rgb(216,154,8)" fg:x="885539207" fg:w="21394435"/><text x="2.4949%" y="383.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (6,195,023 samples, 0.02%)</title><rect x="2.2992%" y="373" width="0.0157%" height="15" fill="rgb(244,35,45)" fg:x="906933642" fg:w="6195023"/><text x="2.5492%" y="383.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (11,829,463 samples, 0.03%)</title><rect x="2.3149%" y="373" width="0.0300%" height="15" fill="rgb(251,115,12)" fg:x="913128665" fg:w="11829463"/><text x="2.5649%" y="383.50"></text></g><g><title>server::get_value_type (11,184,100 samples, 0.03%)</title><rect x="2.3449%" y="373" width="0.0284%" height="15" fill="rgb(240,54,50)" fg:x="924958128" fg:w="11184100"/><text x="2.5949%" y="383.50"></text></g><g><title>server::process_request (13,186,086 samples, 0.03%)</title><rect x="2.3732%" y="373" width="0.0334%" height="15" fill="rgb(233,84,52)" fg:x="936142228" fg:w="13186086"/><text x="2.6232%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5,731,484 samples, 0.01%)</title><rect x="2.4128%" y="357" width="0.0145%" height="15" fill="rgb(207,117,47)" fg:x="951767030" fg:w="5731484"/><text x="2.6628%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,731,484 samples, 0.01%)</title><rect x="2.4128%" y="341" width="0.0145%" height="15" fill="rgb(249,43,39)" fg:x="951767030" fg:w="5731484"/><text x="2.6628%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,731,484 samples, 0.01%)</title><rect x="2.4128%" y="325" width="0.0145%" height="15" fill="rgb(209,38,44)" fg:x="951767030" fg:w="5731484"/><text x="2.6628%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5,731,484 samples, 0.01%)</title><rect x="2.4128%" y="309" width="0.0145%" height="15" fill="rgb(236,212,23)" fg:x="951767030" fg:w="5731484"/><text x="2.6628%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,731,484 samples, 0.01%)</title><rect x="2.4128%" y="293" width="0.0145%" height="15" fill="rgb(242,79,21)" fg:x="951767030" fg:w="5731484"/><text x="2.6628%" y="303.50"></text></g><g><title>server_lib::resp3::bulk_string_response (14,474,881 samples, 0.04%)</title><rect x="2.4067%" y="373" width="0.0367%" height="15" fill="rgb(211,96,35)" fg:x="949328314" fg:w="14474881"/><text x="2.6567%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="357" width="0.0103%" height="15" fill="rgb(253,215,40)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="341" width="0.0103%" height="15" fill="rgb(211,81,21)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="325" width="0.0103%" height="15" fill="rgb(208,190,38)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="309" width="0.0103%" height="15" fill="rgb(235,213,38)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="293" width="0.0103%" height="15" fill="rgb(237,122,38)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="277" width="0.0103%" height="15" fill="rgb(244,218,35)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (4,052,952 samples, 0.01%)</title><rect x="2.4331%" y="261" width="0.0103%" height="15" fill="rgb(240,68,47)" fg:x="959750243" fg:w="4052952"/><text x="2.6831%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9,499,633 samples, 0.02%)</title><rect x="2.5673%" y="357" width="0.0241%" height="15" fill="rgb(210,16,53)" fg:x="1012680270" fg:w="9499633"/><text x="2.8173%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9,499,633 samples, 0.02%)</title><rect x="2.5673%" y="341" width="0.0241%" height="15" fill="rgb(235,124,12)" fg:x="1012680270" fg:w="9499633"/><text x="2.8173%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="325" width="0.0154%" height="15" fill="rgb(224,169,11)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="309" width="0.0154%" height="15" fill="rgb(250,166,2)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="293" width="0.0154%" height="15" fill="rgb(242,216,29)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="277" width="0.0154%" height="15" fill="rgb(230,116,27)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="261" width="0.0154%" height="15" fill="rgb(228,99,48)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="245" width="0.0154%" height="15" fill="rgb(253,11,6)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="229" width="0.0154%" height="15" fill="rgb(247,143,39)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="239.50"></text></g><g><title>alloc::alloc::alloc (6,076,890 samples, 0.02%)</title><rect x="2.5759%" y="213" width="0.0154%" height="15" fill="rgb(236,97,10)" fg:x="1016103013" fg:w="6076890"/><text x="2.8259%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (4,304,413 samples, 0.01%)</title><rect x="2.5913%" y="357" width="0.0109%" height="15" fill="rgb(233,208,19)" fg:x="1022179903" fg:w="4304413"/><text x="2.8413%" y="367.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (68,902,259 samples, 0.17%)</title><rect x="2.4433%" y="373" width="0.1747%" height="15" fill="rgb(216,164,2)" fg:x="963803195" fg:w="68902259"/><text x="2.6933%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="357" width="0.0101%" height="15" fill="rgb(220,129,5)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="341" width="0.0101%" height="15" fill="rgb(242,17,10)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="325" width="0.0101%" height="15" fill="rgb(242,107,0)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="309" width="0.0101%" height="15" fill="rgb(251,28,31)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="293" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (3,984,907 samples, 0.01%)</title><rect x="2.6079%" y="277" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="1028720547" fg:w="3984907"/><text x="2.8579%" y="287.50"></text></g><g><title>server_lib::resp3::parse_request (6,269,482 samples, 0.02%)</title><rect x="2.6180%" y="373" width="0.0159%" height="15" fill="rgb(232,23,21)" fg:x="1032705454" fg:w="6269482"/><text x="2.8680%" y="383.50"></text></g><g><title>server_lib::storage::Storage::get_entry (4,836,027 samples, 0.01%)</title><rect x="2.6339%" y="373" width="0.0123%" height="15" fill="rgb(244,5,23)" fg:x="1038974936" fg:w="4836027"/><text x="2.8839%" y="383.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (17,891,380 samples, 0.05%)</title><rect x="2.6462%" y="373" width="0.0454%" height="15" fill="rgb(226,81,46)" fg:x="1043810963" fg:w="17891380"/><text x="2.8962%" y="383.50"></text></g><g><title>std::io::Write::write_all (13,971,646 samples, 0.04%)</title><rect x="2.6915%" y="373" width="0.0354%" height="15" fill="rgb(247,70,30)" fg:x="1061702343" fg:w="13971646"/><text x="2.9415%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (16,680,593 samples, 0.04%)</title><rect x="2.7326%" y="373" width="0.0423%" height="15" fill="rgb(212,68,19)" fg:x="1077913983" fg:w="16680593"/><text x="2.9826%" y="383.50"></text></g><g><title>[unknown] (423,584,920 samples, 1.07%)</title><rect x="1.7132%" y="389" width="1.0738%" height="15" fill="rgb(240,187,13)" fg:x="675804225" fg:w="423584920"/><text x="1.9632%" y="399.50"></text></g><g><title>std::time::SystemTime::now (4,794,569 samples, 0.01%)</title><rect x="2.7749%" y="373" width="0.0122%" height="15" fill="rgb(223,113,26)" fg:x="1094594576" fg:w="4794569"/><text x="3.0249%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (35,115,181 samples, 0.09%)</title><rect x="2.7871%" y="389" width="0.0890%" height="15" fill="rgb(206,192,2)" fg:x="1099389145" fg:w="35115181"/><text x="3.0371%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,005,783 samples, 0.02%)</title><rect x="2.8533%" y="373" width="0.0228%" height="15" fill="rgb(241,108,4)" fg:x="1125498543" fg:w="9005783"/><text x="3.1033%" y="383.50"></text></g><g><title>__send (9,962,058 samples, 0.03%)</title><rect x="2.8826%" y="389" width="0.0253%" height="15" fill="rgb(247,173,49)" fg:x="1137084451" fg:w="9962058"/><text x="3.1326%" y="399.50"></text></g><g><title>__vdso_clock_gettime (14,549,486 samples, 0.04%)</title><rect x="2.9079%" y="389" width="0.0369%" height="15" fill="rgb(224,114,35)" fg:x="1147046509" fg:w="14549486"/><text x="3.1579%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,457,341 samples, 0.03%)</title><rect x="2.9476%" y="389" width="0.0316%" height="15" fill="rgb(245,159,27)" fg:x="1162718992" fg:w="12457341"/><text x="3.1976%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (103,140,112 samples, 0.26%)</title><rect x="2.9792%" y="389" width="0.2615%" height="15" fill="rgb(245,172,44)" fg:x="1175176333" fg:w="103140112"/><text x="3.2292%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (87,221,492 samples, 0.22%)</title><rect x="3.0196%" y="373" width="0.2211%" height="15" fill="rgb(236,23,11)" fg:x="1191094953" fg:w="87221492"/><text x="3.2696%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (36,647,182 samples, 0.09%)</title><rect x="3.2407%" y="389" width="0.0929%" height="15" fill="rgb(205,117,38)" fg:x="1278316445" fg:w="36647182"/><text x="3.4907%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (12,355,597 samples, 0.03%)</title><rect x="3.3336%" y="389" width="0.0313%" height="15" fill="rgb(237,72,25)" fg:x="1314963627" fg:w="12355597"/><text x="3.5836%" y="399.50"></text></g><g><title>cfree (50,523,640 samples, 0.13%)</title><rect x="3.3746%" y="389" width="0.1281%" height="15" fill="rgb(244,70,9)" fg:x="1331142432" fg:w="50523640"/><text x="3.6246%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad (14,701,777 samples, 0.04%)</title><rect x="3.5027%" y="389" width="0.0373%" height="15" fill="rgb(217,125,39)" fg:x="1381666072" fg:w="14701777"/><text x="3.7527%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4,780,523 samples, 0.01%)</title><rect x="3.5399%" y="389" width="0.0121%" height="15" fill="rgb(235,36,10)" fg:x="1396367849" fg:w="4780523"/><text x="3.7899%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (8,305,775 samples, 0.02%)</title><rect x="3.5521%" y="389" width="0.0211%" height="15" fill="rgb(251,123,47)" fg:x="1401148372" fg:w="8305775"/><text x="3.8021%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (23,450,896 samples, 0.06%)</title><rect x="3.5731%" y="389" width="0.0595%" height="15" fill="rgb(221,13,13)" fg:x="1409454147" fg:w="23450896"/><text x="3.8231%" y="399.50"></text></g><g><title>core::fmt::write (38,351,626 samples, 0.10%)</title><rect x="3.6326%" y="389" width="0.0972%" height="15" fill="rgb(238,131,9)" fg:x="1432905043" fg:w="38351626"/><text x="3.8826%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (7,522,988 samples, 0.02%)</title><rect x="3.7107%" y="373" width="0.0191%" height="15" fill="rgb(211,50,8)" fg:x="1463733681" fg:w="7522988"/><text x="3.9607%" y="383.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (7,522,988 samples, 0.02%)</title><rect x="3.7107%" y="357" width="0.0191%" height="15" fill="rgb(245,182,24)" fg:x="1463733681" fg:w="7522988"/><text x="3.9607%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31,018,224 samples, 0.08%)</title><rect x="3.7298%" y="389" width="0.0786%" height="15" fill="rgb(242,14,37)" fg:x="1471256669" fg:w="31018224"/><text x="3.9798%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (13,836,995 samples, 0.04%)</title><rect x="3.8084%" y="389" width="0.0351%" height="15" fill="rgb(246,228,12)" fg:x="1502274893" fg:w="13836995"/><text x="4.0584%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (61,039,899 samples, 0.15%)</title><rect x="3.8435%" y="389" width="0.1547%" height="15" fill="rgb(213,55,15)" fg:x="1516111888" fg:w="61039899"/><text x="4.0935%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (5,985,559 samples, 0.02%)</title><rect x="3.9831%" y="373" width="0.0152%" height="15" fill="rgb(209,9,3)" fg:x="1571166228" fg:w="5985559"/><text x="4.2331%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,985,559 samples, 0.02%)</title><rect x="3.9831%" y="357" width="0.0152%" height="15" fill="rgb(230,59,30)" fg:x="1571166228" fg:w="5985559"/><text x="4.2331%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (5,985,559 samples, 0.02%)</title><rect x="3.9831%" y="341" width="0.0152%" height="15" fill="rgb(209,121,21)" fg:x="1571166228" fg:w="5985559"/><text x="4.2331%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (49,123,408 samples, 0.12%)</title><rect x="3.9983%" y="389" width="0.1245%" height="15" fill="rgb(220,109,13)" fg:x="1577151787" fg:w="49123408"/><text x="4.2483%" y="399.50"></text></g><g><title>malloc (50,064,114 samples, 0.13%)</title><rect x="4.1308%" y="389" width="0.1269%" height="15" fill="rgb(232,18,1)" fg:x="1629446998" fg:w="50064114"/><text x="4.3808%" y="399.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (11,429,312 samples, 0.03%)</title><rect x="4.2577%" y="389" width="0.0290%" height="15" fill="rgb(215,41,42)" fg:x="1679511112" fg:w="11429312"/><text x="4.5077%" y="399.50"></text></g><g><title>realloc (4,828,113 samples, 0.01%)</title><rect x="4.2867%" y="389" width="0.0122%" height="15" fill="rgb(224,123,36)" fg:x="1690940424" fg:w="4828113"/><text x="4.5367%" y="399.50"></text></g><g><title>recv (8,048,893 samples, 0.02%)</title><rect x="4.2990%" y="389" width="0.0204%" height="15" fill="rgb(240,125,3)" fg:x="1695768537" fg:w="8048893"/><text x="4.5490%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (73,711,484 samples, 0.19%)</title><rect x="4.5737%" y="373" width="0.1869%" height="15" fill="rgb(205,98,50)" fg:x="1804156360" fg:w="73711484"/><text x="4.8237%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (72,049,720 samples, 0.18%)</title><rect x="4.5780%" y="357" width="0.1827%" height="15" fill="rgb(205,185,37)" fg:x="1805818124" fg:w="72049720"/><text x="4.8280%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (72,049,720 samples, 0.18%)</title><rect x="4.5780%" y="341" width="0.1827%" height="15" fill="rgb(238,207,15)" fg:x="1805818124" fg:w="72049720"/><text x="4.8280%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7,580,322 samples, 0.02%)</title><rect x="4.7606%" y="373" width="0.0192%" height="15" fill="rgb(213,199,42)" fg:x="1877867844" fg:w="7580322"/><text x="5.0106%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (7,580,322 samples, 0.02%)</title><rect x="4.7606%" y="357" width="0.0192%" height="15" fill="rgb(235,201,11)" fg:x="1877867844" fg:w="7580322"/><text x="5.0106%" y="367.50"></text></g><g><title>cfree (41,609,150 samples, 0.11%)</title><rect x="4.7852%" y="373" width="0.1055%" height="15" fill="rgb(207,46,11)" fg:x="1887562898" fg:w="41609150"/><text x="5.0352%" y="383.50"></text></g><g><title>__rustc::__rdl_dealloc (5,738,624 samples, 0.01%)</title><rect x="4.9868%" y="277" width="0.0145%" height="15" fill="rgb(241,35,35)" fg:x="1967094991" fg:w="5738624"/><text x="5.2368%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5,738,624 samples, 0.01%)</title><rect x="4.9868%" y="261" width="0.0145%" height="15" fill="rgb(243,32,47)" fg:x="1967094991" fg:w="5738624"/><text x="5.2368%" y="271.50"></text></g><g><title>__rustc::__rust_dealloc (15,416,467 samples, 0.04%)</title><rect x="5.0014%" y="277" width="0.0391%" height="15" fill="rgb(247,202,23)" fg:x="1972833615" fg:w="15416467"/><text x="5.2514%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (183,421,184 samples, 0.46%)</title><rect x="4.9659%" y="309" width="0.4650%" height="15" fill="rgb(219,102,11)" fg:x="1958847797" fg:w="183421184"/><text x="5.2159%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (183,421,184 samples, 0.46%)</title><rect x="4.9659%" y="293" width="0.4650%" height="15" fill="rgb(243,110,44)" fg:x="1958847797" fg:w="183421184"/><text x="5.2159%" y="303.50"></text></g><g><title>cfree (154,018,899 samples, 0.39%)</title><rect x="5.0404%" y="277" width="0.3905%" height="15" fill="rgb(222,74,54)" fg:x="1988250082" fg:w="154018899"/><text x="5.2904%" y="287.50"></text></g><g><title>[libc.so.6] (51,316,442 samples, 0.13%)</title><rect x="5.3008%" y="261" width="0.1301%" height="15" fill="rgb(216,99,12)" fg:x="2090952539" fg:w="51316442"/><text x="5.5508%" y="271.50"></text></g><g><title>[libc.so.6] (28,486,975 samples, 0.07%)</title><rect x="5.3587%" y="245" width="0.0722%" height="15" fill="rgb(226,22,26)" fg:x="2113782006" fg:w="28486975"/><text x="5.6087%" y="255.50"></text></g><g><title>[libc.so.6] (10,064,888 samples, 0.03%)</title><rect x="5.4054%" y="229" width="0.0255%" height="15" fill="rgb(217,163,10)" fg:x="2132204093" fg:w="10064888"/><text x="5.6554%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (216,622,332 samples, 0.55%)</title><rect x="4.8907%" y="373" width="0.5492%" height="15" fill="rgb(213,25,53)" fg:x="1929172048" fg:w="216622332"/><text x="5.1407%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (216,622,332 samples, 0.55%)</title><rect x="4.8907%" y="357" width="0.5492%" height="15" fill="rgb(252,105,26)" fg:x="1929172048" fg:w="216622332"/><text x="5.1407%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (216,622,332 samples, 0.55%)</title><rect x="4.8907%" y="341" width="0.5492%" height="15" fill="rgb(220,39,43)" fg:x="1929172048" fg:w="216622332"/><text x="5.1407%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (186,946,583 samples, 0.47%)</title><rect x="4.9659%" y="325" width="0.4739%" height="15" fill="rgb(229,68,48)" fg:x="1958847797" fg:w="186946583"/><text x="5.2159%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6,804,944 samples, 0.02%)</title><rect x="5.5027%" y="325" width="0.0173%" height="15" fill="rgb(252,8,32)" fg:x="2170604879" fg:w="6804944"/><text x="5.7527%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,804,944 samples, 0.02%)</title><rect x="5.5027%" y="309" width="0.0173%" height="15" fill="rgb(223,20,43)" fg:x="2170604879" fg:w="6804944"/><text x="5.7527%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (6,804,944 samples, 0.02%)</title><rect x="5.5027%" y="293" width="0.0173%" height="15" fill="rgb(229,81,49)" fg:x="2170604879" fg:w="6804944"/><text x="5.7527%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (6,804,944 samples, 0.02%)</title><rect x="5.5027%" y="277" width="0.0173%" height="15" fill="rgb(236,28,36)" fg:x="2170604879" fg:w="6804944"/><text x="5.7527%" y="287.50"></text></g><g><title>cfree (123,128,293 samples, 0.31%)</title><rect x="5.5642%" y="309" width="0.3121%" height="15" fill="rgb(249,185,26)" fg:x="2194869060" fg:w="123128293"/><text x="5.8142%" y="319.50"></text></g><g><title>[libc.so.6] (20,137,093 samples, 0.05%)</title><rect x="5.8253%" y="293" width="0.0510%" height="15" fill="rgb(249,174,33)" fg:x="2297860260" fg:w="20137093"/><text x="6.0753%" y="303.50"></text></g><g><title>[libc.so.6] (7,837,767 samples, 0.02%)</title><rect x="5.8565%" y="277" width="0.0199%" height="15" fill="rgb(233,201,37)" fg:x="2310159586" fg:w="7837767"/><text x="6.1065%" y="287.50"></text></g><g><title>[libc.so.6] (5,160,131 samples, 0.01%)</title><rect x="5.8633%" y="261" width="0.0131%" height="15" fill="rgb(221,78,26)" fg:x="2312837222" fg:w="5160131"/><text x="6.1133%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (280,191,206 samples, 0.71%)</title><rect x="5.4398%" y="373" width="0.7103%" height="15" fill="rgb(250,127,30)" fg:x="2145794380" fg:w="280191206"/><text x="5.6898%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (255,380,707 samples, 0.65%)</title><rect x="5.5027%" y="357" width="0.6474%" height="15" fill="rgb(230,49,44)" fg:x="2170604879" fg:w="255380707"/><text x="5.7527%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (255,380,707 samples, 0.65%)</title><rect x="5.5027%" y="341" width="0.6474%" height="15" fill="rgb(229,67,23)" fg:x="2170604879" fg:w="255380707"/><text x="5.7527%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (248,575,763 samples, 0.63%)</title><rect x="5.5200%" y="325" width="0.6302%" height="15" fill="rgb(249,83,47)" fg:x="2177409823" fg:w="248575763"/><text x="5.7700%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (107,988,233 samples, 0.27%)</title><rect x="5.8764%" y="309" width="0.2738%" height="15" fill="rgb(215,43,3)" fg:x="2317997353" fg:w="107988233"/><text x="6.1264%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,121,273 samples, 0.02%)</title><rect x="6.1296%" y="293" width="0.0206%" height="15" fill="rgb(238,154,13)" fg:x="2417864313" fg:w="8121273"/><text x="6.3796%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8,121,273 samples, 0.02%)</title><rect x="6.1296%" y="277" width="0.0206%" height="15" fill="rgb(219,56,2)" fg:x="2417864313" fg:w="8121273"/><text x="6.3796%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,121,273 samples, 0.02%)</title><rect x="6.1296%" y="261" width="0.0206%" height="15" fill="rgb(233,0,4)" fg:x="2417864313" fg:w="8121273"/><text x="6.3796%" y="271.50"></text></g><g><title>recv (53,825,197 samples, 0.14%)</title><rect x="6.1501%" y="373" width="0.1365%" height="15" fill="rgb(235,30,7)" fg:x="2425985586" fg:w="53825197"/><text x="6.4001%" y="383.50"></text></g><g><title>core::fmt::Formatter::new (6,933,495 samples, 0.02%)</title><rect x="6.6976%" y="277" width="0.0176%" height="15" fill="rgb(250,79,13)" fg:x="2641928710" fg:w="6933495"/><text x="6.9476%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (11,051,968 samples, 0.03%)</title><rect x="6.7427%" y="181" width="0.0280%" height="15" fill="rgb(211,146,34)" fg:x="2659741187" fg:w="11051968"/><text x="6.9927%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,311,798 samples, 0.01%)</title><rect x="6.8100%" y="101" width="0.0135%" height="15" fill="rgb(228,22,38)" fg:x="2686260470" fg:w="5311798"/><text x="7.0600%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (6,123,518 samples, 0.02%)</title><rect x="6.8234%" y="101" width="0.0155%" height="15" fill="rgb(235,168,5)" fg:x="2691572268" fg:w="6123518"/><text x="7.0734%" y="111.50"></text></g><g><title>__rustc::__rdl_alloc (7,459,261 samples, 0.02%)</title><rect x="6.8488%" y="85" width="0.0189%" height="15" fill="rgb(221,155,16)" fg:x="2701579928" fg:w="7459261"/><text x="7.0988%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7,459,261 samples, 0.02%)</title><rect x="6.8488%" y="69" width="0.0189%" height="15" fill="rgb(215,215,53)" fg:x="2701579928" fg:w="7459261"/><text x="7.0988%" y="79.50"></text></g><g><title>[libc.so.6] (108,027,748 samples, 0.27%)</title><rect x="7.0438%" y="69" width="0.2739%" height="15" fill="rgb(223,4,10)" fg:x="2778510154" fg:w="108027748"/><text x="7.2938%" y="79.50"></text></g><g><title>[libc.so.6] (27,092,856 samples, 0.07%)</title><rect x="7.2490%" y="53" width="0.0687%" height="15" fill="rgb(234,103,6)" fg:x="2859445046" fg:w="27092856"/><text x="7.4990%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (191,619,756 samples, 0.49%)</title><rect x="6.8390%" y="101" width="0.4858%" height="15" fill="rgb(227,97,0)" fg:x="2697695786" fg:w="191619756"/><text x="7.0890%" y="111.50"></text></g><g><title>malloc (177,064,710 samples, 0.45%)</title><rect x="6.8759%" y="85" width="0.4489%" height="15" fill="rgb(234,150,53)" fg:x="2712250832" fg:w="177064710"/><text x="7.1259%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (4,332,012 samples, 0.01%)</title><rect x="7.3247%" y="69" width="0.0110%" height="15" fill="rgb(228,201,54)" fg:x="2889315542" fg:w="4332012"/><text x="7.5747%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (4,332,012 samples, 0.01%)</title><rect x="7.3247%" y="53" width="0.0110%" height="15" fill="rgb(222,22,37)" fg:x="2889315542" fg:w="4332012"/><text x="7.5747%" y="63.50"></text></g><g><title>alloc::raw_vec::layout_array (16,675,791 samples, 0.04%)</title><rect x="7.3247%" y="101" width="0.0423%" height="15" fill="rgb(237,53,32)" fg:x="2889315542" fg:w="16675791"/><text x="7.5747%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat (16,675,791 samples, 0.04%)</title><rect x="7.3247%" y="85" width="0.0423%" height="15" fill="rgb(233,25,53)" fg:x="2889315542" fg:w="16675791"/><text x="7.5747%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (12,343,779 samples, 0.03%)</title><rect x="7.3357%" y="69" width="0.0313%" height="15" fill="rgb(210,40,34)" fg:x="2893647554" fg:w="12343779"/><text x="7.5857%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12,343,779 samples, 0.03%)</title><rect x="7.3357%" y="53" width="0.0313%" height="15" fill="rgb(241,220,44)" fg:x="2893647554" fg:w="12343779"/><text x="7.5857%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12,343,779 samples, 0.03%)</title><rect x="7.3357%" y="37" width="0.0313%" height="15" fill="rgb(235,28,35)" fg:x="2893647554" fg:w="12343779"/><text x="7.5857%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (237,005,405 samples, 0.60%)</title><rect x="6.7708%" y="181" width="0.6008%" height="15" fill="rgb(210,56,17)" fg:x="2670793155" fg:w="237005405"/><text x="7.0208%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (234,779,791 samples, 0.60%)</title><rect x="6.7764%" y="165" width="0.5952%" height="15" fill="rgb(224,130,29)" fg:x="2673018769" fg:w="234779791"/><text x="7.0264%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (234,779,791 samples, 0.60%)</title><rect x="6.7764%" y="149" width="0.5952%" height="15" fill="rgb(235,212,8)" fg:x="2673018769" fg:w="234779791"/><text x="7.0264%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (232,109,651 samples, 0.59%)</title><rect x="6.7832%" y="133" width="0.5884%" height="15" fill="rgb(223,33,50)" fg:x="2675688909" fg:w="232109651"/><text x="7.0332%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (232,109,651 samples, 0.59%)</title><rect x="6.7832%" y="117" width="0.5884%" height="15" fill="rgb(219,149,13)" fg:x="2675688909" fg:w="232109651"/><text x="7.0332%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (65,823,963 samples, 0.17%)</title><rect x="7.3716%" y="181" width="0.1669%" height="15" fill="rgb(250,156,29)" fg:x="2907798560" fg:w="65823963"/><text x="7.6216%" y="191.50"></text></g><g><title>[libc.so.6] (65,823,963 samples, 0.17%)</title><rect x="7.3716%" y="165" width="0.1669%" height="15" fill="rgb(216,193,19)" fg:x="2907798560" fg:w="65823963"/><text x="7.6216%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (322,639,455 samples, 0.82%)</title><rect x="6.7277%" y="261" width="0.8179%" height="15" fill="rgb(216,135,14)" fg:x="2653800360" fg:w="322639455"/><text x="6.9777%" y="271.50"></text></g><g><title>alloc::string::String::push_str (319,640,026 samples, 0.81%)</title><rect x="6.7353%" y="245" width="0.8103%" height="15" fill="rgb(241,47,5)" fg:x="2656799789" fg:w="319640026"/><text x="6.9853%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (319,640,026 samples, 0.81%)</title><rect x="6.7353%" y="229" width="0.8103%" height="15" fill="rgb(233,42,35)" fg:x="2656799789" fg:w="319640026"/><text x="6.9853%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (319,640,026 samples, 0.81%)</title><rect x="6.7353%" y="213" width="0.8103%" height="15" fill="rgb(231,13,6)" fg:x="2656799789" fg:w="319640026"/><text x="6.9853%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (319,640,026 samples, 0.81%)</title><rect x="6.7353%" y="197" width="0.8103%" height="15" fill="rgb(207,181,40)" fg:x="2656799789" fg:w="319640026"/><text x="6.9853%" y="207.50"></text></g><g><title>core::fmt::write (403,927,199 samples, 1.02%)</title><rect x="6.6118%" y="293" width="1.0240%" height="15" fill="rgb(254,173,49)" fg:x="2608089819" fg:w="403927199"/><text x="6.8618%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (363,154,813 samples, 0.92%)</title><rect x="6.7152%" y="277" width="0.9206%" height="15" fill="rgb(221,1,38)" fg:x="2648862205" fg:w="363154813"/><text x="6.9652%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (33,936,935 samples, 0.09%)</title><rect x="7.5498%" y="261" width="0.0860%" height="15" fill="rgb(206,124,46)" fg:x="2978080083" fg:w="33936935"/><text x="7.7998%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (405,806,340 samples, 1.03%)</title><rect x="6.6118%" y="309" width="1.0288%" height="15" fill="rgb(249,21,11)" fg:x="2608089819" fg:w="405806340"/><text x="6.8618%" y="319.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (436,510,971 samples, 1.11%)</title><rect x="6.5404%" y="325" width="1.1066%" height="15" fill="rgb(222,201,40)" fg:x="2579936732" fg:w="436510971"/><text x="6.7904%" y="335.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (439,531,616 samples, 1.11%)</title><rect x="6.5404%" y="341" width="1.1143%" height="15" fill="rgb(235,61,29)" fg:x="2579936732" fg:w="439531616"/><text x="6.7904%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (14,739,014 samples, 0.04%)</title><rect x="7.7103%" y="133" width="0.0374%" height="15" fill="rgb(219,207,3)" fg:x="3041416329" fg:w="14739014"/><text x="7.9603%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14,739,014 samples, 0.04%)</title><rect x="7.7103%" y="117" width="0.0374%" height="15" fill="rgb(222,56,46)" fg:x="3041416329" fg:w="14739014"/><text x="7.9603%" y="127.50"></text></g><g><title>__rustc::__rust_alloc (8,701,131 samples, 0.02%)</title><rect x="7.7477%" y="133" width="0.0221%" height="15" fill="rgb(239,76,54)" fg:x="3056155343" fg:w="8701131"/><text x="7.9977%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (209,950,376 samples, 0.53%)</title><rect x="7.6547%" y="245" width="0.5322%" height="15" fill="rgb(231,124,27)" fg:x="3019468348" fg:w="209950376"/><text x="7.9047%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (209,950,376 samples, 0.53%)</title><rect x="7.6547%" y="229" width="0.5322%" height="15" fill="rgb(249,195,6)" fg:x="3019468348" fg:w="209950376"/><text x="7.9047%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (209,950,376 samples, 0.53%)</title><rect x="7.6547%" y="213" width="0.5322%" height="15" fill="rgb(237,174,47)" fg:x="3019468348" fg:w="209950376"/><text x="7.9047%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (209,950,376 samples, 0.53%)</title><rect x="7.6547%" y="197" width="0.5322%" height="15" fill="rgb(206,201,31)" fg:x="3019468348" fg:w="209950376"/><text x="7.9047%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (188,002,395 samples, 0.48%)</title><rect x="7.7103%" y="181" width="0.4766%" height="15" fill="rgb(231,57,52)" fg:x="3041416329" fg:w="188002395"/><text x="7.9603%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (188,002,395 samples, 0.48%)</title><rect x="7.7103%" y="165" width="0.4766%" height="15" fill="rgb(248,177,22)" fg:x="3041416329" fg:w="188002395"/><text x="7.9603%" y="175.50"></text></g><g><title>alloc::alloc::alloc (188,002,395 samples, 0.48%)</title><rect x="7.7103%" y="149" width="0.4766%" height="15" fill="rgb(215,211,37)" fg:x="3041416329" fg:w="188002395"/><text x="7.9603%" y="159.50"></text></g><g><title>malloc (164,562,250 samples, 0.42%)</title><rect x="7.7698%" y="133" width="0.4172%" height="15" fill="rgb(241,128,51)" fg:x="3064856474" fg:w="164562250"/><text x="8.0198%" y="143.50"></text></g><g><title>[libc.so.6] (55,125,396 samples, 0.14%)</title><rect x="8.0472%" y="117" width="0.1397%" height="15" fill="rgb(227,165,31)" fg:x="3174293328" fg:w="55125396"/><text x="8.2972%" y="127.50"></text></g><g><title>[libc.so.6] (10,553,024 samples, 0.03%)</title><rect x="8.1602%" y="101" width="0.0268%" height="15" fill="rgb(228,167,24)" fg:x="3218865700" fg:w="10553024"/><text x="8.4102%" y="111.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (272,938,611 samples, 0.69%)</title><rect x="7.6547%" y="309" width="0.6919%" height="15" fill="rgb(228,143,12)" fg:x="3019468348" fg:w="272938611"/><text x="7.9047%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (272,938,611 samples, 0.69%)</title><rect x="7.6547%" y="293" width="0.6919%" height="15" fill="rgb(249,149,8)" fg:x="3019468348" fg:w="272938611"/><text x="7.9047%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (272,938,611 samples, 0.69%)</title><rect x="7.6547%" y="277" width="0.6919%" height="15" fill="rgb(243,35,44)" fg:x="3019468348" fg:w="272938611"/><text x="7.9047%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (272,938,611 samples, 0.69%)</title><rect x="7.6547%" y="261" width="0.6919%" height="15" fill="rgb(246,89,9)" fg:x="3019468348" fg:w="272938611"/><text x="7.9047%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (62,988,235 samples, 0.16%)</title><rect x="8.1869%" y="245" width="0.1597%" height="15" fill="rgb(233,213,13)" fg:x="3229418724" fg:w="62988235"/><text x="8.4369%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62,988,235 samples, 0.16%)</title><rect x="8.1869%" y="229" width="0.1597%" height="15" fill="rgb(233,141,41)" fg:x="3229418724" fg:w="62988235"/><text x="8.4369%" y="239.50"></text></g><g><title>[libc.so.6] (58,675,282 samples, 0.15%)</title><rect x="8.1979%" y="213" width="0.1487%" height="15" fill="rgb(239,167,4)" fg:x="3233731677" fg:w="58675282"/><text x="8.4479%" y="223.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (717,167,410 samples, 1.82%)</title><rect x="6.5404%" y="357" width="1.8181%" height="15" fill="rgb(209,217,16)" fg:x="2579936732" fg:w="717167410"/><text x="6.7904%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (277,635,794 samples, 0.70%)</title><rect x="7.6547%" y="341" width="0.7038%" height="15" fill="rgb(219,88,35)" fg:x="3019468348" fg:w="277635794"/><text x="7.9047%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (277,635,794 samples, 0.70%)</title><rect x="7.6547%" y="325" width="0.7038%" height="15" fill="rgb(220,193,23)" fg:x="3019468348" fg:w="277635794"/><text x="7.9047%" y="335.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (4,697,183 samples, 0.01%)</title><rect x="8.3466%" y="309" width="0.0119%" height="15" fill="rgb(230,90,52)" fg:x="3292406959" fg:w="4697183"/><text x="8.5966%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7,998,562 samples, 0.02%)</title><rect x="8.3585%" y="357" width="0.0203%" height="15" fill="rgb(252,106,19)" fg:x="3297104142" fg:w="7998562"/><text x="8.6085%" y="367.50"></text></g><g><title>alloc::string::String::as_str (7,998,562 samples, 0.02%)</title><rect x="8.3585%" y="341" width="0.0203%" height="15" fill="rgb(206,74,20)" fg:x="3297104142" fg:w="7998562"/><text x="8.6085%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (7,998,562 samples, 0.02%)</title><rect x="8.3585%" y="325" width="0.0203%" height="15" fill="rgb(230,138,44)" fg:x="3297104142" fg:w="7998562"/><text x="8.6085%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5,343,099 samples, 0.01%)</title><rect x="8.3653%" y="309" width="0.0135%" height="15" fill="rgb(235,182,43)" fg:x="3299759605" fg:w="5343099"/><text x="8.6153%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,343,099 samples, 0.01%)</title><rect x="8.3653%" y="293" width="0.0135%" height="15" fill="rgb(242,16,51)" fg:x="3299759605" fg:w="5343099"/><text x="8.6153%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,343,099 samples, 0.01%)</title><rect x="8.3653%" y="277" width="0.0135%" height="15" fill="rgb(248,9,4)" fg:x="3299759605" fg:w="5343099"/><text x="8.6153%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,343,099 samples, 0.01%)</title><rect x="8.3653%" y="261" width="0.0135%" height="15" fill="rgb(210,31,22)" fg:x="3299759605" fg:w="5343099"/><text x="8.6153%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9,231,859 samples, 0.02%)</title><rect x="8.3788%" y="357" width="0.0234%" height="15" fill="rgb(239,54,39)" fg:x="3305102704" fg:w="9231859"/><text x="8.6288%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (9,231,859 samples, 0.02%)</title><rect x="8.3788%" y="341" width="0.0234%" height="15" fill="rgb(230,99,41)" fg:x="3305102704" fg:w="9231859"/><text x="8.6288%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (9,231,859 samples, 0.02%)</title><rect x="8.3788%" y="325" width="0.0234%" height="15" fill="rgb(253,106,12)" fg:x="3305102704" fg:w="9231859"/><text x="8.6288%" y="335.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5,968,672 samples, 0.02%)</title><rect x="8.4080%" y="357" width="0.0151%" height="15" fill="rgb(213,46,41)" fg:x="3316629719" fg:w="5968672"/><text x="8.6580%" y="367.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (5,968,672 samples, 0.02%)</title><rect x="8.4080%" y="341" width="0.0151%" height="15" fill="rgb(215,133,35)" fg:x="3316629719" fg:w="5968672"/><text x="8.6580%" y="351.50"></text></g><g><title>__rustc::__rust_dealloc (7,129,292 samples, 0.02%)</title><rect x="8.4290%" y="357" width="0.0181%" height="15" fill="rgb(213,28,5)" fg:x="3324892687" fg:w="7129292"/><text x="8.6790%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45,019,759 samples, 0.11%)</title><rect x="8.5553%" y="245" width="0.1141%" height="15" fill="rgb(215,77,49)" fg:x="3374740685" fg:w="45019759"/><text x="8.8053%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45,019,759 samples, 0.11%)</title><rect x="8.5553%" y="229" width="0.1141%" height="15" fill="rgb(248,100,22)" fg:x="3374740685" fg:w="45019759"/><text x="8.8053%" y="239.50"></text></g><g><title>alloc::alloc::alloc (45,019,759 samples, 0.11%)</title><rect x="8.5553%" y="213" width="0.1141%" height="15" fill="rgb(208,67,9)" fg:x="3374740685" fg:w="45019759"/><text x="8.8053%" y="223.50"></text></g><g><title>malloc (30,373,840 samples, 0.08%)</title><rect x="8.5925%" y="197" width="0.0770%" height="15" fill="rgb(219,133,21)" fg:x="3389386604" fg:w="30373840"/><text x="8.8425%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (50,329,713 samples, 0.13%)</title><rect x="8.5511%" y="325" width="0.1276%" height="15" fill="rgb(246,46,29)" fg:x="3373080115" fg:w="50329713"/><text x="8.8011%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50,329,713 samples, 0.13%)</title><rect x="8.5511%" y="309" width="0.1276%" height="15" fill="rgb(246,185,52)" fg:x="3373080115" fg:w="50329713"/><text x="8.8011%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50,329,713 samples, 0.13%)</title><rect x="8.5511%" y="293" width="0.1276%" height="15" fill="rgb(252,136,11)" fg:x="3373080115" fg:w="50329713"/><text x="8.8011%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (50,329,713 samples, 0.13%)</title><rect x="8.5511%" y="277" width="0.1276%" height="15" fill="rgb(219,138,53)" fg:x="3373080115" fg:w="50329713"/><text x="8.8011%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (50,329,713 samples, 0.13%)</title><rect x="8.5511%" y="261" width="0.1276%" height="15" fill="rgb(211,51,23)" fg:x="3373080115" fg:w="50329713"/><text x="8.8011%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (109,450,334 samples, 0.28%)</title><rect x="8.4470%" y="357" width="0.2775%" height="15" fill="rgb(247,221,28)" fg:x="3332021979" fg:w="109450334"/><text x="8.6970%" y="367.50"></text></g><g><title>alloc::str::convert_while_ascii (94,511,803 samples, 0.24%)</title><rect x="8.4849%" y="341" width="0.2396%" height="15" fill="rgb(251,222,45)" fg:x="3346960510" fg:w="94511803"/><text x="8.7349%" y="351.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (18,062,485 samples, 0.05%)</title><rect x="8.6787%" y="325" width="0.0458%" height="15" fill="rgb(217,162,53)" fg:x="3423409828" fg:w="18062485"/><text x="8.9287%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (12,633,347 samples, 0.03%)</title><rect x="8.6925%" y="309" width="0.0320%" height="15" fill="rgb(229,93,14)" fg:x="3428838966" fg:w="12633347"/><text x="8.9425%" y="319.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (596,274,614 samples, 1.51%)</title><rect x="8.9469%" y="341" width="1.5116%" height="15" fill="rgb(209,67,49)" fg:x="3529185439" fg:w="596274614"/><text x="9.1969%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (8,613,015 samples, 0.02%)</title><rect x="10.4367%" y="325" width="0.0218%" height="15" fill="rgb(213,87,29)" fg:x="4116847038" fg:w="8613015"/><text x="10.6867%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5,901,238 samples, 0.01%)</title><rect x="10.4435%" y="309" width="0.0150%" height="15" fill="rgb(205,151,52)" fg:x="4119558815" fg:w="5901238"/><text x="10.6935%" y="319.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (686,609,053 samples, 1.74%)</title><rect x="8.7245%" y="357" width="1.7406%" height="15" fill="rgb(253,215,39)" fg:x="3441472313" fg:w="686609053"/><text x="8.9745%" y="367.50"></text></g><g><title>cfree (148,895,555 samples, 0.38%)</title><rect x="10.4651%" y="357" width="0.3775%" height="15" fill="rgb(221,220,41)" fg:x="4128081366" fg:w="148895555"/><text x="10.7151%" y="367.50"></text></g><g><title>[libc.so.6] (46,815,726 samples, 0.12%)</title><rect x="10.7239%" y="341" width="0.1187%" height="15" fill="rgb(218,133,21)" fg:x="4230161195" fg:w="46815726"/><text x="10.9739%" y="351.50"></text></g><g><title>[libc.so.6] (41,777,807 samples, 0.11%)</title><rect x="10.7367%" y="325" width="0.1059%" height="15" fill="rgb(221,193,43)" fg:x="4235199114" fg:w="41777807"/><text x="10.9867%" y="335.50"></text></g><g><title>[libc.so.6] (32,556,448 samples, 0.08%)</title><rect x="10.7601%" y="309" width="0.0825%" height="15" fill="rgb(240,128,52)" fg:x="4244420473" fg:w="32556448"/><text x="11.0101%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (5,215,275 samples, 0.01%)</title><rect x="10.8426%" y="357" width="0.0132%" height="15" fill="rgb(253,114,12)" fg:x="4276976921" fg:w="5215275"/><text x="11.0926%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (157,923,403 samples, 0.40%)</title><rect x="10.8558%" y="357" width="0.4004%" height="15" fill="rgb(215,223,47)" fg:x="4282192196" fg:w="157923403"/><text x="11.1058%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (157,923,403 samples, 0.40%)</title><rect x="10.8558%" y="341" width="0.4004%" height="15" fill="rgb(248,225,23)" fg:x="4282192196" fg:w="157923403"/><text x="11.1058%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (157,923,403 samples, 0.40%)</title><rect x="10.8558%" y="325" width="0.4004%" height="15" fill="rgb(250,108,0)" fg:x="4282192196" fg:w="157923403"/><text x="11.1058%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (157,923,403 samples, 0.40%)</title><rect x="10.8558%" y="309" width="0.4004%" height="15" fill="rgb(228,208,7)" fg:x="4282192196" fg:w="157923403"/><text x="11.1058%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (149,502,626 samples, 0.38%)</title><rect x="10.8772%" y="293" width="0.3790%" height="15" fill="rgb(244,45,10)" fg:x="4290612973" fg:w="149502626"/><text x="11.1272%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (149,502,626 samples, 0.38%)</title><rect x="10.8772%" y="277" width="0.3790%" height="15" fill="rgb(207,125,25)" fg:x="4290612973" fg:w="149502626"/><text x="11.1272%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (149,502,626 samples, 0.38%)</title><rect x="10.8772%" y="261" width="0.3790%" height="15" fill="rgb(210,195,18)" fg:x="4290612973" fg:w="149502626"/><text x="11.1272%" y="271.50"></text></g><g><title>cfree (146,439,359 samples, 0.37%)</title><rect x="10.8849%" y="245" width="0.3712%" height="15" fill="rgb(249,80,12)" fg:x="4293676240" fg:w="146439359"/><text x="11.1349%" y="255.50"></text></g><g><title>[libc.so.6] (31,904,277 samples, 0.08%)</title><rect x="11.1753%" y="229" width="0.0809%" height="15" fill="rgb(221,65,9)" fg:x="4408211322" fg:w="31904277"/><text x="11.4253%" y="239.50"></text></g><g><title>[libc.so.6] (22,620,860 samples, 0.06%)</title><rect x="11.1988%" y="213" width="0.0573%" height="15" fill="rgb(235,49,36)" fg:x="4417494739" fg:w="22620860"/><text x="11.4488%" y="223.50"></text></g><g><title>[libc.so.6] (17,542,601 samples, 0.04%)</title><rect x="11.2117%" y="197" width="0.0445%" height="15" fill="rgb(225,32,20)" fg:x="4422572998" fg:w="17542601"/><text x="11.4617%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt;&gt; (23,318,258 samples, 0.06%)</title><rect x="11.2562%" y="357" width="0.0591%" height="15" fill="rgb(215,141,46)" fg:x="4440115599" fg:w="23318258"/><text x="11.5062%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23,318,258 samples, 0.06%)</title><rect x="11.2562%" y="341" width="0.0591%" height="15" fill="rgb(250,160,47)" fg:x="4440115599" fg:w="23318258"/><text x="11.5062%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (23,318,258 samples, 0.06%)</title><rect x="11.2562%" y="325" width="0.0591%" height="15" fill="rgb(216,222,40)" fg:x="4440115599" fg:w="23318258"/><text x="11.5062%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (23,318,258 samples, 0.06%)</title><rect x="11.2562%" y="309" width="0.0591%" height="15" fill="rgb(234,217,39)" fg:x="4440115599" fg:w="23318258"/><text x="11.5062%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19,148,423 samples, 0.05%)</title><rect x="11.3205%" y="309" width="0.0485%" height="15" fill="rgb(207,178,40)" fg:x="4465495622" fg:w="19148423"/><text x="11.5705%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19,148,423 samples, 0.05%)</title><rect x="11.3205%" y="293" width="0.0485%" height="15" fill="rgb(221,136,13)" fg:x="4465495622" fg:w="19148423"/><text x="11.5705%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (49,583,598 samples, 0.13%)</title><rect x="11.3153%" y="357" width="0.1257%" height="15" fill="rgb(249,199,10)" fg:x="4463433857" fg:w="49583598"/><text x="11.5653%" y="367.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (49,583,598 samples, 0.13%)</title><rect x="11.3153%" y="341" width="0.1257%" height="15" fill="rgb(249,222,13)" fg:x="4463433857" fg:w="49583598"/><text x="11.5653%" y="351.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (49,583,598 samples, 0.13%)</title><rect x="11.3153%" y="325" width="0.1257%" height="15" fill="rgb(244,185,38)" fg:x="4463433857" fg:w="49583598"/><text x="11.5653%" y="335.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (28,373,410 samples, 0.07%)</title><rect x="11.3691%" y="309" width="0.0719%" height="15" fill="rgb(236,202,9)" fg:x="4484644045" fg:w="28373410"/><text x="11.6191%" y="319.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (28,373,410 samples, 0.07%)</title><rect x="11.3691%" y="293" width="0.0719%" height="15" fill="rgb(250,229,37)" fg:x="4484644045" fg:w="28373410"/><text x="11.6191%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (28,373,410 samples, 0.07%)</title><rect x="11.3691%" y="277" width="0.0719%" height="15" fill="rgb(206,174,23)" fg:x="4484644045" fg:w="28373410"/><text x="11.6191%" y="287.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (28,373,410 samples, 0.07%)</title><rect x="11.3691%" y="261" width="0.0719%" height="15" fill="rgb(211,33,43)" fg:x="4484644045" fg:w="28373410"/><text x="11.6191%" y="271.50"></text></g><g><title>syscall (28,373,410 samples, 0.07%)</title><rect x="11.3691%" y="245" width="0.0719%" height="15" fill="rgb(245,58,50)" fg:x="4484644045" fg:w="28373410"/><text x="11.6191%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (7,004,157 samples, 0.02%)</title><rect x="11.4410%" y="357" width="0.0178%" height="15" fill="rgb(244,68,36)" fg:x="4513017455" fg:w="7004157"/><text x="11.6910%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (7,004,157 samples, 0.02%)</title><rect x="11.4410%" y="341" width="0.0178%" height="15" fill="rgb(232,229,15)" fg:x="4513017455" fg:w="7004157"/><text x="11.6910%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (17,011,890 samples, 0.04%)</title><rect x="11.4588%" y="357" width="0.0431%" height="15" fill="rgb(254,30,23)" fg:x="4520021612" fg:w="17011890"/><text x="11.7088%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17,011,890 samples, 0.04%)</title><rect x="11.4588%" y="341" width="0.0431%" height="15" fill="rgb(235,160,14)" fg:x="4520021612" fg:w="17011890"/><text x="11.7088%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (17,011,890 samples, 0.04%)</title><rect x="11.4588%" y="325" width="0.0431%" height="15" fill="rgb(212,155,44)" fg:x="4520021612" fg:w="17011890"/><text x="11.7088%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (17,011,890 samples, 0.04%)</title><rect x="11.4588%" y="309" width="0.0431%" height="15" fill="rgb(226,2,50)" fg:x="4520021612" fg:w="17011890"/><text x="11.7088%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (15,092,849 samples, 0.04%)</title><rect x="11.5165%" y="325" width="0.0383%" height="15" fill="rgb(234,177,6)" fg:x="4542812206" fg:w="15092849"/><text x="11.7665%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (15,092,849 samples, 0.04%)</title><rect x="11.5165%" y="309" width="0.0383%" height="15" fill="rgb(217,24,9)" fg:x="4542812206" fg:w="15092849"/><text x="11.7665%" y="319.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow::_{{closure}} (14,993,780 samples, 0.04%)</title><rect x="11.5718%" y="293" width="0.0380%" height="15" fill="rgb(220,13,46)" fg:x="4564608701" fg:w="14993780"/><text x="11.8218%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::park (36,764,236 samples, 0.09%)</title><rect x="11.6098%" y="293" width="0.0932%" height="15" fill="rgb(239,221,27)" fg:x="4579602481" fg:w="36764236"/><text x="11.8598%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (36,764,236 samples, 0.09%)</title><rect x="11.6098%" y="277" width="0.0932%" height="15" fill="rgb(222,198,25)" fg:x="4579602481" fg:w="36764236"/><text x="11.8598%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (34,219,699 samples, 0.09%)</title><rect x="11.6163%" y="261" width="0.0868%" height="15" fill="rgb(211,99,13)" fg:x="4582147018" fg:w="34219699"/><text x="11.8663%" y="271.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (34,219,699 samples, 0.09%)</title><rect x="11.6163%" y="245" width="0.0868%" height="15" fill="rgb(232,111,31)" fg:x="4582147018" fg:w="34219699"/><text x="11.8663%" y="255.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (32,203,950 samples, 0.08%)</title><rect x="11.6214%" y="229" width="0.0816%" height="15" fill="rgb(245,82,37)" fg:x="4584162767" fg:w="32203950"/><text x="11.8714%" y="239.50"></text></g><g><title>syscall (32,203,950 samples, 0.08%)</title><rect x="11.6214%" y="213" width="0.0816%" height="15" fill="rgb(227,149,46)" fg:x="4584162767" fg:w="32203950"/><text x="11.8714%" y="223.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (11,870,398 samples, 0.03%)</title><rect x="11.7153%" y="277" width="0.0301%" height="15" fill="rgb(218,36,50)" fg:x="4621224251" fg:w="11870398"/><text x="11.9653%" y="287.50"></text></g><g><title>core::hint::spin_loop (11,870,398 samples, 0.03%)</title><rect x="11.7153%" y="261" width="0.0301%" height="15" fill="rgb(226,80,48)" fg:x="4621224251" fg:w="11870398"/><text x="11.9653%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (11,870,398 samples, 0.03%)</title><rect x="11.7153%" y="245" width="0.0301%" height="15" fill="rgb(238,224,15)" fg:x="4621224251" fg:w="11870398"/><text x="11.9653%" y="255.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (553,434,890 samples, 1.40%)</title><rect x="11.5624%" y="309" width="1.4030%" height="15" fill="rgb(241,136,10)" fg:x="4560901021" fg:w="553434890"/><text x="11.8124%" y="319.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (497,969,194 samples, 1.26%)</title><rect x="11.7030%" y="293" width="1.2624%" height="15" fill="rgb(208,32,45)" fg:x="4616366717" fg:w="497969194"/><text x="11.9530%" y="303.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (481,241,262 samples, 1.22%)</title><rect x="11.7454%" y="277" width="1.2200%" height="15" fill="rgb(207,135,9)" fg:x="4633094649" fg:w="481241262"/><text x="11.9954%" y="287.50"></text></g><g><title>__sched_yield (481,241,262 samples, 1.22%)</title><rect x="11.7454%" y="261" width="1.2200%" height="15" fill="rgb(206,86,44)" fg:x="4633094649" fg:w="481241262"/><text x="11.9954%" y="271.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (579,215,385 samples, 1.47%)</title><rect x="11.5019%" y="357" width="1.4684%" height="15" fill="rgb(245,177,15)" fg:x="4537033502" fg:w="579215385"/><text x="11.7519%" y="367.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (579,215,385 samples, 1.47%)</title><rect x="11.5019%" y="341" width="1.4684%" height="15" fill="rgb(206,64,50)" fg:x="4537033502" fg:w="579215385"/><text x="11.7519%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (558,343,832 samples, 1.42%)</title><rect x="11.5548%" y="325" width="1.4155%" height="15" fill="rgb(234,36,40)" fg:x="4557905055" fg:w="558343832"/><text x="11.8048%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31,512,220 samples, 0.08%)</title><rect x="12.9816%" y="213" width="0.0799%" height="15" fill="rgb(213,64,8)" fg:x="5120708222" fg:w="31512220"/><text x="13.2316%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31,512,220 samples, 0.08%)</title><rect x="12.9816%" y="197" width="0.0799%" height="15" fill="rgb(210,75,36)" fg:x="5120708222" fg:w="31512220"/><text x="13.2316%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (31,512,220 samples, 0.08%)</title><rect x="12.9816%" y="181" width="0.0799%" height="15" fill="rgb(229,88,21)" fg:x="5120708222" fg:w="31512220"/><text x="13.2316%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (31,512,220 samples, 0.08%)</title><rect x="12.9816%" y="165" width="0.0799%" height="15" fill="rgb(252,204,47)" fg:x="5120708222" fg:w="31512220"/><text x="13.2316%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29,123,485 samples, 0.07%)</title><rect x="12.9876%" y="149" width="0.0738%" height="15" fill="rgb(208,77,27)" fg:x="5123096957" fg:w="29123485"/><text x="13.2376%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29,123,485 samples, 0.07%)</title><rect x="12.9876%" y="133" width="0.0738%" height="15" fill="rgb(221,76,26)" fg:x="5123096957" fg:w="29123485"/><text x="13.2376%" y="143.50"></text></g><g><title>alloc::alloc::alloc (29,123,485 samples, 0.07%)</title><rect x="12.9876%" y="117" width="0.0738%" height="15" fill="rgb(225,139,18)" fg:x="5123096957" fg:w="29123485"/><text x="13.2376%" y="127.50"></text></g><g><title>malloc (25,952,343 samples, 0.07%)</title><rect x="12.9957%" y="101" width="0.0658%" height="15" fill="rgb(230,137,11)" fg:x="5126268099" fg:w="25952343"/><text x="13.2457%" y="111.50"></text></g><g><title>[libc.so.6] (23,383,497 samples, 0.06%)</title><rect x="13.0022%" y="85" width="0.0593%" height="15" fill="rgb(212,28,1)" fg:x="5128836945" fg:w="23383497"/><text x="13.2522%" y="95.50"></text></g><g><title>[libc.so.6] (4,646,264 samples, 0.01%)</title><rect x="13.0497%" y="69" width="0.0118%" height="15" fill="rgb(248,164,17)" fg:x="5147574178" fg:w="4646264"/><text x="13.2997%" y="79.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="341" width="0.1424%" height="15" fill="rgb(222,171,42)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="351.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="325" width="0.1424%" height="15" fill="rgb(243,84,45)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="309" width="0.1424%" height="15" fill="rgb(252,49,23)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="293" width="0.1424%" height="15" fill="rgb(215,19,7)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="277" width="0.1424%" height="15" fill="rgb(238,81,41)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="261" width="0.1424%" height="15" fill="rgb(210,199,37)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="245" width="0.1424%" height="15" fill="rgb(244,192,49)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (56,163,135 samples, 0.14%)</title><rect x="12.9816%" y="229" width="0.1424%" height="15" fill="rgb(226,211,11)" fg:x="5120708222" fg:w="56163135"/><text x="13.2316%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24,650,915 samples, 0.06%)</title><rect x="13.0615%" y="213" width="0.0625%" height="15" fill="rgb(236,162,54)" fg:x="5152220442" fg:w="24650915"/><text x="13.3115%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24,650,915 samples, 0.06%)</title><rect x="13.0615%" y="197" width="0.0625%" height="15" fill="rgb(220,229,9)" fg:x="5152220442" fg:w="24650915"/><text x="13.3115%" y="207.50"></text></g><g><title>[libc.so.6] (24,650,915 samples, 0.06%)</title><rect x="13.0615%" y="181" width="0.0625%" height="15" fill="rgb(250,87,22)" fg:x="5152220442" fg:w="24650915"/><text x="13.3115%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="309" width="0.3751%" height="15" fill="rgb(239,43,17)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="293" width="0.3751%" height="15" fill="rgb(231,177,25)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="277" width="0.3751%" height="15" fill="rgb(219,179,1)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="261" width="0.3751%" height="15" fill="rgb(238,219,53)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="245" width="0.3751%" height="15" fill="rgb(232,167,36)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="229" width="0.3751%" height="15" fill="rgb(244,19,51)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="213" width="0.3751%" height="15" fill="rgb(224,6,22)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="223.50"></text></g><g><title>alloc::alloc::alloc (147,956,167 samples, 0.38%)</title><rect x="13.6236%" y="197" width="0.3751%" height="15" fill="rgb(224,145,5)" fg:x="5373964931" fg:w="147956167"/><text x="13.8736%" y="207.50"></text></g><g><title>malloc (142,489,891 samples, 0.36%)</title><rect x="13.6375%" y="181" width="0.3612%" height="15" fill="rgb(234,130,49)" fg:x="5379431207" fg:w="142489891"/><text x="13.8875%" y="191.50"></text></g><g><title>[libc.so.6] (61,397,521 samples, 0.16%)</title><rect x="13.8430%" y="165" width="0.1556%" height="15" fill="rgb(254,6,2)" fg:x="5460523577" fg:w="61397521"/><text x="14.0930%" y="175.50"></text></g><g><title>[libc.so.6] (11,967,301 samples, 0.03%)</title><rect x="13.9683%" y="149" width="0.0303%" height="15" fill="rgb(208,96,46)" fg:x="5509953797" fg:w="11967301"/><text x="14.2183%" y="159.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (451,227,714 samples, 1.14%)</title><rect x="13.1239%" y="341" width="1.1439%" height="15" fill="rgb(239,3,39)" fg:x="5176871357" fg:w="451227714"/><text x="13.3739%" y="351.50"></text></g><g><title>alloc::str::convert_while_ascii (420,871,405 samples, 1.07%)</title><rect x="13.2009%" y="325" width="1.0670%" height="15" fill="rgb(233,210,1)" fg:x="5207227666" fg:w="420871405"/><text x="13.4509%" y="335.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (106,177,973 samples, 0.27%)</title><rect x="13.9987%" y="309" width="0.2692%" height="15" fill="rgb(244,137,37)" fg:x="5521921098" fg:w="106177973"/><text x="14.2487%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (56,534,222 samples, 0.14%)</title><rect x="14.1245%" y="293" width="0.1433%" height="15" fill="rgb(240,136,2)" fg:x="5571564849" fg:w="56534222"/><text x="14.3745%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (94,623,041 samples, 0.24%)</title><rect x="14.2679%" y="341" width="0.2399%" height="15" fill="rgb(239,18,37)" fg:x="5628099071" fg:w="94623041"/><text x="14.5179%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (94,623,041 samples, 0.24%)</title><rect x="14.2679%" y="325" width="0.2399%" height="15" fill="rgb(218,185,22)" fg:x="5628099071" fg:w="94623041"/><text x="14.5179%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (94,623,041 samples, 0.24%)</title><rect x="14.2679%" y="309" width="0.2399%" height="15" fill="rgb(225,218,4)" fg:x="5628099071" fg:w="94623041"/><text x="14.5179%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94,623,041 samples, 0.24%)</title><rect x="14.2679%" y="293" width="0.2399%" height="15" fill="rgb(230,182,32)" fg:x="5628099071" fg:w="94623041"/><text x="14.5179%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (88,496,528 samples, 0.22%)</title><rect x="14.2834%" y="277" width="0.2243%" height="15" fill="rgb(242,56,43)" fg:x="5634225584" fg:w="88496528"/><text x="14.5334%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88,496,528 samples, 0.22%)</title><rect x="14.2834%" y="261" width="0.2243%" height="15" fill="rgb(233,99,24)" fg:x="5634225584" fg:w="88496528"/><text x="14.5334%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (88,496,528 samples, 0.22%)</title><rect x="14.2834%" y="245" width="0.2243%" height="15" fill="rgb(234,209,42)" fg:x="5634225584" fg:w="88496528"/><text x="14.5334%" y="255.50"></text></g><g><title>cfree (88,496,528 samples, 0.22%)</title><rect x="14.2834%" y="229" width="0.2243%" height="15" fill="rgb(227,7,12)" fg:x="5634225584" fg:w="88496528"/><text x="14.5334%" y="239.50"></text></g><g><title>[libc.so.6] (44,881,064 samples, 0.11%)</title><rect x="14.3940%" y="213" width="0.1138%" height="15" fill="rgb(245,203,43)" fg:x="5677841048" fg:w="44881064"/><text x="14.6440%" y="223.50"></text></g><g><title>[libc.so.6] (37,731,030 samples, 0.10%)</title><rect x="14.4121%" y="197" width="0.0957%" height="15" fill="rgb(238,205,33)" fg:x="5684991082" fg:w="37731030"/><text x="14.6621%" y="207.50"></text></g><g><title>[libc.so.6] (26,495,467 samples, 0.07%)</title><rect x="14.4406%" y="181" width="0.0672%" height="15" fill="rgb(231,56,7)" fg:x="5696226645" fg:w="26495467"/><text x="14.6906%" y="191.50"></text></g><g><title>[libc.so.6] (15,743,341 samples, 0.04%)</title><rect x="14.4678%" y="165" width="0.0399%" height="15" fill="rgb(244,186,29)" fg:x="5706978771" fg:w="15743341"/><text x="14.7178%" y="175.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (4,547,682 samples, 0.01%)</title><rect x="14.5136%" y="325" width="0.0115%" height="15" fill="rgb(234,111,31)" fg:x="5725041074" fg:w="4547682"/><text x="14.7636%" y="335.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (4,547,682 samples, 0.01%)</title><rect x="14.5136%" y="309" width="0.0115%" height="15" fill="rgb(241,149,10)" fg:x="5725041074" fg:w="4547682"/><text x="14.7636%" y="319.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (4,547,682 samples, 0.01%)</title><rect x="14.5136%" y="293" width="0.0115%" height="15" fill="rgb(249,206,44)" fg:x="5725041074" fg:w="4547682"/><text x="14.7636%" y="303.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (11,290,514 samples, 0.03%)</title><rect x="14.6517%" y="245" width="0.0286%" height="15" fill="rgb(251,153,30)" fg:x="5779520437" fg:w="11290514"/><text x="14.9017%" y="255.50"></text></g><g><title>server::get_value_type (675,752,646 samples, 1.71%)</title><rect x="12.9741%" y="357" width="1.7131%" height="15" fill="rgb(239,152,38)" fg:x="5117764464" fg:w="675752646"/><text x="13.2241%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (70,794,998 samples, 0.18%)</title><rect x="14.5077%" y="341" width="0.1795%" height="15" fill="rgb(249,139,47)" fg:x="5722722112" fg:w="70794998"/><text x="14.7577%" y="351.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (63,928,354 samples, 0.16%)</title><rect x="14.5251%" y="325" width="0.1621%" height="15" fill="rgb(244,64,35)" fg:x="5729588756" fg:w="63928354"/><text x="14.7751%" y="335.50"></text></g><g><title>core::num::dec2flt::dec2flt (54,503,183 samples, 0.14%)</title><rect x="14.5490%" y="309" width="0.1382%" height="15" fill="rgb(216,46,15)" fg:x="5739013927" fg:w="54503183"/><text x="14.7990%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (36,530,852 samples, 0.09%)</title><rect x="14.5946%" y="293" width="0.0926%" height="15" fill="rgb(250,74,19)" fg:x="5756986258" fg:w="36530852"/><text x="14.8446%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (27,607,827 samples, 0.07%)</title><rect x="14.6172%" y="277" width="0.0700%" height="15" fill="rgb(249,42,33)" fg:x="5765909283" fg:w="27607827"/><text x="14.8672%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (16,277,578 samples, 0.04%)</title><rect x="14.6459%" y="261" width="0.0413%" height="15" fill="rgb(242,149,17)" fg:x="5777239532" fg:w="16277578"/><text x="14.8959%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (4,593,782 samples, 0.01%)</title><rect x="14.9529%" y="165" width="0.0116%" height="15" fill="rgb(244,29,21)" fg:x="5898324461" fg:w="4593782"/><text x="15.2029%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4,593,782 samples, 0.01%)</title><rect x="14.9529%" y="149" width="0.0116%" height="15" fill="rgb(220,130,37)" fg:x="5898324461" fg:w="4593782"/><text x="15.2029%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,189,789 samples, 0.01%)</title><rect x="14.9702%" y="133" width="0.0132%" height="15" fill="rgb(211,67,2)" fg:x="5905145928" fg:w="5189789"/><text x="15.2202%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (41,858,804 samples, 0.11%)</title><rect x="14.9881%" y="133" width="0.1061%" height="15" fill="rgb(235,68,52)" fg:x="5912209596" fg:w="41858804"/><text x="15.2381%" y="143.50"></text></g><g><title>malloc (27,246,679 samples, 0.07%)</title><rect x="15.0252%" y="117" width="0.0691%" height="15" fill="rgb(246,142,3)" fg:x="5926821721" fg:w="27246679"/><text x="15.2752%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (70,450,014 samples, 0.18%)</title><rect x="14.9529%" y="213" width="0.1786%" height="15" fill="rgb(241,25,7)" fg:x="5898324461" fg:w="70450014"/><text x="15.2029%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (70,450,014 samples, 0.18%)</title><rect x="14.9529%" y="197" width="0.1786%" height="15" fill="rgb(242,119,39)" fg:x="5898324461" fg:w="70450014"/><text x="15.2029%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (70,450,014 samples, 0.18%)</title><rect x="14.9529%" y="181" width="0.1786%" height="15" fill="rgb(241,98,45)" fg:x="5898324461" fg:w="70450014"/><text x="15.2029%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (65,856,232 samples, 0.17%)</title><rect x="14.9646%" y="165" width="0.1670%" height="15" fill="rgb(254,28,30)" fg:x="5902918243" fg:w="65856232"/><text x="15.2146%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (65,856,232 samples, 0.17%)</title><rect x="14.9646%" y="149" width="0.1670%" height="15" fill="rgb(241,142,54)" fg:x="5902918243" fg:w="65856232"/><text x="15.2146%" y="159.50"></text></g><g><title>core::cmp::max (9,692,349 samples, 0.02%)</title><rect x="15.1069%" y="133" width="0.0246%" height="15" fill="rgb(222,85,15)" fg:x="5959082126" fg:w="9692349"/><text x="15.3569%" y="143.50"></text></g><g><title>core::cmp::Ord::max (9,692,349 samples, 0.02%)</title><rect x="15.1069%" y="117" width="0.0246%" height="15" fill="rgb(210,85,47)" fg:x="5959082126" fg:w="9692349"/><text x="15.3569%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (93,690,258 samples, 0.24%)</title><rect x="14.9349%" y="293" width="0.2375%" height="15" fill="rgb(224,206,25)" fg:x="5891236901" fg:w="93690258"/><text x="15.1849%" y="303.50"></text></g><g><title>alloc::string::String::push_str (93,690,258 samples, 0.24%)</title><rect x="14.9349%" y="277" width="0.2375%" height="15" fill="rgb(243,201,19)" fg:x="5891236901" fg:w="93690258"/><text x="15.1849%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (93,690,258 samples, 0.24%)</title><rect x="14.9349%" y="261" width="0.2375%" height="15" fill="rgb(236,59,4)" fg:x="5891236901" fg:w="93690258"/><text x="15.1849%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (93,690,258 samples, 0.24%)</title><rect x="14.9349%" y="245" width="0.2375%" height="15" fill="rgb(254,179,45)" fg:x="5891236901" fg:w="93690258"/><text x="15.1849%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (93,690,258 samples, 0.24%)</title><rect x="14.9349%" y="229" width="0.2375%" height="15" fill="rgb(226,14,10)" fg:x="5891236901" fg:w="93690258"/><text x="15.1849%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16,152,684 samples, 0.04%)</title><rect x="15.1315%" y="213" width="0.0409%" height="15" fill="rgb(244,27,41)" fg:x="5968774475" fg:w="16152684"/><text x="15.3815%" y="223.50"></text></g><g><title>[libc.so.6] (16,152,684 samples, 0.04%)</title><rect x="15.1315%" y="197" width="0.0409%" height="15" fill="rgb(235,35,32)" fg:x="5968774475" fg:w="16152684"/><text x="15.3815%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4,285,210 samples, 0.01%)</title><rect x="15.2921%" y="277" width="0.0109%" height="15" fill="rgb(218,68,31)" fg:x="6032130357" fg:w="4285210"/><text x="15.5421%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (12,889,152 samples, 0.03%)</title><rect x="15.3030%" y="277" width="0.0327%" height="15" fill="rgb(207,120,37)" fg:x="6036415567" fg:w="12889152"/><text x="15.5530%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad_integral (72,153,154 samples, 0.18%)</title><rect x="15.1725%" y="293" width="0.1829%" height="15" fill="rgb(227,98,0)" fg:x="5984927159" fg:w="72153154"/><text x="15.4225%" y="303.50"></text></g><g><title>core::fmt::Formatter::sign_plus (7,775,594 samples, 0.02%)</title><rect x="15.3357%" y="277" width="0.0197%" height="15" fill="rgb(207,7,3)" fg:x="6049304719" fg:w="7775594"/><text x="15.5857%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (239,462,736 samples, 0.61%)</title><rect x="14.7582%" y="309" width="0.6071%" height="15" fill="rgb(206,98,19)" fg:x="5821509178" fg:w="239462736"/><text x="15.0082%" y="319.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (248,544,496 samples, 0.63%)</title><rect x="14.7511%" y="341" width="0.6301%" height="15" fill="rgb(217,5,26)" fg:x="5818709685" fg:w="248544496"/><text x="15.0011%" y="351.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (248,544,496 samples, 0.63%)</title><rect x="14.7511%" y="325" width="0.6301%" height="15" fill="rgb(235,190,38)" fg:x="5818709685" fg:w="248544496"/><text x="15.0011%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (16,118,681 samples, 0.04%)</title><rect x="15.3812%" y="181" width="0.0409%" height="15" fill="rgb(247,86,24)" fg:x="6067254181" fg:w="16118681"/><text x="15.6312%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16,118,681 samples, 0.04%)</title><rect x="15.3812%" y="165" width="0.0409%" height="15" fill="rgb(205,101,16)" fg:x="6067254181" fg:w="16118681"/><text x="15.6312%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (155,022,762 samples, 0.39%)</title><rect x="15.3812%" y="229" width="0.3930%" height="15" fill="rgb(246,168,33)" fg:x="6067254181" fg:w="155022762"/><text x="15.6312%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (155,022,762 samples, 0.39%)</title><rect x="15.3812%" y="213" width="0.3930%" height="15" fill="rgb(231,114,1)" fg:x="6067254181" fg:w="155022762"/><text x="15.6312%" y="223.50"></text></g><g><title>alloc::alloc::alloc (155,022,762 samples, 0.39%)</title><rect x="15.3812%" y="197" width="0.3930%" height="15" fill="rgb(207,184,53)" fg:x="6067254181" fg:w="155022762"/><text x="15.6312%" y="207.50"></text></g><g><title>malloc (137,312,881 samples, 0.35%)</title><rect x="15.4261%" y="181" width="0.3481%" height="15" fill="rgb(224,95,51)" fg:x="6084964062" fg:w="137312881"/><text x="15.6761%" y="191.50"></text></g><g><title>[libc.so.6] (83,254,903 samples, 0.21%)</title><rect x="15.5631%" y="165" width="0.2111%" height="15" fill="rgb(212,188,45)" fg:x="6139022040" fg:w="83254903"/><text x="15.8131%" y="175.50"></text></g><g><title>[libc.so.6] (24,027,500 samples, 0.06%)</title><rect x="15.7133%" y="149" width="0.0609%" height="15" fill="rgb(223,154,38)" fg:x="6198249443" fg:w="24027500"/><text x="15.9633%" y="159.50"></text></g><g><title>__mprotect (7,045,231 samples, 0.02%)</title><rect x="15.7563%" y="133" width="0.0179%" height="15" fill="rgb(251,22,52)" fg:x="6215231712" fg:w="7045231"/><text x="16.0063%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (157,863,796 samples, 0.40%)</title><rect x="15.3812%" y="293" width="0.4002%" height="15" fill="rgb(229,209,22)" fg:x="6067254181" fg:w="157863796"/><text x="15.6312%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (157,863,796 samples, 0.40%)</title><rect x="15.3812%" y="277" width="0.4002%" height="15" fill="rgb(234,138,34)" fg:x="6067254181" fg:w="157863796"/><text x="15.6312%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (157,863,796 samples, 0.40%)</title><rect x="15.3812%" y="261" width="0.4002%" height="15" fill="rgb(212,95,11)" fg:x="6067254181" fg:w="157863796"/><text x="15.6312%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (157,863,796 samples, 0.40%)</title><rect x="15.3812%" y="245" width="0.4002%" height="15" fill="rgb(240,179,47)" fg:x="6067254181" fg:w="157863796"/><text x="15.6312%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (234,030,617 samples, 0.59%)</title><rect x="15.3812%" y="341" width="0.5933%" height="15" fill="rgb(240,163,11)" fg:x="6067254181" fg:w="234030617"/><text x="15.6312%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (234,030,617 samples, 0.59%)</title><rect x="15.3812%" y="325" width="0.5933%" height="15" fill="rgb(236,37,12)" fg:x="6067254181" fg:w="234030617"/><text x="15.6312%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (234,030,617 samples, 0.59%)</title><rect x="15.3812%" y="309" width="0.5933%" height="15" fill="rgb(232,164,16)" fg:x="6067254181" fg:w="234030617"/><text x="15.6312%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (76,166,821 samples, 0.19%)</title><rect x="15.7814%" y="293" width="0.1931%" height="15" fill="rgb(244,205,15)" fg:x="6225117977" fg:w="76166821"/><text x="16.0314%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76,166,821 samples, 0.19%)</title><rect x="15.7814%" y="277" width="0.1931%" height="15" fill="rgb(223,117,47)" fg:x="6225117977" fg:w="76166821"/><text x="16.0314%" y="287.50"></text></g><g><title>[libc.so.6] (70,232,968 samples, 0.18%)</title><rect x="15.7964%" y="261" width="0.1780%" height="15" fill="rgb(244,107,35)" fg:x="6231051830" fg:w="70232968"/><text x="16.0464%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4,413,194 samples, 0.01%)</title><rect x="15.9861%" y="229" width="0.0112%" height="15" fill="rgb(205,140,8)" fg:x="6305881177" fg:w="4413194"/><text x="16.2361%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (26,700,777 samples, 0.07%)</title><rect x="16.0123%" y="213" width="0.0677%" height="15" fill="rgb(228,84,46)" fg:x="6316210373" fg:w="26700777"/><text x="16.2623%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24,232,084 samples, 0.06%)</title><rect x="16.0186%" y="197" width="0.0614%" height="15" fill="rgb(254,188,9)" fg:x="6318679066" fg:w="24232084"/><text x="16.2686%" y="207.50"></text></g><g><title>__rustc::__rust_alloc (7,156,105 samples, 0.02%)</title><rect x="16.0800%" y="213" width="0.0181%" height="15" fill="rgb(206,112,54)" fg:x="6342911150" fg:w="7156105"/><text x="16.3300%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (7,772,812 samples, 0.02%)</title><rect x="16.0981%" y="213" width="0.0197%" height="15" fill="rgb(216,84,49)" fg:x="6350067255" fg:w="7772812"/><text x="16.3481%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (73,403,077 samples, 0.19%)</title><rect x="15.9973%" y="229" width="0.1861%" height="15" fill="rgb(214,194,35)" fg:x="6310294371" fg:w="73403077"/><text x="16.2473%" y="239.50"></text></g><g><title>malloc (25,857,381 samples, 0.07%)</title><rect x="16.1178%" y="213" width="0.0656%" height="15" fill="rgb(249,28,3)" fg:x="6357840067" fg:w="25857381"/><text x="16.3678%" y="223.50"></text></g><g><title>alloc::raw_vec::layout_array (8,132,034 samples, 0.02%)</title><rect x="16.1834%" y="229" width="0.0206%" height="15" fill="rgb(222,56,52)" fg:x="6383697448" fg:w="8132034"/><text x="16.4334%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (8,132,034 samples, 0.02%)</title><rect x="16.1834%" y="213" width="0.0206%" height="15" fill="rgb(245,217,50)" fg:x="6383697448" fg:w="8132034"/><text x="16.4334%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (8,132,034 samples, 0.02%)</title><rect x="16.1834%" y="197" width="0.0206%" height="15" fill="rgb(213,201,24)" fg:x="6383697448" fg:w="8132034"/><text x="16.4334%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (8,132,034 samples, 0.02%)</title><rect x="16.1834%" y="181" width="0.0206%" height="15" fill="rgb(248,116,28)" fg:x="6383697448" fg:w="8132034"/><text x="16.4334%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (8,132,034 samples, 0.02%)</title><rect x="16.1834%" y="165" width="0.0206%" height="15" fill="rgb(219,72,43)" fg:x="6383697448" fg:w="8132034"/><text x="16.4334%" y="175.50"></text></g><g><title>alloc::string::String::reserve (96,778,345 samples, 0.25%)</title><rect x="15.9805%" y="325" width="0.2453%" height="15" fill="rgb(209,138,14)" fg:x="6303666113" fg:w="96778345"/><text x="16.2305%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (96,778,345 samples, 0.25%)</title><rect x="15.9805%" y="309" width="0.2453%" height="15" fill="rgb(222,18,33)" fg:x="6303666113" fg:w="96778345"/><text x="16.2305%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (96,778,345 samples, 0.25%)</title><rect x="15.9805%" y="293" width="0.2453%" height="15" fill="rgb(213,199,7)" fg:x="6303666113" fg:w="96778345"/><text x="16.2305%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (96,778,345 samples, 0.25%)</title><rect x="15.9805%" y="277" width="0.2453%" height="15" fill="rgb(250,110,10)" fg:x="6303666113" fg:w="96778345"/><text x="16.2305%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (94,563,281 samples, 0.24%)</title><rect x="15.9861%" y="261" width="0.2397%" height="15" fill="rgb(248,123,6)" fg:x="6305881177" fg:w="94563281"/><text x="16.2361%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (94,563,281 samples, 0.24%)</title><rect x="15.9861%" y="245" width="0.2397%" height="15" fill="rgb(206,91,31)" fg:x="6305881177" fg:w="94563281"/><text x="16.2361%" y="255.50"></text></g><g><title>core::cmp::max (6,931,884 samples, 0.02%)</title><rect x="16.2083%" y="229" width="0.0176%" height="15" fill="rgb(211,154,13)" fg:x="6393512574" fg:w="6931884"/><text x="16.4583%" y="239.50"></text></g><g><title>core::cmp::Ord::max (6,931,884 samples, 0.02%)</title><rect x="16.2083%" y="213" width="0.0176%" height="15" fill="rgb(225,148,7)" fg:x="6393512574" fg:w="6931884"/><text x="16.4583%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10,606,527 samples, 0.03%)</title><rect x="16.2258%" y="325" width="0.0269%" height="15" fill="rgb(220,160,43)" fg:x="6400444458" fg:w="10606527"/><text x="16.4758%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10,606,527 samples, 0.03%)</title><rect x="16.2258%" y="309" width="0.0269%" height="15" fill="rgb(213,52,39)" fg:x="6400444458" fg:w="10606527"/><text x="16.4758%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (10,606,527 samples, 0.03%)</title><rect x="16.2258%" y="293" width="0.0269%" height="15" fill="rgb(243,137,7)" fg:x="6400444458" fg:w="10606527"/><text x="16.4758%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (10,606,527 samples, 0.03%)</title><rect x="16.2258%" y="277" width="0.0269%" height="15" fill="rgb(230,79,13)" fg:x="6400444458" fg:w="10606527"/><text x="16.4758%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (6,211,068 samples, 0.02%)</title><rect x="16.2527%" y="325" width="0.0157%" height="15" fill="rgb(247,105,23)" fg:x="6411050985" fg:w="6211068"/><text x="16.5027%" y="335.50"></text></g><g><title>alloc::string::String::push (125,209,187 samples, 0.32%)</title><rect x="15.9805%" y="341" width="0.3174%" height="15" fill="rgb(223,179,41)" fg:x="6303666113" fg:w="125209187"/><text x="16.2305%" y="351.50"></text></g><g><title>core::char::methods::encode_utf8_raw_unchecked (11,613,247 samples, 0.03%)</title><rect x="16.2685%" y="325" width="0.0294%" height="15" fill="rgb(218,9,34)" fg:x="6417262053" fg:w="11613247"/><text x="16.5185%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7,076,442 samples, 0.02%)</title><rect x="16.2979%" y="277" width="0.0179%" height="15" fill="rgb(222,106,8)" fg:x="6428875300" fg:w="7076442"/><text x="16.5479%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7,076,442 samples, 0.02%)</title><rect x="16.2979%" y="261" width="0.0179%" height="15" fill="rgb(211,220,0)" fg:x="6428875300" fg:w="7076442"/><text x="16.5479%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7,076,442 samples, 0.02%)</title><rect x="16.2979%" y="245" width="0.0179%" height="15" fill="rgb(229,52,16)" fg:x="6428875300" fg:w="7076442"/><text x="16.5479%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7,076,442 samples, 0.02%)</title><rect x="16.2979%" y="229" width="0.0179%" height="15" fill="rgb(212,155,18)" fg:x="6428875300" fg:w="7076442"/><text x="16.5479%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (4,414,567 samples, 0.01%)</title><rect x="16.3274%" y="213" width="0.0112%" height="15" fill="rgb(242,21,14)" fg:x="6440511874" fg:w="4414567"/><text x="16.5774%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (12,380,246 samples, 0.03%)</title><rect x="16.3159%" y="229" width="0.0314%" height="15" fill="rgb(222,19,48)" fg:x="6435951742" fg:w="12380246"/><text x="16.5659%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (13,883,890 samples, 0.04%)</title><rect x="16.4284%" y="197" width="0.0352%" height="15" fill="rgb(232,45,27)" fg:x="6480358015" fg:w="13883890"/><text x="16.6784%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (19,084,813 samples, 0.05%)</title><rect x="16.4818%" y="133" width="0.0484%" height="15" fill="rgb(249,103,42)" fg:x="6501423660" fg:w="19084813"/><text x="16.7318%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13,401,144 samples, 0.03%)</title><rect x="16.4962%" y="117" width="0.0340%" height="15" fill="rgb(246,81,33)" fg:x="6507107329" fg:w="13401144"/><text x="16.7462%" y="127.50"></text></g><g><title>[libc.so.6] (7,204,400 samples, 0.02%)</title><rect x="19.0534%" y="69" width="0.0183%" height="15" fill="rgb(252,33,42)" fg:x="7515812676" fg:w="7204400"/><text x="19.3034%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,028,578,893 samples, 2.61%)</title><rect x="16.4724%" y="181" width="2.6076%" height="15" fill="rgb(209,212,41)" fg:x="6497687391" fg:w="1028578893"/><text x="16.7224%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (1,028,578,893 samples, 2.61%)</title><rect x="16.4724%" y="165" width="2.6076%" height="15" fill="rgb(207,154,6)" fg:x="6497687391" fg:w="1028578893"/><text x="16.7224%" y="175.50">al..</text></g><g><title>alloc::alloc::realloc (1,024,842,624 samples, 2.60%)</title><rect x="16.4818%" y="149" width="2.5981%" height="15" fill="rgb(223,64,47)" fg:x="6501423660" fg:w="1024842624"/><text x="16.7318%" y="159.50">al..</text></g><g><title>realloc (1,005,757,811 samples, 2.55%)</title><rect x="16.5302%" y="133" width="2.5497%" height="15" fill="rgb(211,161,38)" fg:x="6520508473" fg:w="1005757811"/><text x="16.7802%" y="143.50">re..</text></g><g><title>[libc.so.6] (837,525,429 samples, 2.12%)</title><rect x="16.9567%" y="117" width="2.1232%" height="15" fill="rgb(219,138,40)" fg:x="6688740855" fg:w="837525429"/><text x="17.2067%" y="127.50">[..</text></g><g><title>[libc.so.6] (674,922,460 samples, 1.71%)</title><rect x="17.3689%" y="101" width="1.7110%" height="15" fill="rgb(241,228,46)" fg:x="6851343824" fg:w="674922460"/><text x="17.6189%" y="111.50"></text></g><g><title>[libc.so.6] (115,943,141 samples, 0.29%)</title><rect x="18.7860%" y="85" width="0.2939%" height="15" fill="rgb(223,209,38)" fg:x="7410323143" fg:w="115943141"/><text x="19.0360%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,044,236,805 samples, 2.65%)</title><rect x="16.4683%" y="197" width="2.6473%" height="15" fill="rgb(236,164,45)" fg:x="6496101807" fg:w="1044236805"/><text x="16.7183%" y="207.50">al..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14,072,328 samples, 0.04%)</title><rect x="19.0799%" y="181" width="0.0357%" height="15" fill="rgb(231,15,5)" fg:x="7526266284" fg:w="14072328"/><text x="19.3299%" y="191.50"></text></g><g><title>alloc::raw_vec::layout_array (18,190,103 samples, 0.05%)</title><rect x="19.1156%" y="197" width="0.0461%" height="15" fill="rgb(252,35,15)" fg:x="7540338612" fg:w="18190103"/><text x="19.3656%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (18,190,103 samples, 0.05%)</title><rect x="19.1156%" y="181" width="0.0461%" height="15" fill="rgb(248,181,18)" fg:x="7540338612" fg:w="18190103"/><text x="19.3656%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (7,850,989 samples, 0.02%)</title><rect x="19.1418%" y="165" width="0.0199%" height="15" fill="rgb(233,39,42)" fg:x="7550677726" fg:w="7850989"/><text x="19.3918%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (7,850,989 samples, 0.02%)</title><rect x="19.1418%" y="149" width="0.0199%" height="15" fill="rgb(238,110,33)" fg:x="7550677726" fg:w="7850989"/><text x="19.3918%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (7,850,989 samples, 0.02%)</title><rect x="19.1418%" y="133" width="0.0199%" height="15" fill="rgb(233,195,10)" fg:x="7550677726" fg:w="7850989"/><text x="19.3918%" y="143.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (4,692,441 samples, 0.01%)</title><rect x="19.1617%" y="197" width="0.0119%" height="15" fill="rgb(254,105,3)" fg:x="7558528715" fg:w="4692441"/><text x="19.4117%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,134,867,006 samples, 2.88%)</title><rect x="16.3159%" y="277" width="2.8770%" height="15" fill="rgb(221,225,9)" fg:x="6435951742" fg:w="1134867006"/><text x="16.5659%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,134,867,006 samples, 2.88%)</title><rect x="16.3159%" y="261" width="2.8770%" height="15" fill="rgb(224,227,45)" fg:x="6435951742" fg:w="1134867006"/><text x="16.5659%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,134,867,006 samples, 2.88%)</title><rect x="16.3159%" y="245" width="2.8770%" height="15" fill="rgb(229,198,43)" fg:x="6435951742" fg:w="1134867006"/><text x="16.5659%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,122,486,760 samples, 2.85%)</title><rect x="16.3472%" y="229" width="2.8456%" height="15" fill="rgb(206,209,35)" fg:x="6448331988" fg:w="1122486760"/><text x="16.5972%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,122,486,760 samples, 2.85%)</title><rect x="16.3472%" y="213" width="2.8456%" height="15" fill="rgb(245,195,53)" fg:x="6448331988" fg:w="1122486760"/><text x="16.5972%" y="223.50">al..</text></g><g><title>core::cmp::max (7,597,592 samples, 0.02%)</title><rect x="19.1736%" y="197" width="0.0193%" height="15" fill="rgb(240,92,26)" fg:x="7563221156" fg:w="7597592"/><text x="19.4236%" y="207.50"></text></g><g><title>core::cmp::Ord::max (7,597,592 samples, 0.02%)</title><rect x="19.1736%" y="181" width="0.0193%" height="15" fill="rgb(207,40,23)" fg:x="7563221156" fg:w="7597592"/><text x="19.4236%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (105,924,041 samples, 0.27%)</title><rect x="19.1929%" y="277" width="0.2685%" height="15" fill="rgb(223,111,35)" fg:x="7570818748" fg:w="105924041"/><text x="19.4429%" y="287.50"></text></g><g><title>[libc.so.6] (100,425,027 samples, 0.25%)</title><rect x="19.2068%" y="261" width="0.2546%" height="15" fill="rgb(229,147,28)" fg:x="7576317762" fg:w="100425027"/><text x="19.4568%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1,253,429,988 samples, 3.18%)</title><rect x="16.2979%" y="341" width="3.1776%" height="15" fill="rgb(211,29,28)" fg:x="6428875300" fg:w="1253429988"/><text x="16.5479%" y="351.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,253,429,988 samples, 3.18%)</title><rect x="16.2979%" y="325" width="3.1776%" height="15" fill="rgb(228,72,33)" fg:x="6428875300" fg:w="1253429988"/><text x="16.5479%" y="335.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,253,429,988 samples, 3.18%)</title><rect x="16.2979%" y="309" width="3.1776%" height="15" fill="rgb(205,214,31)" fg:x="6428875300" fg:w="1253429988"/><text x="16.5479%" y="319.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,253,429,988 samples, 3.18%)</title><rect x="16.2979%" y="293" width="3.1776%" height="15" fill="rgb(224,111,15)" fg:x="6428875300" fg:w="1253429988"/><text x="16.5479%" y="303.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5,562,499 samples, 0.01%)</title><rect x="19.4614%" y="277" width="0.0141%" height="15" fill="rgb(253,21,26)" fg:x="7676742789" fg:w="5562499"/><text x="19.7114%" y="287.50"></text></g><g><title>__rustc::__rust_dealloc (15,258,023 samples, 0.04%)</title><rect x="19.4987%" y="229" width="0.0387%" height="15" fill="rgb(245,139,43)" fg:x="7691467094" fg:w="15258023"/><text x="19.7487%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="341" width="0.5267%" height="15" fill="rgb(252,170,7)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="325" width="0.5267%" height="15" fill="rgb(231,118,14)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="309" width="0.5267%" height="15" fill="rgb(238,83,0)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="293" width="0.5267%" height="15" fill="rgb(221,39,39)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="277" width="0.5267%" height="15" fill="rgb(222,119,46)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="261" width="0.5267%" height="15" fill="rgb(222,165,49)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (207,769,189 samples, 0.53%)</title><rect x="19.4755%" y="245" width="0.5267%" height="15" fill="rgb(219,113,52)" fg:x="7682305288" fg:w="207769189"/><text x="19.7255%" y="255.50"></text></g><g><title>cfree (183,349,360 samples, 0.46%)</title><rect x="19.5374%" y="229" width="0.4648%" height="15" fill="rgb(214,7,15)" fg:x="7706725117" fg:w="183349360"/><text x="19.7874%" y="239.50"></text></g><g><title>[libc.so.6] (86,229,710 samples, 0.22%)</title><rect x="19.7836%" y="213" width="0.2186%" height="15" fill="rgb(235,32,4)" fg:x="7803844767" fg:w="86229710"/><text x="20.0336%" y="223.50"></text></g><g><title>[libc.so.6] (57,571,637 samples, 0.15%)</title><rect x="19.8563%" y="197" width="0.1460%" height="15" fill="rgb(238,90,54)" fg:x="7832502840" fg:w="57571637"/><text x="20.1063%" y="207.50"></text></g><g><title>[libc.so.6] (43,741,589 samples, 0.11%)</title><rect x="19.8913%" y="181" width="0.1109%" height="15" fill="rgb(213,208,19)" fg:x="7846332888" fg:w="43741589"/><text x="20.1413%" y="191.50"></text></g><g><title>[libc.so.6] (9,934,284 samples, 0.03%)</title><rect x="19.9770%" y="165" width="0.0252%" height="15" fill="rgb(233,156,4)" fg:x="7880140193" fg:w="9934284"/><text x="20.2270%" y="175.50"></text></g><g><title>server_lib::resp3::bulk_string_response (2,124,873,824 samples, 5.39%)</title><rect x="14.6872%" y="357" width="5.3868%" height="15" fill="rgb(207,194,5)" fg:x="5793517110" fg:w="2124873824"/><text x="14.9372%" y="367.50">server_..</text></g><g><title>core::str::&lt;impl str&gt;::len (28,316,457 samples, 0.07%)</title><rect x="20.0022%" y="341" width="0.0718%" height="15" fill="rgb(206,111,30)" fg:x="7890074477" fg:w="28316457"/><text x="20.2522%" y="351.50"></text></g><g><title>server_lib::resp3::null_response (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="357" width="0.0120%" height="15" fill="rgb(243,70,54)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="341" width="0.0120%" height="15" fill="rgb(242,28,8)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="325" width="0.0120%" height="15" fill="rgb(219,106,18)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="309" width="0.0120%" height="15" fill="rgb(244,222,10)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="293" width="0.0120%" height="15" fill="rgb(236,179,52)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="277" width="0.0120%" height="15" fill="rgb(213,23,39)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="261" width="0.0120%" height="15" fill="rgb(238,48,10)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="245" width="0.0120%" height="15" fill="rgb(251,196,23)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="229" width="0.0120%" height="15" fill="rgb(250,152,24)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="213" width="0.0120%" height="15" fill="rgb(209,150,17)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="223.50"></text></g><g><title>alloc::alloc::alloc (4,721,643 samples, 0.01%)</title><rect x="20.0740%" y="197" width="0.0120%" height="15" fill="rgb(234,202,34)" fg:x="7918390934" fg:w="4721643"/><text x="20.3240%" y="207.50"></text></g><g><title>__rustc::__rdl_alloc (4,751,476 samples, 0.01%)</title><rect x="20.3412%" y="133" width="0.0120%" height="15" fill="rgb(253,148,53)" fg:x="8023802182" fg:w="4751476"/><text x="20.5912%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (5,259,320 samples, 0.01%)</title><rect x="20.3533%" y="133" width="0.0133%" height="15" fill="rgb(218,129,16)" fg:x="8028553658" fg:w="5259320"/><text x="20.6033%" y="143.50"></text></g><g><title>core::ptr::read_volatile (8,317,539 samples, 0.02%)</title><rect x="20.3666%" y="133" width="0.0211%" height="15" fill="rgb(216,85,19)" fg:x="8033812978" fg:w="8317539"/><text x="20.6166%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (328,827,780 samples, 0.83%)</title><rect x="20.3230%" y="245" width="0.8336%" height="15" fill="rgb(235,228,7)" fg:x="8016595362" fg:w="328827780"/><text x="20.5730%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (328,827,780 samples, 0.83%)</title><rect x="20.3230%" y="229" width="0.8336%" height="15" fill="rgb(245,175,0)" fg:x="8016595362" fg:w="328827780"/><text x="20.5730%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (328,827,780 samples, 0.83%)</title><rect x="20.3230%" y="213" width="0.8336%" height="15" fill="rgb(208,168,36)" fg:x="8016595362" fg:w="328827780"/><text x="20.5730%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (328,827,780 samples, 0.83%)</title><rect x="20.3230%" y="197" width="0.8336%" height="15" fill="rgb(246,171,24)" fg:x="8016595362" fg:w="328827780"/><text x="20.5730%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (324,471,007 samples, 0.82%)</title><rect x="20.3340%" y="181" width="0.8226%" height="15" fill="rgb(215,142,24)" fg:x="8020952135" fg:w="324471007"/><text x="20.5840%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (324,471,007 samples, 0.82%)</title><rect x="20.3340%" y="165" width="0.8226%" height="15" fill="rgb(250,187,7)" fg:x="8020952135" fg:w="324471007"/><text x="20.5840%" y="175.50"></text></g><g><title>alloc::alloc::alloc (324,471,007 samples, 0.82%)</title><rect x="20.3340%" y="149" width="0.8226%" height="15" fill="rgb(228,66,33)" fg:x="8020952135" fg:w="324471007"/><text x="20.5840%" y="159.50"></text></g><g><title>malloc (303,292,625 samples, 0.77%)</title><rect x="20.3877%" y="133" width="0.7689%" height="15" fill="rgb(234,215,21)" fg:x="8042130517" fg:w="303292625"/><text x="20.6377%" y="143.50"></text></g><g><title>[libc.so.6] (216,092,711 samples, 0.55%)</title><rect x="20.6088%" y="117" width="0.5478%" height="15" fill="rgb(222,191,20)" fg:x="8129330431" fg:w="216092711"/><text x="20.8588%" y="127.50"></text></g><g><title>[libc.so.6] (30,860,125 samples, 0.08%)</title><rect x="21.0783%" y="101" width="0.0782%" height="15" fill="rgb(245,79,54)" fg:x="8314563017" fg:w="30860125"/><text x="21.3283%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (661,916,268 samples, 1.68%)</title><rect x="20.3086%" y="309" width="1.6780%" height="15" fill="rgb(240,10,37)" fg:x="8010933164" fg:w="661916268"/><text x="20.5586%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (656,254,070 samples, 1.66%)</title><rect x="20.3230%" y="293" width="1.6637%" height="15" fill="rgb(214,192,32)" fg:x="8016595362" fg:w="656254070"/><text x="20.5730%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (656,254,070 samples, 1.66%)</title><rect x="20.3230%" y="277" width="1.6637%" height="15" fill="rgb(209,36,54)" fg:x="8016595362" fg:w="656254070"/><text x="20.5730%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (656,254,070 samples, 1.66%)</title><rect x="20.3230%" y="261" width="1.6637%" height="15" fill="rgb(220,10,11)" fg:x="8016595362" fg:w="656254070"/><text x="20.5730%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (327,426,290 samples, 0.83%)</title><rect x="21.1566%" y="245" width="0.8301%" height="15" fill="rgb(221,106,17)" fg:x="8345423142" fg:w="327426290"/><text x="21.4066%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (327,426,290 samples, 0.83%)</title><rect x="21.1566%" y="229" width="0.8301%" height="15" fill="rgb(251,142,44)" fg:x="8345423142" fg:w="327426290"/><text x="21.4066%" y="239.50"></text></g><g><title>[libc.so.6] (322,468,086 samples, 0.82%)</title><rect x="21.1692%" y="213" width="0.8175%" height="15" fill="rgb(238,13,15)" fg:x="8350381346" fg:w="322468086"/><text x="21.4192%" y="223.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (681,499,120 samples, 1.73%)</title><rect x="20.2656%" y="325" width="1.7277%" height="15" fill="rgb(208,107,27)" fg:x="7993963681" fg:w="681499120"/><text x="20.5156%" y="335.50"></text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (704,593,773 samples, 1.79%)</title><rect x="20.2141%" y="341" width="1.7862%" height="15" fill="rgb(205,136,37)" fg:x="7973644007" fg:w="704593773"/><text x="20.4641%" y="351.50">&lt;..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17,099,186 samples, 0.04%)</title><rect x="22.0003%" y="341" width="0.0433%" height="15" fill="rgb(250,205,27)" fg:x="8678237780" fg:w="17099186"/><text x="22.2503%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (17,099,186 samples, 0.04%)</title><rect x="22.0003%" y="325" width="0.0433%" height="15" fill="rgb(210,80,43)" fg:x="8678237780" fg:w="17099186"/><text x="22.2503%" y="335.50"></text></g><g><title>clock_gettime (4,331,804 samples, 0.01%)</title><rect x="22.0630%" y="325" width="0.0110%" height="15" fill="rgb(247,160,36)" fg:x="8702987421" fg:w="4331804"/><text x="22.3130%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::gt (69,953,850 samples, 0.18%)</title><rect x="22.0740%" y="325" width="0.1773%" height="15" fill="rgb(234,13,49)" fg:x="8707319225" fg:w="69953850"/><text x="22.3240%" y="335.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (69,953,850 samples, 0.18%)</title><rect x="22.0740%" y="309" width="0.1773%" height="15" fill="rgb(234,122,0)" fg:x="8707319225" fg:w="69953850"/><text x="22.3240%" y="319.50"></text></g><g><title>clock_gettime (68,506,584 samples, 0.17%)</title><rect x="22.2985%" y="309" width="0.1737%" height="15" fill="rgb(207,146,38)" fg:x="8795846931" fg:w="68506584"/><text x="22.5485%" y="319.50"></text></g><g><title>__vdso_clock_gettime (34,397,385 samples, 0.09%)</title><rect x="22.3849%" y="293" width="0.0872%" height="15" fill="rgb(207,177,25)" fg:x="8829956130" fg:w="34397385"/><text x="22.6349%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (87,957,712 samples, 0.22%)</title><rect x="22.2585%" y="325" width="0.2230%" height="15" fill="rgb(211,178,42)" fg:x="8780074956" fg:w="87957712"/><text x="22.5085%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6,656,713 samples, 0.02%)</title><rect x="22.4815%" y="309" width="0.0169%" height="15" fill="rgb(230,69,54)" fg:x="8868032668" fg:w="6656713"/><text x="22.7315%" y="319.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (203,268,303 samples, 0.52%)</title><rect x="22.0437%" y="341" width="0.5153%" height="15" fill="rgb(214,135,41)" fg:x="8695336966" fg:w="203268303"/><text x="22.2937%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (30,572,601 samples, 0.08%)</title><rect x="22.4815%" y="325" width="0.0775%" height="15" fill="rgb(237,67,25)" fg:x="8868032668" fg:w="30572601"/><text x="22.7315%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (23,915,888 samples, 0.06%)</title><rect x="22.4983%" y="309" width="0.0606%" height="15" fill="rgb(222,189,50)" fg:x="8874689381" fg:w="23915888"/><text x="22.7483%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (21,736,464 samples, 0.06%)</title><rect x="22.5039%" y="293" width="0.0551%" height="15" fill="rgb(245,148,34)" fg:x="8876868805" fg:w="21736464"/><text x="22.7539%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,631,133 samples, 0.02%)</title><rect x="22.6475%" y="213" width="0.0219%" height="15" fill="rgb(222,29,6)" fg:x="8933522049" fg:w="8631133"/><text x="22.8975%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,094,943 samples, 0.03%)</title><rect x="22.6852%" y="197" width="0.0307%" height="15" fill="rgb(221,189,43)" fg:x="8948417267" fg:w="12094943"/><text x="22.9352%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (42,457,622 samples, 0.11%)</title><rect x="22.6404%" y="261" width="0.1076%" height="15" fill="rgb(207,36,27)" fg:x="8930737582" fg:w="42457622"/><text x="22.8904%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (42,457,622 samples, 0.11%)</title><rect x="22.6404%" y="245" width="0.1076%" height="15" fill="rgb(217,90,24)" fg:x="8930737582" fg:w="42457622"/><text x="22.8904%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (42,457,622 samples, 0.11%)</title><rect x="22.6404%" y="229" width="0.1076%" height="15" fill="rgb(224,66,35)" fg:x="8930737582" fg:w="42457622"/><text x="22.8904%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31,042,022 samples, 0.08%)</title><rect x="22.6694%" y="213" width="0.0787%" height="15" fill="rgb(221,13,50)" fg:x="8942153182" fg:w="31042022"/><text x="22.9194%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12,682,994 samples, 0.03%)</title><rect x="22.7159%" y="197" width="0.0322%" height="15" fill="rgb(236,68,49)" fg:x="8960512210" fg:w="12682994"/><text x="22.9659%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (19,031,481 samples, 0.05%)</title><rect x="22.7481%" y="261" width="0.0482%" height="15" fill="rgb(229,146,28)" fg:x="8973195204" fg:w="19031481"/><text x="22.9981%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12,567,483 samples, 0.03%)</title><rect x="22.7644%" y="245" width="0.0319%" height="15" fill="rgb(225,31,38)" fg:x="8979659202" fg:w="12567483"/><text x="23.0144%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12,567,483 samples, 0.03%)</title><rect x="22.7644%" y="229" width="0.0319%" height="15" fill="rgb(250,208,3)" fg:x="8979659202" fg:w="12567483"/><text x="23.0144%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12,567,483 samples, 0.03%)</title><rect x="22.7644%" y="213" width="0.0319%" height="15" fill="rgb(246,54,23)" fg:x="8979659202" fg:w="12567483"/><text x="23.0144%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35,642,107 samples, 0.09%)</title><rect x="22.7963%" y="181" width="0.0904%" height="15" fill="rgb(243,76,11)" fg:x="8992226685" fg:w="35642107"/><text x="23.0463%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (16,140,430 samples, 0.04%)</title><rect x="22.8457%" y="165" width="0.0409%" height="15" fill="rgb(245,21,50)" fg:x="9011728362" fg:w="16140430"/><text x="23.0957%" y="175.50"></text></g><g><title>core::cmp::min (7,346,243 samples, 0.02%)</title><rect x="22.9587%" y="149" width="0.0186%" height="15" fill="rgb(228,9,43)" fg:x="9056304933" fg:w="7346243"/><text x="23.2087%" y="159.50"></text></g><g><title>core::cmp::Ord::min (7,346,243 samples, 0.02%)</title><rect x="22.9587%" y="133" width="0.0186%" height="15" fill="rgb(208,100,47)" fg:x="9056304933" fg:w="7346243"/><text x="23.2087%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (151,120,931 samples, 0.38%)</title><rect x="22.6352%" y="293" width="0.3831%" height="15" fill="rgb(232,26,8)" fg:x="8928687352" fg:w="151120931"/><text x="22.8852%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (151,120,931 samples, 0.38%)</title><rect x="22.6352%" y="277" width="0.3831%" height="15" fill="rgb(216,166,38)" fg:x="8928687352" fg:w="151120931"/><text x="22.8852%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (87,581,598 samples, 0.22%)</title><rect x="22.7963%" y="261" width="0.2220%" height="15" fill="rgb(251,202,51)" fg:x="8992226685" fg:w="87581598"/><text x="23.0463%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (87,581,598 samples, 0.22%)</title><rect x="22.7963%" y="245" width="0.2220%" height="15" fill="rgb(254,216,34)" fg:x="8992226685" fg:w="87581598"/><text x="23.0463%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (87,581,598 samples, 0.22%)</title><rect x="22.7963%" y="229" width="0.2220%" height="15" fill="rgb(251,32,27)" fg:x="8992226685" fg:w="87581598"/><text x="23.0463%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (87,581,598 samples, 0.22%)</title><rect x="22.7963%" y="213" width="0.2220%" height="15" fill="rgb(208,127,28)" fg:x="8992226685" fg:w="87581598"/><text x="23.0463%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (87,581,598 samples, 0.22%)</title><rect x="22.7963%" y="197" width="0.2220%" height="15" fill="rgb(224,137,22)" fg:x="8992226685" fg:w="87581598"/><text x="23.0463%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u8 (51,939,491 samples, 0.13%)</title><rect x="22.8867%" y="181" width="0.1317%" height="15" fill="rgb(254,70,32)" fg:x="9027868792" fg:w="51939491"/><text x="23.1367%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41,142,346 samples, 0.10%)</title><rect x="22.9140%" y="165" width="0.1043%" height="15" fill="rgb(229,75,37)" fg:x="9038665937" fg:w="41142346"/><text x="23.1640%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (16,157,107 samples, 0.04%)</title><rect x="22.9774%" y="149" width="0.0410%" height="15" fill="rgb(252,64,23)" fg:x="9063651176" fg:w="16157107"/><text x="23.2274%" y="159.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (41,757,869 samples, 0.11%)</title><rect x="23.0398%" y="245" width="0.1059%" height="15" fill="rgb(232,162,48)" fg:x="9088269692" fg:w="41757869"/><text x="23.2898%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (41,757,869 samples, 0.11%)</title><rect x="23.0398%" y="229" width="0.1059%" height="15" fill="rgb(246,160,12)" fg:x="9088269692" fg:w="41757869"/><text x="23.2898%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41,757,869 samples, 0.11%)</title><rect x="23.0398%" y="213" width="0.1059%" height="15" fill="rgb(247,166,0)" fg:x="9088269692" fg:w="41757869"/><text x="23.2898%" y="223.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (4,129,091 samples, 0.01%)</title><rect x="23.1456%" y="245" width="0.0105%" height="15" fill="rgb(249,219,21)" fg:x="9130027561" fg:w="4129091"/><text x="23.3956%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,129,091 samples, 0.01%)</title><rect x="23.1456%" y="229" width="0.0105%" height="15" fill="rgb(205,209,3)" fg:x="9130027561" fg:w="4129091"/><text x="23.3956%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (266,737,908 samples, 0.68%)</title><rect x="23.1561%" y="245" width="0.6762%" height="15" fill="rgb(243,44,1)" fg:x="9134156652" fg:w="266737908"/><text x="23.4061%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (266,737,908 samples, 0.68%)</title><rect x="23.1561%" y="229" width="0.6762%" height="15" fill="rgb(206,159,16)" fg:x="9134156652" fg:w="266737908"/><text x="23.4061%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (266,737,908 samples, 0.68%)</title><rect x="23.1561%" y="213" width="0.6762%" height="15" fill="rgb(244,77,30)" fg:x="9134156652" fg:w="266737908"/><text x="23.4061%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (256,377,249 samples, 0.65%)</title><rect x="23.1824%" y="197" width="0.6499%" height="15" fill="rgb(218,69,12)" fg:x="9144517311" fg:w="256377249"/><text x="23.4324%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (256,377,249 samples, 0.65%)</title><rect x="23.1824%" y="181" width="0.6499%" height="15" fill="rgb(212,87,7)" fg:x="9144517311" fg:w="256377249"/><text x="23.4324%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (256,377,249 samples, 0.65%)</title><rect x="23.1824%" y="165" width="0.6499%" height="15" fill="rgb(245,114,25)" fg:x="9144517311" fg:w="256377249"/><text x="23.4324%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (256,377,249 samples, 0.65%)</title><rect x="23.1824%" y="149" width="0.6499%" height="15" fill="rgb(210,61,42)" fg:x="9144517311" fg:w="256377249"/><text x="23.4324%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (256,377,249 samples, 0.65%)</title><rect x="23.1824%" y="133" width="0.6499%" height="15" fill="rgb(211,52,33)" fg:x="9144517311" fg:w="256377249"/><text x="23.4324%" y="143.50"></text></g><g><title>[libc.so.6] (133,230,121 samples, 0.34%)</title><rect x="23.4946%" y="117" width="0.3378%" height="15" fill="rgb(234,58,33)" fg:x="9267664439" fg:w="133230121"/><text x="23.7446%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (504,969,878 samples, 1.28%)</title><rect x="22.5590%" y="341" width="1.2802%" height="15" fill="rgb(220,115,36)" fg:x="8898605269" fg:w="504969878"/><text x="22.8090%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (504,969,878 samples, 1.28%)</title><rect x="22.5590%" y="325" width="1.2802%" height="15" fill="rgb(243,153,54)" fg:x="8898605269" fg:w="504969878"/><text x="22.8090%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (504,969,878 samples, 1.28%)</title><rect x="22.5590%" y="309" width="1.2802%" height="15" fill="rgb(251,47,18)" fg:x="8898605269" fg:w="504969878"/><text x="22.8090%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (323,766,864 samples, 0.82%)</title><rect x="23.0183%" y="293" width="0.8208%" height="15" fill="rgb(242,102,42)" fg:x="9079808283" fg:w="323766864"/><text x="23.2683%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (323,766,864 samples, 0.82%)</title><rect x="23.0183%" y="277" width="0.8208%" height="15" fill="rgb(234,31,38)" fg:x="9079808283" fg:w="323766864"/><text x="23.2683%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (323,766,864 samples, 0.82%)</title><rect x="23.0183%" y="261" width="0.8208%" height="15" fill="rgb(221,117,51)" fg:x="9079808283" fg:w="323766864"/><text x="23.2683%" y="271.50"></text></g><g><title>server_lib::storage::Storage::get_entry (1,526,053,067 samples, 3.87%)</title><rect x="20.0860%" y="357" width="3.8687%" height="15" fill="rgb(212,20,18)" fg:x="7923112577" fg:w="1526053067"/><text x="20.3360%" y="367.50">serv..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (45,590,497 samples, 0.12%)</title><rect x="23.8391%" y="341" width="0.1156%" height="15" fill="rgb(245,133,36)" fg:x="9403575147" fg:w="45590497"/><text x="24.0891%" y="351.50"></text></g><g><title>clock_gettime (43,607,300 samples, 0.11%)</title><rect x="23.8441%" y="325" width="0.1105%" height="15" fill="rgb(212,6,19)" fg:x="9405558344" fg:w="43607300"/><text x="24.0941%" y="335.50"></text></g><g><title>__vdso_clock_gettime (41,466,932 samples, 0.11%)</title><rect x="23.8496%" y="309" width="0.1051%" height="15" fill="rgb(218,1,36)" fg:x="9407698712" fg:w="41466932"/><text x="24.0996%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="325" width="0.3917%" height="15" fill="rgb(246,84,54)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="309" width="0.3917%" height="15" fill="rgb(242,110,6)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="293" width="0.3917%" height="15" fill="rgb(214,47,5)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="277" width="0.3917%" height="15" fill="rgb(218,159,25)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="261" width="0.3917%" height="15" fill="rgb(215,211,28)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="245" width="0.3917%" height="15" fill="rgb(238,59,32)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="229" width="0.3917%" height="15" fill="rgb(226,82,3)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="239.50"></text></g><g><title>cfree (154,505,482 samples, 0.39%)</title><rect x="23.9964%" y="213" width="0.3917%" height="15" fill="rgb(240,164,32)" fg:x="9465622539" fg:w="154505482"/><text x="24.2464%" y="223.50"></text></g><g><title>[libc.so.6] (86,346,318 samples, 0.22%)</title><rect x="24.1692%" y="197" width="0.2189%" height="15" fill="rgb(232,46,7)" fg:x="9533781703" fg:w="86346318"/><text x="24.4192%" y="207.50"></text></g><g><title>[libc.so.6] (74,859,034 samples, 0.19%)</title><rect x="24.1983%" y="181" width="0.1898%" height="15" fill="rgb(229,129,53)" fg:x="9545268987" fg:w="74859034"/><text x="24.4483%" y="191.50"></text></g><g><title>[libc.so.6] (51,474,208 samples, 0.13%)</title><rect x="24.2576%" y="165" width="0.1305%" height="15" fill="rgb(234,188,29)" fg:x="9568653813" fg:w="51474208"/><text x="24.5076%" y="175.50"></text></g><g><title>[libc.so.6] (9,444,729 samples, 0.02%)</title><rect x="24.3642%" y="149" width="0.0239%" height="15" fill="rgb(246,141,4)" fg:x="9610683292" fg:w="9444729"/><text x="24.6142%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4,034,790 samples, 0.01%)</title><rect x="24.3881%" y="325" width="0.0102%" height="15" fill="rgb(229,23,39)" fg:x="9620128021" fg:w="4034790"/><text x="24.6381%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (4,034,790 samples, 0.01%)</title><rect x="24.3881%" y="309" width="0.0102%" height="15" fill="rgb(206,12,3)" fg:x="9620128021" fg:w="4034790"/><text x="24.6381%" y="319.50"></text></g><g><title>server_lib::storage::Storage::is_full (14,594,117 samples, 0.04%)</title><rect x="24.3983%" y="325" width="0.0370%" height="15" fill="rgb(252,226,20)" fg:x="9624162811" fg:w="14594117"/><text x="24.6483%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::len (14,594,117 samples, 0.04%)</title><rect x="24.3983%" y="309" width="0.0370%" height="15" fill="rgb(216,123,35)" fg:x="9624162811" fg:w="14594117"/><text x="24.6483%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (14,594,117 samples, 0.04%)</title><rect x="24.3983%" y="293" width="0.0370%" height="15" fill="rgb(212,68,40)" fg:x="9624162811" fg:w="14594117"/><text x="24.6483%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (14,594,117 samples, 0.04%)</title><rect x="24.3983%" y="277" width="0.0370%" height="15" fill="rgb(254,125,32)" fg:x="9624162811" fg:w="14594117"/><text x="24.6483%" y="287.50"></text></g><g><title>core::mem::replace (11,984,384 samples, 0.03%)</title><rect x="24.4408%" y="293" width="0.0304%" height="15" fill="rgb(253,97,22)" fg:x="9640904687" fg:w="11984384"/><text x="24.6908%" y="303.50"></text></g><g><title>__rustc::__rust_dealloc (4,418,569 samples, 0.01%)</title><rect x="24.4712%" y="181" width="0.0112%" height="15" fill="rgb(241,101,14)" fg:x="9652889071" fg:w="4418569"/><text x="24.7212%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="293" width="0.0243%" height="15" fill="rgb(238,103,29)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="277" width="0.0243%" height="15" fill="rgb(233,195,47)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="261" width="0.0243%" height="15" fill="rgb(246,218,30)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="245" width="0.0243%" height="15" fill="rgb(219,145,47)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="229" width="0.0243%" height="15" fill="rgb(243,12,26)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="213" width="0.0243%" height="15" fill="rgb(214,87,16)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (9,566,642 samples, 0.02%)</title><rect x="24.4712%" y="197" width="0.0243%" height="15" fill="rgb(208,99,42)" fg:x="9652889071" fg:w="9566642"/><text x="24.7212%" y="207.50"></text></g><g><title>cfree (5,148,073 samples, 0.01%)</title><rect x="24.4824%" y="181" width="0.0131%" height="15" fill="rgb(253,99,2)" fg:x="9657307640" fg:w="5148073"/><text x="24.7324%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (12,767,138 samples, 0.03%)</title><rect x="24.5030%" y="245" width="0.0324%" height="15" fill="rgb(220,168,23)" fg:x="9665465973" fg:w="12767138"/><text x="24.7530%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12,767,138 samples, 0.03%)</title><rect x="24.5030%" y="229" width="0.0324%" height="15" fill="rgb(242,38,24)" fg:x="9665465973" fg:w="12767138"/><text x="24.7530%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,767,138 samples, 0.03%)</title><rect x="24.5030%" y="213" width="0.0324%" height="15" fill="rgb(225,182,9)" fg:x="9665465973" fg:w="12767138"/><text x="24.7530%" y="223.50"></text></g><g><title>hashbrown::control::tag::Tag::full (5,930,209 samples, 0.02%)</title><rect x="24.5354%" y="245" width="0.0150%" height="15" fill="rgb(243,178,37)" fg:x="9678233111" fg:w="5930209"/><text x="24.7854%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (139,807,513 samples, 0.35%)</title><rect x="24.4954%" y="293" width="0.3544%" height="15" fill="rgb(232,139,19)" fg:x="9662455713" fg:w="139807513"/><text x="24.7454%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (139,807,513 samples, 0.35%)</title><rect x="24.4954%" y="277" width="0.3544%" height="15" fill="rgb(225,201,24)" fg:x="9662455713" fg:w="139807513"/><text x="24.7454%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (139,807,513 samples, 0.35%)</title><rect x="24.4954%" y="261" width="0.3544%" height="15" fill="rgb(221,47,46)" fg:x="9662455713" fg:w="139807513"/><text x="24.7454%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (118,099,906 samples, 0.30%)</title><rect x="24.5504%" y="245" width="0.2994%" height="15" fill="rgb(249,23,13)" fg:x="9684163320" fg:w="118099906"/><text x="24.8004%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="229" width="0.2816%" height="15" fill="rgb(219,9,5)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="213" width="0.2816%" height="15" fill="rgb(254,171,16)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="197" width="0.2816%" height="15" fill="rgb(230,171,20)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="181" width="0.2816%" height="15" fill="rgb(210,71,41)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="191.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="165" width="0.2816%" height="15" fill="rgb(206,173,20)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="175.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="149" width="0.2816%" height="15" fill="rgb(233,88,34)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="159.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (111,067,468 samples, 0.28%)</title><rect x="24.5683%" y="133" width="0.2816%" height="15" fill="rgb(223,209,46)" fg:x="9691195758" fg:w="111067468"/><text x="24.8183%" y="143.50"></text></g><g><title>[libc.so.6] (65,794,950 samples, 0.17%)</title><rect x="24.6830%" y="117" width="0.1668%" height="15" fill="rgb(250,43,18)" fg:x="9736468276" fg:w="65794950"/><text x="24.9330%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (6,326,001 samples, 0.02%)</title><rect x="24.8498%" y="261" width="0.0160%" height="15" fill="rgb(208,13,10)" fg:x="9802263226" fg:w="6326001"/><text x="25.0998%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6,326,001 samples, 0.02%)</title><rect x="24.8498%" y="245" width="0.0160%" height="15" fill="rgb(212,200,36)" fg:x="9802263226" fg:w="6326001"/><text x="25.0998%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6,326,001 samples, 0.02%)</title><rect x="24.8498%" y="229" width="0.0160%" height="15" fill="rgb(225,90,30)" fg:x="9802263226" fg:w="6326001"/><text x="25.0998%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (11,405,208 samples, 0.03%)</title><rect x="24.8659%" y="261" width="0.0289%" height="15" fill="rgb(236,182,39)" fg:x="9808589227" fg:w="11405208"/><text x="25.1159%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11,405,208 samples, 0.03%)</title><rect x="24.8659%" y="245" width="0.0289%" height="15" fill="rgb(212,144,35)" fg:x="9808589227" fg:w="11405208"/><text x="25.1159%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11,405,208 samples, 0.03%)</title><rect x="24.8659%" y="229" width="0.0289%" height="15" fill="rgb(228,63,44)" fg:x="9808589227" fg:w="11405208"/><text x="25.1159%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11,405,208 samples, 0.03%)</title><rect x="24.8659%" y="213" width="0.0289%" height="15" fill="rgb(228,109,6)" fg:x="9808589227" fg:w="11405208"/><text x="25.1159%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,347,753 samples, 0.04%)</title><rect x="24.9135%" y="165" width="0.0364%" height="15" fill="rgb(238,117,24)" fg:x="9827365430" fg:w="14347753"/><text x="25.1635%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (4,881,487 samples, 0.01%)</title><rect x="24.9375%" y="149" width="0.0124%" height="15" fill="rgb(242,26,26)" fg:x="9836831696" fg:w="4881487"/><text x="25.1875%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (47,882,174 samples, 0.12%)</title><rect x="24.8498%" y="293" width="0.1214%" height="15" fill="rgb(221,92,48)" fg:x="9802263226" fg:w="47882174"/><text x="25.0998%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (47,882,174 samples, 0.12%)</title><rect x="24.8498%" y="277" width="0.1214%" height="15" fill="rgb(209,209,32)" fg:x="9802263226" fg:w="47882174"/><text x="25.0998%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (30,150,965 samples, 0.08%)</title><rect x="24.8948%" y="261" width="0.0764%" height="15" fill="rgb(221,70,22)" fg:x="9819994435" fg:w="30150965"/><text x="25.1448%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (25,497,584 samples, 0.06%)</title><rect x="24.9066%" y="245" width="0.0646%" height="15" fill="rgb(248,145,5)" fg:x="9824647816" fg:w="25497584"/><text x="25.1566%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (25,497,584 samples, 0.06%)</title><rect x="24.9066%" y="229" width="0.0646%" height="15" fill="rgb(226,116,26)" fg:x="9824647816" fg:w="25497584"/><text x="25.1566%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (25,497,584 samples, 0.06%)</title><rect x="24.9066%" y="213" width="0.0646%" height="15" fill="rgb(244,5,17)" fg:x="9824647816" fg:w="25497584"/><text x="25.1566%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (25,497,584 samples, 0.06%)</title><rect x="24.9066%" y="197" width="0.0646%" height="15" fill="rgb(252,159,33)" fg:x="9824647816" fg:w="25497584"/><text x="25.1566%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (25,497,584 samples, 0.06%)</title><rect x="24.9066%" y="181" width="0.0646%" height="15" fill="rgb(206,71,0)" fg:x="9824647816" fg:w="25497584"/><text x="25.1566%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (8,432,217 samples, 0.02%)</title><rect x="24.9498%" y="165" width="0.0214%" height="15" fill="rgb(233,118,54)" fg:x="9841713183" fg:w="8432217"/><text x="25.1998%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,432,217 samples, 0.02%)</title><rect x="24.9498%" y="149" width="0.0214%" height="15" fill="rgb(234,83,48)" fg:x="9841713183" fg:w="8432217"/><text x="25.1998%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (5,344,824 samples, 0.01%)</title><rect x="24.9577%" y="133" width="0.0135%" height="15" fill="rgb(228,3,54)" fg:x="9844800576" fg:w="5344824"/><text x="25.2077%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (209,797,651 samples, 0.53%)</title><rect x="24.4408%" y="325" width="0.5319%" height="15" fill="rgb(226,155,13)" fg:x="9640904687" fg:w="209797651"/><text x="24.6908%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (209,797,651 samples, 0.53%)</title><rect x="24.4408%" y="309" width="0.5319%" height="15" fill="rgb(241,28,37)" fg:x="9640904687" fg:w="209797651"/><text x="24.6908%" y="319.50"></text></g><g><title>server::process_request (7,436,926,165 samples, 18.85%)</title><rect x="6.2866%" y="373" width="18.8534%" height="15" fill="rgb(233,93,10)" fg:x="2479810783" fg:w="7436926165"/><text x="6.5366%" y="383.50">server::process_request</text></g><g><title>server_lib::storage::Storage::insert_entry (467,571,304 samples, 1.19%)</title><rect x="23.9547%" y="357" width="1.1853%" height="15" fill="rgb(225,113,19)" fg:x="9449165644" fg:w="467571304"/><text x="24.2047%" y="367.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (467,571,304 samples, 1.19%)</title><rect x="23.9547%" y="341" width="1.1853%" height="15" fill="rgb(241,2,18)" fg:x="9449165644" fg:w="467571304"/><text x="24.2047%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (66,034,610 samples, 0.17%)</title><rect x="24.9726%" y="325" width="0.1674%" height="15" fill="rgb(228,207,21)" fg:x="9850702338" fg:w="66034610"/><text x="25.2226%" y="335.50"></text></g><g><title>clock_gettime (61,662,506 samples, 0.16%)</title><rect x="24.9837%" y="309" width="0.1563%" height="15" fill="rgb(213,211,35)" fg:x="9855074442" fg:w="61662506"/><text x="25.2337%" y="319.50"></text></g><g><title>__vdso_clock_gettime (34,534,870 samples, 0.09%)</title><rect x="25.0525%" y="293" width="0.0875%" height="15" fill="rgb(209,83,10)" fg:x="9882202078" fg:w="34534870"/><text x="25.3025%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11,399,765 samples, 0.03%)</title><rect x="25.1555%" y="357" width="0.0289%" height="15" fill="rgb(209,164,1)" fg:x="9922848429" fg:w="11399765"/><text x="25.4055%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24,129,227 samples, 0.06%)</title><rect x="25.1844%" y="357" width="0.0612%" height="15" fill="rgb(213,184,43)" fg:x="9934248194" fg:w="24129227"/><text x="25.4344%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24,129,227 samples, 0.06%)</title><rect x="25.1844%" y="341" width="0.0612%" height="15" fill="rgb(231,61,34)" fg:x="9934248194" fg:w="24129227"/><text x="25.4344%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24,129,227 samples, 0.06%)</title><rect x="25.1844%" y="325" width="0.0612%" height="15" fill="rgb(235,75,3)" fg:x="9934248194" fg:w="24129227"/><text x="25.4344%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (24,129,227 samples, 0.06%)</title><rect x="25.1844%" y="309" width="0.0612%" height="15" fill="rgb(220,106,47)" fg:x="9934248194" fg:w="24129227"/><text x="25.4344%" y="319.50"></text></g><g><title>server_lib::resp3::get_data_type (39,220,968 samples, 0.10%)</title><rect x="25.2456%" y="357" width="0.0994%" height="15" fill="rgb(210,196,33)" fg:x="9958377421" fg:w="39220968"/><text x="25.4956%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16,261,315 samples, 0.04%)</title><rect x="25.6942%" y="341" width="0.0412%" height="15" fill="rgb(229,154,42)" fg:x="10135338425" fg:w="16261315"/><text x="25.9442%" y="351.50"></text></g><g><title>__rustc::__rust_dealloc (4,281,449 samples, 0.01%)</title><rect x="25.7354%" y="341" width="0.0109%" height="15" fill="rgb(228,114,26)" fg:x="10151599740" fg:w="4281449"/><text x="25.9854%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (8,764,734 samples, 0.02%)</title><rect x="25.7623%" y="181" width="0.0222%" height="15" fill="rgb(208,144,1)" fg:x="10162204227" fg:w="8764734"/><text x="26.0123%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8,764,734 samples, 0.02%)</title><rect x="25.7623%" y="165" width="0.0222%" height="15" fill="rgb(239,112,37)" fg:x="10162204227" fg:w="8764734"/><text x="26.0123%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (49,659,779 samples, 0.13%)</title><rect x="25.7463%" y="293" width="0.1259%" height="15" fill="rgb(210,96,50)" fg:x="10155881189" fg:w="49659779"/><text x="25.9963%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (49,659,779 samples, 0.13%)</title><rect x="25.7463%" y="277" width="0.1259%" height="15" fill="rgb(222,178,2)" fg:x="10155881189" fg:w="49659779"/><text x="25.9963%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (49,659,779 samples, 0.13%)</title><rect x="25.7463%" y="261" width="0.1259%" height="15" fill="rgb(226,74,18)" fg:x="10155881189" fg:w="49659779"/><text x="25.9963%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (49,659,779 samples, 0.13%)</title><rect x="25.7463%" y="245" width="0.1259%" height="15" fill="rgb(225,67,54)" fg:x="10155881189" fg:w="49659779"/><text x="25.9963%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45,136,525 samples, 0.11%)</title><rect x="25.7578%" y="229" width="0.1144%" height="15" fill="rgb(251,92,32)" fg:x="10160404443" fg:w="45136525"/><text x="26.0078%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45,136,525 samples, 0.11%)</title><rect x="25.7578%" y="213" width="0.1144%" height="15" fill="rgb(228,149,22)" fg:x="10160404443" fg:w="45136525"/><text x="26.0078%" y="223.50"></text></g><g><title>alloc::alloc::alloc (45,136,525 samples, 0.11%)</title><rect x="25.7578%" y="197" width="0.1144%" height="15" fill="rgb(243,54,13)" fg:x="10160404443" fg:w="45136525"/><text x="26.0078%" y="207.50"></text></g><g><title>malloc (34,572,007 samples, 0.09%)</title><rect x="25.7845%" y="181" width="0.0876%" height="15" fill="rgb(243,180,28)" fg:x="10170968961" fg:w="34572007"/><text x="26.0345%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (101,490,362 samples, 0.26%)</title><rect x="25.7463%" y="341" width="0.2573%" height="15" fill="rgb(208,167,24)" fg:x="10155881189" fg:w="101490362"/><text x="25.9963%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (101,490,362 samples, 0.26%)</title><rect x="25.7463%" y="325" width="0.2573%" height="15" fill="rgb(245,73,45)" fg:x="10155881189" fg:w="101490362"/><text x="25.9963%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (101,490,362 samples, 0.26%)</title><rect x="25.7463%" y="309" width="0.2573%" height="15" fill="rgb(237,203,48)" fg:x="10155881189" fg:w="101490362"/><text x="25.9963%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (51,830,583 samples, 0.13%)</title><rect x="25.8722%" y="293" width="0.1314%" height="15" fill="rgb(211,197,16)" fg:x="10205540968" fg:w="51830583"/><text x="26.1222%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51,830,583 samples, 0.13%)</title><rect x="25.8722%" y="277" width="0.1314%" height="15" fill="rgb(243,99,51)" fg:x="10205540968" fg:w="51830583"/><text x="26.1222%" y="287.50"></text></g><g><title>[libc.so.6] (47,613,373 samples, 0.12%)</title><rect x="25.8829%" y="261" width="0.1207%" height="15" fill="rgb(215,123,29)" fg:x="10209758178" fg:w="47613373"/><text x="26.1329%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (76,210,260 samples, 0.19%)</title><rect x="26.0036%" y="341" width="0.1932%" height="15" fill="rgb(239,186,37)" fg:x="10257371551" fg:w="76210260"/><text x="26.2536%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (76,210,260 samples, 0.19%)</title><rect x="26.0036%" y="325" width="0.1932%" height="15" fill="rgb(252,136,39)" fg:x="10257371551" fg:w="76210260"/><text x="26.2536%" y="335.50"></text></g><g><title>core::str::validations::run_utf8_validation (34,250,289 samples, 0.09%)</title><rect x="26.1100%" y="309" width="0.0868%" height="15" fill="rgb(223,213,32)" fg:x="10299331522" fg:w="34250289"/><text x="26.3600%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,836,067 samples, 0.01%)</title><rect x="26.2454%" y="277" width="0.0148%" height="15" fill="rgb(233,115,5)" fg:x="10352775021" fg:w="5836067"/><text x="26.4954%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (15,119,651 samples, 0.04%)</title><rect x="26.2602%" y="277" width="0.0383%" height="15" fill="rgb(207,226,44)" fg:x="10358611088" fg:w="15119651"/><text x="26.5102%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (43,839,860 samples, 0.11%)</title><rect x="26.4016%" y="261" width="0.1111%" height="15" fill="rgb(208,126,0)" fg:x="10414359318" fg:w="43839860"/><text x="26.6516%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (30,362,990 samples, 0.08%)</title><rect x="26.4357%" y="245" width="0.0770%" height="15" fill="rgb(244,66,21)" fg:x="10427836188" fg:w="30362990"/><text x="26.6857%" y="255.50"></text></g><g><title>__rustc::__rust_alloc (23,784,783 samples, 0.06%)</title><rect x="26.5127%" y="261" width="0.0603%" height="15" fill="rgb(222,97,12)" fg:x="10458199178" fg:w="23784783"/><text x="26.7627%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12,027,613 samples, 0.03%)</title><rect x="26.5730%" y="261" width="0.0305%" height="15" fill="rgb(219,213,19)" fg:x="10481983961" fg:w="12027613"/><text x="26.8230%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (298,024,917 samples, 0.76%)</title><rect x="26.2129%" y="325" width="0.7555%" height="15" fill="rgb(252,169,30)" fg:x="10339920265" fg:w="298024917"/><text x="26.4629%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (294,881,430 samples, 0.75%)</title><rect x="26.2208%" y="309" width="0.7476%" height="15" fill="rgb(206,32,51)" fg:x="10343063752" fg:w="294881430"/><text x="26.4708%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (287,205,728 samples, 0.73%)</title><rect x="26.2403%" y="293" width="0.7281%" height="15" fill="rgb(250,172,42)" fg:x="10350739454" fg:w="287205728"/><text x="26.4903%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (264,214,443 samples, 0.67%)</title><rect x="26.2986%" y="277" width="0.6698%" height="15" fill="rgb(209,34,43)" fg:x="10373730739" fg:w="264214443"/><text x="26.5486%" y="287.50"></text></g><g><title>malloc (143,933,608 samples, 0.36%)</title><rect x="26.6035%" y="261" width="0.3649%" height="15" fill="rgb(223,11,35)" fg:x="10494011574" fg:w="143933608"/><text x="26.8535%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,298,713 samples, 0.02%)</title><rect x="26.9684%" y="325" width="0.0185%" height="15" fill="rgb(251,219,26)" fg:x="10637945182" fg:w="7298713"/><text x="27.2184%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (344,112,393 samples, 0.87%)</title><rect x="26.1968%" y="341" width="0.8724%" height="15" fill="rgb(231,119,3)" fg:x="10333581811" fg:w="344112393"/><text x="26.4468%" y="351.50"></text></g><g><title>core::ptr::write (32,450,309 samples, 0.08%)</title><rect x="26.9869%" y="325" width="0.0823%" height="15" fill="rgb(216,97,11)" fg:x="10645243895" fg:w="32450309"/><text x="27.2369%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (6,754,503 samples, 0.02%)</title><rect x="27.0838%" y="213" width="0.0171%" height="15" fill="rgb(223,59,9)" fg:x="10683473434" fg:w="6754503"/><text x="27.3338%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,754,503 samples, 0.02%)</title><rect x="27.0838%" y="197" width="0.0171%" height="15" fill="rgb(233,93,31)" fg:x="10683473434" fg:w="6754503"/><text x="27.3338%" y="207.50"></text></g><g><title>__rustc::__rust_alloc (6,015,251 samples, 0.02%)</title><rect x="27.1009%" y="213" width="0.0152%" height="15" fill="rgb(239,81,33)" fg:x="10690227937" fg:w="6015251"/><text x="27.3509%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70,346,663 samples, 0.18%)</title><rect x="27.0838%" y="261" width="0.1783%" height="15" fill="rgb(213,120,34)" fg:x="10683473434" fg:w="70346663"/><text x="27.3338%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70,346,663 samples, 0.18%)</title><rect x="27.0838%" y="245" width="0.1783%" height="15" fill="rgb(243,49,53)" fg:x="10683473434" fg:w="70346663"/><text x="27.3338%" y="255.50"></text></g><g><title>alloc::alloc::alloc (70,346,663 samples, 0.18%)</title><rect x="27.0838%" y="229" width="0.1783%" height="15" fill="rgb(247,216,33)" fg:x="10683473434" fg:w="70346663"/><text x="27.3338%" y="239.50"></text></g><g><title>malloc (57,576,909 samples, 0.15%)</title><rect x="27.1162%" y="213" width="0.1460%" height="15" fill="rgb(226,26,14)" fg:x="10696243188" fg:w="57576909"/><text x="27.3662%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (98,344,356 samples, 0.25%)</title><rect x="27.0758%" y="341" width="0.2493%" height="15" fill="rgb(215,49,53)" fg:x="10680303010" fg:w="98344356"/><text x="27.3258%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (98,344,356 samples, 0.25%)</title><rect x="27.0758%" y="325" width="0.2493%" height="15" fill="rgb(245,162,40)" fg:x="10680303010" fg:w="98344356"/><text x="27.3258%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (96,524,463 samples, 0.24%)</title><rect x="27.0804%" y="309" width="0.2447%" height="15" fill="rgb(229,68,17)" fg:x="10682122903" fg:w="96524463"/><text x="27.3304%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (96,524,463 samples, 0.24%)</title><rect x="27.0804%" y="293" width="0.2447%" height="15" fill="rgb(213,182,10)" fg:x="10682122903" fg:w="96524463"/><text x="27.3304%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (96,524,463 samples, 0.24%)</title><rect x="27.0804%" y="277" width="0.2447%" height="15" fill="rgb(245,125,30)" fg:x="10682122903" fg:w="96524463"/><text x="27.3304%" y="287.50"></text></g><g><title>alloc::raw_vec::layout_array (24,827,269 samples, 0.06%)</title><rect x="27.2621%" y="261" width="0.0629%" height="15" fill="rgb(232,202,2)" fg:x="10753820097" fg:w="24827269"/><text x="27.5121%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::repeat (24,827,269 samples, 0.06%)</title><rect x="27.2621%" y="245" width="0.0629%" height="15" fill="rgb(237,140,51)" fg:x="10753820097" fg:w="24827269"/><text x="27.5121%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (17,408,012 samples, 0.04%)</title><rect x="27.2809%" y="229" width="0.0441%" height="15" fill="rgb(236,157,25)" fg:x="10761239354" fg:w="17408012"/><text x="27.5309%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (17,408,012 samples, 0.04%)</title><rect x="27.2809%" y="213" width="0.0441%" height="15" fill="rgb(219,209,0)" fg:x="10761239354" fg:w="17408012"/><text x="27.5309%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (17,408,012 samples, 0.04%)</title><rect x="27.2809%" y="197" width="0.0441%" height="15" fill="rgb(240,116,54)" fg:x="10761239354" fg:w="17408012"/><text x="27.5309%" y="207.50"></text></g><g><title>cfree (32,172,783 samples, 0.08%)</title><rect x="27.3251%" y="341" width="0.0816%" height="15" fill="rgb(216,10,36)" fg:x="10778647366" fg:w="32172783"/><text x="27.5751%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25,521,240 samples, 0.06%)</title><rect x="27.4066%" y="277" width="0.0647%" height="15" fill="rgb(222,72,44)" fg:x="10810820149" fg:w="25521240"/><text x="27.6566%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (25,521,240 samples, 0.06%)</title><rect x="27.4066%" y="261" width="0.0647%" height="15" fill="rgb(232,159,9)" fg:x="10810820149" fg:w="25521240"/><text x="27.6566%" y="271.50"></text></g><g><title>cfree (25,521,240 samples, 0.06%)</title><rect x="27.4066%" y="245" width="0.0647%" height="15" fill="rgb(210,39,32)" fg:x="10810820149" fg:w="25521240"/><text x="27.6566%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32,092,701 samples, 0.08%)</title><rect x="27.4066%" y="341" width="0.0814%" height="15" fill="rgb(216,194,45)" fg:x="10810820149" fg:w="32092701"/><text x="27.6566%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32,092,701 samples, 0.08%)</title><rect x="27.4066%" y="325" width="0.0814%" height="15" fill="rgb(218,18,35)" fg:x="10810820149" fg:w="32092701"/><text x="27.6566%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32,092,701 samples, 0.08%)</title><rect x="27.4066%" y="309" width="0.0814%" height="15" fill="rgb(207,83,51)" fg:x="10810820149" fg:w="32092701"/><text x="27.6566%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (32,092,701 samples, 0.08%)</title><rect x="27.4066%" y="293" width="0.0814%" height="15" fill="rgb(225,63,43)" fg:x="10810820149" fg:w="32092701"/><text x="27.6566%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (6,571,461 samples, 0.02%)</title><rect x="27.4713%" y="277" width="0.0167%" height="15" fill="rgb(207,57,36)" fg:x="10836341389" fg:w="6571461"/><text x="27.7213%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7,037,723 samples, 0.02%)</title><rect x="27.4880%" y="341" width="0.0178%" height="15" fill="rgb(216,99,33)" fg:x="10842912850" fg:w="7037723"/><text x="27.7380%" y="351.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7,037,723 samples, 0.02%)</title><rect x="27.4880%" y="325" width="0.0178%" height="15" fill="rgb(225,42,16)" fg:x="10842912850" fg:w="7037723"/><text x="27.7380%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7,037,723 samples, 0.02%)</title><rect x="27.4880%" y="309" width="0.0178%" height="15" fill="rgb(220,201,45)" fg:x="10842912850" fg:w="7037723"/><text x="27.7380%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (7,037,723 samples, 0.02%)</title><rect x="27.4880%" y="293" width="0.0178%" height="15" fill="rgb(225,33,4)" fg:x="10842912850" fg:w="7037723"/><text x="27.7380%" y="303.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (4,487,557 samples, 0.01%)</title><rect x="27.4945%" y="277" width="0.0114%" height="15" fill="rgb(224,33,50)" fg:x="10845463016" fg:w="4487557"/><text x="27.7445%" y="287.50"></text></g><g><title>core::slice::index::get_noubcheck (4,487,557 samples, 0.01%)</title><rect x="27.4945%" y="261" width="0.0114%" height="15" fill="rgb(246,198,51)" fg:x="10845463016" fg:w="4487557"/><text x="27.7445%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (10,245,659 samples, 0.03%)</title><rect x="27.5058%" y="341" width="0.0260%" height="15" fill="rgb(205,22,4)" fg:x="10849950573" fg:w="10245659"/><text x="27.7558%" y="351.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (10,245,659 samples, 0.03%)</title><rect x="27.5058%" y="325" width="0.0260%" height="15" fill="rgb(206,3,8)" fg:x="10849950573" fg:w="10245659"/><text x="27.7558%" y="335.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (10,245,659 samples, 0.03%)</title><rect x="27.5058%" y="309" width="0.0260%" height="15" fill="rgb(251,23,15)" fg:x="10849950573" fg:w="10245659"/><text x="27.7558%" y="319.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (10,245,659 samples, 0.03%)</title><rect x="27.5058%" y="293" width="0.0260%" height="15" fill="rgb(252,88,28)" fg:x="10849950573" fg:w="10245659"/><text x="27.7558%" y="303.50"></text></g><g><title>server_lib::resp3::get_data_type (25,264,621 samples, 0.06%)</title><rect x="27.5318%" y="341" width="0.0640%" height="15" fill="rgb(212,127,14)" fg:x="10860196232" fg:w="25264621"/><text x="27.7818%" y="351.50"></text></g><g><title>[libc.so.6] (4,116,073 samples, 0.01%)</title><rect x="28.1275%" y="325" width="0.0104%" height="15" fill="rgb(247,145,37)" fg:x="11095166275" fg:w="4116073"/><text x="28.3775%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (9,189,799 samples, 0.02%)</title><rect x="28.1379%" y="325" width="0.0233%" height="15" fill="rgb(209,117,53)" fg:x="11099282348" fg:w="9189799"/><text x="28.3879%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,189,799 samples, 0.02%)</title><rect x="28.1379%" y="309" width="0.0233%" height="15" fill="rgb(212,90,42)" fg:x="11099282348" fg:w="9189799"/><text x="28.3879%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (9,544,340 samples, 0.02%)</title><rect x="28.1612%" y="325" width="0.0242%" height="15" fill="rgb(218,164,37)" fg:x="11108472147" fg:w="9544340"/><text x="28.4112%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (21,309,729 samples, 0.05%)</title><rect x="28.2704%" y="165" width="0.0540%" height="15" fill="rgb(246,65,34)" fg:x="11151542314" fg:w="21309729"/><text x="28.5204%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18,147,985 samples, 0.05%)</title><rect x="28.2784%" y="149" width="0.0460%" height="15" fill="rgb(231,100,33)" fg:x="11154704058" fg:w="18147985"/><text x="28.5284%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (12,843,085 samples, 0.03%)</title><rect x="28.3244%" y="165" width="0.0326%" height="15" fill="rgb(228,126,14)" fg:x="11172852043" fg:w="12843085"/><text x="28.5744%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (371,816,568 samples, 0.94%)</title><rect x="28.2642%" y="213" width="0.9426%" height="15" fill="rgb(215,173,21)" fg:x="11149113317" fg:w="371816568"/><text x="28.5142%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (371,816,568 samples, 0.94%)</title><rect x="28.2642%" y="197" width="0.9426%" height="15" fill="rgb(210,6,40)" fg:x="11149113317" fg:w="371816568"/><text x="28.5142%" y="207.50"></text></g><g><title>alloc::alloc::alloc (371,816,568 samples, 0.94%)</title><rect x="28.2642%" y="181" width="0.9426%" height="15" fill="rgb(212,48,18)" fg:x="11149113317" fg:w="371816568"/><text x="28.5142%" y="191.50"></text></g><g><title>malloc (335,234,757 samples, 0.85%)</title><rect x="28.3570%" y="165" width="0.8499%" height="15" fill="rgb(230,214,11)" fg:x="11185695128" fg:w="335234757"/><text x="28.6070%" y="175.50"></text></g><g><title>[libc.so.6] (141,571,526 samples, 0.36%)</title><rect x="28.8479%" y="149" width="0.3589%" height="15" fill="rgb(254,105,39)" fg:x="11379358359" fg:w="141571526"/><text x="29.0979%" y="159.50"></text></g><g><title>[libc.so.6] (28,875,180 samples, 0.07%)</title><rect x="29.1336%" y="133" width="0.0732%" height="15" fill="rgb(245,158,5)" fg:x="11492054705" fg:w="28875180"/><text x="29.3836%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (394,347,633 samples, 1.00%)</title><rect x="28.2170%" y="277" width="0.9997%" height="15" fill="rgb(249,208,11)" fg:x="11130492727" fg:w="394347633"/><text x="28.4670%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (394,347,633 samples, 1.00%)</title><rect x="28.2170%" y="261" width="0.9997%" height="15" fill="rgb(210,39,28)" fg:x="11130492727" fg:w="394347633"/><text x="28.4670%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (394,347,633 samples, 1.00%)</title><rect x="28.2170%" y="245" width="0.9997%" height="15" fill="rgb(211,56,53)" fg:x="11130492727" fg:w="394347633"/><text x="28.4670%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (394,347,633 samples, 1.00%)</title><rect x="28.2170%" y="229" width="0.9997%" height="15" fill="rgb(226,201,30)" fg:x="11130492727" fg:w="394347633"/><text x="28.4670%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (490,886,242 samples, 1.24%)</title><rect x="28.1854%" y="325" width="1.2445%" height="15" fill="rgb(239,101,34)" fg:x="11118016487" fg:w="490886242"/><text x="28.4354%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (490,886,242 samples, 1.24%)</title><rect x="28.1854%" y="309" width="1.2445%" height="15" fill="rgb(226,209,5)" fg:x="11118016487" fg:w="490886242"/><text x="28.4354%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (490,886,242 samples, 1.24%)</title><rect x="28.1854%" y="293" width="1.2445%" height="15" fill="rgb(250,105,47)" fg:x="11118016487" fg:w="490886242"/><text x="28.4354%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (84,062,369 samples, 0.21%)</title><rect x="29.2168%" y="277" width="0.2131%" height="15" fill="rgb(230,72,3)" fg:x="11524840360" fg:w="84062369"/><text x="29.4668%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (84,062,369 samples, 0.21%)</title><rect x="29.2168%" y="261" width="0.2131%" height="15" fill="rgb(232,218,39)" fg:x="11524840360" fg:w="84062369"/><text x="29.4668%" y="271.50"></text></g><g><title>[libc.so.6] (78,853,806 samples, 0.20%)</title><rect x="29.2300%" y="245" width="0.1999%" height="15" fill="rgb(248,166,6)" fg:x="11530048923" fg:w="78853806"/><text x="29.4800%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8 (84,960,522 samples, 0.22%)</title><rect x="29.4299%" y="325" width="0.2154%" height="15" fill="rgb(247,89,20)" fg:x="11608902729" fg:w="84960522"/><text x="29.6799%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (68,589,111 samples, 0.17%)</title><rect x="29.4714%" y="309" width="0.1739%" height="15" fill="rgb(248,130,54)" fg:x="11625274140" fg:w="68589111"/><text x="29.7214%" y="319.50"></text></g><g><title>core::str::validations::run_utf8_validation (49,019,577 samples, 0.12%)</title><rect x="29.5210%" y="293" width="0.1243%" height="15" fill="rgb(234,196,4)" fg:x="11644843674" fg:w="49019577"/><text x="29.7710%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,527,357 samples, 0.01%)</title><rect x="29.7942%" y="261" width="0.0140%" height="15" fill="rgb(250,143,31)" fg:x="11752618611" fg:w="5527357"/><text x="30.0442%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (10,131,986 samples, 0.03%)</title><rect x="29.8082%" y="261" width="0.0257%" height="15" fill="rgb(211,110,34)" fg:x="11758145968" fg:w="10131986"/><text x="30.0582%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (14,726,852 samples, 0.04%)</title><rect x="29.8997%" y="245" width="0.0373%" height="15" fill="rgb(215,124,48)" fg:x="11794250474" fg:w="14726852"/><text x="30.1497%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14,726,852 samples, 0.04%)</title><rect x="29.8997%" y="229" width="0.0373%" height="15" fill="rgb(216,46,13)" fg:x="11794250474" fg:w="14726852"/><text x="30.1497%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6,575,980 samples, 0.02%)</title><rect x="29.9434%" y="245" width="0.0167%" height="15" fill="rgb(205,184,25)" fg:x="11811466377" fg:w="6575980"/><text x="30.1934%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (117,210,946 samples, 0.30%)</title><rect x="29.8415%" y="261" width="0.2971%" height="15" fill="rgb(228,1,10)" fg:x="11771288179" fg:w="117210946"/><text x="30.0915%" y="271.50"></text></g><g><title>malloc (70,456,768 samples, 0.18%)</title><rect x="29.9601%" y="245" width="0.1786%" height="15" fill="rgb(213,116,27)" fg:x="11818042357" fg:w="70456768"/><text x="30.2101%" y="255.50"></text></g><g><title>[libc.so.6] (5,800,826 samples, 0.01%)</title><rect x="30.1240%" y="229" width="0.0147%" height="15" fill="rgb(241,95,50)" fg:x="11882698299" fg:w="5800826"/><text x="30.3740%" y="239.50"></text></g><g><title>core::cmp::max (7,157,980 samples, 0.02%)</title><rect x="30.1387%" y="261" width="0.0181%" height="15" fill="rgb(238,48,32)" fg:x="11888499125" fg:w="7157980"/><text x="30.3887%" y="271.50"></text></g><g><title>core::cmp::Ord::max (7,157,980 samples, 0.02%)</title><rect x="30.1387%" y="245" width="0.0181%" height="15" fill="rgb(235,113,49)" fg:x="11888499125" fg:w="7157980"/><text x="30.3887%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (189,945,307 samples, 0.48%)</title><rect x="29.6793%" y="309" width="0.4815%" height="15" fill="rgb(205,127,43)" fg:x="11707280113" fg:w="189945307"/><text x="29.9293%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (154,267,628 samples, 0.39%)</title><rect x="29.7697%" y="293" width="0.3911%" height="15" fill="rgb(250,162,2)" fg:x="11742957792" fg:w="154267628"/><text x="30.0197%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (154,267,628 samples, 0.39%)</title><rect x="29.7697%" y="277" width="0.3911%" height="15" fill="rgb(220,13,41)" fg:x="11742957792" fg:w="154267628"/><text x="30.0197%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (207,396,663 samples, 0.53%)</title><rect x="29.6453%" y="325" width="0.5258%" height="15" fill="rgb(249,221,25)" fg:x="11693863251" fg:w="207396663"/><text x="29.8953%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4,034,494 samples, 0.01%)</title><rect x="30.1608%" y="309" width="0.0102%" height="15" fill="rgb(215,208,19)" fg:x="11897225420" fg:w="4034494"/><text x="30.4108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,034,494 samples, 0.01%)</title><rect x="30.1608%" y="293" width="0.0102%" height="15" fill="rgb(236,175,2)" fg:x="11897225420" fg:w="4034494"/><text x="30.4108%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,034,494 samples, 0.01%)</title><rect x="30.1608%" y="277" width="0.0102%" height="15" fill="rgb(241,52,2)" fg:x="11897225420" fg:w="4034494"/><text x="30.4108%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,034,494 samples, 0.01%)</title><rect x="30.1608%" y="261" width="0.0102%" height="15" fill="rgb(248,140,14)" fg:x="11897225420" fg:w="4034494"/><text x="30.4108%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (7,892,247 samples, 0.02%)</title><rect x="30.1710%" y="325" width="0.0200%" height="15" fill="rgb(253,22,42)" fg:x="11901259914" fg:w="7892247"/><text x="30.4210%" y="335.50"></text></g><g><title>cfree (133,663,275 samples, 0.34%)</title><rect x="30.1910%" y="325" width="0.3389%" height="15" fill="rgb(234,61,47)" fg:x="11909152161" fg:w="133663275"/><text x="30.4410%" y="335.50"></text></g><g><title>__rustc::__rust_dealloc (6,507,210 samples, 0.02%)</title><rect x="30.5299%" y="229" width="0.0165%" height="15" fill="rgb(208,226,15)" fg:x="12042815436" fg:w="6507210"/><text x="30.7799%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="325" width="0.3123%" height="15" fill="rgb(217,221,4)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="309" width="0.3123%" height="15" fill="rgb(212,174,34)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="293" width="0.3123%" height="15" fill="rgb(253,83,4)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="277" width="0.3123%" height="15" fill="rgb(250,195,49)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="261" width="0.3123%" height="15" fill="rgb(241,192,25)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (123,192,976 samples, 0.31%)</title><rect x="30.5299%" y="245" width="0.3123%" height="15" fill="rgb(208,124,10)" fg:x="12042815436" fg:w="123192976"/><text x="30.7799%" y="255.50"></text></g><g><title>cfree (116,685,766 samples, 0.30%)</title><rect x="30.5464%" y="229" width="0.2958%" height="15" fill="rgb(222,33,0)" fg:x="12049322646" fg:w="116685766"/><text x="30.7964%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,359,809 samples, 0.02%)</title><rect x="30.8422%" y="325" width="0.0161%" height="15" fill="rgb(234,209,28)" fg:x="12166008412" fg:w="6359809"/><text x="31.0922%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,359,809 samples, 0.02%)</title><rect x="30.8422%" y="309" width="0.0161%" height="15" fill="rgb(224,11,23)" fg:x="12166008412" fg:w="6359809"/><text x="31.0922%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (6,359,809 samples, 0.02%)</title><rect x="30.8422%" y="293" width="0.0161%" height="15" fill="rgb(232,99,1)" fg:x="12166008412" fg:w="6359809"/><text x="31.0922%" y="303.50"></text></g><g><title>server_lib::resp3::parse_request (2,323,104,917 samples, 5.89%)</title><rect x="25.1400%" y="373" width="5.8893%" height="15" fill="rgb(237,95,45)" fg:x="9916736948" fg:w="2323104917"/><text x="25.3900%" y="383.50">server_..</text></g><g><title>server_lib::resp3::parse_arrays (2,242,243,476 samples, 5.68%)</title><rect x="25.3450%" y="357" width="5.6843%" height="15" fill="rgb(208,109,11)" fg:x="9997598389" fg:w="2242243476"/><text x="25.5950%" y="367.50">server_..</text></g><g><title>server_lib::resp3::parse_bulk_strings (1,354,381,012 samples, 3.43%)</title><rect x="27.5959%" y="341" width="3.4335%" height="15" fill="rgb(216,190,48)" fg:x="10885460853" fg:w="1354381012"/><text x="27.8459%" y="351.50">ser..</text></g><g><title>core::str::&lt;impl str&gt;::parse (67,473,644 samples, 0.17%)</title><rect x="30.8583%" y="325" width="0.1711%" height="15" fill="rgb(251,171,36)" fg:x="12172368221" fg:w="67473644"/><text x="31.1083%" y="335.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (67,473,644 samples, 0.17%)</title><rect x="30.8583%" y="309" width="0.1711%" height="15" fill="rgb(230,62,22)" fg:x="12172368221" fg:w="67473644"/><text x="31.1083%" y="319.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (67,473,644 samples, 0.17%)</title><rect x="30.8583%" y="293" width="0.1711%" height="15" fill="rgb(225,114,35)" fg:x="12172368221" fg:w="67473644"/><text x="31.1083%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (67,473,644 samples, 0.17%)</title><rect x="30.8583%" y="277" width="0.1711%" height="15" fill="rgb(215,118,42)" fg:x="12172368221" fg:w="67473644"/><text x="31.1083%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (10,964,913 samples, 0.03%)</title><rect x="31.0016%" y="261" width="0.0278%" height="15" fill="rgb(243,119,21)" fg:x="12228876952" fg:w="10964913"/><text x="31.2516%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (4,382,698 samples, 0.01%)</title><rect x="31.0183%" y="245" width="0.0111%" height="15" fill="rgb(252,177,53)" fg:x="12235459167" fg:w="4382698"/><text x="31.2683%" y="255.50"></text></g><g><title>__send (13,621,618 samples, 0.03%)</title><rect x="31.1268%" y="357" width="0.0345%" height="15" fill="rgb(237,209,29)" fg:x="12278287015" fg:w="13621618"/><text x="31.3768%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,924,917 samples, 0.01%)</title><rect x="31.1614%" y="357" width="0.0125%" height="15" fill="rgb(212,65,23)" fg:x="12291908633" fg:w="4924917"/><text x="31.4114%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,924,917 samples, 0.01%)</title><rect x="31.1614%" y="341" width="0.0125%" height="15" fill="rgb(230,222,46)" fg:x="12291908633" fg:w="4924917"/><text x="31.4114%" y="351.50"></text></g><g><title>[libc.so.6] (5,070,480 samples, 0.01%)</title><rect x="31.2973%" y="325" width="0.0129%" height="15" fill="rgb(215,135,32)" fg:x="12345546303" fg:w="5070480"/><text x="31.5473%" y="335.50"></text></g><g><title>__send (15,362,737,256 samples, 38.95%)</title><rect x="31.3102%" y="325" width="38.9463%" height="15" fill="rgb(246,101,22)" fg:x="12350616783" fg:w="15362737256"/><text x="31.5602%" y="335.50">__send</text></g><g><title>[libc.so.6] (15,351,732,803 samples, 38.92%)</title><rect x="31.3381%" y="309" width="38.9184%" height="15" fill="rgb(206,107,13)" fg:x="12361621236" fg:w="15351732803"/><text x="31.5881%" y="319.50">[libc.so.6]</text></g><g><title>[libc.so.6] (15,333,151,360 samples, 38.87%)</title><rect x="31.3852%" y="293" width="38.8713%" height="15" fill="rgb(250,100,44)" fg:x="12380202679" fg:w="15333151360"/><text x="31.6352%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (15,242,556,018 samples, 38.64%)</title><rect x="31.6149%" y="277" width="38.6416%" height="15" fill="rgb(231,147,38)" fg:x="12470798021" fg:w="15242556018"/><text x="31.8649%" y="287.50">[libc.so.6]</text></g><g><title>std::io::Write::write_all (15,495,209,694 samples, 39.28%)</title><rect x="31.0294%" y="373" width="39.2821%" height="15" fill="rgb(229,8,40)" fg:x="12239841865" fg:w="15495209694"/><text x="31.2794%" y="383.50">std::io::Write::write_all</text></g><g><title>std::net::udp::UdpSocket::send (15,438,218,009 samples, 39.14%)</title><rect x="31.1738%" y="357" width="39.1376%" height="15" fill="rgb(221,135,30)" fg:x="12296833550" fg:w="15438218009"/><text x="31.4238%" y="367.50">std::net::udp::UdpSocket::send</text></g><g><title>std::sys::net::connection::socket::UdpSocket::send (15,418,822,383 samples, 39.09%)</title><rect x="31.2230%" y="341" width="39.0884%" height="15" fill="rgb(249,193,18)" fg:x="12316229176" fg:w="15418822383"/><text x="31.4730%" y="351.50">std::sys::net::connection::socket::UdpSocket::send</text></g><g><title>std::sys::pal::unix::cvt (21,697,520 samples, 0.06%)</title><rect x="70.2565%" y="325" width="0.0550%" height="15" fill="rgb(209,133,39)" fg:x="27713354039" fg:w="21697520"/><text x="70.5065%" y="335.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (15,303,510 samples, 0.04%)</title><rect x="70.2727%" y="309" width="0.0388%" height="15" fill="rgb(232,100,14)" fg:x="27719748049" fg:w="15303510"/><text x="70.5227%" y="319.50"></text></g><g><title>[libc.so.6] (5,343,092 samples, 0.01%)</title><rect x="70.3328%" y="325" width="0.0135%" height="15" fill="rgb(224,185,1)" fg:x="27743469550" fg:w="5343092"/><text x="70.5828%" y="335.50"></text></g><g><title>recv (11,509,791,776 samples, 29.18%)</title><rect x="70.3463%" y="325" width="29.1786%" height="15" fill="rgb(223,139,8)" fg:x="27748812642" fg:w="11509791776"/><text x="70.5963%" y="335.50">recv</text></g><g><title>[libc.so.6] (11,496,231,557 samples, 29.14%)</title><rect x="70.3807%" y="309" width="29.1442%" height="15" fill="rgb(232,213,38)" fg:x="27762372861" fg:w="11496231557"/><text x="70.6307%" y="319.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,457,007,553 samples, 29.04%)</title><rect x="70.4802%" y="293" width="29.0448%" height="15" fill="rgb(207,94,22)" fg:x="27801596865" fg:w="11457007553"/><text x="70.7302%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (11,343,006,117 samples, 28.76%)</title><rect x="70.7692%" y="277" width="28.7558%" height="15" fill="rgb(219,183,54)" fg:x="27915598301" fg:w="11343006117"/><text x="71.0192%" y="287.50">[libc.so.6]</text></g><g><title>server::handle_client (37,588,720,294 samples, 95.29%)</title><rect x="4.3194%" y="389" width="95.2916%" height="15" fill="rgb(216,185,54)" fg:x="1703817430" fg:w="37588720294"/><text x="4.5694%" y="399.50">server::handle_client</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::recv (11,557,486,165 samples, 29.30%)</title><rect x="70.3115%" y="373" width="29.2995%" height="15" fill="rgb(254,217,39)" fg:x="27735051559" fg:w="11557486165"/><text x="70.5615%" y="383.50">std::os::unix::net::datagram::UnixDatagram::recv</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (11,555,486,824 samples, 29.29%)</title><rect x="70.3165%" y="357" width="29.2945%" height="15" fill="rgb(240,178,23)" fg:x="27737050900" fg:w="11555486824"/><text x="70.5665%" y="367.50">std::sys::net::connection::socket::unix::Socket..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (11,555,486,824 samples, 29.29%)</title><rect x="70.3165%" y="341" width="29.2945%" height="15" fill="rgb(218,11,47)" fg:x="27737050900" fg:w="11555486824"/><text x="70.5665%" y="351.50">std::sys::net::connection::socket::unix::Socket..</text></g><g><title>std::sys::pal::unix::cvt (33,933,306 samples, 0.09%)</title><rect x="99.5250%" y="325" width="0.0860%" height="15" fill="rgb(218,51,51)" fg:x="39258604418" fg:w="33933306"/><text x="99.7750%" y="335.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (33,933,306 samples, 0.09%)</title><rect x="99.5250%" y="309" width="0.0860%" height="15" fill="rgb(238,126,27)" fg:x="39258604418" fg:w="33933306"/><text x="99.7750%" y="319.50"></text></g><g><title>alloc::string::String::push_str (6,048,844 samples, 0.02%)</title><rect x="99.6329%" y="373" width="0.0153%" height="15" fill="rgb(249,202,22)" fg:x="39301193832" fg:w="6048844"/><text x="99.8829%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6,048,844 samples, 0.02%)</title><rect x="99.6329%" y="357" width="0.0153%" height="15" fill="rgb(254,195,49)" fg:x="39301193832" fg:w="6048844"/><text x="99.8829%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6,048,844 samples, 0.02%)</title><rect x="99.6329%" y="341" width="0.0153%" height="15" fill="rgb(208,123,14)" fg:x="39301193832" fg:w="6048844"/><text x="99.8829%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6,048,844 samples, 0.02%)</title><rect x="99.6329%" y="325" width="0.0153%" height="15" fill="rgb(224,200,8)" fg:x="39301193832" fg:w="6048844"/><text x="99.8829%" y="335.50"></text></g><g><title>server_lib::resp3::bulk_string_response (24,349,508 samples, 0.06%)</title><rect x="99.6110%" y="389" width="0.0617%" height="15" fill="rgb(217,61,36)" fg:x="39292537724" fg:w="24349508"/><text x="99.8610%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="373" width="0.0245%" height="15" fill="rgb(206,35,45)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="357" width="0.0245%" height="15" fill="rgb(217,65,33)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="341" width="0.0245%" height="15" fill="rgb(222,158,48)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="325" width="0.0245%" height="15" fill="rgb(254,2,54)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="309" width="0.0245%" height="15" fill="rgb(250,143,38)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="293" width="0.0245%" height="15" fill="rgb(248,25,0)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (9,644,556 samples, 0.02%)</title><rect x="99.6483%" y="277" width="0.0245%" height="15" fill="rgb(206,152,27)" fg:x="39307242676" fg:w="9644556"/><text x="99.8983%" y="287.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (23,436,499 samples, 0.06%)</title><rect x="99.6727%" y="389" width="0.0594%" height="15" fill="rgb(240,77,30)" fg:x="39316887232" fg:w="23436499"/><text x="99.9227%" y="399.50"></text></g><g><title>server_lib::storage::Storage::get_entry (21,159,452 samples, 0.05%)</title><rect x="99.7393%" y="389" width="0.0536%" height="15" fill="rgb(231,5,3)" fg:x="39343144122" fg:w="21159452"/><text x="99.9893%" y="399.50"></text></g><g><title>server_lib::storage::Storage::insert_entry (21,758,340 samples, 0.06%)</title><rect x="99.7929%" y="389" width="0.0552%" height="15" fill="rgb(207,226,32)" fg:x="39364303574" fg:w="21758340"/><text x="100.0429%" y="399.50"></text></g><g><title>std::io::Write::write_all (33,758,897 samples, 0.09%)</title><rect x="99.8481%" y="389" width="0.0856%" height="15" fill="rgb(222,207,47)" fg:x="39386061914" fg:w="33758897"/><text x="100.0981%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (10,102,048 samples, 0.03%)</title><rect x="99.9393%" y="389" width="0.0256%" height="15" fill="rgb(229,115,45)" fg:x="39422059906" fg:w="10102048"/><text x="100.1893%" y="399.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (4,527,978 samples, 0.01%)</title><rect x="99.9649%" y="389" width="0.0115%" height="15" fill="rgb(224,191,6)" fg:x="39432161954" fg:w="4527978"/><text x="100.2149%" y="399.50"></text></g><g><title>std::time::SystemTime::now (7,602,513 samples, 0.02%)</title><rect x="99.9764%" y="389" width="0.0193%" height="15" fill="rgb(230,227,24)" fg:x="39436689932" fg:w="7602513"/><text x="100.2264%" y="399.50"></text></g><g><title>all (39,445,991,774 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(228,80,19)" fg:x="0" fg:w="39445991774"/><text x="0.2500%" y="431.50"></text></g><g><title>server (39,445,991,774 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(247,229,0)" fg:x="0" fg:w="39445991774"/><text x="0.2500%" y="415.50">server</text></g></svg></svg>