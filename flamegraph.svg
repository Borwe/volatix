<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="37697179070"><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (20,727,052 samples, 0.05%)</title><rect x="0.0000%" y="437" width="0.0550%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="20727052"/><text x="0.2500%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5,427,242 samples, 0.01%)</title><rect x="0.0406%" y="421" width="0.0144%" height="15" fill="rgb(217,0,24)" fg:x="15299810" fg:w="5427242"/><text x="0.2906%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,427,242 samples, 0.01%)</title><rect x="0.0406%" y="405" width="0.0144%" height="15" fill="rgb(221,193,54)" fg:x="15299810" fg:w="5427242"/><text x="0.2906%" y="415.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (17,723,193 samples, 0.05%)</title><rect x="0.0550%" y="437" width="0.0470%" height="15" fill="rgb(248,212,6)" fg:x="20727052" fg:w="17723193"/><text x="0.3050%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10,961,013 samples, 0.03%)</title><rect x="0.1020%" y="437" width="0.0291%" height="15" fill="rgb(208,68,35)" fg:x="38450245" fg:w="10961013"/><text x="0.3520%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6,854,258 samples, 0.02%)</title><rect x="0.1311%" y="437" width="0.0182%" height="15" fill="rgb(232,128,0)" fg:x="49411258" fg:w="6854258"/><text x="0.3811%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="373" width="0.1033%" height="15" fill="rgb(207,160,47)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="357" width="0.1033%" height="15" fill="rgb(228,23,34)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="341" width="0.1033%" height="15" fill="rgb(218,30,26)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="325" width="0.1033%" height="15" fill="rgb(220,122,19)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="309" width="0.1033%" height="15" fill="rgb(250,228,42)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="319.50"></text></g><g><title>alloc::alloc::alloc (38,931,627 samples, 0.10%)</title><rect x="0.1705%" y="293" width="0.1033%" height="15" fill="rgb(240,193,28)" fg:x="64264098" fg:w="38931627"/><text x="0.4205%" y="303.50"></text></g><g><title>malloc (33,927,530 samples, 0.09%)</title><rect x="0.1837%" y="277" width="0.0900%" height="15" fill="rgb(216,20,37)" fg:x="69268195" fg:w="33927530"/><text x="0.4337%" y="287.50"></text></g><g><title>[libc.so.6] (21,267,677 samples, 0.06%)</title><rect x="0.2173%" y="261" width="0.0564%" height="15" fill="rgb(206,188,39)" fg:x="81928048" fg:w="21267677"/><text x="0.4673%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (90,379,263 samples, 0.24%)</title><rect x="0.1705%" y="389" width="0.2398%" height="15" fill="rgb(217,207,13)" fg:x="64264098" fg:w="90379263"/><text x="0.4205%" y="399.50"></text></g><g><title>core::ptr::write (51,447,636 samples, 0.14%)</title><rect x="0.2737%" y="373" width="0.1365%" height="15" fill="rgb(231,73,38)" fg:x="103195725" fg:w="51447636"/><text x="0.5237%" y="383.50"></text></g><g><title>[libc.so.6] (51,447,636 samples, 0.14%)</title><rect x="0.2737%" y="357" width="0.1365%" height="15" fill="rgb(225,20,46)" fg:x="103195725" fg:w="51447636"/><text x="0.5237%" y="367.50"></text></g><g><title>[libc.so.6] (642,602,625 samples, 1.70%)</title><rect x="0.4102%" y="389" width="1.7046%" height="15" fill="rgb(210,31,41)" fg:x="154643361" fg:w="642602625"/><text x="0.6602%" y="399.50"></text></g><g><title>[libc.so.6] (1,459,790,558 samples, 3.87%)</title><rect x="2.1384%" y="229" width="3.8724%" height="15" fill="rgb(221,200,47)" fg:x="806103605" fg:w="1459790558"/><text x="2.3884%" y="239.50">[lib..</text></g><g><title>__libc_calloc (81,807,117 samples, 0.22%)</title><rect x="6.0108%" y="229" width="0.2170%" height="15" fill="rgb(226,26,5)" fg:x="2265894163" fg:w="81807117"/><text x="6.2608%" y="239.50"></text></g><g><title>[libc.so.6] (38,863,061 samples, 0.10%)</title><rect x="6.1247%" y="213" width="0.1031%" height="15" fill="rgb(249,33,26)" fg:x="2308838219" fg:w="38863061"/><text x="6.3747%" y="223.50"></text></g><g><title>[libc.so.6] (20,029,590 samples, 0.05%)</title><rect x="6.1747%" y="197" width="0.0531%" height="15" fill="rgb(235,183,28)" fg:x="2327671690" fg:w="20029590"/><text x="6.4247%" y="207.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,552,300,766 samples, 4.12%)</title><rect x="2.1231%" y="341" width="4.1178%" height="15" fill="rgb(221,5,38)" fg:x="800366874" fg:w="1552300766"/><text x="2.3731%" y="351.50">&lt;T a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,552,300,766 samples, 4.12%)</title><rect x="2.1231%" y="325" width="4.1178%" height="15" fill="rgb(247,18,42)" fg:x="800366874" fg:w="1552300766"/><text x="2.3731%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,552,300,766 samples, 4.12%)</title><rect x="2.1231%" y="309" width="4.1178%" height="15" fill="rgb(241,131,45)" fg:x="800366874" fg:w="1552300766"/><text x="2.3731%" y="319.50">allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,552,300,766 samples, 4.12%)</title><rect x="2.1231%" y="293" width="4.1178%" height="15" fill="rgb(249,31,29)" fg:x="800366874" fg:w="1552300766"/><text x="2.3731%" y="303.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,546,564,035 samples, 4.10%)</title><rect x="2.1384%" y="277" width="4.1026%" height="15" fill="rgb(225,111,53)" fg:x="806103605" fg:w="1546564035"/><text x="2.3884%" y="287.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,546,564,035 samples, 4.10%)</title><rect x="2.1384%" y="261" width="4.1026%" height="15" fill="rgb(238,160,17)" fg:x="806103605" fg:w="1546564035"/><text x="2.3884%" y="271.50">allo..</text></g><g><title>alloc::alloc::alloc_zeroed (1,546,564,035 samples, 4.10%)</title><rect x="2.1384%" y="245" width="4.1026%" height="15" fill="rgb(214,148,48)" fg:x="806103605" fg:w="1546564035"/><text x="2.3884%" y="255.50">allo..</text></g><g><title>[libc.so.6] (315,894,144 samples, 0.84%)</title><rect x="6.2410%" y="229" width="0.8380%" height="15" fill="rgb(232,36,49)" fg:x="2352667640" fg:w="315894144"/><text x="6.4910%" y="239.50"></text></g><g><title>__libc_calloc (45,721,005 samples, 0.12%)</title><rect x="7.0789%" y="229" width="0.1213%" height="15" fill="rgb(209,103,24)" fg:x="2668561784" fg:w="45721005"/><text x="7.3289%" y="239.50"></text></g><g><title>[libc.so.6] (32,662,232 samples, 0.09%)</title><rect x="7.1136%" y="213" width="0.0866%" height="15" fill="rgb(229,88,8)" fg:x="2681620557" fg:w="32662232"/><text x="7.3636%" y="223.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::new (1,923,094,939 samples, 5.10%)</title><rect x="2.1149%" y="389" width="5.1014%" height="15" fill="rgb(213,181,19)" fg:x="797245986" fg:w="1923094939"/><text x="2.3649%" y="399.50">miniz_..</text></g><g><title>&lt;miniz_oxide::deflate::buffer::HashBuffers as core::default::Default&gt;::default (1,919,974,051 samples, 5.09%)</title><rect x="2.1231%" y="373" width="5.0932%" height="15" fill="rgb(254,191,54)" fg:x="800366874" fg:w="1919974051"/><text x="2.3731%" y="383.50">&lt;miniz..</text></g><g><title>alloc::vec::from_elem (1,919,974,051 samples, 5.09%)</title><rect x="2.1231%" y="357" width="5.0932%" height="15" fill="rgb(241,83,37)" fg:x="800366874" fg:w="1919974051"/><text x="2.3731%" y="367.50">alloc:..</text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="341" width="0.9753%" height="15" fill="rgb(233,36,39)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="325" width="0.9753%" height="15" fill="rgb(226,3,54)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="309" width="0.9753%" height="15" fill="rgb(245,192,40)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="293" width="0.9753%" height="15" fill="rgb(238,167,29)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="277" width="0.9753%" height="15" fill="rgb(232,182,51)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="261" width="0.9753%" height="15" fill="rgb(231,60,39)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (367,673,285 samples, 0.98%)</title><rect x="6.2410%" y="245" width="0.9753%" height="15" fill="rgb(208,69,12)" fg:x="2352667640" fg:w="367673285"/><text x="6.4910%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (46,995,707 samples, 0.12%)</title><rect x="7.2163%" y="357" width="0.1247%" height="15" fill="rgb(235,93,37)" fg:x="2720340925" fg:w="46995707"/><text x="7.4663%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (46,995,707 samples, 0.12%)</title><rect x="7.2163%" y="341" width="0.1247%" height="15" fill="rgb(213,116,39)" fg:x="2720340925" fg:w="46995707"/><text x="7.4663%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (44,843,904 samples, 0.12%)</title><rect x="7.2220%" y="325" width="0.1190%" height="15" fill="rgb(222,207,29)" fg:x="2722492728" fg:w="44843904"/><text x="7.4720%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44,843,904 samples, 0.12%)</title><rect x="7.2220%" y="309" width="0.1190%" height="15" fill="rgb(206,96,30)" fg:x="2722492728" fg:w="44843904"/><text x="7.4720%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44,843,904 samples, 0.12%)</title><rect x="7.2220%" y="293" width="0.1190%" height="15" fill="rgb(218,138,4)" fg:x="2722492728" fg:w="44843904"/><text x="7.4720%" y="303.50"></text></g><g><title>alloc::alloc::alloc (44,843,904 samples, 0.12%)</title><rect x="7.2220%" y="277" width="0.1190%" height="15" fill="rgb(250,191,14)" fg:x="2722492728" fg:w="44843904"/><text x="7.4720%" y="287.50"></text></g><g><title>malloc (44,843,904 samples, 0.12%)</title><rect x="7.2220%" y="261" width="0.1190%" height="15" fill="rgb(239,60,40)" fg:x="2722492728" fg:w="44843904"/><text x="7.4720%" y="271.50"></text></g><g><title>[libc.so.6] (37,033,652 samples, 0.10%)</title><rect x="7.2427%" y="245" width="0.0982%" height="15" fill="rgb(206,27,48)" fg:x="2730302980" fg:w="37033652"/><text x="7.4927%" y="255.50"></text></g><g><title>[libc.so.6] (9,783,742 samples, 0.03%)</title><rect x="7.3150%" y="229" width="0.0260%" height="15" fill="rgb(225,35,8)" fg:x="2757552890" fg:w="9783742"/><text x="7.5650%" y="239.50"></text></g><g><title>&lt;miniz_oxide::deflate::core::CompressorOxide as core::default::Default&gt;::default (3,561,192,549 samples, 9.45%)</title><rect x="0.1541%" y="405" width="9.4468%" height="15" fill="rgb(250,213,24)" fg:x="58099722" fg:w="3561192549"/><text x="0.4041%" y="415.50">&lt;miniz_oxide::..</text></g><g><title>miniz_oxide::deflate::core::ParamsOxide::new (898,951,346 samples, 2.38%)</title><rect x="7.2163%" y="389" width="2.3847%" height="15" fill="rgb(247,123,22)" fg:x="2720340925" fg:w="898951346"/><text x="7.4663%" y="399.50">mi..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (898,951,346 samples, 2.38%)</title><rect x="7.2163%" y="373" width="2.3847%" height="15" fill="rgb(231,138,38)" fg:x="2720340925" fg:w="898951346"/><text x="7.4663%" y="383.50">&lt;a..</text></g><g><title>core::ptr::write (851,955,639 samples, 2.26%)</title><rect x="7.3410%" y="357" width="2.2600%" height="15" fill="rgb(231,145,46)" fg:x="2767336632" fg:w="851955639"/><text x="7.5910%" y="367.50">c..</text></g><g><title>[libc.so.6] (851,955,639 samples, 2.26%)</title><rect x="7.3410%" y="341" width="2.2600%" height="15" fill="rgb(251,118,11)" fg:x="2767336632" fg:w="851955639"/><text x="7.5910%" y="351.50">[..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (114,105,177 samples, 0.30%)</title><rect x="9.6010%" y="405" width="0.3027%" height="15" fill="rgb(217,147,25)" fg:x="3619292271" fg:w="114105177"/><text x="9.8510%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (114,105,177 samples, 0.30%)</title><rect x="9.6010%" y="389" width="0.3027%" height="15" fill="rgb(247,81,37)" fg:x="3619292271" fg:w="114105177"/><text x="9.8510%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (114,105,177 samples, 0.30%)</title><rect x="9.6010%" y="373" width="0.3027%" height="15" fill="rgb(209,12,38)" fg:x="3619292271" fg:w="114105177"/><text x="9.8510%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (114,105,177 samples, 0.30%)</title><rect x="9.6010%" y="357" width="0.3027%" height="15" fill="rgb(227,1,9)" fg:x="3619292271" fg:w="114105177"/><text x="9.8510%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (114,105,177 samples, 0.30%)</title><rect x="9.6010%" y="341" width="0.3027%" height="15" fill="rgb(248,47,43)" fg:x="3619292271" fg:w="114105177"/><text x="9.8510%" y="351.50"></text></g><g><title>alloc::alloc::alloc (112,102,997 samples, 0.30%)</title><rect x="9.6063%" y="325" width="0.2974%" height="15" fill="rgb(221,10,30)" fg:x="3621294451" fg:w="112102997"/><text x="9.8563%" y="335.50"></text></g><g><title>malloc (107,508,597 samples, 0.29%)</title><rect x="9.6185%" y="309" width="0.2852%" height="15" fill="rgb(210,229,1)" fg:x="3625888851" fg:w="107508597"/><text x="9.8685%" y="319.50"></text></g><g><title>[libc.so.6] (95,381,966 samples, 0.25%)</title><rect x="9.6506%" y="293" width="0.2530%" height="15" fill="rgb(222,148,37)" fg:x="3638015482" fg:w="95381966"/><text x="9.9006%" y="303.50"></text></g><g><title>[libc.so.6] (24,968,070 samples, 0.07%)</title><rect x="9.8374%" y="277" width="0.0662%" height="15" fill="rgb(234,67,33)" fg:x="3708429378" fg:w="24968070"/><text x="10.0874%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (4,924,509,330 samples, 13.06%)</title><rect x="0.1541%" y="421" width="13.0633%" height="15" fill="rgb(247,98,35)" fg:x="58099722" fg:w="4924509330"/><text x="0.4041%" y="431.50">&lt;alloc::boxed::Box&lt;T..</text></g><g><title>core::ptr::write (1,249,211,604 samples, 3.31%)</title><rect x="9.9037%" y="405" width="3.3138%" height="15" fill="rgb(247,138,52)" fg:x="3733397448" fg:w="1249211604"/><text x="10.1537%" y="415.50">cor..</text></g><g><title>[libc.so.6] (1,249,211,604 samples, 3.31%)</title><rect x="9.9037%" y="389" width="3.3138%" height="15" fill="rgb(213,79,30)" fg:x="3733397448" fg:w="1249211604"/><text x="10.1537%" y="399.50">[li..</text></g><g><title>miniz_oxide::deflate::core::ParamsOxide::update_flags (4,312,258 samples, 0.01%)</title><rect x="13.2175%" y="405" width="0.0114%" height="15" fill="rgb(246,177,23)" fg:x="4982609052" fg:w="4312258"/><text x="13.4675%" y="415.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (4,945,151,393 samples, 13.12%)</title><rect x="0.1541%" y="437" width="13.1181%" height="15" fill="rgb(230,62,27)" fg:x="58099722" fg:w="4945151393"/><text x="0.4041%" y="447.50">&lt;flate2::ffi::rust::..</text></g><g><title>miniz_oxide::deflate::core::CompressorOxide::set_format_and_level (20,642,063 samples, 0.05%)</title><rect x="13.2175%" y="421" width="0.0548%" height="15" fill="rgb(216,154,8)" fg:x="4982609052" fg:w="20642063"/><text x="13.4675%" y="431.50"></text></g><g><title>miniz_oxide::deflate::core::create_comp_flags_from_zip_params (16,329,805 samples, 0.04%)</title><rect x="13.2289%" y="405" width="0.0433%" height="15" fill="rgb(244,35,45)" fg:x="4986921310" fg:w="16329805"/><text x="13.4789%" y="415.50"></text></g><g><title>&lt;miniz_oxide::deflate::buffer::HashBuffers as core::default::Default&gt;::default (9,159,934 samples, 0.02%)</title><rect x="13.2814%" y="437" width="0.0243%" height="15" fill="rgb(251,115,12)" fg:x="5006724324" fg:w="9159934"/><text x="13.5314%" y="447.50"></text></g><g><title>&lt;miniz_oxide::deflate::core::CompressorOxide as core::default::Default&gt;::default (7,910,366 samples, 0.02%)</title><rect x="13.3057%" y="437" width="0.0210%" height="15" fill="rgb(240,54,50)" fg:x="5015884258" fg:w="7910366"/><text x="13.5557%" y="447.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (10,267,006 samples, 0.03%)</title><rect x="13.3267%" y="437" width="0.0272%" height="15" fill="rgb(233,84,52)" fg:x="5023794624" fg:w="10267006"/><text x="13.5767%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (6,211,392 samples, 0.02%)</title><rect x="13.3375%" y="421" width="0.0165%" height="15" fill="rgb(207,117,47)" fg:x="5027850238" fg:w="6211392"/><text x="13.5875%" y="431.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (9,827,259 samples, 0.03%)</title><rect x="13.3539%" y="437" width="0.0261%" height="15" fill="rgb(249,43,39)" fg:x="5034061630" fg:w="9827259"/><text x="13.6039%" y="447.50"></text></g><g><title>[libc.so.6] (115,905,614 samples, 0.31%)</title><rect x="13.3827%" y="437" width="0.3075%" height="15" fill="rgb(209,38,44)" fg:x="5044891897" fg:w="115905614"/><text x="13.6327%" y="447.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (15,357,015 samples, 0.04%)</title><rect x="13.6901%" y="421" width="0.0407%" height="15" fill="rgb(236,212,23)" fg:x="5160797511" fg:w="15357015"/><text x="13.9401%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="405" width="0.0167%" height="15" fill="rgb(242,79,21)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="389" width="0.0167%" height="15" fill="rgb(211,96,35)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="373" width="0.0167%" height="15" fill="rgb(253,215,40)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="357" width="0.0167%" height="15" fill="rgb(211,81,21)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="341" width="0.0167%" height="15" fill="rgb(208,190,38)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="325" width="0.0167%" height="15" fill="rgb(235,213,38)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (6,311,262 samples, 0.02%)</title><rect x="13.7999%" y="309" width="0.0167%" height="15" fill="rgb(237,122,38)" fg:x="5202178833" fg:w="6311262"/><text x="14.0499%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (5,586,546 samples, 0.01%)</title><rect x="13.8167%" y="405" width="0.0148%" height="15" fill="rgb(244,218,35)" fg:x="5208490095" fg:w="5586546"/><text x="14.0667%" y="415.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (5,586,546 samples, 0.01%)</title><rect x="13.8167%" y="389" width="0.0148%" height="15" fill="rgb(240,68,47)" fg:x="5208490095" fg:w="5586546"/><text x="14.0667%" y="399.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (5,586,546 samples, 0.01%)</title><rect x="13.8167%" y="373" width="0.0148%" height="15" fill="rgb(210,16,53)" fg:x="5208490095" fg:w="5586546"/><text x="14.0667%" y="383.50"></text></g><g><title>server::process_request (41,594,436 samples, 0.11%)</title><rect x="13.7390%" y="421" width="0.1103%" height="15" fill="rgb(235,124,12)" fg:x="5179210373" fg:w="41594436"/><text x="13.9890%" y="431.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (6,728,168 samples, 0.02%)</title><rect x="13.8315%" y="405" width="0.0178%" height="15" fill="rgb(224,169,11)" fg:x="5214076641" fg:w="6728168"/><text x="14.0815%" y="415.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (6,728,168 samples, 0.02%)</title><rect x="13.8315%" y="389" width="0.0178%" height="15" fill="rgb(250,166,2)" fg:x="5214076641" fg:w="6728168"/><text x="14.0815%" y="399.50"></text></g><g><title>server_lib::resp3::parse_arrays (25,803,076 samples, 0.07%)</title><rect x="13.8493%" y="421" width="0.0684%" height="15" fill="rgb(242,216,29)" fg:x="5220804809" fg:w="25803076"/><text x="14.0993%" y="431.50"></text></g><g><title>server_lib::resp3::parse_request (15,009,581 samples, 0.04%)</title><rect x="13.9178%" y="421" width="0.0398%" height="15" fill="rgb(230,116,27)" fg:x="5246607885" fg:w="15009581"/><text x="14.1678%" y="431.50"></text></g><g><title>[server] (102,903,235 samples, 0.27%)</title><rect x="13.6901%" y="437" width="0.2730%" height="15" fill="rgb(228,99,48)" fg:x="5160797511" fg:w="102903235"/><text x="13.9401%" y="447.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (17,182,774 samples, 0.05%)</title><rect x="13.9631%" y="421" width="0.0456%" height="15" fill="rgb(253,11,6)" fg:x="5263700746" fg:w="17182774"/><text x="14.2131%" y="431.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (7,459,746 samples, 0.02%)</title><rect x="14.0087%" y="421" width="0.0198%" height="15" fill="rgb(247,143,39)" fg:x="5280883520" fg:w="7459746"/><text x="14.2587%" y="431.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (7,527,496 samples, 0.02%)</title><rect x="14.0285%" y="421" width="0.0200%" height="15" fill="rgb(236,97,10)" fg:x="5288343266" fg:w="7527496"/><text x="14.2785%" y="431.50"></text></g><g><title>[libc.so.6] (6,906,411 samples, 0.02%)</title><rect x="14.0485%" y="421" width="0.0183%" height="15" fill="rgb(233,208,19)" fg:x="5295870762" fg:w="6906411"/><text x="14.2985%" y="431.50"></text></g><g><title>__rustc::__rdl_dealloc (7,092,925 samples, 0.02%)</title><rect x="14.0668%" y="421" width="0.0188%" height="15" fill="rgb(216,164,2)" fg:x="5302777173" fg:w="7092925"/><text x="14.3168%" y="431.50"></text></g><g><title>adler2::Adler32::write_slice (4,537,326 samples, 0.01%)</title><rect x="14.0925%" y="421" width="0.0120%" height="15" fill="rgb(220,129,5)" fg:x="5312461228" fg:w="4537326"/><text x="14.3425%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20,107,730 samples, 0.05%)</title><rect x="14.1045%" y="421" width="0.0533%" height="15" fill="rgb(242,17,10)" fg:x="5316998554" fg:w="20107730"/><text x="14.3545%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (14,419,409 samples, 0.04%)</title><rect x="14.1578%" y="421" width="0.0383%" height="15" fill="rgb(242,107,0)" fg:x="5337106284" fg:w="14419409"/><text x="14.4078%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (14,419,409 samples, 0.04%)</title><rect x="14.1578%" y="405" width="0.0383%" height="15" fill="rgb(251,28,31)" fg:x="5337106284" fg:w="14419409"/><text x="14.4078%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (16,298,017 samples, 0.04%)</title><rect x="14.1961%" y="421" width="0.0432%" height="15" fill="rgb(233,223,10)" fg:x="5351525693" fg:w="16298017"/><text x="14.4461%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,922,865 samples, 0.01%)</title><rect x="14.2263%" y="405" width="0.0131%" height="15" fill="rgb(215,21,27)" fg:x="5362900845" fg:w="4922865"/><text x="14.4763%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,922,865 samples, 0.01%)</title><rect x="14.2263%" y="389" width="0.0131%" height="15" fill="rgb(232,23,21)" fg:x="5362900845" fg:w="4922865"/><text x="14.4763%" y="399.50"></text></g><g><title>alloc::alloc::realloc (4,922,865 samples, 0.01%)</title><rect x="14.2263%" y="373" width="0.0131%" height="15" fill="rgb(244,5,23)" fg:x="5362900845" fg:w="4922865"/><text x="14.4763%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (5,191,850 samples, 0.01%)</title><rect x="14.2393%" y="421" width="0.0138%" height="15" fill="rgb(226,81,46)" fg:x="5367823710" fg:w="5191850"/><text x="14.4893%" y="431.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (8,698,003 samples, 0.02%)</title><rect x="14.2531%" y="421" width="0.0231%" height="15" fill="rgb(247,70,30)" fg:x="5373015560" fg:w="8698003"/><text x="14.5031%" y="431.50"></text></g><g><title>cfree (12,378,586 samples, 0.03%)</title><rect x="14.2762%" y="421" width="0.0328%" height="15" fill="rgb(212,68,19)" fg:x="5381713563" fg:w="12378586"/><text x="14.5262%" y="431.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (5,553,143 samples, 0.01%)</title><rect x="14.3335%" y="421" width="0.0147%" height="15" fill="rgb(240,187,13)" fg:x="5403326130" fg:w="5553143"/><text x="14.5835%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (6,247,313 samples, 0.02%)</title><rect x="14.3482%" y="421" width="0.0166%" height="15" fill="rgb(223,113,26)" fg:x="5408879273" fg:w="6247313"/><text x="14.5982%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,384,813 samples, 0.02%)</title><rect x="14.3689%" y="421" width="0.0196%" height="15" fill="rgb(206,192,2)" fg:x="5416658803" fg:w="7384813"/><text x="14.6189%" y="431.50"></text></g><g><title>malloc (19,195,247 samples, 0.05%)</title><rect x="14.3885%" y="421" width="0.0509%" height="15" fill="rgb(241,108,4)" fg:x="5424043616" fg:w="19195247"/><text x="14.6385%" y="431.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (9,561,163 samples, 0.03%)</title><rect x="14.4394%" y="421" width="0.0254%" height="15" fill="rgb(247,173,49)" fg:x="5443238863" fg:w="9561163"/><text x="14.6894%" y="431.50"></text></g><g><title>miniz_oxide::deflate::core::flush_output_buffer (4,209,908 samples, 0.01%)</title><rect x="14.4647%" y="421" width="0.0112%" height="15" fill="rgb(224,114,35)" fg:x="5452800026" fg:w="4209908"/><text x="14.7147%" y="431.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (4,801,917 samples, 0.01%)</title><rect x="14.4759%" y="421" width="0.0127%" height="15" fill="rgb(245,159,27)" fg:x="5457009934" fg:w="4801917"/><text x="14.7259%" y="431.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (9,752,318 samples, 0.03%)</title><rect x="14.4932%" y="421" width="0.0259%" height="15" fill="rgb(245,172,44)" fg:x="5463532649" fg:w="9752318"/><text x="14.7432%" y="431.50"></text></g><g><title>miniz_oxide::inflate::stream::InflateState::new_boxed (12,254,013 samples, 0.03%)</title><rect x="14.5191%" y="421" width="0.0325%" height="15" fill="rgb(236,23,11)" fg:x="5473284967" fg:w="12254013"/><text x="14.7691%" y="431.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (13,121,510 samples, 0.03%)</title><rect x="14.5694%" y="421" width="0.0348%" height="15" fill="rgb(205,117,38)" fg:x="5492256054" fg:w="13121510"/><text x="14.8194%" y="431.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (5,612,472 samples, 0.01%)</title><rect x="14.5893%" y="405" width="0.0149%" height="15" fill="rgb(237,72,25)" fg:x="5499765092" fg:w="5612472"/><text x="14.8393%" y="415.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (5,612,472 samples, 0.01%)</title><rect x="14.5893%" y="389" width="0.0149%" height="15" fill="rgb(244,70,9)" fg:x="5499765092" fg:w="5612472"/><text x="14.8393%" y="399.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (5,612,472 samples, 0.01%)</title><rect x="14.5893%" y="373" width="0.0149%" height="15" fill="rgb(217,125,39)" fg:x="5499765092" fg:w="5612472"/><text x="14.8393%" y="383.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (4,840,885 samples, 0.01%)</title><rect x="14.6042%" y="421" width="0.0128%" height="15" fill="rgb(235,36,10)" fg:x="5505377564" fg:w="4840885"/><text x="14.8542%" y="431.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (7,967,528 samples, 0.02%)</title><rect x="14.6171%" y="421" width="0.0211%" height="15" fill="rgb(251,123,47)" fg:x="5510218449" fg:w="7967528"/><text x="14.8671%" y="431.50"></text></g><g><title>server::get_value_type (5,055,844 samples, 0.01%)</title><rect x="14.6382%" y="421" width="0.0134%" height="15" fill="rgb(221,13,13)" fg:x="5518185977" fg:w="5055844"/><text x="14.8882%" y="431.50"></text></g><g><title>server::process_request (4,737,297 samples, 0.01%)</title><rect x="14.6516%" y="421" width="0.0126%" height="15" fill="rgb(238,131,9)" fg:x="5523241821" fg:w="4737297"/><text x="14.9016%" y="431.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (9,901,646 samples, 0.03%)</title><rect x="14.6642%" y="421" width="0.0263%" height="15" fill="rgb(211,50,8)" fg:x="5527979118" fg:w="9901646"/><text x="14.9142%" y="431.50"></text></g><g><title>server_lib::storage::Storage::get_entry (4,786,630 samples, 0.01%)</title><rect x="14.6904%" y="421" width="0.0127%" height="15" fill="rgb(245,182,24)" fg:x="5537880764" fg:w="4786630"/><text x="14.9404%" y="431.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (16,436,127 samples, 0.04%)</title><rect x="14.7031%" y="421" width="0.0436%" height="15" fill="rgb(242,14,37)" fg:x="5542667394" fg:w="16436127"/><text x="14.9531%" y="431.50"></text></g><g><title>server_lib::storage::compress (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="405" width="0.0212%" height="15" fill="rgb(246,228,12)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::zlib::bufread::ZlibEncoder&lt;&amp;[u8]&gt;&gt; (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="389" width="0.0212%" height="15" fill="rgb(213,55,15)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::mem::Compress&gt; (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="373" width="0.0212%" height="15" fill="rgb(209,9,3)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::ffi::rust::Deflate&gt; (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="357" width="0.0212%" height="15" fill="rgb(230,59,30)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::core::CompressorOxide&gt;&gt; (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="341" width="0.0212%" height="15" fill="rgb(209,121,21)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::CompressorOxide&gt; (8,001,648 samples, 0.02%)</title><rect x="14.7255%" y="325" width="0.0212%" height="15" fill="rgb(220,109,13)" fg:x="5551101873" fg:w="8001648"/><text x="14.9755%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::ParamsOxide&gt; (5,491,635 samples, 0.01%)</title><rect x="14.7322%" y="309" width="0.0146%" height="15" fill="rgb(232,18,1)" fg:x="5553611886" fg:w="5491635"/><text x="14.9822%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::buffer::LocalBuf&gt;&gt; (5,491,635 samples, 0.01%)</title><rect x="14.7322%" y="293" width="0.0146%" height="15" fill="rgb(215,41,42)" fg:x="5553611886" fg:w="5491635"/><text x="14.9822%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,491,635 samples, 0.01%)</title><rect x="14.7322%" y="277" width="0.0146%" height="15" fill="rgb(224,123,36)" fg:x="5553611886" fg:w="5491635"/><text x="14.9822%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,491,635 samples, 0.01%)</title><rect x="14.7322%" y="261" width="0.0146%" height="15" fill="rgb(240,125,3)" fg:x="5553611886" fg:w="5491635"/><text x="14.9822%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (5,491,635 samples, 0.01%)</title><rect x="14.7322%" y="245" width="0.0146%" height="15" fill="rgb(205,98,50)" fg:x="5553611886" fg:w="5491635"/><text x="14.9822%" y="255.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::recv (4,950,688 samples, 0.01%)</title><rect x="14.7610%" y="421" width="0.0131%" height="15" fill="rgb(205,185,37)" fg:x="5564482623" fg:w="4950688"/><text x="15.0110%" y="431.50"></text></g><g><title>std::thread::yield_now (5,916,944 samples, 0.02%)</title><rect x="14.7741%" y="421" width="0.0157%" height="15" fill="rgb(238,207,15)" fg:x="5569433311" fg:w="5916944"/><text x="15.0241%" y="431.50"></text></g><g><title>std::time::SystemTime::now (5,405,341 samples, 0.01%)</title><rect x="14.7898%" y="421" width="0.0143%" height="15" fill="rgb(213,199,42)" fg:x="5575350255" fg:w="5405341"/><text x="15.0398%" y="431.50"></text></g><g><title>[unknown] (322,164,490 samples, 0.85%)</title><rect x="13.9631%" y="437" width="0.8546%" height="15" fill="rgb(235,201,11)" fg:x="5263700746" fg:w="322164490"/><text x="14.2131%" y="447.50"></text></g><g><title>syscall (5,109,640 samples, 0.01%)</title><rect x="14.8042%" y="421" width="0.0136%" height="15" fill="rgb(207,46,11)" fg:x="5580755596" fg:w="5109640"/><text x="15.0542%" y="431.50"></text></g><g><title>__rustc::__rdl_dealloc (20,568,501 samples, 0.05%)</title><rect x="14.8241%" y="437" width="0.0546%" height="15" fill="rgb(241,35,35)" fg:x="5588259589" fg:w="20568501"/><text x="15.0741%" y="447.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7,676,213 samples, 0.02%)</title><rect x="14.8583%" y="421" width="0.0204%" height="15" fill="rgb(243,32,47)" fg:x="5601151877" fg:w="7676213"/><text x="15.1083%" y="431.50"></text></g><g><title>__sched_yield (4,261,519 samples, 0.01%)</title><rect x="14.8786%" y="437" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="5608828090" fg:w="4261519"/><text x="15.1286%" y="447.50"></text></g><g><title>__send (5,114,969 samples, 0.01%)</title><rect x="14.8899%" y="437" width="0.0136%" height="15" fill="rgb(219,102,11)" fg:x="5613089609" fg:w="5114969"/><text x="15.1399%" y="447.50"></text></g><g><title>__vdso_clock_gettime (8,230,363 samples, 0.02%)</title><rect x="14.9035%" y="437" width="0.0218%" height="15" fill="rgb(243,110,44)" fg:x="5618204578" fg:w="8230363"/><text x="15.1535%" y="447.50"></text></g><g><title>std::io::error::Error::kind (7,302,528 samples, 0.02%)</title><rect x="14.9512%" y="165" width="0.0194%" height="15" fill="rgb(222,74,54)" fg:x="5636179326" fg:w="7302528"/><text x="15.2012%" y="175.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (7,302,528 samples, 0.02%)</title><rect x="14.9512%" y="149" width="0.0194%" height="15" fill="rgb(216,99,12)" fg:x="5636179326" fg:w="7302528"/><text x="15.2012%" y="159.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (7,302,528 samples, 0.02%)</title><rect x="14.9512%" y="133" width="0.0194%" height="15" fill="rgb(226,22,26)" fg:x="5636179326" fg:w="7302528"/><text x="15.2012%" y="143.50"></text></g><g><title>std::net::tcp::TcpListener::accept (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="165" width="0.8302%" height="15" fill="rgb(217,163,10)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="175.50"></text></g><g><title>std::sys::net::connection::socket::TcpListener::accept (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="149" width="0.8302%" height="15" fill="rgb(213,25,53)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="159.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::accept (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="133" width="0.8302%" height="15" fill="rgb(252,105,26)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="143.50"></text></g><g><title>std::sys::pal::unix::cvt_r (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="117" width="0.8302%" height="15" fill="rgb(220,39,43)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="127.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::accept::_{{closure}} (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="101" width="0.8302%" height="15" fill="rgb(229,68,48)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="111.50"></text></g><g><title>accept4 (312,966,360 samples, 0.83%)</title><rect x="14.9706%" y="85" width="0.8302%" height="15" fill="rgb(252,8,32)" fg:x="5643481854" fg:w="312966360"/><text x="15.2206%" y="95.50"></text></g><g><title>[libc.so.6] (308,302,271 samples, 0.82%)</title><rect x="14.9829%" y="69" width="0.8178%" height="15" fill="rgb(223,20,43)" fg:x="5648145943" fg:w="308302271"/><text x="15.2329%" y="79.50"></text></g><g><title>[libc.so.6] (305,814,960 samples, 0.81%)</title><rect x="14.9895%" y="53" width="0.8112%" height="15" fill="rgb(229,81,49)" fg:x="5650633254" fg:w="305814960"/><text x="15.2395%" y="63.50"></text></g><g><title>[libc.so.6] (305,814,960 samples, 0.81%)</title><rect x="14.9895%" y="37" width="0.8112%" height="15" fill="rgb(236,28,36)" fg:x="5650633254" fg:w="305814960"/><text x="15.2395%" y="47.50"></text></g><g><title>std::panic::catch_unwind (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="293" width="1.4428%" height="15" fill="rgb(249,185,26)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="303.50"></text></g><g><title>std::panicking::try (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="277" width="1.4428%" height="15" fill="rgb(249,174,33)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="287.50"></text></g><g><title>std::panicking::try::do_call (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="261" width="1.4428%" height="15" fill="rgb(233,201,37)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="245" width="1.4428%" height="15" fill="rgb(221,78,26)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="255.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="229" width="1.4428%" height="15" fill="rgb(250,127,30)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="239.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="213" width="1.4428%" height="15" fill="rgb(230,49,44)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="197" width="1.4428%" height="15" fill="rgb(229,67,23)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="207.50"></text></g><g><title>server::main (543,887,888 samples, 1.44%)</title><rect x="14.9253%" y="181" width="1.4428%" height="15" fill="rgb(249,83,47)" fg:x="5626434941" fg:w="543887888"/><text x="15.1753%" y="191.50"></text></g><g><title>std::thread::sleep (213,874,615 samples, 0.57%)</title><rect x="15.8008%" y="165" width="0.5673%" height="15" fill="rgb(215,43,3)" fg:x="5956448214" fg:w="213874615"/><text x="16.0508%" y="175.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (213,874,615 samples, 0.57%)</title><rect x="15.8008%" y="149" width="0.5673%" height="15" fill="rgb(238,154,13)" fg:x="5956448214" fg:w="213874615"/><text x="16.0508%" y="159.50"></text></g><g><title>__nanosleep (206,738,108 samples, 0.55%)</title><rect x="15.8197%" y="133" width="0.5484%" height="15" fill="rgb(219,56,2)" fg:x="5963584721" fg:w="206738108"/><text x="16.0697%" y="143.50"></text></g><g><title>clock_nanosleep (205,481,541 samples, 0.55%)</title><rect x="15.8230%" y="117" width="0.5451%" height="15" fill="rgb(233,0,4)" fg:x="5964841288" fg:w="205481541"/><text x="16.0730%" y="127.50"></text></g><g><title>[libc.so.6] (205,481,541 samples, 0.55%)</title><rect x="15.8230%" y="101" width="0.5451%" height="15" fill="rgb(235,30,7)" fg:x="5964841288" fg:w="205481541"/><text x="16.0730%" y="111.50"></text></g><g><title>[libc.so.6] (202,922,653 samples, 0.54%)</title><rect x="15.8298%" y="85" width="0.5383%" height="15" fill="rgb(250,79,13)" fg:x="5967400176" fg:w="202922653"/><text x="16.0798%" y="95.50"></text></g><g><title>_start (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="437" width="1.4446%" height="15" fill="rgb(211,146,34)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="447.50"></text></g><g><title>__libc_start_main (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="421" width="1.4446%" height="15" fill="rgb(228,22,38)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="431.50"></text></g><g><title>[libc.so.6] (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="405" width="1.4446%" height="15" fill="rgb(235,168,5)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="415.50"></text></g><g><title>main (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="389" width="1.4446%" height="15" fill="rgb(221,155,16)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="399.50"></text></g><g><title>std::rt::lang_start_internal (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="373" width="1.4446%" height="15" fill="rgb(215,215,53)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="383.50"></text></g><g><title>std::panic::catch_unwind (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="357" width="1.4446%" height="15" fill="rgb(223,4,10)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="367.50"></text></g><g><title>std::panicking::try (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="341" width="1.4446%" height="15" fill="rgb(234,103,6)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="351.50"></text></g><g><title>std::panicking::try::do_call (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="325" width="1.4446%" height="15" fill="rgb(227,97,0)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="335.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (544,582,134 samples, 1.44%)</title><rect x="14.9253%" y="309" width="1.4446%" height="15" fill="rgb(234,150,53)" fg:x="5626434941" fg:w="544582134"/><text x="15.1753%" y="319.50"></text></g><g><title>adler2::Adler32::write_slice (9,785,137 samples, 0.03%)</title><rect x="16.3700%" y="437" width="0.0260%" height="15" fill="rgb(228,201,54)" fg:x="6171017075" fg:w="9785137"/><text x="16.6200%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,671,616 samples, 0.02%)</title><rect x="16.3959%" y="437" width="0.0230%" height="15" fill="rgb(222,22,37)" fg:x="6180802212" fg:w="8671616"/><text x="16.6459%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (25,577,297 samples, 0.07%)</title><rect x="16.4189%" y="437" width="0.0678%" height="15" fill="rgb(237,53,32)" fg:x="6189473828" fg:w="25577297"/><text x="16.6689%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (23,316,712 samples, 0.06%)</title><rect x="16.4249%" y="421" width="0.0619%" height="15" fill="rgb(233,25,53)" fg:x="6191734413" fg:w="23316712"/><text x="16.6749%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (37,622,714 samples, 0.10%)</title><rect x="16.4868%" y="437" width="0.0998%" height="15" fill="rgb(210,40,34)" fg:x="6215051125" fg:w="37622714"/><text x="16.7368%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7,292,046 samples, 0.02%)</title><rect x="16.5672%" y="421" width="0.0193%" height="15" fill="rgb(241,220,44)" fg:x="6245381793" fg:w="7292046"/><text x="16.8172%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7,292,046 samples, 0.02%)</title><rect x="16.5672%" y="405" width="0.0193%" height="15" fill="rgb(235,28,35)" fg:x="6245381793" fg:w="7292046"/><text x="16.8172%" y="415.50"></text></g><g><title>alloc::alloc::realloc (7,292,046 samples, 0.02%)</title><rect x="16.5672%" y="389" width="0.0193%" height="15" fill="rgb(210,56,17)" fg:x="6245381793" fg:w="7292046"/><text x="16.8172%" y="399.50"></text></g><g><title>cfree (16,463,179 samples, 0.04%)</title><rect x="16.5866%" y="437" width="0.0437%" height="15" fill="rgb(224,130,29)" fg:x="6252673839" fg:w="16463179"/><text x="16.8366%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (13,567,631 samples, 0.04%)</title><rect x="16.6303%" y="437" width="0.0360%" height="15" fill="rgb(235,212,8)" fg:x="6269137018" fg:w="13567631"/><text x="16.8803%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (4,713,675 samples, 0.01%)</title><rect x="16.6749%" y="437" width="0.0125%" height="15" fill="rgb(223,33,50)" fg:x="6285957369" fg:w="4713675"/><text x="16.9249%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (8,235,103 samples, 0.02%)</title><rect x="16.6874%" y="437" width="0.0218%" height="15" fill="rgb(219,149,13)" fg:x="6290671044" fg:w="8235103"/><text x="16.9374%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9,962,016 samples, 0.03%)</title><rect x="16.7092%" y="437" width="0.0264%" height="15" fill="rgb(250,156,29)" fg:x="6298906147" fg:w="9962016"/><text x="16.9592%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (25,514,294 samples, 0.07%)</title><rect x="16.7357%" y="437" width="0.0677%" height="15" fill="rgb(216,193,19)" fg:x="6308868163" fg:w="25514294"/><text x="16.9857%" y="447.50"></text></g><g><title>core::str::converts::from_utf8 (21,020,029 samples, 0.06%)</title><rect x="16.8033%" y="437" width="0.0558%" height="15" fill="rgb(216,135,14)" fg:x="6334382457" fg:w="21020029"/><text x="17.0533%" y="447.50"></text></g><g><title>malloc (43,240,081 samples, 0.11%)</title><rect x="16.8639%" y="437" width="0.1147%" height="15" fill="rgb(241,47,5)" fg:x="6357228364" fg:w="43240081"/><text x="17.1139%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (4,814,815 samples, 0.01%)</title><rect x="16.9853%" y="421" width="0.0128%" height="15" fill="rgb(233,42,35)" fg:x="6402977342" fg:w="4814815"/><text x="17.2353%" y="431.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (4,814,815 samples, 0.01%)</title><rect x="16.9853%" y="405" width="0.0128%" height="15" fill="rgb(231,13,6)" fg:x="6402977342" fg:w="4814815"/><text x="17.2353%" y="415.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (9,834,067 samples, 0.03%)</title><rect x="16.9786%" y="437" width="0.0261%" height="15" fill="rgb(207,181,40)" fg:x="6400468445" fg:w="9834067"/><text x="17.2286%" y="447.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (17,592,568 samples, 0.05%)</title><rect x="17.0047%" y="437" width="0.0467%" height="15" fill="rgb(254,173,49)" fg:x="6410302512" fg:w="17592568"/><text x="17.2547%" y="447.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (9,436,622 samples, 0.03%)</title><rect x="17.0514%" y="437" width="0.0250%" height="15" fill="rgb(221,1,38)" fg:x="6427895080" fg:w="9436622"/><text x="17.3014%" y="447.50"></text></g><g><title>miniz_oxide::deflate::core::flush_output_buffer (6,997,635 samples, 0.02%)</title><rect x="17.0764%" y="437" width="0.0186%" height="15" fill="rgb(206,124,46)" fg:x="6437331702" fg:w="6997635"/><text x="17.3264%" y="447.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (11,983,330 samples, 0.03%)</title><rect x="17.0950%" y="437" width="0.0318%" height="15" fill="rgb(249,21,11)" fg:x="6444329337" fg:w="11983330"/><text x="17.3450%" y="447.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (8,734,350 samples, 0.02%)</title><rect x="17.1268%" y="437" width="0.0232%" height="15" fill="rgb(222,201,40)" fg:x="6456312667" fg:w="8734350"/><text x="17.3768%" y="447.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (5,993,805 samples, 0.02%)</title><rect x="17.1340%" y="421" width="0.0159%" height="15" fill="rgb(235,61,29)" fg:x="6459053212" fg:w="5993805"/><text x="17.3840%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5,993,805 samples, 0.02%)</title><rect x="17.1340%" y="405" width="0.0159%" height="15" fill="rgb(219,207,3)" fg:x="6459053212" fg:w="5993805"/><text x="17.3840%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,993,805 samples, 0.02%)</title><rect x="17.1340%" y="389" width="0.0159%" height="15" fill="rgb(222,56,46)" fg:x="6459053212" fg:w="5993805"/><text x="17.3840%" y="399.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (4,188,849 samples, 0.01%)</title><rect x="17.1499%" y="437" width="0.0111%" height="15" fill="rgb(239,76,54)" fg:x="6465047017" fg:w="4188849"/><text x="17.3999%" y="447.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (17,255,176 samples, 0.05%)</title><rect x="17.1611%" y="437" width="0.0458%" height="15" fill="rgb(231,124,27)" fg:x="6469235866" fg:w="17255176"/><text x="17.4111%" y="447.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (9,860,246 samples, 0.03%)</title><rect x="17.2068%" y="437" width="0.0262%" height="15" fill="rgb(249,195,6)" fg:x="6486491042" fg:w="9860246"/><text x="17.4568%" y="447.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (6,382,481 samples, 0.02%)</title><rect x="17.2330%" y="437" width="0.0169%" height="15" fill="rgb(237,174,47)" fg:x="6496351288" fg:w="6382481"/><text x="17.4830%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (6,782,959 samples, 0.02%)</title><rect x="17.4080%" y="405" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="6562331620" fg:w="6782959"/><text x="17.6580%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6,782,959 samples, 0.02%)</title><rect x="17.4080%" y="389" width="0.0180%" height="15" fill="rgb(231,57,52)" fg:x="6562331620" fg:w="6782959"/><text x="17.6580%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (29,658,902 samples, 0.08%)</title><rect x="17.3932%" y="421" width="0.0787%" height="15" fill="rgb(248,177,22)" fg:x="6556755724" fg:w="29658902"/><text x="17.6432%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17,300,047 samples, 0.05%)</title><rect x="17.4260%" y="405" width="0.0459%" height="15" fill="rgb(215,211,37)" fg:x="6569114579" fg:w="17300047"/><text x="17.6760%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (17,300,047 samples, 0.05%)</title><rect x="17.4260%" y="389" width="0.0459%" height="15" fill="rgb(241,128,51)" fg:x="6569114579" fg:w="17300047"/><text x="17.6760%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="421" width="0.0298%" height="15" fill="rgb(227,165,31)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="405" width="0.0298%" height="15" fill="rgb(228,167,24)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="389" width="0.0298%" height="15" fill="rgb(228,143,12)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="373" width="0.0298%" height="15" fill="rgb(249,149,8)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="357" width="0.0298%" height="15" fill="rgb(243,35,44)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (11,248,683 samples, 0.03%)</title><rect x="17.4719%" y="341" width="0.0298%" height="15" fill="rgb(246,89,9)" fg:x="6586414626" fg:w="11248683"/><text x="17.7219%" y="351.50"></text></g><g><title>cfree (14,523,511 samples, 0.04%)</title><rect x="17.5061%" y="421" width="0.0385%" height="15" fill="rgb(233,213,13)" fg:x="6599303619" fg:w="14523511"/><text x="17.7561%" y="431.50"></text></g><g><title>__rustc::__rust_dealloc (8,925,139 samples, 0.02%)</title><rect x="17.5857%" y="325" width="0.0237%" height="15" fill="rgb(233,141,41)" fg:x="6629301842" fg:w="8925139"/><text x="17.8357%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87,771,532 samples, 0.23%)</title><rect x="17.5575%" y="357" width="0.2328%" height="15" fill="rgb(239,167,4)" fg:x="6618695986" fg:w="87771532"/><text x="17.8075%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (87,771,532 samples, 0.23%)</title><rect x="17.5575%" y="341" width="0.2328%" height="15" fill="rgb(209,217,16)" fg:x="6618695986" fg:w="87771532"/><text x="17.8075%" y="351.50"></text></g><g><title>cfree (68,240,537 samples, 0.18%)</title><rect x="17.6093%" y="325" width="0.1810%" height="15" fill="rgb(219,88,35)" fg:x="6638226981" fg:w="68240537"/><text x="17.8593%" y="335.50"></text></g><g><title>[libc.so.6] (23,605,792 samples, 0.06%)</title><rect x="17.7278%" y="309" width="0.0626%" height="15" fill="rgb(220,193,23)" fg:x="6682861726" fg:w="23605792"/><text x="17.9778%" y="319.50"></text></g><g><title>[libc.so.6] (16,051,194 samples, 0.04%)</title><rect x="17.7478%" y="293" width="0.0426%" height="15" fill="rgb(230,90,52)" fg:x="6690416324" fg:w="16051194"/><text x="17.9978%" y="303.50"></text></g><g><title>[libc.so.6] (13,990,611 samples, 0.04%)</title><rect x="17.7533%" y="277" width="0.0371%" height="15" fill="rgb(252,106,19)" fg:x="6692476907" fg:w="13990611"/><text x="18.0033%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (92,074,530 samples, 0.24%)</title><rect x="17.5522%" y="421" width="0.2442%" height="15" fill="rgb(206,74,20)" fg:x="6616674456" fg:w="92074530"/><text x="17.8022%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (92,074,530 samples, 0.24%)</title><rect x="17.5522%" y="405" width="0.2442%" height="15" fill="rgb(230,138,44)" fg:x="6616674456" fg:w="92074530"/><text x="17.8022%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92,074,530 samples, 0.24%)</title><rect x="17.5522%" y="389" width="0.2442%" height="15" fill="rgb(235,182,43)" fg:x="6616674456" fg:w="92074530"/><text x="17.8022%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (90,053,000 samples, 0.24%)</title><rect x="17.5575%" y="373" width="0.2389%" height="15" fill="rgb(242,16,51)" fg:x="6618695986" fg:w="90053000"/><text x="17.8075%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5,085,417 samples, 0.01%)</title><rect x="17.8442%" y="373" width="0.0135%" height="15" fill="rgb(248,9,4)" fg:x="6726773965" fg:w="5085417"/><text x="18.0942%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,085,417 samples, 0.01%)</title><rect x="17.8442%" y="357" width="0.0135%" height="15" fill="rgb(210,31,22)" fg:x="6726773965" fg:w="5085417"/><text x="18.0942%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,085,417 samples, 0.01%)</title><rect x="17.8442%" y="341" width="0.0135%" height="15" fill="rgb(239,54,39)" fg:x="6726773965" fg:w="5085417"/><text x="18.0942%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,085,417 samples, 0.01%)</title><rect x="17.8442%" y="325" width="0.0135%" height="15" fill="rgb(230,99,41)" fg:x="6726773965" fg:w="5085417"/><text x="18.0942%" y="335.50"></text></g><g><title>cfree (59,339,698 samples, 0.16%)</title><rect x="17.8825%" y="357" width="0.1574%" height="15" fill="rgb(253,106,12)" fg:x="6741204664" fg:w="59339698"/><text x="18.1325%" y="367.50"></text></g><g><title>[libc.so.6] (7,142,411 samples, 0.02%)</title><rect x="18.0210%" y="341" width="0.0189%" height="15" fill="rgb(213,46,41)" fg:x="6793401951" fg:w="7142411"/><text x="18.2710%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (137,149,138 samples, 0.36%)</title><rect x="17.7964%" y="421" width="0.3638%" height="15" fill="rgb(215,133,35)" fg:x="6708748986" fg:w="137149138"/><text x="18.0464%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (119,124,159 samples, 0.32%)</title><rect x="17.8442%" y="405" width="0.3160%" height="15" fill="rgb(213,28,5)" fg:x="6726773965" fg:w="119124159"/><text x="18.0942%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (119,124,159 samples, 0.32%)</title><rect x="17.8442%" y="389" width="0.3160%" height="15" fill="rgb(215,77,49)" fg:x="6726773965" fg:w="119124159"/><text x="18.0942%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (114,038,742 samples, 0.30%)</title><rect x="17.8577%" y="373" width="0.3025%" height="15" fill="rgb(248,100,22)" fg:x="6731859382" fg:w="114038742"/><text x="18.1077%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (45,353,762 samples, 0.12%)</title><rect x="18.0399%" y="357" width="0.1203%" height="15" fill="rgb(208,67,9)" fg:x="6800544362" fg:w="45353762"/><text x="18.2899%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5,966,165 samples, 0.02%)</title><rect x="18.1444%" y="341" width="0.0158%" height="15" fill="rgb(219,133,21)" fg:x="6839931959" fg:w="5966165"/><text x="18.3944%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5,966,165 samples, 0.02%)</title><rect x="18.1444%" y="325" width="0.0158%" height="15" fill="rgb(246,46,29)" fg:x="6839931959" fg:w="5966165"/><text x="18.3944%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,966,165 samples, 0.02%)</title><rect x="18.1444%" y="309" width="0.0158%" height="15" fill="rgb(246,185,52)" fg:x="6839931959" fg:w="5966165"/><text x="18.3944%" y="319.50"></text></g><g><title>recv (4,221,223 samples, 0.01%)</title><rect x="18.1602%" y="421" width="0.0112%" height="15" fill="rgb(252,136,11)" fg:x="6845898124" fg:w="4221223"/><text x="18.4102%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (65,894,988 samples, 0.17%)</title><rect x="18.3948%" y="229" width="0.1748%" height="15" fill="rgb(219,138,53)" fg:x="6934301971" fg:w="65894988"/><text x="18.6448%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (65,894,988 samples, 0.17%)</title><rect x="18.3948%" y="213" width="0.1748%" height="15" fill="rgb(211,51,23)" fg:x="6934301971" fg:w="65894988"/><text x="18.6448%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (65,894,988 samples, 0.17%)</title><rect x="18.3948%" y="197" width="0.1748%" height="15" fill="rgb(247,221,28)" fg:x="6934301971" fg:w="65894988"/><text x="18.6448%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (65,894,988 samples, 0.17%)</title><rect x="18.3948%" y="181" width="0.1748%" height="15" fill="rgb(251,222,45)" fg:x="6934301971" fg:w="65894988"/><text x="18.6448%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (65,894,988 samples, 0.17%)</title><rect x="18.3948%" y="165" width="0.1748%" height="15" fill="rgb(217,162,53)" fg:x="6934301971" fg:w="65894988"/><text x="18.6448%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (62,772,442 samples, 0.17%)</title><rect x="18.4030%" y="149" width="0.1665%" height="15" fill="rgb(229,93,14)" fg:x="6937424517" fg:w="62772442"/><text x="18.6530%" y="159.50"></text></g><g><title>malloc (55,185,564 samples, 0.15%)</title><rect x="18.4232%" y="133" width="0.1464%" height="15" fill="rgb(209,67,49)" fg:x="6945011395" fg:w="55185564"/><text x="18.6732%" y="143.50"></text></g><g><title>[libc.so.6] (23,144,485 samples, 0.06%)</title><rect x="18.5082%" y="117" width="0.0614%" height="15" fill="rgb(213,87,29)" fg:x="6977052474" fg:w="23144485"/><text x="18.7582%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (90,644,799 samples, 0.24%)</title><rect x="18.3948%" y="309" width="0.2405%" height="15" fill="rgb(205,151,52)" fg:x="6934301971" fg:w="90644799"/><text x="18.6448%" y="319.50"></text></g><g><title>alloc::string::String::push_str (90,644,799 samples, 0.24%)</title><rect x="18.3948%" y="293" width="0.2405%" height="15" fill="rgb(253,215,39)" fg:x="6934301971" fg:w="90644799"/><text x="18.6448%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (90,644,799 samples, 0.24%)</title><rect x="18.3948%" y="277" width="0.2405%" height="15" fill="rgb(221,220,41)" fg:x="6934301971" fg:w="90644799"/><text x="18.6448%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (90,644,799 samples, 0.24%)</title><rect x="18.3948%" y="261" width="0.2405%" height="15" fill="rgb(218,133,21)" fg:x="6934301971" fg:w="90644799"/><text x="18.6448%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (90,644,799 samples, 0.24%)</title><rect x="18.3948%" y="245" width="0.2405%" height="15" fill="rgb(221,193,43)" fg:x="6934301971" fg:w="90644799"/><text x="18.6448%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24,749,811 samples, 0.07%)</title><rect x="18.5696%" y="229" width="0.0657%" height="15" fill="rgb(240,128,52)" fg:x="7000196959" fg:w="24749811"/><text x="18.8196%" y="239.50"></text></g><g><title>[libc.so.6] (24,749,811 samples, 0.07%)</title><rect x="18.5696%" y="213" width="0.0657%" height="15" fill="rgb(253,114,12)" fg:x="7000196959" fg:w="24749811"/><text x="18.8196%" y="223.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (152,030,514 samples, 0.40%)</title><rect x="18.2676%" y="389" width="0.4033%" height="15" fill="rgb(215,223,47)" fg:x="6886359530" fg:w="152030514"/><text x="18.5176%" y="399.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (146,630,936 samples, 0.39%)</title><rect x="18.2819%" y="373" width="0.3890%" height="15" fill="rgb(248,225,23)" fg:x="6891759108" fg:w="146630936"/><text x="18.5319%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (133,024,449 samples, 0.35%)</title><rect x="18.3180%" y="357" width="0.3529%" height="15" fill="rgb(250,108,0)" fg:x="6905365595" fg:w="133024449"/><text x="18.5680%" y="367.50"></text></g><g><title>core::fmt::write (133,024,449 samples, 0.35%)</title><rect x="18.3180%" y="341" width="0.3529%" height="15" fill="rgb(228,208,7)" fg:x="6905365595" fg:w="133024449"/><text x="18.5680%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (106,497,456 samples, 0.28%)</title><rect x="18.3884%" y="325" width="0.2825%" height="15" fill="rgb(244,45,10)" fg:x="6931892588" fg:w="106497456"/><text x="18.6384%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad (13,443,274 samples, 0.04%)</title><rect x="18.6352%" y="309" width="0.0357%" height="15" fill="rgb(207,125,25)" fg:x="7024946770" fg:w="13443274"/><text x="18.8852%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (3,857,660 samples, 0.01%)</title><rect x="18.6771%" y="181" width="0.0102%" height="15" fill="rgb(210,195,18)" fg:x="7040732419" fg:w="3857660"/><text x="18.9271%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,857,660 samples, 0.01%)</title><rect x="18.6771%" y="165" width="0.0102%" height="15" fill="rgb(249,80,12)" fg:x="7040732419" fg:w="3857660"/><text x="18.9271%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42,210,853 samples, 0.11%)</title><rect x="18.6709%" y="293" width="0.1120%" height="15" fill="rgb(221,65,9)" fg:x="7038390044" fg:w="42210853"/><text x="18.9209%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42,210,853 samples, 0.11%)</title><rect x="18.6709%" y="277" width="0.1120%" height="15" fill="rgb(235,49,36)" fg:x="7038390044" fg:w="42210853"/><text x="18.9209%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (42,210,853 samples, 0.11%)</title><rect x="18.6709%" y="261" width="0.1120%" height="15" fill="rgb(225,32,20)" fg:x="7038390044" fg:w="42210853"/><text x="18.9209%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (42,210,853 samples, 0.11%)</title><rect x="18.6709%" y="245" width="0.1120%" height="15" fill="rgb(215,141,46)" fg:x="7038390044" fg:w="42210853"/><text x="18.9209%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39,868,478 samples, 0.11%)</title><rect x="18.6771%" y="229" width="0.1058%" height="15" fill="rgb(250,160,47)" fg:x="7040732419" fg:w="39868478"/><text x="18.9271%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39,868,478 samples, 0.11%)</title><rect x="18.6771%" y="213" width="0.1058%" height="15" fill="rgb(216,222,40)" fg:x="7040732419" fg:w="39868478"/><text x="18.9271%" y="223.50"></text></g><g><title>alloc::alloc::alloc (39,868,478 samples, 0.11%)</title><rect x="18.6771%" y="197" width="0.1058%" height="15" fill="rgb(234,217,39)" fg:x="7040732419" fg:w="39868478"/><text x="18.9271%" y="207.50"></text></g><g><title>malloc (33,909,362 samples, 0.09%)</title><rect x="18.6929%" y="181" width="0.0900%" height="15" fill="rgb(207,178,40)" fg:x="7046691535" fg:w="33909362"/><text x="18.9429%" y="191.50"></text></g><g><title>[libc.so.6] (18,558,365 samples, 0.05%)</title><rect x="18.7336%" y="165" width="0.0492%" height="15" fill="rgb(221,136,13)" fg:x="7062042532" fg:w="18558365"/><text x="18.9836%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (64,459,959 samples, 0.17%)</title><rect x="18.6709%" y="357" width="0.1710%" height="15" fill="rgb(249,199,10)" fg:x="7038390044" fg:w="64459959"/><text x="18.9209%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (64,459,959 samples, 0.17%)</title><rect x="18.6709%" y="341" width="0.1710%" height="15" fill="rgb(249,222,13)" fg:x="7038390044" fg:w="64459959"/><text x="18.9209%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (64,459,959 samples, 0.17%)</title><rect x="18.6709%" y="325" width="0.1710%" height="15" fill="rgb(244,185,38)" fg:x="7038390044" fg:w="64459959"/><text x="18.9209%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (64,459,959 samples, 0.17%)</title><rect x="18.6709%" y="309" width="0.1710%" height="15" fill="rgb(236,202,9)" fg:x="7038390044" fg:w="64459959"/><text x="18.9209%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22,249,106 samples, 0.06%)</title><rect x="18.7828%" y="293" width="0.0590%" height="15" fill="rgb(250,229,37)" fg:x="7080600897" fg:w="22249106"/><text x="19.0328%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22,249,106 samples, 0.06%)</title><rect x="18.7828%" y="277" width="0.0590%" height="15" fill="rgb(206,174,23)" fg:x="7080600897" fg:w="22249106"/><text x="19.0328%" y="287.50"></text></g><g><title>[libc.so.6] (18,530,800 samples, 0.05%)</title><rect x="18.7927%" y="261" width="0.0492%" height="15" fill="rgb(211,33,43)" fg:x="7084319203" fg:w="18530800"/><text x="19.0427%" y="271.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (220,296,353 samples, 0.58%)</title><rect x="18.2676%" y="405" width="0.5844%" height="15" fill="rgb(245,58,50)" fg:x="6886359530" fg:w="220296353"/><text x="18.5176%" y="415.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (68,265,839 samples, 0.18%)</title><rect x="18.6709%" y="389" width="0.1811%" height="15" fill="rgb(244,68,36)" fg:x="7038390044" fg:w="68265839"/><text x="18.9209%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (68,265,839 samples, 0.18%)</title><rect x="18.6709%" y="373" width="0.1811%" height="15" fill="rgb(232,229,15)" fg:x="7038390044" fg:w="68265839"/><text x="18.9209%" y="383.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (3,805,880 samples, 0.01%)</title><rect x="18.8419%" y="357" width="0.0101%" height="15" fill="rgb(254,30,23)" fg:x="7102850003" fg:w="3805880"/><text x="19.0919%" y="367.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16,465,013 samples, 0.04%)</title><rect x="18.8520%" y="405" width="0.0437%" height="15" fill="rgb(235,160,14)" fg:x="7106655883" fg:w="16465013"/><text x="19.1020%" y="415.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (16,465,013 samples, 0.04%)</title><rect x="18.8520%" y="389" width="0.0437%" height="15" fill="rgb(212,155,44)" fg:x="7106655883" fg:w="16465013"/><text x="19.1020%" y="399.50"></text></g><g><title>__rustc::__rdl_alloc (9,838,463 samples, 0.03%)</title><rect x="18.9354%" y="245" width="0.0261%" height="15" fill="rgb(226,2,50)" fg:x="7138093786" fg:w="9838463"/><text x="19.1854%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9,838,463 samples, 0.03%)</title><rect x="18.9354%" y="229" width="0.0261%" height="15" fill="rgb(234,177,6)" fg:x="7138093786" fg:w="9838463"/><text x="19.1854%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="373" width="0.0794%" height="15" fill="rgb(217,24,9)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="357" width="0.0794%" height="15" fill="rgb(220,13,46)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="341" width="0.0794%" height="15" fill="rgb(239,221,27)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="325" width="0.0794%" height="15" fill="rgb(222,198,25)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="309" width="0.0794%" height="15" fill="rgb(211,99,13)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="293" width="0.0794%" height="15" fill="rgb(232,111,31)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="277" width="0.0794%" height="15" fill="rgb(245,82,37)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="287.50"></text></g><g><title>alloc::alloc::alloc (29,936,794 samples, 0.08%)</title><rect x="18.9273%" y="261" width="0.0794%" height="15" fill="rgb(227,149,46)" fg:x="7135060997" fg:w="29936794"/><text x="19.1773%" y="271.50"></text></g><g><title>malloc (17,065,542 samples, 0.05%)</title><rect x="18.9615%" y="245" width="0.0453%" height="15" fill="rgb(218,36,50)" fg:x="7147932249" fg:w="17065542"/><text x="19.2115%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (42,139,605 samples, 0.11%)</title><rect x="18.9029%" y="405" width="0.1118%" height="15" fill="rgb(226,80,48)" fg:x="7125851919" fg:w="42139605"/><text x="19.1529%" y="415.50"></text></g><g><title>alloc::str::convert_while_ascii (36,214,084 samples, 0.10%)</title><rect x="18.9186%" y="389" width="0.0961%" height="15" fill="rgb(238,224,15)" fg:x="7131777440" fg:w="36214084"/><text x="19.1686%" y="399.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (267,955,106 samples, 0.71%)</title><rect x="19.1178%" y="389" width="0.7108%" height="15" fill="rgb(241,136,10)" fg:x="7206856639" fg:w="267955106"/><text x="19.3678%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (28,940,223 samples, 0.08%)</title><rect x="19.7518%" y="373" width="0.0768%" height="15" fill="rgb(208,32,45)" fg:x="7445871522" fg:w="28940223"/><text x="20.0018%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (26,545,333 samples, 0.07%)</title><rect x="19.7582%" y="357" width="0.0704%" height="15" fill="rgb(207,135,9)" fg:x="7448266412" fg:w="26545333"/><text x="20.0082%" y="367.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (320,495,796 samples, 0.85%)</title><rect x="19.0147%" y="405" width="0.8502%" height="15" fill="rgb(206,86,44)" fg:x="7167991524" fg:w="320495796"/><text x="19.2647%" y="415.50"></text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (13,675,575 samples, 0.04%)</title><rect x="19.8286%" y="389" width="0.0363%" height="15" fill="rgb(245,177,15)" fg:x="7474811745" fg:w="13675575"/><text x="20.0786%" y="399.50"></text></g><g><title>cfree (74,485,955 samples, 0.20%)</title><rect x="19.8710%" y="405" width="0.1976%" height="15" fill="rgb(206,64,50)" fg:x="7490802692" fg:w="74485955"/><text x="20.1210%" y="415.50"></text></g><g><title>[libc.so.6] (35,967,349 samples, 0.10%)</title><rect x="19.9732%" y="389" width="0.0954%" height="15" fill="rgb(234,36,40)" fg:x="7529321298" fg:w="35967349"/><text x="20.2232%" y="399.50"></text></g><g><title>[libc.so.6] (19,618,172 samples, 0.05%)</title><rect x="20.0165%" y="373" width="0.0520%" height="15" fill="rgb(213,64,8)" fg:x="7545670475" fg:w="19618172"/><text x="20.2665%" y="383.50"></text></g><g><title>[libc.so.6] (10,221,081 samples, 0.03%)</title><rect x="20.0415%" y="357" width="0.0271%" height="15" fill="rgb(210,75,36)" fg:x="7555067566" fg:w="10221081"/><text x="20.2915%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (83,838,774 samples, 0.22%)</title><rect x="20.0769%" y="405" width="0.2224%" height="15" fill="rgb(229,88,21)" fg:x="7568417514" fg:w="83838774"/><text x="20.3269%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (83,838,774 samples, 0.22%)</title><rect x="20.0769%" y="389" width="0.2224%" height="15" fill="rgb(252,204,47)" fg:x="7568417514" fg:w="83838774"/><text x="20.3269%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (83,838,774 samples, 0.22%)</title><rect x="20.0769%" y="373" width="0.2224%" height="15" fill="rgb(208,77,27)" fg:x="7568417514" fg:w="83838774"/><text x="20.3269%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83,838,774 samples, 0.22%)</title><rect x="20.0769%" y="357" width="0.2224%" height="15" fill="rgb(221,76,26)" fg:x="7568417514" fg:w="83838774"/><text x="20.3269%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (73,788,917 samples, 0.20%)</title><rect x="20.1035%" y="341" width="0.1957%" height="15" fill="rgb(225,139,18)" fg:x="7578467371" fg:w="73788917"/><text x="20.3535%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73,788,917 samples, 0.20%)</title><rect x="20.1035%" y="325" width="0.1957%" height="15" fill="rgb(230,137,11)" fg:x="7578467371" fg:w="73788917"/><text x="20.3535%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (73,788,917 samples, 0.20%)</title><rect x="20.1035%" y="309" width="0.1957%" height="15" fill="rgb(212,28,1)" fg:x="7578467371" fg:w="73788917"/><text x="20.3535%" y="319.50"></text></g><g><title>cfree (68,283,596 samples, 0.18%)</title><rect x="20.1181%" y="293" width="0.1811%" height="15" fill="rgb(248,164,17)" fg:x="7583972692" fg:w="68283596"/><text x="20.3681%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (13,999,160 samples, 0.04%)</title><rect x="20.3492%" y="357" width="0.0371%" height="15" fill="rgb(222,171,42)" fg:x="7671078403" fg:w="13999160"/><text x="20.5992%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13,999,160 samples, 0.04%)</title><rect x="20.3492%" y="341" width="0.0371%" height="15" fill="rgb(243,84,45)" fg:x="7671078403" fg:w="13999160"/><text x="20.5992%" y="351.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (1,347,884,334 samples, 3.58%)</title><rect x="20.3930%" y="309" width="3.5756%" height="15" fill="rgb(252,49,23)" fg:x="7687599652" fg:w="1347884334"/><text x="20.6430%" y="319.50">&lt;par..</text></g><g><title>syscall (1,347,884,334 samples, 3.58%)</title><rect x="20.3930%" y="293" width="3.5756%" height="15" fill="rgb(215,19,7)" fg:x="7687599652" fg:w="1347884334"/><text x="20.6430%" y="303.50">sysc..</text></g><g><title>core::ptr::drop_in_place&lt;smallvec::IntoIter&lt;[(*const parking_lot_core::parking_lot::ThreadData,core::option::Option&lt;parking_lot_core::thread_parker::imp::UnparkHandle&gt;): 8]&gt;&gt; (8,351,877 samples, 0.02%)</title><rect x="23.9786%" y="309" width="0.0222%" height="15" fill="rgb(238,81,41)" fg:x="9039261042" fg:w="8351877"/><text x="24.2286%" y="319.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::ops::drop::Drop&gt;::drop (8,351,877 samples, 0.02%)</title><rect x="23.9786%" y="293" width="0.0222%" height="15" fill="rgb(210,199,37)" fg:x="9039261042" fg:w="8351877"/><text x="24.2286%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (8,351,877 samples, 0.02%)</title><rect x="23.9786%" y="277" width="0.0222%" height="15" fill="rgb(244,192,49)" fg:x="9039261042" fg:w="8351877"/><text x="24.2286%" y="287.50"></text></g><g><title>&lt;smallvec::IntoIter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,351,877 samples, 0.02%)</title><rect x="23.9786%" y="261" width="0.0222%" height="15" fill="rgb(226,211,11)" fg:x="9039261042" fg:w="8351877"/><text x="24.2286%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16,234,471 samples, 0.04%)</title><rect x="24.0008%" y="309" width="0.0431%" height="15" fill="rgb(236,162,54)" fg:x="9047612919" fg:w="16234471"/><text x="24.2508%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_load (16,234,471 samples, 0.04%)</title><rect x="24.0008%" y="293" width="0.0431%" height="15" fill="rgb(220,229,9)" fg:x="9047612919" fg:w="16234471"/><text x="24.2508%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (47,481,642 samples, 0.13%)</title><rect x="24.0503%" y="309" width="0.1260%" height="15" fill="rgb(250,87,22)" fg:x="9066288157" fg:w="47481642"/><text x="24.3003%" y="319.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (42,740,584 samples, 0.11%)</title><rect x="24.0629%" y="293" width="0.1134%" height="15" fill="rgb(239,43,17)" fg:x="9071029215" fg:w="42740584"/><text x="24.3129%" y="303.50"></text></g><g><title>clock_gettime (40,329,346 samples, 0.11%)</title><rect x="24.0693%" y="277" width="0.1070%" height="15" fill="rgb(231,177,25)" fg:x="9073440453" fg:w="40329346"/><text x="24.3193%" y="287.50"></text></g><g><title>__vdso_clock_gettime (34,865,594 samples, 0.09%)</title><rect x="24.0838%" y="261" width="0.0925%" height="15" fill="rgb(219,179,1)" fg:x="9078904205" fg:w="34865594"/><text x="24.3338%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (17,230,868 samples, 0.05%)</title><rect x="24.1763%" y="309" width="0.0457%" height="15" fill="rgb(238,219,53)" fg:x="9113769799" fg:w="17230868"/><text x="24.4263%" y="319.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (12,202,790 samples, 0.03%)</title><rect x="24.1896%" y="293" width="0.0324%" height="15" fill="rgb(232,167,36)" fg:x="9118797877" fg:w="12202790"/><text x="24.4396%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (12,202,790 samples, 0.03%)</title><rect x="24.1896%" y="277" width="0.0324%" height="15" fill="rgb(244,19,51)" fg:x="9118797877" fg:w="12202790"/><text x="24.4396%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (12,202,790 samples, 0.03%)</title><rect x="24.1896%" y="261" width="0.0324%" height="15" fill="rgb(224,6,22)" fg:x="9118797877" fg:w="12202790"/><text x="24.4396%" y="271.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (5,531,859 samples, 0.01%)</title><rect x="24.2220%" y="309" width="0.0147%" height="15" fill="rgb(224,145,5)" fg:x="9131000667" fg:w="5531859"/><text x="24.4720%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (1,485,153,929 samples, 3.94%)</title><rect x="20.3069%" y="405" width="3.9397%" height="15" fill="rgb(234,130,49)" fg:x="7655143625" fg:w="1485153929"/><text x="20.5569%" y="415.50">core..</text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1,485,153,929 samples, 3.94%)</title><rect x="20.3069%" y="389" width="3.9397%" height="15" fill="rgb(254,6,2)" fg:x="7655143625" fg:w="1485153929"/><text x="20.5569%" y="399.50">&lt;loc..</text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (1,485,153,929 samples, 3.94%)</title><rect x="20.3069%" y="373" width="3.9397%" height="15" fill="rgb(208,96,46)" fg:x="7655143625" fg:w="1485153929"/><text x="20.5569%" y="383.50">&lt;par..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (1,455,219,991 samples, 3.86%)</title><rect x="20.3863%" y="357" width="3.8603%" height="15" fill="rgb(239,3,39)" fg:x="7685077563" fg:w="1455219991"/><text x="20.6363%" y="367.50">park..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (1,455,219,991 samples, 3.86%)</title><rect x="20.3863%" y="341" width="3.8603%" height="15" fill="rgb(233,210,1)" fg:x="7685077563" fg:w="1455219991"/><text x="20.6363%" y="351.50">park..</text></g><g><title>parking_lot_core::parking_lot::unpark_filter (1,455,219,991 samples, 3.86%)</title><rect x="20.3863%" y="325" width="3.8603%" height="15" fill="rgb(244,137,37)" fg:x="7685077563" fg:w="1455219991"/><text x="20.6363%" y="335.50">park..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6,318,474 samples, 0.02%)</title><rect x="24.2466%" y="405" width="0.0168%" height="15" fill="rgb(240,136,2)" fg:x="9140297554" fg:w="6318474"/><text x="24.4966%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,318,474 samples, 0.02%)</title><rect x="24.2466%" y="389" width="0.0168%" height="15" fill="rgb(239,18,37)" fg:x="9140297554" fg:w="6318474"/><text x="24.4966%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (6,318,474 samples, 0.02%)</title><rect x="24.2466%" y="373" width="0.0168%" height="15" fill="rgb(218,185,22)" fg:x="9140297554" fg:w="6318474"/><text x="24.4966%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6,318,474 samples, 0.02%)</title><rect x="24.2466%" y="357" width="0.0168%" height="15" fill="rgb(225,218,4)" fg:x="9140297554" fg:w="6318474"/><text x="24.4966%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9,100,452 samples, 0.02%)</title><rect x="24.3614%" y="341" width="0.0241%" height="15" fill="rgb(230,182,32)" fg:x="9183557438" fg:w="9100452"/><text x="24.6114%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (9,100,452 samples, 0.02%)</title><rect x="24.3614%" y="325" width="0.0241%" height="15" fill="rgb(242,56,43)" fg:x="9183557438" fg:w="9100452"/><text x="24.6114%" y="335.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow::_{{closure}} (23,975,937 samples, 0.06%)</title><rect x="24.3855%" y="341" width="0.0636%" height="15" fill="rgb(233,99,24)" fg:x="9192657890" fg:w="23975937"/><text x="24.6355%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (6,733,817 samples, 0.02%)</title><rect x="24.4313%" y="325" width="0.0179%" height="15" fill="rgb(234,209,42)" fg:x="9209900010" fg:w="6733817"/><text x="24.6813%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (6,733,817 samples, 0.02%)</title><rect x="24.4313%" y="309" width="0.0179%" height="15" fill="rgb(227,7,12)" fg:x="9209900010" fg:w="6733817"/><text x="24.6813%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (34,047,482 samples, 0.09%)</title><rect x="24.4566%" y="277" width="0.0903%" height="15" fill="rgb(245,203,43)" fg:x="9219446413" fg:w="34047482"/><text x="24.7066%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (34,047,482 samples, 0.09%)</title><rect x="24.4566%" y="261" width="0.0903%" height="15" fill="rgb(238,205,33)" fg:x="9219446413" fg:w="34047482"/><text x="24.7066%" y="271.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (3,614,727,454 samples, 9.59%)</title><rect x="24.4566%" y="293" width="9.5889%" height="15" fill="rgb(231,56,7)" fg:x="9219446413" fg:w="3614727454"/><text x="24.7066%" y="303.50">&lt;parking_lot_c..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (3,580,679,972 samples, 9.50%)</title><rect x="24.5469%" y="277" width="9.4985%" height="15" fill="rgb(244,186,29)" fg:x="9253493895" fg:w="3580679972"/><text x="24.7969%" y="287.50">parking_lot_co..</text></g><g><title>syscall (3,577,876,181 samples, 9.49%)</title><rect x="24.5544%" y="261" width="9.4911%" height="15" fill="rgb(234,111,31)" fg:x="9256297686" fg:w="3577876181"/><text x="24.8044%" y="271.50">syscall</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (11,317,633 samples, 0.03%)</title><rect x="34.0790%" y="261" width="0.0300%" height="15" fill="rgb(241,149,10)" fg:x="12846803445" fg:w="11317633"/><text x="34.3290%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11,317,633 samples, 0.03%)</title><rect x="34.0790%" y="245" width="0.0300%" height="15" fill="rgb(249,206,44)" fg:x="12846803445" fg:w="11317633"/><text x="34.3290%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (22,091,309 samples, 0.06%)</title><rect x="34.0570%" y="293" width="0.0586%" height="15" fill="rgb(251,153,30)" fg:x="12838539932" fg:w="22091309"/><text x="34.3070%" y="303.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (13,827,796 samples, 0.04%)</title><rect x="34.0790%" y="277" width="0.0367%" height="15" fill="rgb(239,152,38)" fg:x="12846803445" fg:w="13827796"/><text x="34.3290%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (3,667,869,363 samples, 9.73%)</title><rect x="24.4566%" y="309" width="9.7298%" height="15" fill="rgb(249,139,47)" fg:x="9219446413" fg:w="3667869363"/><text x="24.7066%" y="319.50">parking_lot_co..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (26,684,535 samples, 0.07%)</title><rect x="34.1156%" y="293" width="0.0708%" height="15" fill="rgb(244,64,35)" fg:x="12860631241" fg:w="26684535"/><text x="34.3656%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26,684,535 samples, 0.07%)</title><rect x="34.1156%" y="277" width="0.0708%" height="15" fill="rgb(216,46,15)" fg:x="12860631241" fg:w="26684535"/><text x="34.3656%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (26,684,535 samples, 0.07%)</title><rect x="34.1156%" y="261" width="0.0708%" height="15" fill="rgb(250,74,19)" fg:x="12860631241" fg:w="26684535"/><text x="34.3656%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::park (3,690,629,553 samples, 9.79%)</title><rect x="24.4491%" y="341" width="9.7902%" height="15" fill="rgb(249,42,33)" fg:x="9216633827" fg:w="3690629553"/><text x="24.6991%" y="351.50">parking_lot_co..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3,690,629,553 samples, 9.79%)</title><rect x="24.4491%" y="325" width="9.7902%" height="15" fill="rgb(242,149,17)" fg:x="9216633827" fg:w="3690629553"/><text x="24.6991%" y="335.50">parking_lot_co..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19,947,604 samples, 0.05%)</title><rect x="34.1864%" y="309" width="0.0529%" height="15" fill="rgb(244,29,21)" fg:x="12887315776" fg:w="19947604"/><text x="34.4364%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (19,947,604 samples, 0.05%)</title><rect x="34.1864%" y="293" width="0.0529%" height="15" fill="rgb(220,130,37)" fg:x="12887315776" fg:w="19947604"/><text x="34.4364%" y="303.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::_{{constant}}::_{{closure}} (19,947,604 samples, 0.05%)</title><rect x="34.1864%" y="277" width="0.0529%" height="15" fill="rgb(211,67,2)" fg:x="12887315776" fg:w="19947604"/><text x="34.4364%" y="287.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (19,947,604 samples, 0.05%)</title><rect x="34.1864%" y="261" width="0.0529%" height="15" fill="rgb(235,68,52)" fg:x="12887315776" fg:w="19947604"/><text x="34.4364%" y="271.50"></text></g><g><title>core::hint::spin_loop (10,230,069 samples, 0.03%)</title><rect x="34.2717%" y="309" width="0.0271%" height="15" fill="rgb(246,142,3)" fg:x="12919453211" fg:w="10230069"/><text x="34.5217%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (10,230,069 samples, 0.03%)</title><rect x="34.2717%" y="293" width="0.0271%" height="15" fill="rgb(241,25,7)" fg:x="12919453211" fg:w="10230069"/><text x="34.5217%" y="303.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (14,443,011 samples, 0.04%)</title><rect x="34.2717%" y="325" width="0.0383%" height="15" fill="rgb(242,119,39)" fg:x="12919453211" fg:w="14443011"/><text x="34.5217%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,212,942 samples, 0.01%)</title><rect x="34.2988%" y="309" width="0.0112%" height="15" fill="rgb(241,98,45)" fg:x="12929683280" fg:w="4212942"/><text x="34.5488%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,212,942 samples, 0.01%)</title><rect x="34.2988%" y="293" width="0.0112%" height="15" fill="rgb(254,28,30)" fg:x="12929683280" fg:w="4212942"/><text x="34.5488%" y="303.50"></text></g><g><title>__sched_yield (1,437,763,899 samples, 3.81%)</title><rect x="34.3100%" y="309" width="3.8140%" height="15" fill="rgb(241,142,54)" fg:x="12933896222" fg:w="1437763899"/><text x="34.5600%" y="319.50">__sc..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_common (5,205,576,707 samples, 13.81%)</title><rect x="24.3275%" y="357" width="13.8089%" height="15" fill="rgb(222,85,15)" fg:x="9170798598" fg:w="5205576707"/><text x="24.5775%" y="367.50">parking_lot::raw_rwlo..</text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (1,469,111,925 samples, 3.90%)</title><rect x="34.2393%" y="341" width="3.8971%" height="15" fill="rgb(210,85,47)" fg:x="12907263380" fg:w="1469111925"/><text x="34.4893%" y="351.50">park..</text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (1,442,479,083 samples, 3.83%)</title><rect x="34.3100%" y="325" width="3.8265%" height="15" fill="rgb(224,206,25)" fg:x="12933896222" fg:w="1442479083"/><text x="34.5600%" y="335.50">park..</text></g><g><title>std::thread::yield_now (4,715,184 samples, 0.01%)</title><rect x="38.1240%" y="309" width="0.0125%" height="15" fill="rgb(243,201,19)" fg:x="14371660121" fg:w="4715184"/><text x="38.3740%" y="319.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (4,715,184 samples, 0.01%)</title><rect x="38.1240%" y="293" width="0.0125%" height="15" fill="rgb(236,59,4)" fg:x="14371660121" fg:w="4715184"/><text x="38.3740%" y="303.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (5,233,740,804 samples, 13.88%)</title><rect x="24.2634%" y="405" width="13.8836%" height="15" fill="rgb(254,179,45)" fg:x="9146616028" fg:w="5233740804"/><text x="24.5134%" y="415.50">lock_api::rwlock::RwL..</text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (5,233,740,804 samples, 13.88%)</title><rect x="24.2634%" y="389" width="13.8836%" height="15" fill="rgb(226,14,10)" fg:x="9146616028" fg:w="5233740804"/><text x="24.5134%" y="399.50">&lt;parking_lot::raw_rwl..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (5,213,085,246 samples, 13.83%)</title><rect x="24.3182%" y="373" width="13.8288%" height="15" fill="rgb(244,27,41)" fg:x="9167271586" fg:w="5213085246"/><text x="24.5682%" y="383.50">parking_lot::raw_rwlo..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (3,981,527 samples, 0.01%)</title><rect x="38.1365%" y="357" width="0.0106%" height="15" fill="rgb(235,35,32)" fg:x="14376375305" fg:w="3981527"/><text x="38.3865%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="261" width="0.0331%" height="15" fill="rgb(218,68,31)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="245" width="0.0331%" height="15" fill="rgb(207,120,37)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="229" width="0.0331%" height="15" fill="rgb(227,98,0)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="213" width="0.0331%" height="15" fill="rgb(207,7,3)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="197" width="0.0331%" height="15" fill="rgb(206,98,19)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="181" width="0.0331%" height="15" fill="rgb(217,5,26)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="191.50"></text></g><g><title>alloc::alloc::alloc (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="165" width="0.0331%" height="15" fill="rgb(235,190,38)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="175.50"></text></g><g><title>malloc (12,490,177 samples, 0.03%)</title><rect x="38.1470%" y="149" width="0.0331%" height="15" fill="rgb(247,86,24)" fg:x="14380356832" fg:w="12490177"/><text x="38.3970%" y="159.50"></text></g><g><title>[libc.so.6] (6,996,583 samples, 0.02%)</title><rect x="38.1616%" y="133" width="0.0186%" height="15" fill="rgb(205,101,16)" fg:x="14385850426" fg:w="6996583"/><text x="38.4116%" y="143.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="389" width="0.0785%" height="15" fill="rgb(246,168,33)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="399.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="373" width="0.0785%" height="15" fill="rgb(231,114,1)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="357" width="0.0785%" height="15" fill="rgb(207,184,53)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="341" width="0.0785%" height="15" fill="rgb(224,95,51)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="325" width="0.0785%" height="15" fill="rgb(212,188,45)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="309" width="0.0785%" height="15" fill="rgb(223,154,38)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="293" width="0.0785%" height="15" fill="rgb(251,22,52)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (29,587,090 samples, 0.08%)</title><rect x="38.1470%" y="277" width="0.0785%" height="15" fill="rgb(229,209,22)" fg:x="14380356832" fg:w="29587090"/><text x="38.3970%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17,096,913 samples, 0.05%)</title><rect x="38.1802%" y="261" width="0.0454%" height="15" fill="rgb(234,138,34)" fg:x="14392847009" fg:w="17096913"/><text x="38.4302%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17,096,913 samples, 0.05%)</title><rect x="38.1802%" y="245" width="0.0454%" height="15" fill="rgb(212,95,11)" fg:x="14392847009" fg:w="17096913"/><text x="38.4302%" y="255.50"></text></g><g><title>[libc.so.6] (17,096,913 samples, 0.05%)</title><rect x="38.1802%" y="229" width="0.0454%" height="15" fill="rgb(240,179,47)" fg:x="14392847009" fg:w="17096913"/><text x="38.4302%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="357" width="0.1368%" height="15" fill="rgb(240,163,11)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="341" width="0.1368%" height="15" fill="rgb(236,37,12)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="325" width="0.1368%" height="15" fill="rgb(232,164,16)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="309" width="0.1368%" height="15" fill="rgb(244,205,15)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="293" width="0.1368%" height="15" fill="rgb(223,117,47)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="277" width="0.1368%" height="15" fill="rgb(244,107,35)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="261" width="0.1368%" height="15" fill="rgb(205,140,8)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="271.50"></text></g><g><title>alloc::alloc::alloc (51,572,449 samples, 0.14%)</title><rect x="38.4459%" y="245" width="0.1368%" height="15" fill="rgb(228,84,46)" fg:x="14493031606" fg:w="51572449"/><text x="38.6959%" y="255.50"></text></g><g><title>malloc (49,267,717 samples, 0.13%)</title><rect x="38.4520%" y="229" width="0.1307%" height="15" fill="rgb(254,188,9)" fg:x="14495336338" fg:w="49267717"/><text x="38.7020%" y="239.50"></text></g><g><title>[libc.so.6] (16,763,484 samples, 0.04%)</title><rect x="38.5383%" y="213" width="0.0445%" height="15" fill="rgb(206,112,54)" fg:x="14527840571" fg:w="16763484"/><text x="38.7883%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (156,484,045 samples, 0.42%)</title><rect x="38.2255%" y="389" width="0.4151%" height="15" fill="rgb(216,84,49)" fg:x="14409943922" fg:w="156484045"/><text x="38.4755%" y="399.50"></text></g><g><title>alloc::str::convert_while_ascii (149,945,088 samples, 0.40%)</title><rect x="38.2429%" y="373" width="0.3978%" height="15" fill="rgb(214,194,35)" fg:x="14416482879" fg:w="149945088"/><text x="38.4929%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (21,823,912 samples, 0.06%)</title><rect x="38.5827%" y="357" width="0.0579%" height="15" fill="rgb(249,28,3)" fg:x="14544604055" fg:w="21823912"/><text x="38.8327%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (13,383,417 samples, 0.04%)</title><rect x="38.6051%" y="341" width="0.0355%" height="15" fill="rgb(222,56,52)" fg:x="14553044550" fg:w="13383417"/><text x="38.8551%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="389" width="0.0687%" height="15" fill="rgb(245,217,50)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="373" width="0.0687%" height="15" fill="rgb(213,201,24)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="357" width="0.0687%" height="15" fill="rgb(248,116,28)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="341" width="0.0687%" height="15" fill="rgb(219,72,43)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="325" width="0.0687%" height="15" fill="rgb(209,138,14)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="309" width="0.0687%" height="15" fill="rgb(222,18,33)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (25,882,281 samples, 0.07%)</title><rect x="38.6406%" y="293" width="0.0687%" height="15" fill="rgb(213,199,7)" fg:x="14566427967" fg:w="25882281"/><text x="38.8906%" y="303.50"></text></g><g><title>cfree (23,106,056 samples, 0.06%)</title><rect x="38.6480%" y="277" width="0.0613%" height="15" fill="rgb(250,110,10)" fg:x="14569204192" fg:w="23106056"/><text x="38.8980%" y="287.50"></text></g><g><title>[libc.so.6] (6,795,399 samples, 0.02%)</title><rect x="38.6913%" y="261" width="0.0180%" height="15" fill="rgb(248,123,6)" fg:x="14585514849" fg:w="6795399"/><text x="38.9413%" y="271.50"></text></g><g><title>[libc.so.6] (4,009,184 samples, 0.01%)</title><rect x="38.6987%" y="245" width="0.0106%" height="15" fill="rgb(206,91,31)" fg:x="14588301064" fg:w="4009184"/><text x="38.9487%" y="255.50"></text></g><g><title>[libc.so.6] (4,009,184 samples, 0.01%)</title><rect x="38.6987%" y="229" width="0.0106%" height="15" fill="rgb(211,154,13)" fg:x="14588301064" fg:w="4009184"/><text x="38.9487%" y="239.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (4,347,953 samples, 0.01%)</title><rect x="38.7093%" y="373" width="0.0115%" height="15" fill="rgb(225,148,7)" fg:x="14592310248" fg:w="4347953"/><text x="38.9593%" y="383.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (4,347,953 samples, 0.01%)</title><rect x="38.7093%" y="357" width="0.0115%" height="15" fill="rgb(220,160,43)" fg:x="14592310248" fg:w="4347953"/><text x="38.9593%" y="367.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (4,347,953 samples, 0.01%)</title><rect x="38.7093%" y="341" width="0.0115%" height="15" fill="rgb(213,52,39)" fg:x="14592310248" fg:w="4347953"/><text x="38.9593%" y="351.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (9,233,313 samples, 0.02%)</title><rect x="38.7924%" y="293" width="0.0245%" height="15" fill="rgb(243,137,7)" fg:x="14623635959" fg:w="9233313"/><text x="39.0424%" y="303.50"></text></g><g><title>server::get_value_type (254,740,066 samples, 0.68%)</title><rect x="38.1470%" y="405" width="0.6758%" height="15" fill="rgb(230,79,13)" fg:x="14380356832" fg:w="254740066"/><text x="38.3970%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (42,786,650 samples, 0.11%)</title><rect x="38.7093%" y="389" width="0.1135%" height="15" fill="rgb(247,105,23)" fg:x="14592310248" fg:w="42786650"/><text x="38.9593%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (38,438,697 samples, 0.10%)</title><rect x="38.7208%" y="373" width="0.1020%" height="15" fill="rgb(223,179,41)" fg:x="14596658201" fg:w="38438697"/><text x="38.9708%" y="383.50"></text></g><g><title>core::num::dec2flt::dec2flt (35,400,095 samples, 0.09%)</title><rect x="38.7289%" y="357" width="0.0939%" height="15" fill="rgb(218,9,34)" fg:x="14599696803" fg:w="35400095"/><text x="38.9789%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (32,252,878 samples, 0.09%)</title><rect x="38.7372%" y="341" width="0.0856%" height="15" fill="rgb(222,106,8)" fg:x="14602844020" fg:w="32252878"/><text x="38.9872%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (30,359,439 samples, 0.08%)</title><rect x="38.7423%" y="325" width="0.0805%" height="15" fill="rgb(211,220,0)" fg:x="14604737459" fg:w="30359439"/><text x="38.9923%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (20,882,298 samples, 0.06%)</title><rect x="38.7674%" y="309" width="0.0554%" height="15" fill="rgb(229,52,16)" fg:x="14614214600" fg:w="20882298"/><text x="39.0174%" y="319.50"></text></g><g><title>[server] (5,803,899 samples, 0.02%)</title><rect x="38.8352%" y="357" width="0.0154%" height="15" fill="rgb(212,155,18)" fg:x="14639775396" fg:w="5803899"/><text x="39.0852%" y="367.50"></text></g><g><title>[unknown] (11,970,491 samples, 0.03%)</title><rect x="38.8506%" y="357" width="0.0318%" height="15" fill="rgb(242,21,14)" fg:x="14645579295" fg:w="11970491"/><text x="39.1006%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (11,970,491 samples, 0.03%)</title><rect x="38.8506%" y="341" width="0.0318%" height="15" fill="rgb(222,19,48)" fg:x="14645579295" fg:w="11970491"/><text x="39.1006%" y="351.50"></text></g><g><title>core::fmt::Formatter::new (4,496,352 samples, 0.01%)</title><rect x="38.8824%" y="357" width="0.0119%" height="15" fill="rgb(232,45,27)" fg:x="14657549786" fg:w="4496352"/><text x="39.1324%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (18,400,418 samples, 0.05%)</title><rect x="38.9859%" y="341" width="0.0488%" height="15" fill="rgb(249,103,42)" fg:x="14696598442" fg:w="18400418"/><text x="39.2359%" y="351.50"></text></g><g><title>alloc::string::String::push_str (18,400,418 samples, 0.05%)</title><rect x="38.9859%" y="325" width="0.0488%" height="15" fill="rgb(246,81,33)" fg:x="14696598442" fg:w="18400418"/><text x="39.2359%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18,400,418 samples, 0.05%)</title><rect x="38.9859%" y="309" width="0.0488%" height="15" fill="rgb(252,33,42)" fg:x="14696598442" fg:w="18400418"/><text x="39.2359%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18,400,418 samples, 0.05%)</title><rect x="38.9859%" y="293" width="0.0488%" height="15" fill="rgb(209,212,41)" fg:x="14696598442" fg:w="18400418"/><text x="39.2359%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18,400,418 samples, 0.05%)</title><rect x="38.9859%" y="277" width="0.0488%" height="15" fill="rgb(207,154,6)" fg:x="14696598442" fg:w="18400418"/><text x="39.2359%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13,473,706 samples, 0.04%)</title><rect x="38.9990%" y="261" width="0.0357%" height="15" fill="rgb(223,64,47)" fg:x="14701525154" fg:w="13473706"/><text x="39.2490%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13,473,706 samples, 0.04%)</title><rect x="38.9990%" y="245" width="0.0357%" height="15" fill="rgb(211,161,38)" fg:x="14701525154" fg:w="13473706"/><text x="39.2490%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (13,473,706 samples, 0.04%)</title><rect x="38.9990%" y="229" width="0.0357%" height="15" fill="rgb(219,138,40)" fg:x="14701525154" fg:w="13473706"/><text x="39.2490%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,147,305 samples, 0.02%)</title><rect x="39.0158%" y="213" width="0.0190%" height="15" fill="rgb(241,228,46)" fg:x="14707851555" fg:w="7147305"/><text x="39.2658%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (7,147,305 samples, 0.02%)</title><rect x="39.0158%" y="197" width="0.0190%" height="15" fill="rgb(223,209,38)" fg:x="14707851555" fg:w="7147305"/><text x="39.2658%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,851,132 samples, 0.01%)</title><rect x="39.0219%" y="181" width="0.0129%" height="15" fill="rgb(236,164,45)" fg:x="14710147728" fg:w="4851132"/><text x="39.2719%" y="191.50"></text></g><g><title>malloc (4,851,132 samples, 0.01%)</title><rect x="39.0219%" y="165" width="0.0129%" height="15" fill="rgb(231,15,5)" fg:x="14710147728" fg:w="4851132"/><text x="39.2719%" y="175.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (116,913,087 samples, 0.31%)</title><rect x="38.8352%" y="389" width="0.3101%" height="15" fill="rgb(252,35,15)" fg:x="14639775396" fg:w="116913087"/><text x="39.0852%" y="399.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (116,913,087 samples, 0.31%)</title><rect x="38.8352%" y="373" width="0.3101%" height="15" fill="rgb(248,181,18)" fg:x="14639775396" fg:w="116913087"/><text x="39.0852%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (94,642,345 samples, 0.25%)</title><rect x="38.8943%" y="357" width="0.2511%" height="15" fill="rgb(233,39,42)" fg:x="14662046138" fg:w="94642345"/><text x="39.1443%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral (41,689,623 samples, 0.11%)</title><rect x="39.0347%" y="341" width="0.1106%" height="15" fill="rgb(238,110,33)" fg:x="14714998860" fg:w="41689623"/><text x="39.2847%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (5,486,159 samples, 0.01%)</title><rect x="39.1308%" y="325" width="0.0146%" height="15" fill="rgb(233,195,10)" fg:x="14751202324" fg:w="5486159"/><text x="39.3808%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="341" width="0.1507%" height="15" fill="rgb(254,105,3)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="325" width="0.1507%" height="15" fill="rgb(221,225,9)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="309" width="0.1507%" height="15" fill="rgb(224,227,45)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="293" width="0.1507%" height="15" fill="rgb(229,198,43)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="277" width="0.1507%" height="15" fill="rgb(206,209,35)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="261" width="0.1507%" height="15" fill="rgb(245,195,53)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="271.50"></text></g><g><title>alloc::alloc::alloc (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="245" width="0.1507%" height="15" fill="rgb(240,92,26)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="255.50"></text></g><g><title>malloc (56,822,203 samples, 0.15%)</title><rect x="39.1453%" y="229" width="0.1507%" height="15" fill="rgb(207,40,23)" fg:x="14756688483" fg:w="56822203"/><text x="39.3953%" y="239.50"></text></g><g><title>[libc.so.6] (40,948,439 samples, 0.11%)</title><rect x="39.1874%" y="213" width="0.1086%" height="15" fill="rgb(223,111,35)" fg:x="14772562247" fg:w="40948439"/><text x="39.4374%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (68,527,131 samples, 0.18%)</title><rect x="39.1453%" y="389" width="0.1818%" height="15" fill="rgb(229,147,28)" fg:x="14756688483" fg:w="68527131"/><text x="39.3953%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68,527,131 samples, 0.18%)</title><rect x="39.1453%" y="373" width="0.1818%" height="15" fill="rgb(211,29,28)" fg:x="14756688483" fg:w="68527131"/><text x="39.3953%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (68,527,131 samples, 0.18%)</title><rect x="39.1453%" y="357" width="0.1818%" height="15" fill="rgb(228,72,33)" fg:x="14756688483" fg:w="68527131"/><text x="39.3953%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11,704,928 samples, 0.03%)</title><rect x="39.2961%" y="341" width="0.0310%" height="15" fill="rgb(205,214,31)" fg:x="14813510686" fg:w="11704928"/><text x="39.5461%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,704,928 samples, 0.03%)</title><rect x="39.2961%" y="325" width="0.0310%" height="15" fill="rgb(224,111,15)" fg:x="14813510686" fg:w="11704928"/><text x="39.5461%" y="335.50"></text></g><g><title>[libc.so.6] (11,704,928 samples, 0.03%)</title><rect x="39.2961%" y="309" width="0.0310%" height="15" fill="rgb(253,21,26)" fg:x="14813510686" fg:w="11704928"/><text x="39.5461%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4,531,108 samples, 0.01%)</title><rect x="39.3457%" y="277" width="0.0120%" height="15" fill="rgb(245,139,43)" fg:x="14832234145" fg:w="4531108"/><text x="39.5957%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (4,705,635 samples, 0.01%)</title><rect x="39.3741%" y="261" width="0.0125%" height="15" fill="rgb(252,170,7)" fg:x="14842938789" fg:w="4705635"/><text x="39.6241%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,705,635 samples, 0.01%)</title><rect x="39.3741%" y="245" width="0.0125%" height="15" fill="rgb(231,118,14)" fg:x="14842938789" fg:w="4705635"/><text x="39.6241%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (24,697,980 samples, 0.07%)</title><rect x="39.3578%" y="277" width="0.0655%" height="15" fill="rgb(238,83,0)" fg:x="14836765253" fg:w="24697980"/><text x="39.6078%" y="287.50"></text></g><g><title>malloc (8,816,676 samples, 0.02%)</title><rect x="39.3999%" y="261" width="0.0234%" height="15" fill="rgb(221,39,39)" fg:x="14852646557" fg:w="8816676"/><text x="39.6499%" y="271.50"></text></g><g><title>alloc::string::String::reserve (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="373" width="0.0958%" height="15" fill="rgb(222,119,46)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="357" width="0.0958%" height="15" fill="rgb(222,165,49)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="341" width="0.0958%" height="15" fill="rgb(219,113,52)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="325" width="0.0958%" height="15" fill="rgb(214,7,15)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="309" width="0.0958%" height="15" fill="rgb(235,32,4)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (36,097,050 samples, 0.10%)</title><rect x="39.3325%" y="293" width="0.0958%" height="15" fill="rgb(238,90,54)" fg:x="14827252285" fg:w="36097050"/><text x="39.5825%" y="303.50"></text></g><g><title>alloc::string::String::push (45,959,574 samples, 0.12%)</title><rect x="39.3271%" y="389" width="0.1219%" height="15" fill="rgb(213,208,19)" fg:x="14825215614" fg:w="45959574"/><text x="39.5771%" y="399.50"></text></g><g><title>core::char::methods::encode_utf8_raw_unchecked (4,789,455 samples, 0.01%)</title><rect x="39.4363%" y="373" width="0.0127%" height="15" fill="rgb(233,156,4)" fg:x="14866385733" fg:w="4789455"/><text x="39.6863%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,932,255 samples, 0.01%)</title><rect x="39.4707%" y="325" width="0.0104%" height="15" fill="rgb(207,194,5)" fg:x="14879358361" fg:w="3932255"/><text x="39.7207%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,932,255 samples, 0.01%)</title><rect x="39.4707%" y="309" width="0.0104%" height="15" fill="rgb(206,111,30)" fg:x="14879358361" fg:w="3932255"/><text x="39.7207%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,932,255 samples, 0.01%)</title><rect x="39.4707%" y="293" width="0.0104%" height="15" fill="rgb(243,70,54)" fg:x="14879358361" fg:w="3932255"/><text x="39.7207%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,932,255 samples, 0.01%)</title><rect x="39.4707%" y="277" width="0.0104%" height="15" fill="rgb(242,28,8)" fg:x="14879358361" fg:w="3932255"/><text x="39.7207%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (9,685,334 samples, 0.03%)</title><rect x="39.5217%" y="181" width="0.0257%" height="15" fill="rgb(219,106,18)" fg:x="14898570565" fg:w="9685334"/><text x="39.7717%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6,294,121 samples, 0.02%)</title><rect x="39.5307%" y="165" width="0.0167%" height="15" fill="rgb(244,222,10)" fg:x="14901961778" fg:w="6294121"/><text x="39.7807%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (427,965,329 samples, 1.14%)</title><rect x="39.5036%" y="229" width="1.1353%" height="15" fill="rgb(236,179,52)" fg:x="14891749717" fg:w="427965329"/><text x="39.7536%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (427,965,329 samples, 1.14%)</title><rect x="39.5036%" y="213" width="1.1353%" height="15" fill="rgb(213,23,39)" fg:x="14891749717" fg:w="427965329"/><text x="39.7536%" y="223.50"></text></g><g><title>alloc::alloc::realloc (421,144,481 samples, 1.12%)</title><rect x="39.5217%" y="197" width="1.1172%" height="15" fill="rgb(238,48,10)" fg:x="14898570565" fg:w="421144481"/><text x="39.7717%" y="207.50"></text></g><g><title>realloc (409,624,085 samples, 1.09%)</title><rect x="39.5523%" y="181" width="1.0866%" height="15" fill="rgb(251,196,23)" fg:x="14910090961" fg:w="409624085"/><text x="39.8023%" y="191.50"></text></g><g><title>[libc.so.6] (340,635,459 samples, 0.90%)</title><rect x="39.7353%" y="165" width="0.9036%" height="15" fill="rgb(250,152,24)" fg:x="14979079587" fg:w="340635459"/><text x="39.9853%" y="175.50"></text></g><g><title>[libc.so.6] (287,502,992 samples, 0.76%)</title><rect x="39.8762%" y="149" width="0.7627%" height="15" fill="rgb(209,150,17)" fg:x="15032212054" fg:w="287502992"/><text x="40.1262%" y="159.50"></text></g><g><title>[libc.so.6] (39,968,123 samples, 0.11%)</title><rect x="40.5329%" y="133" width="0.1060%" height="15" fill="rgb(234,202,34)" fg:x="15279746923" fg:w="39968123"/><text x="40.7829%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (434,517,392 samples, 1.15%)</title><rect x="39.4987%" y="245" width="1.1527%" height="15" fill="rgb(253,148,53)" fg:x="14889885798" fg:w="434517392"/><text x="39.7487%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4,688,144 samples, 0.01%)</title><rect x="40.6389%" y="229" width="0.0124%" height="15" fill="rgb(218,129,16)" fg:x="15319715046" fg:w="4688144"/><text x="40.8889%" y="239.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (4,217,555 samples, 0.01%)</title><rect x="40.6593%" y="245" width="0.0112%" height="15" fill="rgb(216,85,19)" fg:x="15327397499" fg:w="4217555"/><text x="40.9093%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (456,758,894 samples, 1.21%)</title><rect x="39.4812%" y="325" width="1.2117%" height="15" fill="rgb(235,228,7)" fg:x="14883290616" fg:w="456758894"/><text x="39.7312%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (456,758,894 samples, 1.21%)</title><rect x="39.4812%" y="309" width="1.2117%" height="15" fill="rgb(245,175,0)" fg:x="14883290616" fg:w="456758894"/><text x="39.7312%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (456,758,894 samples, 1.21%)</title><rect x="39.4812%" y="293" width="1.2117%" height="15" fill="rgb(208,168,36)" fg:x="14883290616" fg:w="456758894"/><text x="39.7312%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (456,758,894 samples, 1.21%)</title><rect x="39.4812%" y="277" width="1.2117%" height="15" fill="rgb(246,171,24)" fg:x="14883290616" fg:w="456758894"/><text x="39.7312%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (456,758,894 samples, 1.21%)</title><rect x="39.4812%" y="261" width="1.2117%" height="15" fill="rgb(215,142,24)" fg:x="14883290616" fg:w="456758894"/><text x="39.7312%" y="271.50"></text></g><g><title>core::cmp::max (8,434,456 samples, 0.02%)</title><rect x="40.6705%" y="245" width="0.0224%" height="15" fill="rgb(250,187,7)" fg:x="15331615054" fg:w="8434456"/><text x="40.9205%" y="255.50"></text></g><g><title>core::cmp::Ord::max (8,434,456 samples, 0.02%)</title><rect x="40.6705%" y="229" width="0.0224%" height="15" fill="rgb(228,66,33)" fg:x="15331615054" fg:w="8434456"/><text x="40.9205%" y="239.50"></text></g><g><title>alloc::string::String::push_str (522,482,356 samples, 1.39%)</title><rect x="39.4490%" y="389" width="1.3860%" height="15" fill="rgb(234,215,21)" fg:x="14871175188" fg:w="522482356"/><text x="39.6990%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (522,482,356 samples, 1.39%)</title><rect x="39.4490%" y="373" width="1.3860%" height="15" fill="rgb(222,191,20)" fg:x="14871175188" fg:w="522482356"/><text x="39.6990%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (522,482,356 samples, 1.39%)</title><rect x="39.4490%" y="357" width="1.3860%" height="15" fill="rgb(245,79,54)" fg:x="14871175188" fg:w="522482356"/><text x="39.6990%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (522,482,356 samples, 1.39%)</title><rect x="39.4490%" y="341" width="1.3860%" height="15" fill="rgb(240,10,37)" fg:x="14871175188" fg:w="522482356"/><text x="39.6990%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53,608,034 samples, 0.14%)</title><rect x="40.6928%" y="325" width="0.1422%" height="15" fill="rgb(214,192,32)" fg:x="15340049510" fg:w="53608034"/><text x="40.9428%" y="335.50"></text></g><g><title>[libc.so.6] (48,559,856 samples, 0.13%)</title><rect x="40.7062%" y="309" width="0.1288%" height="15" fill="rgb(209,36,54)" fg:x="15345097688" fg:w="48559856"/><text x="40.9562%" y="319.50"></text></g><g><title>[libc.so.6] (4,007,204 samples, 0.01%)</title><rect x="40.8422%" y="277" width="0.0106%" height="15" fill="rgb(220,10,11)" fg:x="15396364291" fg:w="4007204"/><text x="41.0922%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (7,336,798 samples, 0.02%)</title><rect x="40.8528%" y="277" width="0.0195%" height="15" fill="rgb(221,106,17)" fg:x="15400371495" fg:w="7336798"/><text x="41.1028%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7,336,798 samples, 0.02%)</title><rect x="40.8528%" y="261" width="0.0195%" height="15" fill="rgb(251,142,44)" fg:x="15400371495" fg:w="7336798"/><text x="41.1028%" y="271.50"></text></g><g><title>server_lib::resp3::bulk_string_response (865,182,632 samples, 2.30%)</title><rect x="38.8228%" y="405" width="2.2951%" height="15" fill="rgb(238,13,15)" fg:x="14635096898" fg:w="865182632"/><text x="39.0728%" y="415.50">s..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="389" width="0.2828%" height="15" fill="rgb(208,107,27)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="373" width="0.2828%" height="15" fill="rgb(205,136,37)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="357" width="0.2828%" height="15" fill="rgb(250,205,27)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="341" width="0.2828%" height="15" fill="rgb(210,80,43)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="325" width="0.2828%" height="15" fill="rgb(247,160,36)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="309" width="0.2828%" height="15" fill="rgb(234,13,49)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (106,621,986 samples, 0.28%)</title><rect x="40.8350%" y="293" width="0.2828%" height="15" fill="rgb(234,122,0)" fg:x="15393657544" fg:w="106621986"/><text x="41.0850%" y="303.50"></text></g><g><title>cfree (90,567,422 samples, 0.24%)</title><rect x="40.8776%" y="277" width="0.2402%" height="15" fill="rgb(207,146,38)" fg:x="15409712108" fg:w="90567422"/><text x="41.1276%" y="287.50"></text></g><g><title>[libc.so.6] (35,266,077 samples, 0.09%)</title><rect x="41.0243%" y="261" width="0.0936%" height="15" fill="rgb(207,177,25)" fg:x="15465013453" fg:w="35266077"/><text x="41.2743%" y="271.50"></text></g><g><title>[libc.so.6] (14,154,238 samples, 0.04%)</title><rect x="41.0803%" y="245" width="0.0375%" height="15" fill="rgb(211,178,42)" fg:x="15486125292" fg:w="14154238"/><text x="41.3303%" y="255.50"></text></g><g><title>[libc.so.6] (11,628,137 samples, 0.03%)</title><rect x="41.0870%" y="229" width="0.0308%" height="15" fill="rgb(230,69,54)" fg:x="15488651393" fg:w="11628137"/><text x="41.3370%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (10,244,776 samples, 0.03%)</title><rect x="41.2933%" y="181" width="0.0272%" height="15" fill="rgb(214,135,41)" fg:x="15566391679" fg:w="10244776"/><text x="41.5433%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6,090,309 samples, 0.02%)</title><rect x="41.3043%" y="165" width="0.0162%" height="15" fill="rgb(237,67,25)" fg:x="15570546146" fg:w="6090309"/><text x="41.5543%" y="175.50"></text></g><g><title>core::ptr::read_volatile (7,890,576 samples, 0.02%)</title><rect x="41.3289%" y="181" width="0.0209%" height="15" fill="rgb(222,189,50)" fg:x="15579837161" fg:w="7890576"/><text x="41.5789%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="293" width="0.3872%" height="15" fill="rgb(245,148,34)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="277" width="0.3872%" height="15" fill="rgb(222,29,6)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="261" width="0.3872%" height="15" fill="rgb(221,189,43)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="245" width="0.3872%" height="15" fill="rgb(207,36,27)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="229" width="0.3872%" height="15" fill="rgb(217,90,24)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="213" width="0.3872%" height="15" fill="rgb(224,66,35)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="223.50"></text></g><g><title>alloc::alloc::alloc (145,963,961 samples, 0.39%)</title><rect x="41.2933%" y="197" width="0.3872%" height="15" fill="rgb(221,13,50)" fg:x="15566391679" fg:w="145963961"/><text x="41.5433%" y="207.50"></text></g><g><title>malloc (124,627,903 samples, 0.33%)</title><rect x="41.3499%" y="181" width="0.3306%" height="15" fill="rgb(236,68,49)" fg:x="15587727737" fg:w="124627903"/><text x="41.5999%" y="191.50"></text></g><g><title>[libc.so.6] (88,010,102 samples, 0.23%)</title><rect x="41.4470%" y="165" width="0.2335%" height="15" fill="rgb(229,146,28)" fg:x="15624345538" fg:w="88010102"/><text x="41.6970%" y="175.50"></text></g><g><title>[libc.so.6] (17,402,397 samples, 0.05%)</title><rect x="41.6343%" y="149" width="0.0462%" height="15" fill="rgb(225,31,38)" fg:x="15694953243" fg:w="17402397"/><text x="41.8843%" y="159.50"></text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (230,876,604 samples, 0.61%)</title><rect x="41.2381%" y="389" width="0.6125%" height="15" fill="rgb(250,208,3)" fg:x="15545616915" fg:w="230876604"/><text x="41.4881%" y="399.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (225,248,855 samples, 0.60%)</title><rect x="41.2531%" y="373" width="0.5975%" height="15" fill="rgb(246,54,23)" fg:x="15551244664" fg:w="225248855"/><text x="41.5031%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (215,575,175 samples, 0.57%)</title><rect x="41.2787%" y="357" width="0.5719%" height="15" fill="rgb(243,76,11)" fg:x="15560918344" fg:w="215575175"/><text x="41.5287%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (210,101,840 samples, 0.56%)</title><rect x="41.2933%" y="341" width="0.5573%" height="15" fill="rgb(245,21,50)" fg:x="15566391679" fg:w="210101840"/><text x="41.5433%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (210,101,840 samples, 0.56%)</title><rect x="41.2933%" y="325" width="0.5573%" height="15" fill="rgb(228,9,43)" fg:x="15566391679" fg:w="210101840"/><text x="41.5433%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (210,101,840 samples, 0.56%)</title><rect x="41.2933%" y="309" width="0.5573%" height="15" fill="rgb(208,100,47)" fg:x="15566391679" fg:w="210101840"/><text x="41.5433%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (64,137,879 samples, 0.17%)</title><rect x="41.6805%" y="293" width="0.1701%" height="15" fill="rgb(232,26,8)" fg:x="15712355640" fg:w="64137879"/><text x="41.9305%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64,137,879 samples, 0.17%)</title><rect x="41.6805%" y="277" width="0.1701%" height="15" fill="rgb(216,166,38)" fg:x="15712355640" fg:w="64137879"/><text x="41.9305%" y="287.50"></text></g><g><title>[libc.so.6] (61,971,064 samples, 0.16%)</title><rect x="41.6862%" y="261" width="0.1644%" height="15" fill="rgb(251,202,51)" fg:x="15714522455" fg:w="61971064"/><text x="41.9362%" y="271.50"></text></g><g><title>clock_gettime (5,773,016 samples, 0.02%)</title><rect x="41.8506%" y="389" width="0.0153%" height="15" fill="rgb(254,216,34)" fg:x="15776493519" fg:w="5773016"/><text x="42.1006%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9,366,019 samples, 0.02%)</title><rect x="41.8659%" y="389" width="0.0248%" height="15" fill="rgb(251,32,27)" fg:x="15782266535" fg:w="9366019"/><text x="42.1159%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (9,366,019 samples, 0.02%)</title><rect x="41.8659%" y="373" width="0.0248%" height="15" fill="rgb(208,127,28)" fg:x="15782266535" fg:w="9366019"/><text x="42.1159%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::zlib::bufread::ZlibDecoder&lt;&amp;[u8]&gt;&gt; (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="373" width="0.0412%" height="15" fill="rgb(224,137,22)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::mem::Decompress&gt; (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="357" width="0.0412%" height="15" fill="rgb(254,70,32)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::ffi::rust::Inflate&gt; (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="341" width="0.0412%" height="15" fill="rgb(229,75,37)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::inflate::stream::InflateState&gt;&gt; (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="325" width="0.0412%" height="15" fill="rgb(252,64,23)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="309" width="0.0412%" height="15" fill="rgb(232,162,48)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="293" width="0.0412%" height="15" fill="rgb(246,160,12)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (15,532,124 samples, 0.04%)</title><rect x="41.8958%" y="277" width="0.0412%" height="15" fill="rgb(247,166,0)" fg:x="15793529274" fg:w="15532124"/><text x="42.1458%" y="287.50"></text></g><g><title>cfree (13,450,065 samples, 0.04%)</title><rect x="41.9013%" y="261" width="0.0357%" height="15" fill="rgb(249,219,21)" fg:x="15795611333" fg:w="13450065"/><text x="42.1513%" y="271.50"></text></g><g><title>[libc.so.6] (7,482,245 samples, 0.02%)</title><rect x="41.9171%" y="245" width="0.0198%" height="15" fill="rgb(205,209,3)" fg:x="15801579153" fg:w="7482245"/><text x="42.1671%" y="255.50"></text></g><g><title>[libc.so.6] (7,482,245 samples, 0.02%)</title><rect x="41.9171%" y="229" width="0.0198%" height="15" fill="rgb(243,44,1)" fg:x="15801579153" fg:w="7482245"/><text x="42.1671%" y="239.50"></text></g><g><title>[libc.so.6] (7,482,245 samples, 0.02%)</title><rect x="41.9171%" y="213" width="0.0198%" height="15" fill="rgb(206,159,16)" fg:x="15801579153" fg:w="7482245"/><text x="42.1671%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="373" width="0.0655%" height="15" fill="rgb(244,77,30)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="357" width="0.0655%" height="15" fill="rgb(218,69,12)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="341" width="0.0655%" height="15" fill="rgb(212,87,7)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="325" width="0.0655%" height="15" fill="rgb(245,114,25)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="309" width="0.0655%" height="15" fill="rgb(210,61,42)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="319.50"></text></g><g><title>cfree (24,687,977 samples, 0.07%)</title><rect x="41.9370%" y="293" width="0.0655%" height="15" fill="rgb(211,52,33)" fg:x="15809061398" fg:w="24687977"/><text x="42.1870%" y="303.50"></text></g><g><title>[libc.so.6] (21,254,806 samples, 0.06%)</title><rect x="41.9461%" y="277" width="0.0564%" height="15" fill="rgb(234,58,33)" fg:x="15812494569" fg:w="21254806"/><text x="42.1961%" y="287.50"></text></g><g><title>[libc.so.6] (15,502,639 samples, 0.04%)</title><rect x="41.9614%" y="261" width="0.0411%" height="15" fill="rgb(220,115,36)" fg:x="15818246736" fg:w="15502639"/><text x="42.2114%" y="271.50"></text></g><g><title>[libc.so.6] (9,625,421 samples, 0.03%)</title><rect x="41.9769%" y="245" width="0.0255%" height="15" fill="rgb(243,153,54)" fg:x="15824123954" fg:w="9625421"/><text x="42.2269%" y="255.50"></text></g><g><title>__rustc::__rust_alloc (7,153,641 samples, 0.02%)</title><rect x="42.0025%" y="197" width="0.0190%" height="15" fill="rgb(251,47,18)" fg:x="15833749375" fg:w="7153641"/><text x="42.2525%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="293" width="0.2393%" height="15" fill="rgb(242,102,42)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="277" width="0.2393%" height="15" fill="rgb(234,31,38)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="261" width="0.2393%" height="15" fill="rgb(221,117,51)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="245" width="0.2393%" height="15" fill="rgb(212,20,18)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="229" width="0.2393%" height="15" fill="rgb(245,133,36)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="239.50"></text></g><g><title>alloc::alloc::alloc (90,214,818 samples, 0.24%)</title><rect x="42.0025%" y="213" width="0.2393%" height="15" fill="rgb(212,6,19)" fg:x="15833749375" fg:w="90214818"/><text x="42.2525%" y="223.50"></text></g><g><title>malloc (80,439,821 samples, 0.21%)</title><rect x="42.0284%" y="197" width="0.2134%" height="15" fill="rgb(218,1,36)" fg:x="15843524372" fg:w="80439821"/><text x="42.2784%" y="207.50"></text></g><g><title>[libc.so.6] (63,172,027 samples, 0.17%)</title><rect x="42.0742%" y="181" width="0.1676%" height="15" fill="rgb(246,84,54)" fg:x="15860792166" fg:w="63172027"/><text x="42.3242%" y="191.50"></text></g><g><title>[libc.so.6] (21,203,702 samples, 0.06%)</title><rect x="42.1855%" y="165" width="0.0562%" height="15" fill="rgb(242,110,6)" fg:x="15902760491" fg:w="21203702"/><text x="42.4355%" y="175.50"></text></g><g><title>flate2::zlib::bufread::ZlibDecoder&lt;R&gt;::new (401,625,481 samples, 1.07%)</title><rect x="42.0025%" y="373" width="1.0654%" height="15" fill="rgb(214,47,5)" fg:x="15833749375" fg:w="401625481"/><text x="42.2525%" y="383.50"></text></g><g><title>flate2::mem::Decompress::new (401,625,481 samples, 1.07%)</title><rect x="42.0025%" y="357" width="1.0654%" height="15" fill="rgb(218,159,25)" fg:x="15833749375" fg:w="401625481"/><text x="42.2525%" y="367.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::make (401,625,481 samples, 1.07%)</title><rect x="42.0025%" y="341" width="1.0654%" height="15" fill="rgb(215,211,28)" fg:x="15833749375" fg:w="401625481"/><text x="42.2525%" y="351.50"></text></g><g><title>miniz_oxide::inflate::stream::InflateState::new_boxed (401,625,481 samples, 1.07%)</title><rect x="42.0025%" y="325" width="1.0654%" height="15" fill="rgb(238,59,32)" fg:x="15833749375" fg:w="401625481"/><text x="42.2525%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (401,625,481 samples, 1.07%)</title><rect x="42.0025%" y="309" width="1.0654%" height="15" fill="rgb(226,82,3)" fg:x="15833749375" fg:w="401625481"/><text x="42.2525%" y="319.50"></text></g><g><title>core::ptr::write (311,410,663 samples, 0.83%)</title><rect x="42.2418%" y="293" width="0.8261%" height="15" fill="rgb(240,164,32)" fg:x="15923964193" fg:w="311410663"/><text x="42.4918%" y="303.50"></text></g><g><title>[libc.so.6] (311,410,663 samples, 0.83%)</title><rect x="42.2418%" y="277" width="0.8261%" height="15" fill="rgb(232,46,7)" fg:x="15923964193" fg:w="311410663"/><text x="42.4918%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (13,893,664 samples, 0.04%)</title><rect x="43.0679%" y="325" width="0.0369%" height="15" fill="rgb(229,129,53)" fg:x="16235374856" fg:w="13893664"/><text x="43.3179%" y="335.50"></text></g><g><title>core::str::validations::run_utf8_validation (13,893,664 samples, 0.04%)</title><rect x="43.0679%" y="309" width="0.0369%" height="15" fill="rgb(234,188,29)" fg:x="16235374856" fg:w="13893664"/><text x="43.3179%" y="319.50"></text></g><g><title>__rustc::__rdl_realloc (5,721,956 samples, 0.02%)</title><rect x="43.1647%" y="165" width="0.0152%" height="15" fill="rgb(246,141,4)" fg:x="16271883693" fg:w="5721956"/><text x="43.4147%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve (219,955,638 samples, 0.58%)</title><rect x="43.1524%" y="293" width="0.5835%" height="15" fill="rgb(229,23,39)" fg:x="16267227804" fg:w="219955638"/><text x="43.4024%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (219,955,638 samples, 0.58%)</title><rect x="43.1524%" y="277" width="0.5835%" height="15" fill="rgb(206,12,3)" fg:x="16267227804" fg:w="219955638"/><text x="43.4024%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve (219,955,638 samples, 0.58%)</title><rect x="43.1524%" y="261" width="0.5835%" height="15" fill="rgb(252,226,20)" fg:x="16267227804" fg:w="219955638"/><text x="43.4024%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (219,955,638 samples, 0.58%)</title><rect x="43.1524%" y="245" width="0.5835%" height="15" fill="rgb(216,123,35)" fg:x="16267227804" fg:w="219955638"/><text x="43.4024%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (218,125,339 samples, 0.58%)</title><rect x="43.1572%" y="229" width="0.5786%" height="15" fill="rgb(212,68,40)" fg:x="16269058103" fg:w="218125339"/><text x="43.4072%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (215,299,749 samples, 0.57%)</title><rect x="43.1647%" y="213" width="0.5711%" height="15" fill="rgb(254,125,32)" fg:x="16271883693" fg:w="215299749"/><text x="43.4147%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (215,299,749 samples, 0.57%)</title><rect x="43.1647%" y="197" width="0.5711%" height="15" fill="rgb(253,97,22)" fg:x="16271883693" fg:w="215299749"/><text x="43.4147%" y="207.50"></text></g><g><title>alloc::alloc::realloc (215,299,749 samples, 0.57%)</title><rect x="43.1647%" y="181" width="0.5711%" height="15" fill="rgb(241,101,14)" fg:x="16271883693" fg:w="215299749"/><text x="43.4147%" y="191.50"></text></g><g><title>realloc (209,577,793 samples, 0.56%)</title><rect x="43.1799%" y="165" width="0.5560%" height="15" fill="rgb(238,103,29)" fg:x="16277605649" fg:w="209577793"/><text x="43.4299%" y="175.50"></text></g><g><title>[libc.so.6] (171,398,892 samples, 0.45%)</title><rect x="43.2812%" y="149" width="0.4547%" height="15" fill="rgb(233,195,47)" fg:x="16315784550" fg:w="171398892"/><text x="43.5312%" y="159.50"></text></g><g><title>[libc.so.6] (139,011,785 samples, 0.37%)</title><rect x="43.3671%" y="133" width="0.3688%" height="15" fill="rgb(246,218,30)" fg:x="16348171657" fg:w="139011785"/><text x="43.6171%" y="143.50"></text></g><g><title>[libc.so.6] (23,492,681 samples, 0.06%)</title><rect x="43.6735%" y="117" width="0.0623%" height="15" fill="rgb(219,145,47)" fg:x="16463690761" fg:w="23492681"/><text x="43.9235%" y="127.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::ensure_init (5,072,350 samples, 0.01%)</title><rect x="43.7619%" y="261" width="0.0135%" height="15" fill="rgb(243,12,26)" fg:x="16497013138" fg:w="5072350"/><text x="44.0119%" y="271.50"></text></g><g><title>core::intrinsics::write_bytes (5,072,350 samples, 0.01%)</title><rect x="43.7619%" y="245" width="0.0135%" height="15" fill="rgb(214,87,16)" fg:x="16497013138" fg:w="5072350"/><text x="44.0119%" y="255.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (4,456,246 samples, 0.01%)</title><rect x="43.8513%" y="133" width="0.0118%" height="15" fill="rgb(208,99,42)" fg:x="16530688114" fg:w="4456246"/><text x="44.1013%" y="143.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (9,898,277 samples, 0.03%)</title><rect x="43.8451%" y="149" width="0.0263%" height="15" fill="rgb(253,99,2)" fg:x="16528380344" fg:w="9898277"/><text x="44.0951%" y="159.50"></text></g><g><title>core::cmp::min (6,747,528 samples, 0.02%)</title><rect x="43.8831%" y="133" width="0.0179%" height="15" fill="rgb(220,168,23)" fg:x="16542684514" fg:w="6747528"/><text x="44.1331%" y="143.50"></text></g><g><title>core::cmp::Ord::min (6,747,528 samples, 0.02%)</title><rect x="43.8831%" y="117" width="0.0179%" height="15" fill="rgb(242,38,24)" fg:x="16542684514" fg:w="6747528"/><text x="44.1331%" y="127.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (65,202,506 samples, 0.17%)</title><rect x="43.7754%" y="213" width="0.1730%" height="15" fill="rgb(225,182,9)" fg:x="16502085488" fg:w="65202506"/><text x="44.0254%" y="223.50"></text></g><g><title>flate2::mem::Decompress::decompress (65,202,506 samples, 0.17%)</title><rect x="43.7754%" y="197" width="0.1730%" height="15" fill="rgb(243,178,37)" fg:x="16502085488" fg:w="65202506"/><text x="44.0254%" y="207.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (65,202,506 samples, 0.17%)</title><rect x="43.7754%" y="181" width="0.1730%" height="15" fill="rgb(232,139,19)" fg:x="16502085488" fg:w="65202506"/><text x="44.0254%" y="191.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (65,202,506 samples, 0.17%)</title><rect x="43.7754%" y="165" width="0.1730%" height="15" fill="rgb(225,201,24)" fg:x="16502085488" fg:w="65202506"/><text x="44.0254%" y="175.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (29,009,373 samples, 0.08%)</title><rect x="43.8714%" y="149" width="0.0770%" height="15" fill="rgb(221,47,46)" fg:x="16538278621" fg:w="29009373"/><text x="44.1214%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (17,855,952 samples, 0.05%)</title><rect x="43.9010%" y="133" width="0.0474%" height="15" fill="rgb(249,23,13)" fg:x="16549432042" fg:w="17855952"/><text x="44.1510%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17,855,952 samples, 0.05%)</title><rect x="43.9010%" y="117" width="0.0474%" height="15" fill="rgb(219,9,5)" fg:x="16549432042" fg:w="17855952"/><text x="44.1510%" y="127.50"></text></g><g><title>[libc.so.6] (15,513,917 samples, 0.04%)</title><rect x="43.9072%" y="101" width="0.0412%" height="15" fill="rgb(254,171,16)" fg:x="16551774077" fg:w="15513917"/><text x="44.1572%" y="111.50"></text></g><g><title>std::io::Read::read_buf (77,902,313 samples, 0.21%)</title><rect x="43.7490%" y="293" width="0.2067%" height="15" fill="rgb(230,171,20)" fg:x="16492144386" fg:w="77902313"/><text x="43.9990%" y="303.50"></text></g><g><title>std::io::default_read_buf (77,902,313 samples, 0.21%)</title><rect x="43.7490%" y="277" width="0.2067%" height="15" fill="rgb(210,71,41)" fg:x="16492144386" fg:w="77902313"/><text x="43.9990%" y="287.50"></text></g><g><title>std::io::Read::read_buf::_{{closure}} (67,961,211 samples, 0.18%)</title><rect x="43.7754%" y="261" width="0.1803%" height="15" fill="rgb(206,173,20)" fg:x="16502085488" fg:w="67961211"/><text x="44.0254%" y="271.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (67,961,211 samples, 0.18%)</title><rect x="43.7754%" y="245" width="0.1803%" height="15" fill="rgb(233,88,34)" fg:x="16502085488" fg:w="67961211"/><text x="44.0254%" y="255.50"></text></g><g><title>flate2::zio::read (67,961,211 samples, 0.18%)</title><rect x="43.7754%" y="229" width="0.1803%" height="15" fill="rgb(223,209,46)" fg:x="16502085488" fg:w="67961211"/><text x="44.0254%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (7,743,072 samples, 0.02%)</title><rect x="44.5112%" y="149" width="0.0205%" height="15" fill="rgb(250,43,18)" fg:x="16779472964" fg:w="7743072"/><text x="44.7612%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,743,072 samples, 0.02%)</title><rect x="44.5112%" y="133" width="0.0205%" height="15" fill="rgb(208,13,10)" fg:x="16779472964" fg:w="7743072"/><text x="44.7612%" y="143.50"></text></g><g><title>[libc.so.6] (7,743,072 samples, 0.02%)</title><rect x="44.5112%" y="117" width="0.0205%" height="15" fill="rgb(212,200,36)" fg:x="16779472964" fg:w="7743072"/><text x="44.7612%" y="127.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (5,267,818 samples, 0.01%)</title><rect x="44.5370%" y="149" width="0.0140%" height="15" fill="rgb(225,90,30)" fg:x="16789205773" fg:w="5267818"/><text x="44.7870%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (14,489,321 samples, 0.04%)</title><rect x="44.6143%" y="133" width="0.0384%" height="15" fill="rgb(236,182,39)" fg:x="16818319397" fg:w="14489321"/><text x="44.8643%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::decode_huffman_code (52,595,988 samples, 0.14%)</title><rect x="44.5510%" y="149" width="0.1395%" height="15" fill="rgb(212,144,35)" fg:x="16794473591" fg:w="52595988"/><text x="44.8010%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::decompress::_{{closure}} (14,260,861 samples, 0.04%)</title><rect x="44.6527%" y="133" width="0.0378%" height="15" fill="rgb(228,63,44)" fg:x="16832808718" fg:w="14260861"/><text x="44.9027%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (255,939,467 samples, 0.68%)</title><rect x="45.2160%" y="133" width="0.6789%" height="15" fill="rgb(228,109,6)" fg:x="17045164708" fg:w="255939467"/><text x="45.4660%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (217,401,282 samples, 0.58%)</title><rect x="45.3183%" y="117" width="0.5767%" height="15" fill="rgb(238,117,24)" fg:x="17083702893" fg:w="217401282"/><text x="45.5683%" y="127.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (5,929,674 samples, 0.02%)</title><rect x="45.8950%" y="133" width="0.0157%" height="15" fill="rgb(242,26,26)" fg:x="17301104175" fg:w="5929674"/><text x="46.1450%" y="143.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (30,648,726 samples, 0.08%)</title><rect x="46.1293%" y="101" width="0.0813%" height="15" fill="rgb(221,92,48)" fg:x="17389444933" fg:w="30648726"/><text x="46.3793%" y="111.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (30,648,726 samples, 0.08%)</title><rect x="46.1293%" y="85" width="0.0813%" height="15" fill="rgb(209,209,32)" fg:x="17389444933" fg:w="30648726"/><text x="46.3793%" y="95.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (30,648,726 samples, 0.08%)</title><rect x="46.1293%" y="69" width="0.0813%" height="15" fill="rgb(221,70,22)" fg:x="17389444933" fg:w="30648726"/><text x="46.3793%" y="79.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (115,238,743 samples, 0.31%)</title><rect x="45.9107%" y="133" width="0.3057%" height="15" fill="rgb(248,145,5)" fg:x="17307033849" fg:w="115238743"/><text x="46.1607%" y="143.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::InputWrapper::read_u32_le (32,827,659 samples, 0.09%)</title><rect x="46.1293%" y="117" width="0.0871%" height="15" fill="rgb(226,116,26)" fg:x="17389444933" fg:w="32827659"/><text x="46.3793%" y="127.50"></text></g><g><title>miniz_oxide::inflate::core::num_extra_bits_for_distance_code (4,226,646 samples, 0.01%)</title><rect x="46.2164%" y="133" width="0.0112%" height="15" fill="rgb(244,5,17)" fg:x="17422272592" fg:w="4226646"/><text x="46.4664%" y="143.50"></text></g><g><title>core::num::&lt;impl u8&gt;::saturating_sub (4,226,646 samples, 0.01%)</title><rect x="46.2164%" y="117" width="0.0112%" height="15" fill="rgb(252,159,33)" fg:x="17422272592" fg:w="4226646"/><text x="46.4664%" y="127.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::bytes_left (65,725,537 samples, 0.17%)</title><rect x="46.2276%" y="133" width="0.1744%" height="15" fill="rgb(206,71,0)" fg:x="17426499238" fg:w="65725537"/><text x="46.4776%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (739,320,331 samples, 1.96%)</title><rect x="44.6905%" y="149" width="1.9612%" height="15" fill="rgb(233,118,54)" fg:x="16847069579" fg:w="739320331"/><text x="44.9405%" y="159.50">m..</text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (94,165,135 samples, 0.25%)</title><rect x="46.4019%" y="133" width="0.2498%" height="15" fill="rgb(234,83,48)" fg:x="17492224775" fg:w="94165135"/><text x="46.6519%" y="143.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20,272,799 samples, 0.05%)</title><rect x="48.3058%" y="133" width="0.0538%" height="15" fill="rgb(228,3,54)" fg:x="18209929146" fg:w="20272799"/><text x="48.5558%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (20,272,799 samples, 0.05%)</title><rect x="48.3058%" y="117" width="0.0538%" height="15" fill="rgb(226,155,13)" fg:x="18209929146" fg:w="20272799"/><text x="48.5558%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,577,943 samples, 0.02%)</title><rect x="48.3368%" y="101" width="0.0228%" height="15" fill="rgb(241,28,37)" fg:x="18221624002" fg:w="8577943"/><text x="48.5868%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (69,674,222 samples, 0.18%)</title><rect x="48.3596%" y="133" width="0.1848%" height="15" fill="rgb(233,93,10)" fg:x="18230201945" fg:w="69674222"/><text x="48.6096%" y="143.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (69,674,222 samples, 0.18%)</title><rect x="48.3596%" y="117" width="0.1848%" height="15" fill="rgb(225,113,19)" fg:x="18230201945" fg:w="69674222"/><text x="48.6096%" y="127.50"></text></g><g><title>[libc.so.6] (26,292,718 samples, 0.07%)</title><rect x="48.4747%" y="101" width="0.0697%" height="15" fill="rgb(241,2,18)" fg:x="18273583449" fg:w="26292718"/><text x="48.7247%" y="111.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (726,350,940 samples, 1.93%)</title><rect x="46.6517%" y="149" width="1.9268%" height="15" fill="rgb(228,207,21)" fg:x="17586389910" fg:w="726350940"/><text x="46.9017%" y="159.50">m..</text></g><g><title>miniz_oxide::inflate::core::reverse_bits (12,864,683 samples, 0.03%)</title><rect x="48.5444%" y="133" width="0.0341%" height="15" fill="rgb(213,211,35)" fg:x="18299876167" fg:w="12864683"/><text x="48.7944%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (16,935,079 samples, 0.04%)</title><rect x="48.6998%" y="117" width="0.0449%" height="15" fill="rgb(209,83,10)" fg:x="18358461467" fg:w="16935079"/><text x="48.9498%" y="127.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (16,935,079 samples, 0.04%)</title><rect x="48.6998%" y="101" width="0.0449%" height="15" fill="rgb(209,164,1)" fg:x="18358461467" fg:w="16935079"/><text x="48.9498%" y="111.50"></text></g><g><title>[libc.so.6] (14,450,068 samples, 0.04%)</title><rect x="48.7064%" y="85" width="0.0383%" height="15" fill="rgb(213,184,43)" fg:x="18360946478" fg:w="14450068"/><text x="48.9564%" y="95.50"></text></g><g><title>miniz_oxide::inflate::core::read_bits (85,949,694 samples, 0.23%)</title><rect x="48.5836%" y="149" width="0.2280%" height="15" fill="rgb(231,61,34)" fg:x="18314660207" fg:w="85949694"/><text x="48.8336%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::decompress::_{{closure}} (60,615,803 samples, 0.16%)</title><rect x="48.6508%" y="133" width="0.1608%" height="15" fill="rgb(235,75,3)" fg:x="18339994098" fg:w="60615803"/><text x="48.9008%" y="143.50"></text></g><g><title>miniz_oxide::inflate::core::init_tree (25,213,355 samples, 0.07%)</title><rect x="48.7448%" y="117" width="0.0669%" height="15" fill="rgb(220,106,47)" fg:x="18375396546" fg:w="25213355"/><text x="48.9948%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8,250,714 samples, 0.02%)</title><rect x="48.8180%" y="117" width="0.0219%" height="15" fill="rgb(210,196,33)" fg:x="18403025683" fg:w="8250714"/><text x="49.0680%" y="127.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::InputWrapper::read_byte::_{{closure}} (8,250,714 samples, 0.02%)</title><rect x="48.8180%" y="101" width="0.0219%" height="15" fill="rgb(229,154,42)" fg:x="18403025683" fg:w="8250714"/><text x="49.0680%" y="111.50"></text></g><g><title>miniz_oxide::inflate::core::read_byte (18,566,330 samples, 0.05%)</title><rect x="48.8116%" y="149" width="0.0493%" height="15" fill="rgb(228,114,26)" fg:x="18400609901" fg:w="18566330"/><text x="49.0616%" y="159.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::InputWrapper::read_byte (16,150,548 samples, 0.04%)</title><rect x="48.8180%" y="133" width="0.0428%" height="15" fill="rgb(208,144,1)" fg:x="18403025683" fg:w="16150548"/><text x="49.0680%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (7,899,834 samples, 0.02%)</title><rect x="48.8399%" y="117" width="0.0210%" height="15" fill="rgb(239,112,37)" fg:x="18411276397" fg:w="7899834"/><text x="49.0899%" y="127.50"></text></g><g><title>miniz_oxide::inflate::output_buffer::OutputBuffer::write_byte (8,345,941 samples, 0.02%)</title><rect x="48.8683%" y="149" width="0.0221%" height="15" fill="rgb(210,96,50)" fg:x="18421967866" fg:w="8345941"/><text x="49.1183%" y="159.50"></text></g><g><title>&lt;adler2::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (29,975,002 samples, 0.08%)</title><rect x="48.8975%" y="101" width="0.0795%" height="15" fill="rgb(222,178,2)" fg:x="18432975766" fg:w="29975002"/><text x="49.1475%" y="111.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,097,086 samples, 0.03%)</title><rect x="48.9814%" y="101" width="0.0321%" height="15" fill="rgb(226,74,18)" fg:x="18464623087" fg:w="12097086"/><text x="49.2314%" y="111.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1,909,711,077 samples, 5.07%)</title><rect x="44.0165%" y="165" width="5.0659%" height="15" fill="rgb(225,67,54)" fg:x="16592981209" fg:w="1909711077"/><text x="44.2665%" y="175.50">miniz_..</text></g><g><title>miniz_oxide::shared::update_adler32 (72,378,479 samples, 0.19%)</title><rect x="48.8904%" y="149" width="0.1920%" height="15" fill="rgb(251,92,32)" fg:x="18430313807" fg:w="72378479"/><text x="49.1404%" y="159.50"></text></g><g><title>adler2::Adler32::write_slice (72,378,479 samples, 0.19%)</title><rect x="48.8904%" y="133" width="0.1920%" height="15" fill="rgb(228,149,22)" fg:x="18430313807" fg:w="72378479"/><text x="49.1404%" y="143.50"></text></g><g><title>adler2::algo::&lt;impl adler2::Adler32&gt;::compute (72,378,479 samples, 0.19%)</title><rect x="48.8904%" y="117" width="0.1920%" height="15" fill="rgb(243,54,13)" fg:x="18430313807" fg:w="72378479"/><text x="49.1404%" y="127.50"></text></g><g><title>adler2::algo::U32X4::from (25,972,113 samples, 0.07%)</title><rect x="49.0135%" y="101" width="0.0689%" height="15" fill="rgb(243,180,28)" fg:x="18476720173" fg:w="25972113"/><text x="49.2635%" y="111.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibDecoder&lt;R&gt; as std::io::Read&gt;::read (1,934,778,918 samples, 5.13%)</title><rect x="43.9557%" y="277" width="5.1324%" height="15" fill="rgb(208,167,24)" fg:x="16570046699" fg:w="1934778918"/><text x="44.2057%" y="287.50">&lt;flate..</text></g><g><title>flate2::zio::read (1,934,778,918 samples, 5.13%)</title><rect x="43.9557%" y="261" width="5.1324%" height="15" fill="rgb(245,73,45)" fg:x="16570046699" fg:w="1934778918"/><text x="44.2057%" y="271.50">flate2..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (1,934,778,918 samples, 5.13%)</title><rect x="43.9557%" y="245" width="5.1324%" height="15" fill="rgb(237,203,48)" fg:x="16570046699" fg:w="1934778918"/><text x="44.2057%" y="255.50">&lt;flate..</text></g><g><title>flate2::mem::Decompress::decompress (1,934,778,918 samples, 5.13%)</title><rect x="43.9557%" y="229" width="5.1324%" height="15" fill="rgb(211,197,16)" fg:x="16570046699" fg:w="1934778918"/><text x="44.2057%" y="239.50">flate2..</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1,934,778,918 samples, 5.13%)</title><rect x="43.9557%" y="213" width="5.1324%" height="15" fill="rgb(243,99,51)" fg:x="16570046699" fg:w="1934778918"/><text x="44.2057%" y="223.50">&lt;flate..</text></g><g><title>miniz_oxide::inflate::stream::inflate (1,926,476,301 samples, 5.11%)</title><rect x="43.9777%" y="197" width="5.1104%" height="15" fill="rgb(215,123,29)" fg:x="16578349316" fg:w="1926476301"/><text x="44.2277%" y="207.50">miniz_..</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (1,917,555,862 samples, 5.09%)</title><rect x="44.0014%" y="181" width="5.0867%" height="15" fill="rgb(239,186,37)" fg:x="16587269755" fg:w="1917555862"/><text x="44.2514%" y="191.50">miniz_..</text></g><g><title>alloc::raw_vec::finish_grow (12,139,192 samples, 0.03%)</title><rect x="49.0881%" y="149" width="0.0322%" height="15" fill="rgb(252,136,39)" fg:x="18504825617" fg:w="12139192"/><text x="49.3381%" y="159.50"></text></g><g><title>malloc (7,858,478 samples, 0.02%)</title><rect x="49.0994%" y="133" width="0.0208%" height="15" fill="rgb(223,213,32)" fg:x="18509106331" fg:w="7858478"/><text x="49.3494%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13,943,620 samples, 0.04%)</title><rect x="49.0881%" y="229" width="0.0370%" height="15" fill="rgb(233,115,5)" fg:x="18504825617" fg:w="13943620"/><text x="49.3381%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13,943,620 samples, 0.04%)</title><rect x="49.0881%" y="213" width="0.0370%" height="15" fill="rgb(207,226,44)" fg:x="18504825617" fg:w="13943620"/><text x="49.3381%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (13,943,620 samples, 0.04%)</title><rect x="49.0881%" y="197" width="0.0370%" height="15" fill="rgb(208,126,0)" fg:x="18504825617" fg:w="13943620"/><text x="49.3381%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (13,943,620 samples, 0.04%)</title><rect x="49.0881%" y="181" width="0.0370%" height="15" fill="rgb(244,66,21)" fg:x="18504825617" fg:w="13943620"/><text x="49.3381%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (13,943,620 samples, 0.04%)</title><rect x="49.0881%" y="165" width="0.0370%" height="15" fill="rgb(222,97,12)" fg:x="18504825617" fg:w="13943620"/><text x="49.3381%" y="175.50"></text></g><g><title>server_lib::storage::StorageEntry::decompress (2,733,084,708 samples, 7.25%)</title><rect x="41.8908%" y="389" width="7.2501%" height="15" fill="rgb(219,213,19)" fg:x="15791632554" fg:w="2733084708"/><text x="42.1408%" y="399.50">server_lib..</text></g><g><title>std::io::Read::read_to_string (2,289,342,406 samples, 6.07%)</title><rect x="43.0679%" y="373" width="6.0730%" height="15" fill="rgb(252,169,30)" fg:x="16235374856" fg:w="2289342406"/><text x="43.3179%" y="383.50">std::io:..</text></g><g><title>std::io::default_read_to_string (2,289,342,406 samples, 6.07%)</title><rect x="43.0679%" y="357" width="6.0730%" height="15" fill="rgb(206,32,51)" fg:x="16235374856" fg:w="2289342406"/><text x="43.3179%" y="367.50">std::io:..</text></g><g><title>std::io::append_to_string (2,289,342,406 samples, 6.07%)</title><rect x="43.0679%" y="341" width="6.0730%" height="15" fill="rgb(250,172,42)" fg:x="16235374856" fg:w="2289342406"/><text x="43.3179%" y="351.50">std::io:..</text></g><g><title>std::io::default_read_to_string::_{{closure}} (2,275,448,742 samples, 6.04%)</title><rect x="43.1047%" y="325" width="6.0361%" height="15" fill="rgb(209,34,43)" fg:x="16249268520" fg:w="2275448742"/><text x="43.3547%" y="335.50">std::io:..</text></g><g><title>std::io::default_read_to_end (2,275,448,742 samples, 6.04%)</title><rect x="43.1047%" y="309" width="6.0361%" height="15" fill="rgb(223,11,35)" fg:x="16249268520" fg:w="2275448742"/><text x="43.3547%" y="319.50">std::io:..</text></g><g><title>std::io::default_read_to_end::small_probe_read (1,954,670,563 samples, 5.19%)</title><rect x="43.9557%" y="293" width="5.1852%" height="15" fill="rgb(251,219,26)" fg:x="16570046699" fg:w="1954670563"/><text x="44.2057%" y="303.50">std::i..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19,891,645 samples, 0.05%)</title><rect x="49.0881%" y="277" width="0.0528%" height="15" fill="rgb(231,119,3)" fg:x="18504825617" fg:w="19891645"/><text x="49.3381%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19,891,645 samples, 0.05%)</title><rect x="49.0881%" y="261" width="0.0528%" height="15" fill="rgb(216,97,11)" fg:x="18504825617" fg:w="19891645"/><text x="49.3381%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19,891,645 samples, 0.05%)</title><rect x="49.0881%" y="245" width="0.0528%" height="15" fill="rgb(223,59,9)" fg:x="18504825617" fg:w="19891645"/><text x="49.3381%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,948,025 samples, 0.02%)</title><rect x="49.1251%" y="229" width="0.0158%" height="15" fill="rgb(233,93,31)" fg:x="18518769237" fg:w="5948025"/><text x="49.3751%" y="239.50"></text></g><g><title>[libc.so.6] (5,948,025 samples, 0.02%)</title><rect x="49.1251%" y="213" width="0.0158%" height="15" fill="rgb(239,81,33)" fg:x="18518769237" fg:w="5948025"/><text x="49.3751%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::gt (20,739,308 samples, 0.06%)</title><rect x="49.1409%" y="373" width="0.0550%" height="15" fill="rgb(213,120,34)" fg:x="18524717262" fg:w="20739308"/><text x="49.3909%" y="383.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (20,739,308 samples, 0.06%)</title><rect x="49.1409%" y="357" width="0.0550%" height="15" fill="rgb(243,49,53)" fg:x="18524717262" fg:w="20739308"/><text x="49.3909%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (6,372,554 samples, 0.02%)</title><rect x="49.1959%" y="373" width="0.0169%" height="15" fill="rgb(247,216,33)" fg:x="18545456570" fg:w="6372554"/><text x="49.4459%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (27,310,907 samples, 0.07%)</title><rect x="49.2128%" y="373" width="0.0724%" height="15" fill="rgb(226,26,14)" fg:x="18551829124" fg:w="27310907"/><text x="49.4628%" y="383.50"></text></g><g><title>clock_gettime (27,310,907 samples, 0.07%)</title><rect x="49.2128%" y="357" width="0.0724%" height="15" fill="rgb(215,49,53)" fg:x="18551829124" fg:w="27310907"/><text x="49.4628%" y="367.50"></text></g><g><title>__vdso_clock_gettime (20,864,590 samples, 0.06%)</title><rect x="49.2299%" y="341" width="0.0553%" height="15" fill="rgb(245,162,40)" fg:x="18558275441" fg:w="20864590"/><text x="49.4799%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (5,145,030 samples, 0.01%)</title><rect x="49.2852%" y="357" width="0.0136%" height="15" fill="rgb(229,68,17)" fg:x="18579140031" fg:w="5145030"/><text x="49.5352%" y="367.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (80,582,598 samples, 0.21%)</title><rect x="49.1409%" y="389" width="0.2138%" height="15" fill="rgb(213,182,10)" fg:x="18524717262" fg:w="80582598"/><text x="49.3909%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (26,159,829 samples, 0.07%)</title><rect x="49.2852%" y="373" width="0.0694%" height="15" fill="rgb(245,125,30)" fg:x="18579140031" fg:w="26159829"/><text x="49.5352%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (21,014,799 samples, 0.06%)</title><rect x="49.2989%" y="357" width="0.0557%" height="15" fill="rgb(232,202,2)" fg:x="18584285061" fg:w="21014799"/><text x="49.5489%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (17,572,783 samples, 0.05%)</title><rect x="49.3080%" y="341" width="0.0466%" height="15" fill="rgb(237,140,51)" fg:x="18587727077" fg:w="17572783"/><text x="49.5580%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (7,742,147 samples, 0.02%)</title><rect x="49.3341%" y="325" width="0.0205%" height="15" fill="rgb(236,157,25)" fg:x="18597557713" fg:w="7742147"/><text x="49.5841%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::ge (7,742,147 samples, 0.02%)</title><rect x="49.3341%" y="309" width="0.0205%" height="15" fill="rgb(219,209,0)" fg:x="18597557713" fg:w="7742147"/><text x="49.5841%" y="319.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (7,742,147 samples, 0.02%)</title><rect x="49.3341%" y="293" width="0.0205%" height="15" fill="rgb(240,116,54)" fg:x="18597557713" fg:w="7742147"/><text x="49.5841%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8,548,357 samples, 0.02%)</title><rect x="49.3730%" y="309" width="0.0227%" height="15" fill="rgb(216,10,36)" fg:x="18612240991" fg:w="8548357"/><text x="49.6230%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,548,357 samples, 0.02%)</title><rect x="49.3730%" y="293" width="0.0227%" height="15" fill="rgb(222,72,44)" fg:x="18612240991" fg:w="8548357"/><text x="49.6230%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8,548,357 samples, 0.02%)</title><rect x="49.3730%" y="277" width="0.0227%" height="15" fill="rgb(232,159,9)" fg:x="18612240991" fg:w="8548357"/><text x="49.6230%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5,208,176 samples, 0.01%)</title><rect x="49.3819%" y="261" width="0.0138%" height="15" fill="rgb(210,39,32)" fg:x="18615581172" fg:w="5208176"/><text x="49.6319%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,208,176 samples, 0.01%)</title><rect x="49.3819%" y="245" width="0.0138%" height="15" fill="rgb(216,194,45)" fg:x="18615581172" fg:w="5208176"/><text x="49.6319%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (27,595,391 samples, 0.07%)</title><rect x="49.4036%" y="229" width="0.0732%" height="15" fill="rgb(218,18,35)" fg:x="18623764076" fg:w="27595391"/><text x="49.6536%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (20,436,624 samples, 0.05%)</title><rect x="49.4226%" y="213" width="0.0542%" height="15" fill="rgb(207,83,51)" fg:x="18630922843" fg:w="20436624"/><text x="49.6726%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,866,368 samples, 0.04%)</title><rect x="49.4374%" y="197" width="0.0394%" height="15" fill="rgb(225,63,43)" fg:x="18636493099" fg:w="14866368"/><text x="49.6874%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (55,482,721 samples, 0.15%)</title><rect x="49.3730%" y="341" width="0.1472%" height="15" fill="rgb(207,57,36)" fg:x="18612240991" fg:w="55482721"/><text x="49.6230%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (55,482,721 samples, 0.15%)</title><rect x="49.3730%" y="325" width="0.1472%" height="15" fill="rgb(216,99,33)" fg:x="18612240991" fg:w="55482721"/><text x="49.6230%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (43,959,636 samples, 0.12%)</title><rect x="49.4036%" y="309" width="0.1166%" height="15" fill="rgb(225,42,16)" fg:x="18623764076" fg:w="43959636"/><text x="49.6536%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (43,959,636 samples, 0.12%)</title><rect x="49.4036%" y="293" width="0.1166%" height="15" fill="rgb(220,201,45)" fg:x="18623764076" fg:w="43959636"/><text x="49.6536%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (43,959,636 samples, 0.12%)</title><rect x="49.4036%" y="277" width="0.1166%" height="15" fill="rgb(225,33,4)" fg:x="18623764076" fg:w="43959636"/><text x="49.6536%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (43,959,636 samples, 0.12%)</title><rect x="49.4036%" y="261" width="0.1166%" height="15" fill="rgb(224,33,50)" fg:x="18623764076" fg:w="43959636"/><text x="49.6536%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (43,959,636 samples, 0.12%)</title><rect x="49.4036%" y="245" width="0.1166%" height="15" fill="rgb(246,198,51)" fg:x="18623764076" fg:w="43959636"/><text x="49.6536%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u8 (16,364,245 samples, 0.04%)</title><rect x="49.4768%" y="229" width="0.0434%" height="15" fill="rgb(205,22,4)" fg:x="18651359467" fg:w="16364245"/><text x="49.7268%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,991,218 samples, 0.03%)</title><rect x="49.4858%" y="213" width="0.0345%" height="15" fill="rgb(206,3,8)" fg:x="18654732494" fg:w="12991218"/><text x="49.7358%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (11,509,044 samples, 0.03%)</title><rect x="49.4897%" y="197" width="0.0305%" height="15" fill="rgb(251,23,15)" fg:x="18656214668" fg:w="11509044"/><text x="49.7397%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (36,497,012 samples, 0.10%)</title><rect x="49.5304%" y="293" width="0.0968%" height="15" fill="rgb(252,88,28)" fg:x="18671572640" fg:w="36497012"/><text x="49.7804%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36,497,012 samples, 0.10%)</title><rect x="49.5304%" y="277" width="0.0968%" height="15" fill="rgb(212,127,14)" fg:x="18671572640" fg:w="36497012"/><text x="49.7804%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36,497,012 samples, 0.10%)</title><rect x="49.5304%" y="261" width="0.0968%" height="15" fill="rgb(247,145,37)" fg:x="18671572640" fg:w="36497012"/><text x="49.7804%" y="271.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (5,029,639 samples, 0.01%)</title><rect x="49.6272%" y="293" width="0.0133%" height="15" fill="rgb(209,117,53)" fg:x="18708069652" fg:w="5029639"/><text x="49.8772%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,029,639 samples, 0.01%)</title><rect x="49.6272%" y="277" width="0.0133%" height="15" fill="rgb(212,90,42)" fg:x="18708069652" fg:w="5029639"/><text x="49.8772%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (224,712,589 samples, 0.60%)</title><rect x="49.3546%" y="389" width="0.5961%" height="15" fill="rgb(218,164,37)" fg:x="18605299860" fg:w="224712589"/><text x="49.6046%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (224,712,589 samples, 0.60%)</title><rect x="49.3546%" y="373" width="0.5961%" height="15" fill="rgb(246,65,34)" fg:x="18605299860" fg:w="224712589"/><text x="49.6046%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (224,712,589 samples, 0.60%)</title><rect x="49.3546%" y="357" width="0.5961%" height="15" fill="rgb(231,100,33)" fg:x="18605299860" fg:w="224712589"/><text x="49.6046%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (162,288,737 samples, 0.43%)</title><rect x="49.5202%" y="341" width="0.4305%" height="15" fill="rgb(228,126,14)" fg:x="18667723712" fg:w="162288737"/><text x="49.7702%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (162,288,737 samples, 0.43%)</title><rect x="49.5202%" y="325" width="0.4305%" height="15" fill="rgb(215,173,21)" fg:x="18667723712" fg:w="162288737"/><text x="49.7702%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (162,288,737 samples, 0.43%)</title><rect x="49.5202%" y="309" width="0.4305%" height="15" fill="rgb(210,6,40)" fg:x="18667723712" fg:w="162288737"/><text x="49.7702%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (116,913,158 samples, 0.31%)</title><rect x="49.6406%" y="293" width="0.3101%" height="15" fill="rgb(212,48,18)" fg:x="18713099291" fg:w="116913158"/><text x="49.8906%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (116,913,158 samples, 0.31%)</title><rect x="49.6406%" y="277" width="0.3101%" height="15" fill="rgb(230,214,11)" fg:x="18713099291" fg:w="116913158"/><text x="49.8906%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (116,913,158 samples, 0.31%)</title><rect x="49.6406%" y="261" width="0.3101%" height="15" fill="rgb(254,105,39)" fg:x="18713099291" fg:w="116913158"/><text x="49.8906%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (106,149,480 samples, 0.28%)</title><rect x="49.6691%" y="245" width="0.2816%" height="15" fill="rgb(245,158,5)" fg:x="18723862969" fg:w="106149480"/><text x="49.9191%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (106,149,480 samples, 0.28%)</title><rect x="49.6691%" y="229" width="0.2816%" height="15" fill="rgb(249,208,11)" fg:x="18723862969" fg:w="106149480"/><text x="49.9191%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (106,149,480 samples, 0.28%)</title><rect x="49.6691%" y="213" width="0.2816%" height="15" fill="rgb(210,39,28)" fg:x="18723862969" fg:w="106149480"/><text x="49.9191%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (106,149,480 samples, 0.28%)</title><rect x="49.6691%" y="197" width="0.2816%" height="15" fill="rgb(211,56,53)" fg:x="18723862969" fg:w="106149480"/><text x="49.9191%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (106,149,480 samples, 0.28%)</title><rect x="49.6691%" y="181" width="0.2816%" height="15" fill="rgb(226,201,30)" fg:x="18723862969" fg:w="106149480"/><text x="49.9191%" y="191.50"></text></g><g><title>[libc.so.6] (50,930,876 samples, 0.14%)</title><rect x="49.8156%" y="165" width="0.1351%" height="15" fill="rgb(239,101,34)" fg:x="18779081573" fg:w="50930876"/><text x="50.0656%" y="175.50"></text></g><g><title>server_lib::storage::Storage::get_entry (3,351,499,842 samples, 8.89%)</title><rect x="41.1179%" y="405" width="8.8906%" height="15" fill="rgb(226,209,5)" fg:x="15500279530" fg:w="3351499842"/><text x="41.3679%" y="415.50">server_lib::s..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (21,766,923 samples, 0.06%)</title><rect x="49.9507%" y="389" width="0.0577%" height="15" fill="rgb(250,105,47)" fg:x="18830012449" fg:w="21766923"/><text x="50.2007%" y="399.50"></text></g><g><title>clock_gettime (12,081,364 samples, 0.03%)</title><rect x="49.9764%" y="373" width="0.0320%" height="15" fill="rgb(230,72,3)" fg:x="18839698008" fg:w="12081364"/><text x="50.2264%" y="383.50"></text></g><g><title>__vdso_clock_gettime (9,318,184 samples, 0.02%)</title><rect x="49.9837%" y="357" width="0.0247%" height="15" fill="rgb(232,218,39)" fg:x="18842461188" fg:w="9318184"/><text x="50.2337%" y="367.50"></text></g><g><title>cfree (9,913,310 samples, 0.03%)</title><rect x="50.0367%" y="373" width="0.0263%" height="15" fill="rgb(248,166,6)" fg:x="18862416634" fg:w="9913310"/><text x="50.2867%" y="383.50"></text></g><g><title>[libc.so.6] (9,913,310 samples, 0.03%)</title><rect x="50.0367%" y="357" width="0.0263%" height="15" fill="rgb(247,89,20)" fg:x="18862416634" fg:w="9913310"/><text x="50.2867%" y="367.50"></text></g><g><title>[libc.so.6] (9,913,310 samples, 0.03%)</title><rect x="50.0367%" y="341" width="0.0263%" height="15" fill="rgb(248,130,54)" fg:x="18862416634" fg:w="9913310"/><text x="50.2867%" y="351.50"></text></g><g><title>[libc.so.6] (7,824,510 samples, 0.02%)</title><rect x="50.0422%" y="325" width="0.0208%" height="15" fill="rgb(234,196,4)" fg:x="18864505434" fg:w="7824510"/><text x="50.2922%" y="335.50"></text></g><g><title>[libc.so.6] (5,352,727 samples, 0.01%)</title><rect x="50.0488%" y="309" width="0.0142%" height="15" fill="rgb(250,143,31)" fg:x="18866977217" fg:w="5352727"/><text x="50.2988%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="373" width="0.0898%" height="15" fill="rgb(211,110,34)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="357" width="0.0898%" height="15" fill="rgb(215,124,48)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="341" width="0.0898%" height="15" fill="rgb(216,46,13)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="325" width="0.0898%" height="15" fill="rgb(205,184,25)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="309" width="0.0898%" height="15" fill="rgb(228,1,10)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="293" width="0.0898%" height="15" fill="rgb(213,116,27)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="277" width="0.0898%" height="15" fill="rgb(241,95,50)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="287.50"></text></g><g><title>cfree (33,842,813 samples, 0.09%)</title><rect x="50.0630%" y="261" width="0.0898%" height="15" fill="rgb(238,48,32)" fg:x="18872329944" fg:w="33842813"/><text x="50.3130%" y="271.50"></text></g><g><title>[libc.so.6] (28,810,985 samples, 0.08%)</title><rect x="50.0763%" y="245" width="0.0764%" height="15" fill="rgb(235,113,49)" fg:x="18877361772" fg:w="28810985"/><text x="50.3263%" y="255.50"></text></g><g><title>[libc.so.6] (27,082,821 samples, 0.07%)</title><rect x="50.0809%" y="229" width="0.0718%" height="15" fill="rgb(205,127,43)" fg:x="18879089936" fg:w="27082821"/><text x="50.3309%" y="239.50"></text></g><g><title>[libc.so.6] (11,430,841 samples, 0.03%)</title><rect x="50.1224%" y="213" width="0.0303%" height="15" fill="rgb(250,162,2)" fg:x="18894741916" fg:w="11430841"/><text x="50.3724%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,143,069 samples, 0.08%)</title><rect x="50.1655%" y="293" width="0.0773%" height="15" fill="rgb(220,13,41)" fg:x="18910974938" fg:w="29143069"/><text x="50.4155%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29,143,069 samples, 0.08%)</title><rect x="50.1655%" y="277" width="0.0773%" height="15" fill="rgb(249,221,25)" fg:x="18910974938" fg:w="29143069"/><text x="50.4155%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (29,143,069 samples, 0.08%)</title><rect x="50.1655%" y="261" width="0.0773%" height="15" fill="rgb(215,208,19)" fg:x="18910974938" fg:w="29143069"/><text x="50.4155%" y="271.50"></text></g><g><title>cfree (29,143,069 samples, 0.08%)</title><rect x="50.1655%" y="245" width="0.0773%" height="15" fill="rgb(236,175,2)" fg:x="18910974938" fg:w="29143069"/><text x="50.4155%" y="255.50"></text></g><g><title>[libc.so.6] (27,157,010 samples, 0.07%)</title><rect x="50.1708%" y="229" width="0.0720%" height="15" fill="rgb(241,52,2)" fg:x="18912960997" fg:w="27157010"/><text x="50.4208%" y="239.50"></text></g><g><title>[libc.so.6] (23,015,291 samples, 0.06%)</title><rect x="50.1817%" y="213" width="0.0611%" height="15" fill="rgb(248,140,14)" fg:x="18917102716" fg:w="23015291"/><text x="50.4317%" y="223.50"></text></g><g><title>[libc.so.6] (11,530,483 samples, 0.03%)</title><rect x="50.2122%" y="197" width="0.0306%" height="15" fill="rgb(253,22,42)" fg:x="18928587524" fg:w="11530483"/><text x="50.4622%" y="207.50"></text></g><g><title>[libc.so.6] (6,536,164 samples, 0.02%)</title><rect x="50.2255%" y="181" width="0.0173%" height="15" fill="rgb(234,61,47)" fg:x="18933581843" fg:w="6536164"/><text x="50.4755%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::core::HuffmanOxide&gt;&gt; (10,733,978 samples, 0.03%)</title><rect x="50.2428%" y="277" width="0.0285%" height="15" fill="rgb(208,226,15)" fg:x="18940118007" fg:w="10733978"/><text x="50.4928%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,733,978 samples, 0.03%)</title><rect x="50.2428%" y="261" width="0.0285%" height="15" fill="rgb(217,221,4)" fg:x="18940118007" fg:w="10733978"/><text x="50.4928%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10,733,978 samples, 0.03%)</title><rect x="50.2428%" y="245" width="0.0285%" height="15" fill="rgb(212,174,34)" fg:x="18940118007" fg:w="10733978"/><text x="50.4928%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (10,733,978 samples, 0.03%)</title><rect x="50.2428%" y="229" width="0.0285%" height="15" fill="rgb(253,83,4)" fg:x="18940118007" fg:w="10733978"/><text x="50.4928%" y="239.50"></text></g><g><title>cfree (10,733,978 samples, 0.03%)</title><rect x="50.2428%" y="213" width="0.0285%" height="15" fill="rgb(250,195,49)" fg:x="18940118007" fg:w="10733978"/><text x="50.4928%" y="223.50"></text></g><g><title>[libc.so.6] (5,690,545 samples, 0.02%)</title><rect x="50.2562%" y="197" width="0.0151%" height="15" fill="rgb(241,192,25)" fg:x="18945161440" fg:w="5690545"/><text x="50.5062%" y="207.50"></text></g><g><title>[libc.so.6] (5,690,545 samples, 0.02%)</title><rect x="50.2562%" y="181" width="0.0151%" height="15" fill="rgb(208,124,10)" fg:x="18945161440" fg:w="5690545"/><text x="50.5062%" y="191.50"></text></g><g><title>[libc.so.6] (5,690,545 samples, 0.02%)</title><rect x="50.2562%" y="165" width="0.0151%" height="15" fill="rgb(222,33,0)" fg:x="18945161440" fg:w="5690545"/><text x="50.5062%" y="175.50"></text></g><g><title>[libc.so.6] (4,821,238 samples, 0.01%)</title><rect x="50.3078%" y="133" width="0.0128%" height="15" fill="rgb(234,209,28)" fg:x="18964627600" fg:w="4821238"/><text x="50.5578%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u16: 32768]&gt;&gt; (40,853,007 samples, 0.11%)</title><rect x="50.2713%" y="245" width="0.1084%" height="15" fill="rgb(224,11,23)" fg:x="18950851985" fg:w="40853007"/><text x="50.5213%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40,853,007 samples, 0.11%)</title><rect x="50.2713%" y="229" width="0.1084%" height="15" fill="rgb(232,99,1)" fg:x="18950851985" fg:w="40853007"/><text x="50.5213%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40,853,007 samples, 0.11%)</title><rect x="50.2713%" y="213" width="0.1084%" height="15" fill="rgb(237,95,45)" fg:x="18950851985" fg:w="40853007"/><text x="50.5213%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (40,853,007 samples, 0.11%)</title><rect x="50.2713%" y="197" width="0.1084%" height="15" fill="rgb(208,109,11)" fg:x="18950851985" fg:w="40853007"/><text x="50.5213%" y="207.50"></text></g><g><title>cfree (40,853,007 samples, 0.11%)</title><rect x="50.2713%" y="181" width="0.1084%" height="15" fill="rgb(216,190,48)" fg:x="18950851985" fg:w="40853007"/><text x="50.5213%" y="191.50"></text></g><g><title>[libc.so.6] (37,665,722 samples, 0.10%)</title><rect x="50.2797%" y="165" width="0.0999%" height="15" fill="rgb(251,171,36)" fg:x="18954039270" fg:w="37665722"/><text x="50.5297%" y="175.50"></text></g><g><title>[libc.so.6] (37,665,722 samples, 0.10%)</title><rect x="50.2797%" y="149" width="0.0999%" height="15" fill="rgb(230,62,22)" fg:x="18954039270" fg:w="37665722"/><text x="50.5297%" y="159.50"></text></g><g><title>__madvise (22,256,154 samples, 0.06%)</title><rect x="50.3206%" y="133" width="0.0590%" height="15" fill="rgb(225,114,35)" fg:x="18969448838" fg:w="22256154"/><text x="50.5706%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::DictOxide&gt; (62,654,294 samples, 0.17%)</title><rect x="50.2713%" y="277" width="0.1662%" height="15" fill="rgb(215,118,42)" fg:x="18950851985" fg:w="62654294"/><text x="50.5213%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::buffer::HashBuffers&gt; (62,654,294 samples, 0.17%)</title><rect x="50.2713%" y="261" width="0.1662%" height="15" fill="rgb(243,119,21)" fg:x="18950851985" fg:w="62654294"/><text x="50.5213%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8: 33026]&gt;&gt; (21,801,287 samples, 0.06%)</title><rect x="50.3796%" y="245" width="0.0578%" height="15" fill="rgb(252,177,53)" fg:x="18991704992" fg:w="21801287"/><text x="50.6296%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,801,287 samples, 0.06%)</title><rect x="50.3796%" y="229" width="0.0578%" height="15" fill="rgb(237,209,29)" fg:x="18991704992" fg:w="21801287"/><text x="50.6296%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21,801,287 samples, 0.06%)</title><rect x="50.3796%" y="213" width="0.0578%" height="15" fill="rgb(212,65,23)" fg:x="18991704992" fg:w="21801287"/><text x="50.6296%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (21,801,287 samples, 0.06%)</title><rect x="50.3796%" y="197" width="0.0578%" height="15" fill="rgb(230,222,46)" fg:x="18991704992" fg:w="21801287"/><text x="50.6296%" y="207.50"></text></g><g><title>cfree (19,305,854 samples, 0.05%)</title><rect x="50.3863%" y="181" width="0.0512%" height="15" fill="rgb(215,135,32)" fg:x="18994200425" fg:w="19305854"/><text x="50.6363%" y="191.50"></text></g><g><title>[libc.so.6] (13,825,505 samples, 0.04%)</title><rect x="50.4008%" y="165" width="0.0367%" height="15" fill="rgb(246,101,22)" fg:x="18999680774" fg:w="13825505"/><text x="50.6508%" y="175.50"></text></g><g><title>[libc.so.6] (11,292,474 samples, 0.03%)</title><rect x="50.4075%" y="149" width="0.0300%" height="15" fill="rgb(206,107,13)" fg:x="19002213805" fg:w="11292474"/><text x="50.6575%" y="159.50"></text></g><g><title>[libc.so.6] (11,292,474 samples, 0.03%)</title><rect x="50.4075%" y="133" width="0.0300%" height="15" fill="rgb(250,100,44)" fg:x="19002213805" fg:w="11292474"/><text x="50.6575%" y="143.50"></text></g><g><title>__rustc::__rdl_dealloc (4,729,100 samples, 0.01%)</title><rect x="50.4416%" y="197" width="0.0125%" height="15" fill="rgb(231,147,38)" fg:x="19015073133" fg:w="4729100"/><text x="50.6916%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,729,100 samples, 0.01%)</title><rect x="50.4416%" y="181" width="0.0125%" height="15" fill="rgb(229,8,40)" fg:x="19015073133" fg:w="4729100"/><text x="50.6916%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::zlib::bufread::ZlibEncoder&lt;&amp;[u8]&gt;&gt; (151,822,386 samples, 0.40%)</title><rect x="50.1655%" y="357" width="0.4027%" height="15" fill="rgb(221,135,30)" fg:x="18910974938" fg:w="151822386"/><text x="50.4155%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::mem::Compress&gt; (151,822,386 samples, 0.40%)</title><rect x="50.1655%" y="341" width="0.4027%" height="15" fill="rgb(249,193,18)" fg:x="18910974938" fg:w="151822386"/><text x="50.4155%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;flate2::ffi::rust::Deflate&gt; (151,822,386 samples, 0.40%)</title><rect x="50.1655%" y="325" width="0.4027%" height="15" fill="rgb(209,133,39)" fg:x="18910974938" fg:w="151822386"/><text x="50.4155%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::core::CompressorOxide&gt;&gt; (151,822,386 samples, 0.40%)</title><rect x="50.1655%" y="309" width="0.4027%" height="15" fill="rgb(232,100,14)" fg:x="18910974938" fg:w="151822386"/><text x="50.4155%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::CompressorOxide&gt; (122,679,317 samples, 0.33%)</title><rect x="50.2428%" y="293" width="0.3254%" height="15" fill="rgb(224,185,1)" fg:x="18940118007" fg:w="122679317"/><text x="50.4928%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;miniz_oxide::deflate::core::ParamsOxide&gt; (49,291,045 samples, 0.13%)</title><rect x="50.4375%" y="277" width="0.1308%" height="15" fill="rgb(223,139,8)" fg:x="19013506279" fg:w="49291045"/><text x="50.6875%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;miniz_oxide::deflate::buffer::LocalBuf&gt;&gt; (49,291,045 samples, 0.13%)</title><rect x="50.4375%" y="261" width="0.1308%" height="15" fill="rgb(232,213,38)" fg:x="19013506279" fg:w="49291045"/><text x="50.6875%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49,291,045 samples, 0.13%)</title><rect x="50.4375%" y="245" width="0.1308%" height="15" fill="rgb(207,94,22)" fg:x="19013506279" fg:w="49291045"/><text x="50.6875%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (49,291,045 samples, 0.13%)</title><rect x="50.4375%" y="229" width="0.1308%" height="15" fill="rgb(219,183,54)" fg:x="19013506279" fg:w="49291045"/><text x="50.6875%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (49,291,045 samples, 0.13%)</title><rect x="50.4375%" y="213" width="0.1308%" height="15" fill="rgb(216,185,54)" fg:x="19013506279" fg:w="49291045"/><text x="50.6875%" y="223.50"></text></g><g><title>cfree (42,995,091 samples, 0.11%)</title><rect x="50.4542%" y="197" width="0.1141%" height="15" fill="rgb(254,217,39)" fg:x="19019802233" fg:w="42995091"/><text x="50.7042%" y="207.50"></text></g><g><title>[libc.so.6] (28,027,636 samples, 0.07%)</title><rect x="50.4939%" y="181" width="0.0743%" height="15" fill="rgb(240,178,23)" fg:x="19034769688" fg:w="28027636"/><text x="50.7439%" y="191.50"></text></g><g><title>[libc.so.6] (23,429,086 samples, 0.06%)</title><rect x="50.5061%" y="165" width="0.0622%" height="15" fill="rgb(218,11,47)" fg:x="19039368238" fg:w="23429086"/><text x="50.7561%" y="175.50"></text></g><g><title>[libc.so.6] (12,168,253 samples, 0.03%)</title><rect x="50.5360%" y="149" width="0.0323%" height="15" fill="rgb(218,51,51)" fg:x="19050629071" fg:w="12168253"/><text x="50.7860%" y="159.50"></text></g><g><title>flate2::zlib::bufread::ZlibEncoder&lt;R&gt;::new (33,378,163 samples, 0.09%)</title><rect x="50.5682%" y="357" width="0.0885%" height="15" fill="rgb(238,126,27)" fg:x="19062797324" fg:w="33378163"/><text x="50.8182%" y="367.50"></text></g><g><title>flate2::mem::Compress::new (28,958,893 samples, 0.08%)</title><rect x="50.5800%" y="341" width="0.0768%" height="15" fill="rgb(249,202,22)" fg:x="19067216594" fg:w="28958893"/><text x="50.8300%" y="351.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::make (25,422,026 samples, 0.07%)</title><rect x="50.5893%" y="325" width="0.0674%" height="15" fill="rgb(254,195,49)" fg:x="19070753461" fg:w="25422026"/><text x="50.8393%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (7,647,482 samples, 0.02%)</title><rect x="50.7132%" y="197" width="0.0203%" height="15" fill="rgb(208,123,14)" fg:x="19117461780" fg:w="7647482"/><text x="50.9632%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5,909,654 samples, 0.02%)</title><rect x="50.7179%" y="181" width="0.0157%" height="15" fill="rgb(224,200,8)" fg:x="19119199608" fg:w="5909654"/><text x="50.9679%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve (271,145,245 samples, 0.72%)</title><rect x="50.6972%" y="325" width="0.7193%" height="15" fill="rgb(217,61,36)" fg:x="19111414231" fg:w="271145245"/><text x="50.9472%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (271,145,245 samples, 0.72%)</title><rect x="50.6972%" y="309" width="0.7193%" height="15" fill="rgb(206,35,45)" fg:x="19111414231" fg:w="271145245"/><text x="50.9472%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve (271,145,245 samples, 0.72%)</title><rect x="50.6972%" y="293" width="0.7193%" height="15" fill="rgb(217,65,33)" fg:x="19111414231" fg:w="271145245"/><text x="50.9472%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (271,145,245 samples, 0.72%)</title><rect x="50.6972%" y="277" width="0.7193%" height="15" fill="rgb(222,158,48)" fg:x="19111414231" fg:w="271145245"/><text x="50.9472%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (265,097,696 samples, 0.70%)</title><rect x="50.7132%" y="261" width="0.7032%" height="15" fill="rgb(254,2,54)" fg:x="19117461780" fg:w="265097696"/><text x="50.9632%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (265,097,696 samples, 0.70%)</title><rect x="50.7132%" y="245" width="0.7032%" height="15" fill="rgb(250,143,38)" fg:x="19117461780" fg:w="265097696"/><text x="50.9632%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (265,097,696 samples, 0.70%)</title><rect x="50.7132%" y="229" width="0.7032%" height="15" fill="rgb(248,25,0)" fg:x="19117461780" fg:w="265097696"/><text x="50.9632%" y="239.50"></text></g><g><title>alloc::alloc::realloc (265,097,696 samples, 0.70%)</title><rect x="50.7132%" y="213" width="0.7032%" height="15" fill="rgb(206,152,27)" fg:x="19117461780" fg:w="265097696"/><text x="50.9632%" y="223.50"></text></g><g><title>realloc (255,050,377 samples, 0.68%)</title><rect x="50.7399%" y="197" width="0.6766%" height="15" fill="rgb(240,77,30)" fg:x="19127509099" fg:w="255050377"/><text x="50.9899%" y="207.50"></text></g><g><title>[libc.so.6] (205,611,551 samples, 0.55%)</title><rect x="50.8710%" y="181" width="0.5454%" height="15" fill="rgb(231,5,3)" fg:x="19176947925" fg:w="205611551"/><text x="51.1210%" y="191.50"></text></g><g><title>[libc.so.6] (159,629,372 samples, 0.42%)</title><rect x="50.9930%" y="165" width="0.4235%" height="15" fill="rgb(207,226,32)" fg:x="19222930104" fg:w="159629372"/><text x="51.2430%" y="175.50"></text></g><g><title>[libc.so.6] (32,026,097 samples, 0.08%)</title><rect x="51.3315%" y="149" width="0.0850%" height="15" fill="rgb(222,207,47)" fg:x="19350533379" fg:w="32026097"/><text x="51.5815%" y="159.50"></text></g><g><title>core::cmp::min (6,248,156 samples, 0.02%)</title><rect x="51.4165%" y="325" width="0.0166%" height="15" fill="rgb(229,115,45)" fg:x="19382559476" fg:w="6248156"/><text x="51.6665%" y="335.50"></text></g><g><title>core::cmp::Ord::min (6,248,156 samples, 0.02%)</title><rect x="51.4165%" y="309" width="0.0166%" height="15" fill="rgb(224,191,6)" fg:x="19382559476" fg:w="6248156"/><text x="51.6665%" y="319.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::ensure_init (4,163,514 samples, 0.01%)</title><rect x="51.4330%" y="293" width="0.0110%" height="15" fill="rgb(230,227,24)" fg:x="19388807632" fg:w="4163514"/><text x="51.6830%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (4,163,514 samples, 0.01%)</title><rect x="51.4330%" y="277" width="0.0110%" height="15" fill="rgb(228,80,19)" fg:x="19388807632" fg:w="4163514"/><text x="51.6830%" y="287.50"></text></g><g><title>[libc.so.6] (4,163,514 samples, 0.01%)</title><rect x="51.4330%" y="261" width="0.0110%" height="15" fill="rgb(247,229,0)" fg:x="19388807632" fg:w="4163514"/><text x="51.6830%" y="271.50"></text></g><g><title>std::io::Read::read_buf (52,318,477 samples, 0.14%)</title><rect x="51.4330%" y="325" width="0.1388%" height="15" fill="rgb(237,194,15)" fg:x="19388807632" fg:w="52318477"/><text x="51.6830%" y="335.50"></text></g><g><title>std::io::default_read_buf (52,318,477 samples, 0.14%)</title><rect x="51.4330%" y="309" width="0.1388%" height="15" fill="rgb(219,203,20)" fg:x="19388807632" fg:w="52318477"/><text x="51.6830%" y="319.50"></text></g><g><title>std::io::Read::read_buf::_{{closure}} (48,154,963 samples, 0.13%)</title><rect x="51.4441%" y="293" width="0.1277%" height="15" fill="rgb(234,128,8)" fg:x="19392971146" fg:w="48154963"/><text x="51.6941%" y="303.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibEncoder&lt;R&gt; as std::io::Read&gt;::read (48,154,963 samples, 0.13%)</title><rect x="51.4441%" y="277" width="0.1277%" height="15" fill="rgb(248,202,8)" fg:x="19392971146" fg:w="48154963"/><text x="51.6941%" y="287.50"></text></g><g><title>flate2::zio::read (48,154,963 samples, 0.13%)</title><rect x="51.4441%" y="261" width="0.1277%" height="15" fill="rgb(206,104,37)" fg:x="19392971146" fg:w="48154963"/><text x="51.6941%" y="271.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (45,657,689 samples, 0.12%)</title><rect x="51.4507%" y="245" width="0.1211%" height="15" fill="rgb(223,8,27)" fg:x="19395468420" fg:w="45657689"/><text x="51.7007%" y="255.50"></text></g><g><title>flate2::mem::Compress::compress (45,657,689 samples, 0.12%)</title><rect x="51.4507%" y="229" width="0.1211%" height="15" fill="rgb(216,217,28)" fg:x="19395468420" fg:w="45657689"/><text x="51.7007%" y="239.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (45,657,689 samples, 0.12%)</title><rect x="51.4507%" y="213" width="0.1211%" height="15" fill="rgb(249,199,1)" fg:x="19395468420" fg:w="45657689"/><text x="51.7007%" y="223.50"></text></g><g><title>miniz_oxide::deflate::stream::deflate (42,963,312 samples, 0.11%)</title><rect x="51.4579%" y="197" width="0.1140%" height="15" fill="rgb(240,85,17)" fg:x="19398162797" fg:w="42963312"/><text x="51.7079%" y="207.50"></text></g><g><title>miniz_oxide::deflate::core::compress (33,218,193 samples, 0.09%)</title><rect x="51.4837%" y="181" width="0.0881%" height="15" fill="rgb(206,108,45)" fg:x="19407907916" fg:w="33218193"/><text x="51.7337%" y="191.50"></text></g><g><title>miniz_oxide::deflate::core::compress_inner (30,592,378 samples, 0.08%)</title><rect x="51.4907%" y="165" width="0.0812%" height="15" fill="rgb(245,210,41)" fg:x="19410533731" fg:w="30592378"/><text x="51.7407%" y="175.50"></text></g><g><title>miniz_oxide::deflate::core::flush_output_buffer (16,153,990 samples, 0.04%)</title><rect x="51.5290%" y="149" width="0.0429%" height="15" fill="rgb(206,13,37)" fg:x="19424972119" fg:w="16153990"/><text x="51.7790%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4,196,693 samples, 0.01%)</title><rect x="51.5607%" y="133" width="0.0111%" height="15" fill="rgb(250,61,18)" fg:x="19436929416" fg:w="4196693"/><text x="51.8107%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,196,693 samples, 0.01%)</title><rect x="51.5607%" y="117" width="0.0111%" height="15" fill="rgb(235,172,48)" fg:x="19436929416" fg:w="4196693"/><text x="51.8107%" y="127.50"></text></g><g><title>[libc.so.6] (4,196,693 samples, 0.01%)</title><rect x="51.5607%" y="101" width="0.0111%" height="15" fill="rgb(249,201,17)" fg:x="19436929416" fg:w="4196693"/><text x="51.8107%" y="111.50"></text></g><g><title>core::cmp::min (166,483,389 samples, 0.44%)</title><rect x="56.4616%" y="165" width="0.4416%" height="15" fill="rgb(219,208,6)" fg:x="21284439278" fg:w="166483389"/><text x="56.7116%" y="175.50"></text></g><g><title>core::cmp::Ord::min (166,483,389 samples, 0.44%)</title><rect x="56.4616%" y="149" width="0.4416%" height="15" fill="rgb(248,31,23)" fg:x="21284439278" fg:w="166483389"/><text x="56.7116%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (40,349,073 samples, 0.11%)</title><rect x="56.9033%" y="165" width="0.1070%" height="15" fill="rgb(245,15,42)" fg:x="21450922667" fg:w="40349073"/><text x="57.1533%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40,349,073 samples, 0.11%)</title><rect x="56.9033%" y="149" width="0.1070%" height="15" fill="rgb(222,217,39)" fg:x="21450922667" fg:w="40349073"/><text x="57.1533%" y="159.50"></text></g><g><title>[libc.so.6] (40,349,073 samples, 0.11%)</title><rect x="56.9033%" y="133" width="0.1070%" height="15" fill="rgb(210,219,27)" fg:x="21450922667" fg:w="40349073"/><text x="57.1533%" y="143.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::read_unaligned_u32 (41,775,314 samples, 0.11%)</title><rect x="57.0103%" y="165" width="0.1108%" height="15" fill="rgb(252,166,36)" fg:x="21491271740" fg:w="41775314"/><text x="57.2603%" y="175.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (24,922,128 samples, 0.07%)</title><rect x="57.0550%" y="149" width="0.0661%" height="15" fill="rgb(245,132,34)" fg:x="21508124926" fg:w="24922128"/><text x="57.3050%" y="159.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (24,922,128 samples, 0.07%)</title><rect x="57.0550%" y="133" width="0.0661%" height="15" fill="rgb(236,54,3)" fg:x="21508124926" fg:w="24922128"/><text x="57.3050%" y="143.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (24,922,128 samples, 0.07%)</title><rect x="57.0550%" y="117" width="0.0661%" height="15" fill="rgb(241,173,43)" fg:x="21508124926" fg:w="24922128"/><text x="57.3050%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::consume_flag (96,748,031 samples, 0.26%)</title><rect x="57.1211%" y="165" width="0.2566%" height="15" fill="rgb(215,190,9)" fg:x="21533047054" fg:w="96748031"/><text x="57.3711%" y="175.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::plant_flag (4,994,241 samples, 0.01%)</title><rect x="57.3645%" y="149" width="0.0132%" height="15" fill="rgb(242,101,16)" fg:x="21624800844" fg:w="4994241"/><text x="57.6145%" y="159.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::get_flag (9,356,704 samples, 0.02%)</title><rect x="57.3778%" y="165" width="0.0248%" height="15" fill="rgb(223,190,21)" fg:x="21629795085" fg:w="9356704"/><text x="57.6278%" y="175.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::write_code (122,840,319 samples, 0.33%)</title><rect x="57.4026%" y="165" width="0.3259%" height="15" fill="rgb(215,228,25)" fg:x="21639151789" fg:w="122840319"/><text x="57.6526%" y="175.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u16&gt; for usize&gt;::from (9,437,533 samples, 0.03%)</title><rect x="57.7034%" y="149" width="0.0250%" height="15" fill="rgb(225,36,22)" fg:x="21752554575" fg:w="9437533"/><text x="57.9534%" y="159.50"></text></g><g><title>miniz_oxide::deflate::core::compress_fast (2,305,768,518 samples, 6.12%)</title><rect x="51.6614%" y="181" width="6.1166%" height="15" fill="rgb(251,106,46)" fg:x="19474880626" fg:w="2305768518"/><text x="51.9114%" y="191.50">miniz_ox..</text></g><g><title>miniz_oxide::deflate::core::compress_fast::_{{closure}} (18,657,036 samples, 0.05%)</title><rect x="57.7284%" y="165" width="0.0495%" height="15" fill="rgb(208,90,1)" fg:x="21761992108" fg:w="18657036"/><text x="57.9784%" y="175.50"></text></g><g><title>miniz_oxide::deflate::core::DictOxide::read_unaligned_u64 (15,826,657 samples, 0.04%)</title><rect x="57.7359%" y="149" width="0.0420%" height="15" fill="rgb(243,10,4)" fg:x="21764822487" fg:w="15826657"/><text x="57.9859%" y="159.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (7,531,916 samples, 0.02%)</title><rect x="57.7579%" y="133" width="0.0200%" height="15" fill="rgb(212,137,27)" fg:x="21773117228" fg:w="7531916"/><text x="58.0079%" y="143.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (7,531,916 samples, 0.02%)</title><rect x="57.7579%" y="117" width="0.0200%" height="15" fill="rgb(231,220,49)" fg:x="21773117228" fg:w="7531916"/><text x="58.0079%" y="127.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (7,531,916 samples, 0.02%)</title><rect x="57.7579%" y="101" width="0.0200%" height="15" fill="rgb(237,96,20)" fg:x="21773117228" fg:w="7531916"/><text x="58.0079%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (7,566,556 samples, 0.02%)</title><rect x="57.7934%" y="165" width="0.0201%" height="15" fill="rgb(239,229,30)" fg:x="21786467363" fg:w="7566556"/><text x="58.0434%" y="175.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (7,566,556 samples, 0.02%)</title><rect x="57.7934%" y="149" width="0.0201%" height="15" fill="rgb(219,65,33)" fg:x="21786467363" fg:w="7566556"/><text x="58.0434%" y="159.50"></text></g><g><title>[libc.so.6] (7,566,556 samples, 0.02%)</title><rect x="57.7934%" y="133" width="0.0201%" height="15" fill="rgb(243,134,7)" fg:x="21786467363" fg:w="7566556"/><text x="58.0434%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5,696,351 samples, 0.02%)</title><rect x="57.8220%" y="133" width="0.0151%" height="15" fill="rgb(216,177,54)" fg:x="21797256503" fg:w="5696351"/><text x="58.0720%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,696,351 samples, 0.02%)</title><rect x="57.8220%" y="117" width="0.0151%" height="15" fill="rgb(211,160,20)" fg:x="21797256503" fg:w="5696351"/><text x="58.0720%" y="127.50"></text></g><g><title>[libc.so.6] (5,696,351 samples, 0.02%)</title><rect x="57.8220%" y="101" width="0.0151%" height="15" fill="rgb(239,85,39)" fg:x="21797256503" fg:w="5696351"/><text x="58.0720%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::CallbackOxide::flush_output (7,800,182 samples, 0.02%)</title><rect x="57.8220%" y="165" width="0.0207%" height="15" fill="rgb(232,125,22)" fg:x="21797256503" fg:w="7800182"/><text x="58.0720%" y="175.50"></text></g><g><title>miniz_oxide::deflate::core::CallbackBuf::flush_output (7,800,182 samples, 0.02%)</title><rect x="57.8220%" y="149" width="0.0207%" height="15" fill="rgb(244,57,34)" fg:x="21797256503" fg:w="7800182"/><text x="58.0720%" y="159.50"></text></g><g><title>miniz_oxide::deflate::core::LZOxide::init_flag (8,771,092 samples, 0.02%)</title><rect x="57.8427%" y="165" width="0.0233%" height="15" fill="rgb(214,203,32)" fg:x="21805056685" fg:w="8771092"/><text x="58.0927%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,519,959 samples, 0.04%)</title><rect x="58.3451%" y="133" width="0.0438%" height="15" fill="rgb(207,58,43)" fg:x="21994439383" fg:w="16519959"/><text x="58.5951%" y="143.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16,519,959 samples, 0.04%)</title><rect x="58.3451%" y="117" width="0.0438%" height="15" fill="rgb(215,193,15)" fg:x="21994439383" fg:w="16519959"/><text x="58.5951%" y="127.50"></text></g><g><title>[libc.so.6] (4,385,160 samples, 0.01%)</title><rect x="58.3889%" y="133" width="0.0116%" height="15" fill="rgb(232,15,44)" fg:x="22010959342" fg:w="4385160"/><text x="58.6389%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="133" width="0.0351%" height="15" fill="rgb(212,3,48)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="117" width="0.0351%" height="15" fill="rgb(218,128,7)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="101" width="0.0351%" height="15" fill="rgb(226,216,39)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="85" width="0.0351%" height="15" fill="rgb(243,47,51)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="95.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="69" width="0.0351%" height="15" fill="rgb(241,183,40)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (13,219,328 samples, 0.04%)</title><rect x="58.4005%" y="53" width="0.0351%" height="15" fill="rgb(231,217,32)" fg:x="22015344502" fg:w="13219328"/><text x="58.6505%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (7,435,814 samples, 0.02%)</title><rect x="58.4356%" y="133" width="0.0197%" height="15" fill="rgb(229,61,38)" fg:x="22028563830" fg:w="7435814"/><text x="58.6856%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,435,814 samples, 0.02%)</title><rect x="58.4356%" y="117" width="0.0197%" height="15" fill="rgb(225,210,5)" fg:x="22028563830" fg:w="7435814"/><text x="58.6856%" y="127.50"></text></g><g><title>[libc.so.6] (7,435,814 samples, 0.02%)</title><rect x="58.4356%" y="101" width="0.0197%" height="15" fill="rgb(231,79,45)" fg:x="22028563830" fg:w="7435814"/><text x="58.6856%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,404,192 samples, 0.09%)</title><rect x="59.1623%" y="101" width="0.0939%" height="15" fill="rgb(224,100,7)" fg:x="22302524253" fg:w="35404192"/><text x="59.4123%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,938,974 samples, 0.05%)</title><rect x="59.2033%" y="85" width="0.0529%" height="15" fill="rgb(241,198,18)" fg:x="22317989471" fg:w="19938974"/><text x="59.4533%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,702,109 samples, 0.01%)</title><rect x="59.2438%" y="69" width="0.0125%" height="15" fill="rgb(252,97,53)" fg:x="22333226336" fg:w="4702109"/><text x="59.4938%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (55,361,581 samples, 0.15%)</title><rect x="59.1343%" y="117" width="0.1469%" height="15" fill="rgb(220,88,7)" fg:x="22291954804" fg:w="55361581"/><text x="59.3843%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (9,387,940 samples, 0.02%)</title><rect x="59.2562%" y="101" width="0.0249%" height="15" fill="rgb(213,176,14)" fg:x="22337928445" fg:w="9387940"/><text x="59.5062%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (6,625,362 samples, 0.02%)</title><rect x="59.2636%" y="85" width="0.0176%" height="15" fill="rgb(246,73,7)" fg:x="22340691023" fg:w="6625362"/><text x="59.5136%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,037,292 samples, 0.03%)</title><rect x="59.2811%" y="117" width="0.0266%" height="15" fill="rgb(245,64,36)" fg:x="22347316385" fg:w="10037292"/><text x="59.5311%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10,037,292 samples, 0.03%)</title><rect x="59.2811%" y="101" width="0.0266%" height="15" fill="rgb(245,80,10)" fg:x="22347316385" fg:w="10037292"/><text x="59.5311%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,037,292 samples, 0.03%)</title><rect x="59.2811%" y="85" width="0.0266%" height="15" fill="rgb(232,107,50)" fg:x="22347316385" fg:w="10037292"/><text x="59.5311%" y="95.50"></text></g><g><title>[libc.so.6] (102,556,675 samples, 0.27%)</title><rect x="59.3169%" y="117" width="0.2721%" height="15" fill="rgb(253,3,0)" fg:x="22360793075" fg:w="102556675"/><text x="59.5669%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,859,148 samples, 0.04%)</title><rect x="59.5889%" y="117" width="0.0447%" height="15" fill="rgb(212,99,53)" fg:x="22463349750" fg:w="16859148"/><text x="59.8389%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,859,148 samples, 0.04%)</title><rect x="59.5889%" y="101" width="0.0447%" height="15" fill="rgb(249,111,54)" fg:x="22463349750" fg:w="16859148"/><text x="59.8389%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (16,859,148 samples, 0.04%)</title><rect x="59.5889%" y="85" width="0.0447%" height="15" fill="rgb(249,55,30)" fg:x="22463349750" fg:w="16859148"/><text x="59.8389%" y="95.50"></text></g><g><title>core::num::&lt;impl u16&gt;::reverse_bits (42,180,031 samples, 0.11%)</title><rect x="59.6388%" y="117" width="0.1119%" height="15" fill="rgb(237,47,42)" fg:x="22482150222" fg:w="42180031"/><text x="59.8888%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (25,309,540 samples, 0.07%)</title><rect x="59.7507%" y="117" width="0.0671%" height="15" fill="rgb(211,20,18)" fg:x="22524330253" fg:w="25309540"/><text x="60.0007%" y="127.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (25,309,540 samples, 0.07%)</title><rect x="59.7507%" y="101" width="0.0671%" height="15" fill="rgb(231,203,46)" fg:x="22524330253" fg:w="25309540"/><text x="60.0007%" y="111.50"></text></g><g><title>[libc.so.6] (25,309,540 samples, 0.07%)</title><rect x="59.7507%" y="85" width="0.0671%" height="15" fill="rgb(237,142,3)" fg:x="22524330253" fg:w="25309540"/><text x="60.0007%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::calculate_minimum_redundancy (197,129,825 samples, 0.52%)</title><rect x="59.8178%" y="117" width="0.5229%" height="15" fill="rgb(241,107,1)" fg:x="22549639793" fg:w="197129825"/><text x="60.0678%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,330,219 samples, 0.02%)</title><rect x="60.3187%" y="101" width="0.0221%" height="15" fill="rgb(229,83,13)" fg:x="22738439399" fg:w="8330219"/><text x="60.5687%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,330,219 samples, 0.02%)</title><rect x="60.3187%" y="85" width="0.0221%" height="15" fill="rgb(241,91,40)" fg:x="22738439399" fg:w="8330219"/><text x="60.5687%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8,330,219 samples, 0.02%)</title><rect x="60.3187%" y="69" width="0.0221%" height="15" fill="rgb(225,3,45)" fg:x="22738439399" fg:w="8330219"/><text x="60.5687%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (4,450,381 samples, 0.01%)</title><rect x="60.3682%" y="53" width="0.0118%" height="15" fill="rgb(244,223,14)" fg:x="22757101746" fg:w="4450381"/><text x="60.6182%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::enforce_max_code_size::_{{closure}} (4,450,381 samples, 0.01%)</title><rect x="60.3682%" y="37" width="0.0118%" height="15" fill="rgb(224,124,37)" fg:x="22757101746" fg:w="4450381"/><text x="60.6182%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,114,923 samples, 0.05%)</title><rect x="60.3479%" y="101" width="0.0481%" height="15" fill="rgb(251,171,30)" fg:x="22749443611" fg:w="18114923"/><text x="60.5979%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,114,923 samples, 0.05%)</title><rect x="60.3479%" y="85" width="0.0481%" height="15" fill="rgb(236,46,54)" fg:x="22749443611" fg:w="18114923"/><text x="60.5979%" y="95.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (18,114,923 samples, 0.05%)</title><rect x="60.3479%" y="69" width="0.0481%" height="15" fill="rgb(245,213,5)" fg:x="22749443611" fg:w="18114923"/><text x="60.5979%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (6,006,407 samples, 0.02%)</title><rect x="60.3800%" y="53" width="0.0159%" height="15" fill="rgb(230,144,27)" fg:x="22761552127" fg:w="6006407"/><text x="60.6300%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::enforce_max_code_size (23,771,919 samples, 0.06%)</title><rect x="60.3408%" y="117" width="0.0631%" height="15" fill="rgb(220,86,6)" fg:x="22746769618" fg:w="23771919"/><text x="60.5908%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (974,103,851 samples, 2.58%)</title><rect x="58.4553%" y="133" width="2.5840%" height="15" fill="rgb(240,20,13)" fg:x="22035999644" fg:w="974103851"/><text x="58.7053%" y="143.50">mi..</text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::radix_sort_symbols (239,561,958 samples, 0.64%)</title><rect x="60.4038%" y="117" width="0.6355%" height="15" fill="rgb(217,89,34)" fg:x="22770541537" fg:w="239561958"/><text x="60.6538%" y="127.50"></text></g><g><title>[libc.so.6] (38,011,013 samples, 0.10%)</title><rect x="60.9385%" y="101" width="0.1008%" height="15" fill="rgb(229,13,5)" fg:x="22972092482" fg:w="38011013"/><text x="61.1885%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::OutputBufferOxide::put_bits (58,125,387 samples, 0.15%)</title><rect x="61.0393%" y="133" width="0.1542%" height="15" fill="rgb(244,67,35)" fg:x="23010103495" fg:w="58125387"/><text x="61.2893%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12,436,503 samples, 0.03%)</title><rect x="61.2831%" y="85" width="0.0330%" height="15" fill="rgb(221,40,2)" fg:x="23102006791" fg:w="12436503"/><text x="61.5331%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,436,503 samples, 0.03%)</title><rect x="61.2831%" y="69" width="0.0330%" height="15" fill="rgb(237,157,21)" fg:x="23102006791" fg:w="12436503"/><text x="61.5331%" y="79.50"></text></g><g><title>[libc.so.6] (10,204,911 samples, 0.03%)</title><rect x="61.2890%" y="53" width="0.0271%" height="15" fill="rgb(222,94,11)" fg:x="23104238383" fg:w="10204911"/><text x="61.5390%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::Rle::prev_code_size (49,501,589 samples, 0.13%)</title><rect x="61.1935%" y="133" width="0.1313%" height="15" fill="rgb(249,113,6)" fg:x="23068228882" fg:w="49501589"/><text x="61.4435%" y="143.50"></text></g><g><title>miniz_oxide::deflate::core::Rle::prev_code_size::_{{closure}} (15,723,680 samples, 0.04%)</title><rect x="61.2831%" y="117" width="0.0417%" height="15" fill="rgb(238,137,36)" fg:x="23102006791" fg:w="15723680"/><text x="61.5331%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::write (15,723,680 samples, 0.04%)</title><rect x="61.2831%" y="101" width="0.0417%" height="15" fill="rgb(210,102,26)" fg:x="23102006791" fg:w="15723680"/><text x="61.5331%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6,707,071 samples, 0.02%)</title><rect x="61.3559%" y="85" width="0.0178%" height="15" fill="rgb(218,30,30)" fg:x="23129443818" fg:w="6707071"/><text x="61.6059%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,707,071 samples, 0.02%)</title><rect x="61.3559%" y="69" width="0.0178%" height="15" fill="rgb(214,67,26)" fg:x="23129443818" fg:w="6707071"/><text x="61.6059%" y="79.50"></text></g><g><title>[libc.so.6] (4,642,394 samples, 0.01%)</title><rect x="61.3614%" y="53" width="0.0123%" height="15" fill="rgb(251,9,53)" fg:x="23131508495" fg:w="4642394"/><text x="61.6114%" y="63.50"></text></g><g><title>miniz_oxide::deflate::core::Rle::zero_code_size (20,947,412 samples, 0.06%)</title><rect x="61.3248%" y="133" width="0.0556%" height="15" fill="rgb(228,204,25)" fg:x="23117730471" fg:w="20947412"/><text x="61.5748%" y="143.50"></text></g><g><title>miniz_oxide::deflate::core::Rle::zero_code_size::_{{closure}} (9,234,065 samples, 0.02%)</title><rect x="61.3559%" y="117" width="0.0245%" height="15" fill="rgb(207,153,8)" fg:x="23129443818" fg:w="9234065"/><text x="61.6059%" y="127.50"></text></g><g><title>miniz_oxide::deflate::core::write (9,234,065 samples, 0.02%)</title><rect x="61.3559%" y="101" width="0.0245%" height="15" fill="rgb(242,9,16)" fg:x="23129443818" fg:w="9234065"/><text x="61.6059%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_dynamic_block (1,329,207,027 samples, 3.53%)</title><rect x="57.8659%" y="149" width="3.5260%" height="15" fill="rgb(217,211,10)" fg:x="21813827777" fg:w="1329207027"/><text x="58.1159%" y="159.50">min..</text></g><g><title>miniz_oxide::deflate::core::write (4,356,921 samples, 0.01%)</title><rect x="61.3804%" y="133" width="0.0116%" height="15" fill="rgb(219,228,52)" fg:x="23138677883" fg:w="4356921"/><text x="61.6304%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4,356,921 samples, 0.01%)</title><rect x="61.3804%" y="117" width="0.0116%" height="15" fill="rgb(231,92,29)" fg:x="23138677883" fg:w="4356921"/><text x="61.6304%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,356,921 samples, 0.01%)</title><rect x="61.3804%" y="101" width="0.0116%" height="15" fill="rgb(232,8,23)" fg:x="23138677883" fg:w="4356921"/><text x="61.6304%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::start_static_block (7,247,367 samples, 0.02%)</title><rect x="61.3920%" y="149" width="0.0192%" height="15" fill="rgb(216,211,34)" fg:x="23143034804" fg:w="7247367"/><text x="61.6420%" y="159.50"></text></g><g><title>miniz_oxide::deflate::core::HuffmanOxide::optimize_table (7,247,367 samples, 0.02%)</title><rect x="61.3920%" y="133" width="0.0192%" height="15" fill="rgb(236,151,0)" fg:x="23143034804" fg:w="7247367"/><text x="61.6420%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (26,668,497 samples, 0.07%)</title><rect x="62.8797%" y="117" width="0.0707%" height="15" fill="rgb(209,168,3)" fg:x="23703876862" fg:w="26668497"/><text x="63.1297%" y="127.50"></text></g><g><title>core::intrinsics::unlikely (26,668,497 samples, 0.07%)</title><rect x="62.8797%" y="101" width="0.0707%" height="15" fill="rgb(208,129,28)" fg:x="23703876862" fg:w="26668497"/><text x="63.1297%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (16,840,360 samples, 0.04%)</title><rect x="62.9505%" y="117" width="0.0447%" height="15" fill="rgb(229,78,22)" fg:x="23730545359" fg:w="16840360"/><text x="63.2005%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16,840,360 samples, 0.04%)</title><rect x="62.9505%" y="101" width="0.0447%" height="15" fill="rgb(228,187,13)" fg:x="23730545359" fg:w="16840360"/><text x="63.2005%" y="111.50"></text></g><g><title>miniz_oxide::deflate::core::BitBuffer::flush (201,223,023 samples, 0.53%)</title><rect x="62.5175%" y="133" width="0.5338%" height="15" fill="rgb(240,119,24)" fg:x="23567317997" fg:w="201223023"/><text x="62.7675%" y="143.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (21,155,301 samples, 0.06%)</title><rect x="62.9951%" y="117" width="0.0561%" height="15" fill="rgb(209,194,42)" fg:x="23747385719" fg:w="21155301"/><text x="63.2451%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (21,155,301 samples, 0.06%)</title><rect x="62.9951%" y="101" width="0.0561%" height="15" fill="rgb(247,200,46)" fg:x="23747385719" fg:w="21155301"/><text x="63.2451%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (19,536,736 samples, 0.05%)</title><rect x="62.9994%" y="85" width="0.0518%" height="15" fill="rgb(218,76,16)" fg:x="23749004284" fg:w="19536736"/><text x="63.2494%" y="95.50"></text></g><g><title>miniz_oxide::deflate::core::flush_block (2,116,890,685 samples, 5.62%)</title><rect x="57.7779%" y="181" width="5.6155%" height="15" fill="rgb(225,21,48)" fg:x="21780649144" fg:w="2116890685"/><text x="58.0279%" y="191.50">miniz_o..</text></g><g><title>miniz_oxide::deflate::core::compress_block (2,083,712,052 samples, 5.53%)</title><rect x="57.8659%" y="165" width="5.5275%" height="15" fill="rgb(239,223,50)" fg:x="21813827777" fg:w="2083712052"/><text x="58.1159%" y="175.50">miniz_o..</text></g><g><title>miniz_oxide::deflate::core::compress_lz_codes (747,257,658 samples, 1.98%)</title><rect x="61.4112%" y="149" width="1.9823%" height="15" fill="rgb(244,45,21)" fg:x="23150282171" fg:w="747257658"/><text x="61.6612%" y="159.50">m..</text></g><g><title>miniz_oxide::deflate::core::BitBuffer::put_fast (128,998,809 samples, 0.34%)</title><rect x="63.0512%" y="133" width="0.3422%" height="15" fill="rgb(232,33,43)" fg:x="23768541020" fg:w="128998809"/><text x="63.3012%" y="143.50"></text></g><g><title>miniz_oxide::deflate::core::flush_output_buffer (7,378,931 samples, 0.02%)</title><rect x="63.3934%" y="181" width="0.0196%" height="15" fill="rgb(209,8,3)" fg:x="23897539829" fg:w="7378931"/><text x="63.6434%" y="191.50"></text></g><g><title>&lt;adler2::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (103,156,192 samples, 0.27%)</title><rect x="63.4412%" y="133" width="0.2736%" height="15" fill="rgb(214,25,53)" fg:x="23915525914" fg:w="103156192"/><text x="63.6912%" y="143.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,224,259 samples, 0.04%)</title><rect x="63.7204%" y="133" width="0.0377%" height="15" fill="rgb(254,186,54)" fg:x="24020780189" fg:w="14224259"/><text x="63.9704%" y="143.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::run (4,616,135,476 samples, 12.25%)</title><rect x="51.6031%" y="277" width="12.2453%" height="15" fill="rgb(208,174,49)" fg:x="19452898338" fg:w="4616135476"/><text x="51.8531%" y="287.50">&lt;flate2::mem::Comp..</text></g><g><title>flate2::mem::Compress::compress (4,616,135,476 samples, 12.25%)</title><rect x="51.6031%" y="261" width="12.2453%" height="15" fill="rgb(233,191,51)" fg:x="19452898338" fg:w="4616135476"/><text x="51.8531%" y="271.50">flate2::mem::Compr..</text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::DeflateBackend&gt;::compress (4,616,135,476 samples, 12.25%)</title><rect x="51.6031%" y="245" width="12.2453%" height="15" fill="rgb(222,134,10)" fg:x="19452898338" fg:w="4616135476"/><text x="51.8531%" y="255.50">&lt;flate2::ffi::rust..</text></g><g><title>miniz_oxide::deflate::stream::deflate (4,613,708,984 samples, 12.24%)</title><rect x="51.6095%" y="229" width="12.2389%" height="15" fill="rgb(230,226,20)" fg:x="19455324830" fg:w="4613708984"/><text x="51.8595%" y="239.50">miniz_oxide::defla..</text></g><g><title>miniz_oxide::deflate::core::compress (4,606,153,678 samples, 12.22%)</title><rect x="51.6295%" y="213" width="12.2188%" height="15" fill="rgb(251,111,25)" fg:x="19462880136" fg:w="4606153678"/><text x="51.8795%" y="223.50">miniz_oxide::defla..</text></g><g><title>miniz_oxide::deflate::core::compress_inner (4,606,153,678 samples, 12.22%)</title><rect x="51.6295%" y="197" width="12.2188%" height="15" fill="rgb(224,40,46)" fg:x="19462880136" fg:w="4606153678"/><text x="51.8795%" y="207.50">miniz_oxide::defla..</text></g><g><title>miniz_oxide::shared::update_adler32 (164,115,054 samples, 0.44%)</title><rect x="63.4130%" y="181" width="0.4354%" height="15" fill="rgb(236,108,47)" fg:x="23904918760" fg:w="164115054"/><text x="63.6630%" y="191.50"></text></g><g><title>adler2::Adler32::write_slice (160,767,026 samples, 0.43%)</title><rect x="63.4219%" y="165" width="0.4265%" height="15" fill="rgb(234,93,0)" fg:x="23908266788" fg:w="160767026"/><text x="63.6719%" y="175.50"></text></g><g><title>adler2::algo::&lt;impl adler2::Adler32&gt;::compute (160,767,026 samples, 0.43%)</title><rect x="63.4219%" y="149" width="0.4265%" height="15" fill="rgb(224,213,32)" fg:x="23908266788" fg:w="160767026"/><text x="63.6719%" y="159.50"></text></g><g><title>adler2::algo::U32X4::from (31,933,788 samples, 0.08%)</title><rect x="63.7637%" y="133" width="0.0847%" height="15" fill="rgb(251,11,48)" fg:x="24037100026" fg:w="31933788"/><text x="64.0137%" y="143.50"></text></g><g><title>&lt;flate2::zlib::bufread::ZlibEncoder&lt;R&gt; as std::io::Read&gt;::read (4,628,166,423 samples, 12.28%)</title><rect x="51.5776%" y="309" width="12.2772%" height="15" fill="rgb(236,173,5)" fg:x="19443284400" fg:w="4628166423"/><text x="51.8276%" y="319.50">&lt;flate2::zlib::buf..</text></g><g><title>flate2::zio::read (4,628,166,423 samples, 12.28%)</title><rect x="51.5776%" y="293" width="12.2772%" height="15" fill="rgb(230,95,12)" fg:x="19443284400" fg:w="4628166423"/><text x="51.8276%" y="303.50">flate2::zio::read</text></g><g><title>__rustc::__rdl_alloc (4,675,419 samples, 0.01%)</title><rect x="63.8664%" y="165" width="0.0124%" height="15" fill="rgb(232,209,1)" fg:x="24075833090" fg:w="4675419"/><text x="64.1164%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,675,419 samples, 0.01%)</title><rect x="63.8664%" y="149" width="0.0124%" height="15" fill="rgb(232,6,1)" fg:x="24075833090" fg:w="4675419"/><text x="64.1164%" y="159.50"></text></g><g><title>server_lib::storage::compress (5,193,194,158 samples, 13.78%)</title><rect x="50.1655%" y="373" width="13.7761%" height="15" fill="rgb(210,224,50)" fg:x="18910974938" fg:w="5193194158"/><text x="50.4155%" y="383.50">server_lib::storage::..</text></g><g><title>std::io::Read::read_to_end (5,007,993,609 samples, 13.28%)</title><rect x="50.6568%" y="357" width="13.2848%" height="15" fill="rgb(228,127,35)" fg:x="19096175487" fg:w="5007993609"/><text x="50.9068%" y="367.50">std::io::Read::read_..</text></g><g><title>std::io::default_read_to_end (5,007,993,609 samples, 13.28%)</title><rect x="50.6568%" y="341" width="13.2848%" height="15" fill="rgb(245,102,45)" fg:x="19096175487" fg:w="5007993609"/><text x="50.9068%" y="351.50">std::io::default_rea..</text></g><g><title>std::io::default_read_to_end::small_probe_read (4,663,042,987 samples, 12.37%)</title><rect x="51.5718%" y="325" width="12.3697%" height="15" fill="rgb(214,1,49)" fg:x="19441126109" fg:w="4663042987"/><text x="51.8218%" y="335.50">std::io::default_r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="309" width="0.0868%" height="15" fill="rgb(226,163,40)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="293" width="0.0868%" height="15" fill="rgb(239,212,28)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="277" width="0.0868%" height="15" fill="rgb(220,20,13)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="261" width="0.0868%" height="15" fill="rgb(210,164,35)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="245" width="0.0868%" height="15" fill="rgb(248,109,41)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="229" width="0.0868%" height="15" fill="rgb(238,23,50)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="213" width="0.0868%" height="15" fill="rgb(211,48,49)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (32,718,273 samples, 0.09%)</title><rect x="63.8548%" y="197" width="0.0868%" height="15" fill="rgb(223,36,21)" fg:x="24071450823" fg:w="32718273"/><text x="64.1048%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (29,934,772 samples, 0.08%)</title><rect x="63.8622%" y="181" width="0.0794%" height="15" fill="rgb(207,123,46)" fg:x="24074234324" fg:w="29934772"/><text x="64.1122%" y="191.50"></text></g><g><title>malloc (23,660,587 samples, 0.06%)</title><rect x="63.8788%" y="165" width="0.0628%" height="15" fill="rgb(240,218,32)" fg:x="24080508509" fg:w="23660587"/><text x="64.1288%" y="175.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (13,190,451 samples, 0.03%)</title><rect x="63.9570%" y="293" width="0.0350%" height="15" fill="rgb(252,5,43)" fg:x="24109975760" fg:w="13190451"/><text x="64.2070%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13,190,451 samples, 0.03%)</title><rect x="63.9570%" y="277" width="0.0350%" height="15" fill="rgb(252,84,19)" fg:x="24109975760" fg:w="13190451"/><text x="64.2070%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13,190,451 samples, 0.03%)</title><rect x="63.9570%" y="261" width="0.0350%" height="15" fill="rgb(243,152,39)" fg:x="24109975760" fg:w="13190451"/><text x="64.2070%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (55,908,833 samples, 0.15%)</title><rect x="63.9504%" y="341" width="0.1483%" height="15" fill="rgb(234,160,15)" fg:x="24107502703" fg:w="55908833"/><text x="64.2004%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (55,908,833 samples, 0.15%)</title><rect x="63.9504%" y="325" width="0.1483%" height="15" fill="rgb(237,34,20)" fg:x="24107502703" fg:w="55908833"/><text x="64.2004%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (53,435,776 samples, 0.14%)</title><rect x="63.9570%" y="309" width="0.1418%" height="15" fill="rgb(229,97,13)" fg:x="24109975760" fg:w="53435776"/><text x="64.2070%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (37,627,682 samples, 0.10%)</title><rect x="63.9989%" y="293" width="0.0998%" height="15" fill="rgb(234,71,50)" fg:x="24125783854" fg:w="37627682"/><text x="64.2489%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="277" width="0.0872%" height="15" fill="rgb(253,155,4)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="261" width="0.0872%" height="15" fill="rgb(222,185,37)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="245" width="0.0872%" height="15" fill="rgb(251,177,13)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="229" width="0.0872%" height="15" fill="rgb(250,179,40)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="239.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="213" width="0.0872%" height="15" fill="rgb(242,44,2)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="197" width="0.0872%" height="15" fill="rgb(216,177,13)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (32,865,185 samples, 0.09%)</title><rect x="64.0115%" y="181" width="0.0872%" height="15" fill="rgb(216,106,43)" fg:x="24130546351" fg:w="32865185"/><text x="64.2615%" y="191.50"></text></g><g><title>[libc.so.6] (7,838,041 samples, 0.02%)</title><rect x="64.0779%" y="165" width="0.0208%" height="15" fill="rgb(216,183,2)" fg:x="24155573495" fg:w="7838041"/><text x="64.3279%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5,190,489 samples, 0.01%)</title><rect x="64.1051%" y="309" width="0.0138%" height="15" fill="rgb(249,75,3)" fg:x="24165821379" fg:w="5190489"/><text x="64.3551%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,190,489 samples, 0.01%)</title><rect x="64.1051%" y="293" width="0.0138%" height="15" fill="rgb(219,67,39)" fg:x="24165821379" fg:w="5190489"/><text x="64.3551%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,190,489 samples, 0.01%)</title><rect x="64.1051%" y="277" width="0.0138%" height="15" fill="rgb(253,228,2)" fg:x="24165821379" fg:w="5190489"/><text x="64.3551%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (84,420,795 samples, 0.22%)</title><rect x="63.9416%" y="373" width="0.2239%" height="15" fill="rgb(235,138,27)" fg:x="24104169096" fg:w="84420795"/><text x="64.1916%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84,420,795 samples, 0.22%)</title><rect x="63.9416%" y="357" width="0.2239%" height="15" fill="rgb(236,97,51)" fg:x="24104169096" fg:w="84420795"/><text x="64.1916%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (25,178,355 samples, 0.07%)</title><rect x="64.0987%" y="341" width="0.0668%" height="15" fill="rgb(240,80,30)" fg:x="24163411536" fg:w="25178355"/><text x="64.3487%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25,178,355 samples, 0.07%)</title><rect x="64.0987%" y="325" width="0.0668%" height="15" fill="rgb(230,178,19)" fg:x="24163411536" fg:w="25178355"/><text x="64.3487%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="309" width="0.0418%" height="15" fill="rgb(210,190,27)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="293" width="0.0418%" height="15" fill="rgb(222,107,31)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="277" width="0.0418%" height="15" fill="rgb(216,127,34)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="261" width="0.0418%" height="15" fill="rgb(234,116,52)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="245" width="0.0418%" height="15" fill="rgb(222,124,15)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="229" width="0.0418%" height="15" fill="rgb(231,179,28)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15,772,908 samples, 0.04%)</title><rect x="64.1237%" y="213" width="0.0418%" height="15" fill="rgb(226,93,45)" fg:x="24172816983" fg:w="15772908"/><text x="64.3737%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (7,379,743 samples, 0.02%)</title><rect x="64.1459%" y="197" width="0.0196%" height="15" fill="rgb(215,8,51)" fg:x="24181210148" fg:w="7379743"/><text x="64.3959%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,967,059 samples, 0.01%)</title><rect x="64.1523%" y="181" width="0.0132%" height="15" fill="rgb(223,106,5)" fg:x="24183622832" fg:w="4967059"/><text x="64.4023%" y="191.50"></text></g><g><title>server::process_request (17,379,754,689 samples, 46.10%)</title><rect x="18.1714%" y="421" width="46.1036%" height="15" fill="rgb(250,191,5)" fg:x="6850119347" fg:w="17379754689"/><text x="18.4214%" y="431.50">server::process_request</text></g><g><title>server_lib::storage::Storage::insert_entry (5,378,094,664 samples, 14.27%)</title><rect x="50.0085%" y="405" width="14.2666%" height="15" fill="rgb(242,132,44)" fg:x="18851779372" fg:w="5378094664"/><text x="50.2585%" y="415.50">server_lib::storage::S..</text></g><g><title>server_lib::storage::Storage::insert_with_ttl (5,378,094,664 samples, 14.27%)</title><rect x="50.0085%" y="389" width="14.2666%" height="15" fill="rgb(251,152,29)" fg:x="18851779372" fg:w="5378094664"/><text x="50.2585%" y="399.50">server_lib::storage::S..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (41,284,145 samples, 0.11%)</title><rect x="64.1655%" y="373" width="0.1095%" height="15" fill="rgb(218,179,5)" fg:x="24188589891" fg:w="41284145"/><text x="64.4155%" y="383.50"></text></g><g><title>clock_gettime (38,055,113 samples, 0.10%)</title><rect x="64.1741%" y="357" width="0.1009%" height="15" fill="rgb(227,67,19)" fg:x="24191818923" fg:w="38055113"/><text x="64.4241%" y="367.50"></text></g><g><title>__vdso_clock_gettime (17,211,180 samples, 0.05%)</title><rect x="64.2294%" y="341" width="0.0457%" height="15" fill="rgb(233,119,31)" fg:x="24212662856" fg:w="17211180"/><text x="64.4794%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,589,858 samples, 0.02%)</title><rect x="64.2990%" y="405" width="0.0228%" height="15" fill="rgb(241,120,22)" fg:x="24238893021" fg:w="8589858"/><text x="64.5490%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,589,858 samples, 0.02%)</title><rect x="64.2990%" y="389" width="0.0228%" height="15" fill="rgb(224,102,30)" fg:x="24238893021" fg:w="8589858"/><text x="64.5490%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8,589,858 samples, 0.02%)</title><rect x="64.2990%" y="373" width="0.0228%" height="15" fill="rgb(210,164,37)" fg:x="24238893021" fg:w="8589858"/><text x="64.5490%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8,589,858 samples, 0.02%)</title><rect x="64.2990%" y="357" width="0.0228%" height="15" fill="rgb(226,191,16)" fg:x="24238893021" fg:w="8589858"/><text x="64.5490%" y="367.50"></text></g><g><title>server_lib::resp3::get_data_type (9,976,726 samples, 0.03%)</title><rect x="64.3217%" y="405" width="0.0265%" height="15" fill="rgb(214,40,45)" fg:x="24247482879" fg:w="9976726"/><text x="64.5717%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7,140,281 samples, 0.02%)</title><rect x="64.5429%" y="389" width="0.0189%" height="15" fill="rgb(244,29,26)" fg:x="24330838639" fg:w="7140281"/><text x="64.7929%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22,426,545 samples, 0.06%)</title><rect x="64.5680%" y="341" width="0.0595%" height="15" fill="rgb(216,16,5)" fg:x="24340328330" fg:w="22426545"/><text x="64.8180%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22,426,545 samples, 0.06%)</title><rect x="64.5680%" y="325" width="0.0595%" height="15" fill="rgb(249,76,35)" fg:x="24340328330" fg:w="22426545"/><text x="64.8180%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (22,426,545 samples, 0.06%)</title><rect x="64.5680%" y="309" width="0.0595%" height="15" fill="rgb(207,11,44)" fg:x="24340328330" fg:w="22426545"/><text x="64.8180%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (22,426,545 samples, 0.06%)</title><rect x="64.5680%" y="293" width="0.0595%" height="15" fill="rgb(228,190,49)" fg:x="24340328330" fg:w="22426545"/><text x="64.8180%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,621,430 samples, 0.05%)</title><rect x="64.5728%" y="277" width="0.0547%" height="15" fill="rgb(214,173,12)" fg:x="24342133445" fg:w="20621430"/><text x="64.8228%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,621,430 samples, 0.05%)</title><rect x="64.5728%" y="261" width="0.0547%" height="15" fill="rgb(218,26,35)" fg:x="24342133445" fg:w="20621430"/><text x="64.8228%" y="271.50"></text></g><g><title>alloc::alloc::alloc (20,621,430 samples, 0.05%)</title><rect x="64.5728%" y="245" width="0.0547%" height="15" fill="rgb(220,200,19)" fg:x="24342133445" fg:w="20621430"/><text x="64.8228%" y="255.50"></text></g><g><title>malloc (20,621,430 samples, 0.05%)</title><rect x="64.5728%" y="229" width="0.0547%" height="15" fill="rgb(239,95,49)" fg:x="24342133445" fg:w="20621430"/><text x="64.8228%" y="239.50"></text></g><g><title>[libc.so.6] (4,949,454 samples, 0.01%)</title><rect x="64.6144%" y="213" width="0.0131%" height="15" fill="rgb(235,85,53)" fg:x="24357805421" fg:w="4949454"/><text x="64.8644%" y="223.50"></text></g><g><title>[libc.so.6] (4,949,454 samples, 0.01%)</title><rect x="64.6144%" y="197" width="0.0131%" height="15" fill="rgb(233,133,31)" fg:x="24357805421" fg:w="4949454"/><text x="64.8644%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (41,986,352 samples, 0.11%)</title><rect x="64.5618%" y="389" width="0.1114%" height="15" fill="rgb(218,25,20)" fg:x="24337978920" fg:w="41986352"/><text x="64.8118%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41,986,352 samples, 0.11%)</title><rect x="64.5618%" y="373" width="0.1114%" height="15" fill="rgb(252,210,38)" fg:x="24337978920" fg:w="41986352"/><text x="64.8118%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (41,986,352 samples, 0.11%)</title><rect x="64.5618%" y="357" width="0.1114%" height="15" fill="rgb(242,134,21)" fg:x="24337978920" fg:w="41986352"/><text x="64.8118%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17,210,397 samples, 0.05%)</title><rect x="64.6275%" y="341" width="0.0457%" height="15" fill="rgb(213,28,48)" fg:x="24362754875" fg:w="17210397"/><text x="64.8775%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17,210,397 samples, 0.05%)</title><rect x="64.6275%" y="325" width="0.0457%" height="15" fill="rgb(250,196,2)" fg:x="24362754875" fg:w="17210397"/><text x="64.8775%" y="335.50"></text></g><g><title>[libc.so.6] (15,565,317 samples, 0.04%)</title><rect x="64.6319%" y="309" width="0.0413%" height="15" fill="rgb(227,5,17)" fg:x="24364399955" fg:w="15565317"/><text x="64.8819%" y="319.50"></text></g><g><title>alloc::string::String::from_utf8 (16,063,227 samples, 0.04%)</title><rect x="64.6732%" y="389" width="0.0426%" height="15" fill="rgb(221,226,24)" fg:x="24379965272" fg:w="16063227"/><text x="64.9232%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (9,899,188 samples, 0.03%)</title><rect x="64.6895%" y="373" width="0.0263%" height="15" fill="rgb(211,5,48)" fg:x="24386129311" fg:w="9899188"/><text x="64.9395%" y="383.50"></text></g><g><title>core::str::validations::run_utf8_validation (8,542,472 samples, 0.02%)</title><rect x="64.6931%" y="357" width="0.0227%" height="15" fill="rgb(219,150,6)" fg:x="24387486027" fg:w="8542472"/><text x="64.9431%" y="367.50"></text></g><g><title>__rustc::__rdl_alloc (3,922,065 samples, 0.01%)</title><rect x="64.7914%" y="309" width="0.0104%" height="15" fill="rgb(251,46,16)" fg:x="24424547082" fg:w="3922065"/><text x="65.0414%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,922,065 samples, 0.01%)</title><rect x="64.7914%" y="293" width="0.0104%" height="15" fill="rgb(220,204,40)" fg:x="24424547082" fg:w="3922065"/><text x="65.0414%" y="303.50"></text></g><g><title>__rustc::__rust_alloc (4,007,359 samples, 0.01%)</title><rect x="64.8018%" y="309" width="0.0106%" height="15" fill="rgb(211,85,2)" fg:x="24428469147" fg:w="4007359"/><text x="65.0518%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (83,502,649 samples, 0.22%)</title><rect x="64.7158%" y="373" width="0.2215%" height="15" fill="rgb(229,17,7)" fg:x="24396028499" fg:w="83502649"/><text x="64.9658%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (78,705,107 samples, 0.21%)</title><rect x="64.7285%" y="357" width="0.2088%" height="15" fill="rgb(239,72,28)" fg:x="24400826041" fg:w="78705107"/><text x="64.9785%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (78,705,107 samples, 0.21%)</title><rect x="64.7285%" y="341" width="0.2088%" height="15" fill="rgb(230,47,54)" fg:x="24400826041" fg:w="78705107"/><text x="64.9785%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (75,995,004 samples, 0.20%)</title><rect x="64.7357%" y="325" width="0.2016%" height="15" fill="rgb(214,50,8)" fg:x="24403536144" fg:w="75995004"/><text x="64.9857%" y="335.50"></text></g><g><title>malloc (47,054,642 samples, 0.12%)</title><rect x="64.8125%" y="309" width="0.1248%" height="15" fill="rgb(216,198,43)" fg:x="24432476506" fg:w="47054642"/><text x="65.0625%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (109,079,921 samples, 0.29%)</title><rect x="64.7158%" y="389" width="0.2894%" height="15" fill="rgb(234,20,35)" fg:x="24396028499" fg:w="109079921"/><text x="64.9658%" y="399.50"></text></g><g><title>core::ptr::write (23,216,183 samples, 0.06%)</title><rect x="64.9436%" y="373" width="0.0616%" height="15" fill="rgb(254,45,19)" fg:x="24481892237" fg:w="23216183"/><text x="65.1936%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,202,838 samples, 0.03%)</title><rect x="65.0175%" y="309" width="0.0324%" height="15" fill="rgb(219,14,44)" fg:x="24509746110" fg:w="12202838"/><text x="65.2675%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,202,838 samples, 0.03%)</title><rect x="65.0175%" y="293" width="0.0324%" height="15" fill="rgb(217,220,26)" fg:x="24509746110" fg:w="12202838"/><text x="65.2675%" y="303.50"></text></g><g><title>alloc::alloc::alloc (12,202,838 samples, 0.03%)</title><rect x="65.0175%" y="277" width="0.0324%" height="15" fill="rgb(213,158,28)" fg:x="24509746110" fg:w="12202838"/><text x="65.2675%" y="287.50"></text></g><g><title>malloc (10,226,909 samples, 0.03%)</title><rect x="65.0227%" y="261" width="0.0271%" height="15" fill="rgb(252,51,52)" fg:x="24511722039" fg:w="10226909"/><text x="65.2727%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23,601,408 samples, 0.06%)</title><rect x="65.0052%" y="389" width="0.0626%" height="15" fill="rgb(246,89,16)" fg:x="24505108420" fg:w="23601408"/><text x="65.2552%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23,601,408 samples, 0.06%)</title><rect x="65.0052%" y="373" width="0.0626%" height="15" fill="rgb(216,158,49)" fg:x="24505108420" fg:w="23601408"/><text x="65.2552%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21,285,876 samples, 0.06%)</title><rect x="65.0113%" y="357" width="0.0565%" height="15" fill="rgb(236,107,19)" fg:x="24507423952" fg:w="21285876"/><text x="65.2613%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (21,285,876 samples, 0.06%)</title><rect x="65.0113%" y="341" width="0.0565%" height="15" fill="rgb(228,185,30)" fg:x="24507423952" fg:w="21285876"/><text x="65.2613%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (21,285,876 samples, 0.06%)</title><rect x="65.0113%" y="325" width="0.0565%" height="15" fill="rgb(246,134,8)" fg:x="24507423952" fg:w="21285876"/><text x="65.2613%" y="335.50"></text></g><g><title>alloc::raw_vec::layout_array (6,760,880 samples, 0.02%)</title><rect x="65.0498%" y="309" width="0.0179%" height="15" fill="rgb(214,143,50)" fg:x="24521948948" fg:w="6760880"/><text x="65.2998%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6,760,880 samples, 0.02%)</title><rect x="65.0498%" y="293" width="0.0179%" height="15" fill="rgb(228,75,8)" fg:x="24521948948" fg:w="6760880"/><text x="65.2998%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (6,760,880 samples, 0.02%)</title><rect x="65.0498%" y="277" width="0.0179%" height="15" fill="rgb(207,175,4)" fg:x="24521948948" fg:w="6760880"/><text x="65.2998%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6,760,880 samples, 0.02%)</title><rect x="65.0498%" y="261" width="0.0179%" height="15" fill="rgb(205,108,24)" fg:x="24521948948" fg:w="6760880"/><text x="65.2998%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (6,760,880 samples, 0.02%)</title><rect x="65.0498%" y="245" width="0.0179%" height="15" fill="rgb(244,120,49)" fg:x="24521948948" fg:w="6760880"/><text x="65.2998%" y="255.50"></text></g><g><title>cfree (18,712,695 samples, 0.05%)</title><rect x="65.0678%" y="389" width="0.0496%" height="15" fill="rgb(223,47,38)" fg:x="24528709828" fg:w="18712695"/><text x="65.3178%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="389" width="0.0502%" height="15" fill="rgb(229,179,11)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="373" width="0.0502%" height="15" fill="rgb(231,122,1)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="357" width="0.0502%" height="15" fill="rgb(245,119,9)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="341" width="0.0502%" height="15" fill="rgb(241,163,25)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="325" width="0.0502%" height="15" fill="rgb(217,214,3)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (18,934,401 samples, 0.05%)</title><rect x="65.1174%" y="309" width="0.0502%" height="15" fill="rgb(240,86,28)" fg:x="24547422523" fg:w="18934401"/><text x="65.3674%" y="319.50"></text></g><g><title>cfree (17,268,853 samples, 0.05%)</title><rect x="65.1218%" y="293" width="0.0458%" height="15" fill="rgb(215,47,9)" fg:x="24549088071" fg:w="17268853"/><text x="65.3718%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,693,569 samples, 0.02%)</title><rect x="65.1676%" y="389" width="0.0231%" height="15" fill="rgb(252,25,45)" fg:x="24566356924" fg:w="8693569"/><text x="65.4176%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,693,569 samples, 0.02%)</title><rect x="65.1676%" y="373" width="0.0231%" height="15" fill="rgb(251,164,9)" fg:x="24566356924" fg:w="8693569"/><text x="65.4176%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8,693,569 samples, 0.02%)</title><rect x="65.1676%" y="357" width="0.0231%" height="15" fill="rgb(233,194,0)" fg:x="24566356924" fg:w="8693569"/><text x="65.4176%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (8,693,569 samples, 0.02%)</title><rect x="65.1676%" y="341" width="0.0231%" height="15" fill="rgb(249,111,24)" fg:x="24566356924" fg:w="8693569"/><text x="65.4176%" y="351.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (5,256,573 samples, 0.01%)</title><rect x="65.1767%" y="325" width="0.0139%" height="15" fill="rgb(250,223,3)" fg:x="24569793920" fg:w="5256573"/><text x="65.4267%" y="335.50"></text></g><g><title>core::slice::index::get_noubcheck (5,256,573 samples, 0.01%)</title><rect x="65.1767%" y="309" width="0.0139%" height="15" fill="rgb(236,178,37)" fg:x="24569793920" fg:w="5256573"/><text x="65.4267%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (20,057,077 samples, 0.05%)</title><rect x="65.1907%" y="389" width="0.0532%" height="15" fill="rgb(241,158,50)" fg:x="24575050493" fg:w="20057077"/><text x="65.4407%" y="399.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (20,057,077 samples, 0.05%)</title><rect x="65.1907%" y="373" width="0.0532%" height="15" fill="rgb(213,121,41)" fg:x="24575050493" fg:w="20057077"/><text x="65.4407%" y="383.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (20,057,077 samples, 0.05%)</title><rect x="65.1907%" y="357" width="0.0532%" height="15" fill="rgb(240,92,3)" fg:x="24575050493" fg:w="20057077"/><text x="65.4407%" y="367.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (20,057,077 samples, 0.05%)</title><rect x="65.1907%" y="341" width="0.0532%" height="15" fill="rgb(205,123,3)" fg:x="24575050493" fg:w="20057077"/><text x="65.4407%" y="351.50"></text></g><g><title>server_lib::resp3::get_data_type (5,254,895 samples, 0.01%)</title><rect x="65.2439%" y="389" width="0.0139%" height="15" fill="rgb(205,97,47)" fg:x="24595107570" fg:w="5254895"/><text x="65.4939%" y="399.50"></text></g><g><title>__rustc::__rdl_alloc (12,711,983 samples, 0.03%)</title><rect x="65.5232%" y="213" width="0.0337%" height="15" fill="rgb(247,152,14)" fg:x="24700411201" fg:w="12711983"/><text x="65.7732%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12,711,983 samples, 0.03%)</title><rect x="65.5232%" y="197" width="0.0337%" height="15" fill="rgb(248,195,53)" fg:x="24700411201" fg:w="12711983"/><text x="65.7732%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (229,576,152 samples, 0.61%)</title><rect x="65.4600%" y="325" width="0.6090%" height="15" fill="rgb(226,201,16)" fg:x="24676587514" fg:w="229576152"/><text x="65.7100%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (229,576,152 samples, 0.61%)</title><rect x="65.4600%" y="309" width="0.6090%" height="15" fill="rgb(205,98,0)" fg:x="24676587514" fg:w="229576152"/><text x="65.7100%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (229,576,152 samples, 0.61%)</title><rect x="65.4600%" y="293" width="0.6090%" height="15" fill="rgb(214,191,48)" fg:x="24676587514" fg:w="229576152"/><text x="65.7100%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (229,576,152 samples, 0.61%)</title><rect x="65.4600%" y="277" width="0.6090%" height="15" fill="rgb(237,112,39)" fg:x="24676587514" fg:w="229576152"/><text x="65.7100%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (214,107,381 samples, 0.57%)</title><rect x="65.5011%" y="261" width="0.5680%" height="15" fill="rgb(247,203,27)" fg:x="24692056285" fg:w="214107381"/><text x="65.7511%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (214,107,381 samples, 0.57%)</title><rect x="65.5011%" y="245" width="0.5680%" height="15" fill="rgb(235,124,28)" fg:x="24692056285" fg:w="214107381"/><text x="65.7511%" y="255.50"></text></g><g><title>alloc::alloc::alloc (214,107,381 samples, 0.57%)</title><rect x="65.5011%" y="229" width="0.5680%" height="15" fill="rgb(208,207,46)" fg:x="24692056285" fg:w="214107381"/><text x="65.7511%" y="239.50"></text></g><g><title>malloc (193,040,482 samples, 0.51%)</title><rect x="65.5570%" y="213" width="0.5121%" height="15" fill="rgb(234,176,4)" fg:x="24713123184" fg:w="193040482"/><text x="65.8070%" y="223.50"></text></g><g><title>[libc.so.6] (126,452,508 samples, 0.34%)</title><rect x="65.7336%" y="197" width="0.3354%" height="15" fill="rgb(230,133,28)" fg:x="24779711158" fg:w="126452508"/><text x="65.9836%" y="207.50"></text></g><g><title>[libc.so.6] (35,725,577 samples, 0.09%)</title><rect x="65.9743%" y="181" width="0.0948%" height="15" fill="rgb(211,137,40)" fg:x="24870438089" fg:w="35725577"/><text x="66.2243%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (253,795,424 samples, 0.67%)</title><rect x="65.4487%" y="373" width="0.6732%" height="15" fill="rgb(254,35,13)" fg:x="24672324337" fg:w="253795424"/><text x="65.6987%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (253,795,424 samples, 0.67%)</title><rect x="65.4487%" y="357" width="0.6732%" height="15" fill="rgb(225,49,51)" fg:x="24672324337" fg:w="253795424"/><text x="65.6987%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (253,795,424 samples, 0.67%)</title><rect x="65.4487%" y="341" width="0.6732%" height="15" fill="rgb(251,10,15)" fg:x="24672324337" fg:w="253795424"/><text x="65.6987%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19,956,095 samples, 0.05%)</title><rect x="66.0690%" y="325" width="0.0529%" height="15" fill="rgb(228,207,15)" fg:x="24906163666" fg:w="19956095"/><text x="66.3190%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19,956,095 samples, 0.05%)</title><rect x="66.0690%" y="309" width="0.0529%" height="15" fill="rgb(241,99,19)" fg:x="24906163666" fg:w="19956095"/><text x="66.3190%" y="319.50"></text></g><g><title>[libc.so.6] (19,956,095 samples, 0.05%)</title><rect x="66.0690%" y="293" width="0.0529%" height="15" fill="rgb(207,104,49)" fg:x="24906163666" fg:w="19956095"/><text x="66.3190%" y="303.50"></text></g><g><title>alloc::string::String::from_utf8 (27,056,290 samples, 0.07%)</title><rect x="66.1220%" y="373" width="0.0718%" height="15" fill="rgb(234,99,18)" fg:x="24926119761" fg:w="27056290"/><text x="66.3720%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (24,446,345 samples, 0.06%)</title><rect x="66.1289%" y="357" width="0.0648%" height="15" fill="rgb(213,191,49)" fg:x="24928729706" fg:w="24446345"/><text x="66.3789%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (20,297,919 samples, 0.05%)</title><rect x="66.1399%" y="341" width="0.0538%" height="15" fill="rgb(210,226,19)" fg:x="24932878132" fg:w="20297919"/><text x="66.3899%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (7,371,018 samples, 0.02%)</title><rect x="66.2233%" y="309" width="0.0196%" height="15" fill="rgb(229,97,18)" fg:x="24964310502" fg:w="7371018"/><text x="66.4733%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (76,639,793 samples, 0.20%)</title><rect x="66.2114%" y="357" width="0.2033%" height="15" fill="rgb(211,167,15)" fg:x="24959815341" fg:w="76639793"/><text x="66.4614%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (74,317,357 samples, 0.20%)</title><rect x="66.2175%" y="341" width="0.1971%" height="15" fill="rgb(210,169,34)" fg:x="24962137777" fg:w="74317357"/><text x="66.4675%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (74,317,357 samples, 0.20%)</title><rect x="66.2175%" y="325" width="0.1971%" height="15" fill="rgb(241,121,31)" fg:x="24962137777" fg:w="74317357"/><text x="66.4675%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (62,900,541 samples, 0.17%)</title><rect x="66.2478%" y="309" width="0.1669%" height="15" fill="rgb(232,40,11)" fg:x="24973554593" fg:w="62900541"/><text x="66.4978%" y="319.50"></text></g><g><title>malloc (34,211,789 samples, 0.09%)</title><rect x="66.3239%" y="293" width="0.0908%" height="15" fill="rgb(205,86,26)" fg:x="25002243345" fg:w="34211789"/><text x="66.5739%" y="303.50"></text></g><g><title>[libc.so.6] (19,942,798 samples, 0.05%)</title><rect x="66.3618%" y="277" width="0.0529%" height="15" fill="rgb(231,126,28)" fg:x="25016512336" fg:w="19942798"/><text x="66.6118%" y="287.50"></text></g><g><title>[libc.so.6] (4,995,874 samples, 0.01%)</title><rect x="66.4014%" y="261" width="0.0133%" height="15" fill="rgb(219,221,18)" fg:x="25031459260" fg:w="4995874"/><text x="66.6514%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4,334,621 samples, 0.01%)</title><rect x="66.4147%" y="357" width="0.0115%" height="15" fill="rgb(211,40,0)" fg:x="25036455134" fg:w="4334621"/><text x="66.6647%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,334,621 samples, 0.01%)</title><rect x="66.4147%" y="341" width="0.0115%" height="15" fill="rgb(239,85,43)" fg:x="25036455134" fg:w="4334621"/><text x="66.6647%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (4,334,621 samples, 0.01%)</title><rect x="66.4147%" y="325" width="0.0115%" height="15" fill="rgb(231,55,21)" fg:x="25036455134" fg:w="4334621"/><text x="66.6647%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (4,334,621 samples, 0.01%)</title><rect x="66.4147%" y="309" width="0.0115%" height="15" fill="rgb(225,184,43)" fg:x="25036455134" fg:w="4334621"/><text x="66.6647%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (90,116,005 samples, 0.24%)</title><rect x="66.1937%" y="373" width="0.2391%" height="15" fill="rgb(251,158,41)" fg:x="24953176051" fg:w="90116005"/><text x="66.4437%" y="383.50"></text></g><g><title>cfree (35,946,266 samples, 0.10%)</title><rect x="66.4328%" y="373" width="0.0954%" height="15" fill="rgb(234,159,37)" fg:x="25043292056" fg:w="35946266"/><text x="66.6828%" y="383.50"></text></g><g><title>[libc.so.6] (5,609,410 samples, 0.01%)</title><rect x="66.5133%" y="357" width="0.0149%" height="15" fill="rgb(216,204,22)" fg:x="25073628912" fg:w="5609410"/><text x="66.7633%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="373" width="0.0555%" height="15" fill="rgb(214,17,3)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="357" width="0.0555%" height="15" fill="rgb(212,111,17)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="341" width="0.0555%" height="15" fill="rgb(221,157,24)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="325" width="0.0555%" height="15" fill="rgb(252,16,13)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="309" width="0.0555%" height="15" fill="rgb(221,62,2)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="293" width="0.0555%" height="15" fill="rgb(247,87,22)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="303.50"></text></g><g><title>cfree (20,916,027 samples, 0.06%)</title><rect x="66.5282%" y="277" width="0.0555%" height="15" fill="rgb(215,73,9)" fg:x="25079238322" fg:w="20916027"/><text x="66.7782%" y="287.50"></text></g><g><title>server_lib::resp3::parse_request (890,788,674 samples, 2.36%)</title><rect x="64.2750%" y="421" width="2.3630%" height="15" fill="rgb(207,175,33)" fg:x="24229874036" fg:w="890788674"/><text x="64.5250%" y="431.50">se..</text></g><g><title>server_lib::resp3::parse_arrays (863,203,105 samples, 2.29%)</title><rect x="64.3482%" y="405" width="2.2898%" height="15" fill="rgb(243,129,54)" fg:x="24257459605" fg:w="863203105"/><text x="64.5982%" y="415.50">s..</text></g><g><title>server_lib::resp3::parse_bulk_strings (520,300,245 samples, 1.38%)</title><rect x="65.2578%" y="389" width="1.3802%" height="15" fill="rgb(227,119,45)" fg:x="24600362465" fg:w="520300245"/><text x="65.5078%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (18,116,158 samples, 0.05%)</title><rect x="66.5900%" y="373" width="0.0481%" height="15" fill="rgb(205,109,36)" fg:x="25102546552" fg:w="18116158"/><text x="66.8400%" y="383.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (18,116,158 samples, 0.05%)</title><rect x="66.5900%" y="357" width="0.0481%" height="15" fill="rgb(205,6,39)" fg:x="25102546552" fg:w="18116158"/><text x="66.8400%" y="367.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (18,116,158 samples, 0.05%)</title><rect x="66.5900%" y="341" width="0.0481%" height="15" fill="rgb(221,32,16)" fg:x="25102546552" fg:w="18116158"/><text x="66.8400%" y="351.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (18,116,158 samples, 0.05%)</title><rect x="66.5900%" y="325" width="0.0481%" height="15" fill="rgb(228,144,50)" fg:x="25102546552" fg:w="18116158"/><text x="66.8400%" y="335.50"></text></g><g><title>__send (16,312,191 samples, 0.04%)</title><rect x="66.7000%" y="405" width="0.0433%" height="15" fill="rgb(229,201,53)" fg:x="25144012833" fg:w="16312191"/><text x="66.9500%" y="415.50"></text></g><g><title>__send (10,151,581,572 samples, 26.93%)</title><rect x="66.8107%" y="373" width="26.9293%" height="15" fill="rgb(249,153,27)" fg:x="25185741452" fg:w="10151581572"/><text x="67.0607%" y="383.50">__send</text></g><g><title>[libc.so.6] (10,141,741,053 samples, 26.90%)</title><rect x="66.8368%" y="357" width="26.9032%" height="15" fill="rgb(227,106,25)" fg:x="25195581971" fg:w="10141741053"/><text x="67.0868%" y="367.50">[libc.so.6]</text></g><g><title>[libc.so.6] (10,118,959,905 samples, 26.84%)</title><rect x="66.8972%" y="341" width="26.8428%" height="15" fill="rgb(230,65,29)" fg:x="25218363119" fg:w="10118959905"/><text x="67.1472%" y="351.50">[libc.so.6]</text></g><g><title>[libc.so.6] (10,065,387,726 samples, 26.70%)</title><rect x="67.0393%" y="325" width="26.7006%" height="15" fill="rgb(221,57,46)" fg:x="25271935298" fg:w="10065387726"/><text x="67.2893%" y="335.50">[libc.so.6]</text></g><g><title>std::io::Write::write_all (10,223,366,297 samples, 27.12%)</title><rect x="66.6380%" y="421" width="27.1197%" height="15" fill="rgb(229,161,17)" fg:x="25120662710" fg:w="10223366297"/><text x="66.8880%" y="431.50">std::io::Write::write_all</text></g><g><title>std::net::udp::UdpSocket::send (10,180,824,894 samples, 27.01%)</title><rect x="66.7509%" y="405" width="27.0069%" height="15" fill="rgb(222,213,11)" fg:x="25163204113" fg:w="10180824894"/><text x="67.0009%" y="415.50">std::net::udp::UdpSocket::send</text></g><g><title>std::sys::net::connection::socket::UdpSocket::send (10,174,659,843 samples, 26.99%)</title><rect x="66.7672%" y="389" width="26.9905%" height="15" fill="rgb(235,35,13)" fg:x="25169369164" fg:w="10174659843"/><text x="67.0172%" y="399.50">std::sys::net::connection::socket::UdpSocke..</text></g><g><title>std::sys::pal::unix::cvt (6,705,983 samples, 0.02%)</title><rect x="93.7400%" y="373" width="0.0178%" height="15" fill="rgb(233,158,34)" fg:x="35337323024" fg:w="6705983"/><text x="93.9900%" y="383.50"></text></g><g><title>recv (2,206,207,366 samples, 5.85%)</title><rect x="93.7638%" y="373" width="5.8524%" height="15" fill="rgb(215,151,48)" fg:x="35346311194" fg:w="2206207366"/><text x="94.0138%" y="383.50">recv</text></g><g><title>[libc.so.6] (2,196,261,679 samples, 5.83%)</title><rect x="93.7902%" y="357" width="5.8261%" height="15" fill="rgb(229,84,14)" fg:x="35356256881" fg:w="2196261679"/><text x="94.0402%" y="367.50">[libc.s..</text></g><g><title>[libc.so.6] (2,190,720,429 samples, 5.81%)</title><rect x="93.8049%" y="341" width="5.8114%" height="15" fill="rgb(229,68,14)" fg:x="35361798131" fg:w="2190720429"/><text x="94.0549%" y="351.50">[libc.s..</text></g><g><title>[libc.so.6] (2,172,949,613 samples, 5.76%)</title><rect x="93.8520%" y="325" width="5.7642%" height="15" fill="rgb(243,106,26)" fg:x="35379568947" fg:w="2172949613"/><text x="94.1020%" y="335.50">[libc.s..</text></g><g><title>server::handle_client (31,051,513,561 samples, 82.37%)</title><rect x="17.2746%" y="437" width="82.3709%" height="15" fill="rgb(206,45,38)" fg:x="6512042176" fg:w="31051513561"/><text x="17.5246%" y="447.50">server::handle_client</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::recv (2,219,526,730 samples, 5.89%)</title><rect x="93.7578%" y="421" width="5.8878%" height="15" fill="rgb(226,6,15)" fg:x="35344029007" fg:w="2219526730"/><text x="94.0078%" y="431.50">std::os..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (2,219,526,730 samples, 5.89%)</title><rect x="93.7578%" y="405" width="5.8878%" height="15" fill="rgb(232,22,54)" fg:x="35344029007" fg:w="2219526730"/><text x="94.0078%" y="415.50">std::sy..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (2,219,526,730 samples, 5.89%)</title><rect x="93.7578%" y="389" width="5.8878%" height="15" fill="rgb(229,222,32)" fg:x="35344029007" fg:w="2219526730"/><text x="94.0078%" y="399.50">std::sy..</text></g><g><title>std::sys::pal::unix::cvt (11,037,177 samples, 0.03%)</title><rect x="99.6163%" y="373" width="0.0293%" height="15" fill="rgb(228,62,29)" fg:x="37552518560" fg:w="11037177"/><text x="99.8663%" y="383.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (11,037,177 samples, 0.03%)</title><rect x="99.6163%" y="357" width="0.0293%" height="15" fill="rgb(251,103,34)" fg:x="37552518560" fg:w="11037177"/><text x="99.8663%" y="367.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (4,579,696 samples, 0.01%)</title><rect x="99.6656%" y="421" width="0.0121%" height="15" fill="rgb(233,12,30)" fg:x="37571133542" fg:w="4579696"/><text x="99.9156%" y="431.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (4,579,696 samples, 0.01%)</title><rect x="99.6656%" y="405" width="0.0121%" height="15" fill="rgb(238,52,0)" fg:x="37571133542" fg:w="4579696"/><text x="99.9156%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4,571,296 samples, 0.01%)</title><rect x="99.6850%" y="357" width="0.0121%" height="15" fill="rgb(223,98,5)" fg:x="37578440778" fg:w="4571296"/><text x="99.9350%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,571,296 samples, 0.01%)</title><rect x="99.6850%" y="341" width="0.0121%" height="15" fill="rgb(228,75,37)" fg:x="37578440778" fg:w="4571296"/><text x="99.9350%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4,571,296 samples, 0.01%)</title><rect x="99.6850%" y="325" width="0.0121%" height="15" fill="rgb(205,115,49)" fg:x="37578440778" fg:w="4571296"/><text x="99.9350%" y="335.50"></text></g><g><title>alloc::string::String::push_str (12,450,731 samples, 0.03%)</title><rect x="99.6850%" y="421" width="0.0330%" height="15" fill="rgb(250,154,43)" fg:x="37578440778" fg:w="12450731"/><text x="99.9350%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12,450,731 samples, 0.03%)</title><rect x="99.6850%" y="405" width="0.0330%" height="15" fill="rgb(226,43,29)" fg:x="37578440778" fg:w="12450731"/><text x="99.9350%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12,450,731 samples, 0.03%)</title><rect x="99.6850%" y="389" width="0.0330%" height="15" fill="rgb(249,228,39)" fg:x="37578440778" fg:w="12450731"/><text x="99.9350%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12,450,731 samples, 0.03%)</title><rect x="99.6850%" y="373" width="0.0330%" height="15" fill="rgb(216,79,43)" fg:x="37578440778" fg:w="12450731"/><text x="99.9350%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,879,435 samples, 0.02%)</title><rect x="99.6971%" y="357" width="0.0209%" height="15" fill="rgb(228,95,12)" fg:x="37583012074" fg:w="7879435"/><text x="99.9471%" y="367.50"></text></g><g><title>server_lib::resp3::bulk_string_response (33,264,312 samples, 0.09%)</title><rect x="99.6455%" y="437" width="0.0882%" height="15" fill="rgb(249,221,15)" fg:x="37563555737" fg:w="33264312"/><text x="99.8955%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="421" width="0.0157%" height="15" fill="rgb(233,34,13)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="405" width="0.0157%" height="15" fill="rgb(214,103,39)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="389" width="0.0157%" height="15" fill="rgb(251,126,39)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="373" width="0.0157%" height="15" fill="rgb(214,216,36)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="357" width="0.0157%" height="15" fill="rgb(220,221,8)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="341" width="0.0157%" height="15" fill="rgb(240,216,3)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (5,928,540 samples, 0.02%)</title><rect x="99.7180%" y="325" width="0.0157%" height="15" fill="rgb(232,218,17)" fg:x="37590891509" fg:w="5928540"/><text x="99.9680%" y="335.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (5,440,692 samples, 0.01%)</title><rect x="99.7434%" y="437" width="0.0144%" height="15" fill="rgb(229,163,45)" fg:x="37600454141" fg:w="5440692"/><text x="99.9934%" y="447.50"></text></g><g><title>server_lib::storage::Storage::get_entry (13,572,231 samples, 0.04%)</title><rect x="99.7578%" y="437" width="0.0360%" height="15" fill="rgb(231,110,42)" fg:x="37605894833" fg:w="13572231"/><text x="100.0078%" y="447.50"></text></g><g><title>std::io::Write::write_all (22,395,073 samples, 0.06%)</title><rect x="99.8005%" y="437" width="0.0594%" height="15" fill="rgb(208,170,48)" fg:x="37621988834" fg:w="22395073"/><text x="100.0505%" y="447.50"></text></g><g><title>std::io::append_to_string (16,314,636 samples, 0.04%)</title><rect x="99.8599%" y="437" width="0.0433%" height="15" fill="rgb(239,116,25)" fg:x="37644383907" fg:w="16314636"/><text x="100.1099%" y="447.50"></text></g><g><title>std::io::default_read_to_string::_{{closure}} (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="421" width="0.0135%" height="15" fill="rgb(219,200,50)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="431.50"></text></g><g><title>std::io::default_read_to_end (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="405" width="0.0135%" height="15" fill="rgb(245,200,0)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="415.50"></text></g><g><title>std::io::Read::read_buf (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="389" width="0.0135%" height="15" fill="rgb(245,119,33)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="399.50"></text></g><g><title>std::io::default_read_buf (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="373" width="0.0135%" height="15" fill="rgb(231,125,12)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="383.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::ensure_init (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="357" width="0.0135%" height="15" fill="rgb(216,96,41)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="367.50"></text></g><g><title>core::intrinsics::write_bytes (5,104,090 samples, 0.01%)</title><rect x="99.8897%" y="341" width="0.0135%" height="15" fill="rgb(248,43,45)" fg:x="37655594453" fg:w="5104090"/><text x="100.1397%" y="351.50"></text></g><g><title>std::io::default_read_to_end::small_probe_read (8,249,326 samples, 0.02%)</title><rect x="99.9032%" y="437" width="0.0219%" height="15" fill="rgb(217,222,7)" fg:x="37660698543" fg:w="8249326"/><text x="100.1532%" y="447.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (3,875,786 samples, 0.01%)</title><rect x="99.9251%" y="437" width="0.0103%" height="15" fill="rgb(233,28,6)" fg:x="37668947869" fg:w="3875786"/><text x="100.1751%" y="447.50"></text></g><g><title>all (37,697,179,070 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(231,218,15)" fg:x="0" fg:w="37697179070"/><text x="0.2500%" y="479.50"></text></g><g><title>server (37,697,179,070 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(226,171,48)" fg:x="0" fg:w="37697179070"/><text x="0.2500%" y="463.50">server</text></g><g><title>syscall (22,041,276 samples, 0.06%)</title><rect x="99.9415%" y="437" width="0.0585%" height="15" fill="rgb(235,201,9)" fg:x="37675137794" fg:w="22041276"/><text x="100.1915%" y="447.50"></text></g></svg></svg>