<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="88278210957"><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (48,141,635 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0545%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="48141635"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (74,122,487 samples, 0.08%)</title><rect x="0.0545%" y="357" width="0.0840%" height="15" fill="rgb(217,0,24)" fg:x="48141635" fg:w="74122487"/><text x="0.3045%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (117,075,341 samples, 0.13%)</title><rect x="0.1385%" y="357" width="0.1326%" height="15" fill="rgb(221,193,54)" fg:x="122264122" fg:w="117075341"/><text x="0.3885%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37,292,695 samples, 0.04%)</title><rect x="0.2711%" y="357" width="0.0422%" height="15" fill="rgb(248,212,6)" fg:x="239339463" fg:w="37292695"/><text x="0.5211%" y="367.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (33,729,610 samples, 0.04%)</title><rect x="0.3134%" y="357" width="0.0382%" height="15" fill="rgb(208,68,35)" fg:x="276632158" fg:w="33729610"/><text x="0.5634%" y="367.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (144,884,961 samples, 0.16%)</title><rect x="0.3566%" y="357" width="0.1641%" height="15" fill="rgb(232,128,0)" fg:x="314837738" fg:w="144884961"/><text x="0.6066%" y="367.50"></text></g><g><title>[[vdso]] (75,925,777 samples, 0.09%)</title><rect x="0.5208%" y="357" width="0.0860%" height="15" fill="rgb(207,160,47)" fg:x="459722699" fg:w="75925777"/><text x="0.7708%" y="367.50"></text></g><g><title>__libc_recv (12,814,484 samples, 0.01%)</title><rect x="0.6068%" y="341" width="0.0145%" height="15" fill="rgb(228,23,34)" fg:x="535648476" fg:w="12814484"/><text x="0.8568%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (108,172,165 samples, 0.12%)</title><rect x="0.6344%" y="341" width="0.1225%" height="15" fill="rgb(218,30,26)" fg:x="560063623" fg:w="108172165"/><text x="0.8844%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (141,607,282 samples, 0.16%)</title><rect x="0.7570%" y="341" width="0.1604%" height="15" fill="rgb(220,122,19)" fg:x="668235788" fg:w="141607282"/><text x="1.0070%" y="351.50"></text></g><g><title>malloc (64,645,044 samples, 0.07%)</title><rect x="0.9174%" y="341" width="0.0732%" height="15" fill="rgb(250,228,42)" fg:x="809843070" fg:w="64645044"/><text x="1.1674%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (53,998,276 samples, 0.06%)</title><rect x="1.5133%" y="325" width="0.0612%" height="15" fill="rgb(240,193,28)" fg:x="1335908124" fg:w="53998276"/><text x="1.7633%" y="335.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="309" width="0.0373%" height="15" fill="rgb(216,20,37)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="293" width="0.0373%" height="15" fill="rgb(206,188,39)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="277" width="0.0373%" height="15" fill="rgb(217,207,13)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="261" width="0.0373%" height="15" fill="rgb(231,73,38)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="245" width="0.0373%" height="15" fill="rgb(225,20,46)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (32,919,344 samples, 0.04%)</title><rect x="1.5372%" y="229" width="0.0373%" height="15" fill="rgb(210,31,41)" fg:x="1356987056" fg:w="32919344"/><text x="1.7872%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27,055,226 samples, 0.03%)</title><rect x="1.5438%" y="213" width="0.0306%" height="15" fill="rgb(221,200,47)" fg:x="1362851174" fg:w="27055226"/><text x="1.7938%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27,055,226 samples, 0.03%)</title><rect x="1.5438%" y="197" width="0.0306%" height="15" fill="rgb(226,26,5)" fg:x="1362851174" fg:w="27055226"/><text x="1.7938%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="325" width="0.0429%" height="15" fill="rgb(249,33,26)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="309" width="0.0429%" height="15" fill="rgb(235,183,28)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="293" width="0.0429%" height="15" fill="rgb(221,5,38)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="277" width="0.0429%" height="15" fill="rgb(247,18,42)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="261" width="0.0429%" height="15" fill="rgb(241,131,45)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="245" width="0.0429%" height="15" fill="rgb(249,31,29)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (37,845,648 samples, 0.04%)</title><rect x="1.5745%" y="229" width="0.0429%" height="15" fill="rgb(225,111,53)" fg:x="1389906400" fg:w="37845648"/><text x="1.8245%" y="239.50"></text></g><g><title>server::process_request (556,807,837 samples, 0.63%)</title><rect x="0.9906%" y="341" width="0.6307%" height="15" fill="rgb(238,160,17)" fg:x="874488114" fg:w="556807837"/><text x="1.2406%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="325" width="0.0229%" height="15" fill="rgb(214,148,48)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="309" width="0.0229%" height="15" fill="rgb(232,36,49)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="293" width="0.0229%" height="15" fill="rgb(209,103,24)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="277" width="0.0229%" height="15" fill="rgb(229,88,8)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="261" width="0.0229%" height="15" fill="rgb(213,181,19)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="245" width="0.0229%" height="15" fill="rgb(254,191,54)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="229" width="0.0229%" height="15" fill="rgb(241,83,37)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="239.50"></text></g><g><title>alloc::alloc::alloc (20,234,253 samples, 0.02%)</title><rect x="1.8959%" y="213" width="0.0229%" height="15" fill="rgb(233,36,39)" fg:x="1673688828" fg:w="20234253"/><text x="2.1459%" y="223.50"></text></g><g><title>server_lib::resp3::parse_arrays (268,455,764 samples, 0.30%)</title><rect x="1.6213%" y="341" width="0.3041%" height="15" fill="rgb(226,3,54)" fg:x="1431295951" fg:w="268455764"/><text x="1.8713%" y="351.50"></text></g><g><title>server_lib::resp3::parse_request (348,463,810 samples, 0.39%)</title><rect x="1.9254%" y="341" width="0.3947%" height="15" fill="rgb(245,192,40)" fg:x="1699751715" fg:w="348463810"/><text x="2.1754%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::recv (72,733,510 samples, 0.08%)</title><rect x="2.3202%" y="341" width="0.0824%" height="15" fill="rgb(238,167,29)" fg:x="2048215525" fg:w="72733510"/><text x="2.5702%" y="351.50"></text></g><g><title>[server] (1,785,042,510 samples, 2.02%)</title><rect x="0.6068%" y="357" width="2.0221%" height="15" fill="rgb(232,182,51)" fg:x="535648476" fg:w="1785042510"/><text x="0.8568%" y="367.50">[..</text></g><g><title>std::net::udp::UdpSocket::send (199,741,951 samples, 0.23%)</title><rect x="2.4026%" y="341" width="0.2263%" height="15" fill="rgb(231,60,39)" fg:x="2120949035" fg:w="199741951"/><text x="2.6526%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="325" width="0.0336%" height="15" fill="rgb(208,69,12)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="309" width="0.0336%" height="15" fill="rgb(235,93,37)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="293" width="0.0336%" height="15" fill="rgb(213,116,39)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="277" width="0.0336%" height="15" fill="rgb(222,207,29)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="261" width="0.0336%" height="15" fill="rgb(206,96,30)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="245" width="0.0336%" height="15" fill="rgb(218,138,4)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="255.50"></text></g><g><title>alloc::alloc::alloc (29,666,892 samples, 0.03%)</title><rect x="2.9516%" y="229" width="0.0336%" height="15" fill="rgb(250,191,14)" fg:x="2605586359" fg:w="29666892"/><text x="3.2016%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (361,402,272 samples, 0.41%)</title><rect x="2.6288%" y="341" width="0.4094%" height="15" fill="rgb(239,60,40)" fg:x="2320690986" fg:w="361402272"/><text x="2.8788%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (46,840,007 samples, 0.05%)</title><rect x="2.9852%" y="325" width="0.0531%" height="15" fill="rgb(206,27,48)" fg:x="2635253251" fg:w="46840007"/><text x="3.2352%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46,840,007 samples, 0.05%)</title><rect x="2.9852%" y="309" width="0.0531%" height="15" fill="rgb(225,35,8)" fg:x="2635253251" fg:w="46840007"/><text x="3.2352%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="245" width="0.0207%" height="15" fill="rgb(250,213,24)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="229" width="0.0207%" height="15" fill="rgb(247,123,22)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="213" width="0.0207%" height="15" fill="rgb(231,138,38)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="197" width="0.0207%" height="15" fill="rgb(231,145,46)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="181" width="0.0207%" height="15" fill="rgb(251,118,11)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="165" width="0.0207%" height="15" fill="rgb(217,147,25)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="175.50"></text></g><g><title>alloc::alloc::alloc (18,231,995 samples, 0.02%)</title><rect x="3.2067%" y="149" width="0.0207%" height="15" fill="rgb(247,81,37)" fg:x="2830806480" fg:w="18231995"/><text x="3.4567%" y="159.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (187,233,714 samples, 0.21%)</title><rect x="3.0460%" y="341" width="0.2121%" height="15" fill="rgb(209,12,38)" fg:x="2688917434" fg:w="187233714"/><text x="3.2960%" y="351.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (45,344,668 samples, 0.05%)</title><rect x="3.2067%" y="325" width="0.0514%" height="15" fill="rgb(227,1,9)" fg:x="2830806480" fg:w="45344668"/><text x="3.4567%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (45,344,668 samples, 0.05%)</title><rect x="3.2067%" y="309" width="0.0514%" height="15" fill="rgb(248,47,43)" fg:x="2830806480" fg:w="45344668"/><text x="3.4567%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (45,344,668 samples, 0.05%)</title><rect x="3.2067%" y="293" width="0.0514%" height="15" fill="rgb(221,10,30)" fg:x="2830806480" fg:w="45344668"/><text x="3.4567%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45,344,668 samples, 0.05%)</title><rect x="3.2067%" y="277" width="0.0514%" height="15" fill="rgb(210,229,1)" fg:x="2830806480" fg:w="45344668"/><text x="3.4567%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (45,344,668 samples, 0.05%)</title><rect x="3.2067%" y="261" width="0.0514%" height="15" fill="rgb(222,148,37)" fg:x="2830806480" fg:w="45344668"/><text x="3.4567%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27,112,673 samples, 0.03%)</title><rect x="3.2273%" y="245" width="0.0307%" height="15" fill="rgb(234,67,33)" fg:x="2849038475" fg:w="27112673"/><text x="3.4773%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27,112,673 samples, 0.03%)</title><rect x="3.2273%" y="229" width="0.0307%" height="15" fill="rgb(247,98,35)" fg:x="2849038475" fg:w="27112673"/><text x="3.4773%" y="239.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (118,975,667 samples, 0.13%)</title><rect x="3.2619%" y="341" width="0.1348%" height="15" fill="rgb(247,138,52)" fg:x="2879522388" fg:w="118975667"/><text x="3.5119%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (47,660,960 samples, 0.05%)</title><rect x="3.3427%" y="325" width="0.0540%" height="15" fill="rgb(213,79,30)" fg:x="2950837095" fg:w="47660960"/><text x="3.5927%" y="335.50"></text></g><g><title>[unknown] (24,253,909 samples, 0.03%)</title><rect x="3.4016%" y="341" width="0.0275%" height="15" fill="rgb(246,177,23)" fg:x="3002838667" fg:w="24253909"/><text x="3.6516%" y="351.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (24,253,909 samples, 0.03%)</title><rect x="3.4016%" y="325" width="0.0275%" height="15" fill="rgb(230,62,27)" fg:x="3002838667" fg:w="24253909"/><text x="3.6516%" y="335.50"></text></g><g><title>__internal_syscall_cancel (13,028,952 samples, 0.01%)</title><rect x="3.4290%" y="341" width="0.0148%" height="15" fill="rgb(216,154,8)" fg:x="3027092576" fg:w="13028952"/><text x="3.6790%" y="351.50"></text></g><g><title>__rustc::__rdl_dealloc (113,415,056 samples, 0.13%)</title><rect x="3.4475%" y="341" width="0.1285%" height="15" fill="rgb(244,35,45)" fg:x="3043433370" fg:w="113415056"/><text x="3.6975%" y="351.50"></text></g><g><title>__syscall_cancel (10,282,775 samples, 0.01%)</title><rect x="3.5769%" y="341" width="0.0116%" height="15" fill="rgb(251,115,12)" fg:x="3157587327" fg:w="10282775"/><text x="3.8269%" y="351.50"></text></g><g><title>_int_free_merge_chunk (13,789,711 samples, 0.02%)</title><rect x="3.5914%" y="341" width="0.0156%" height="15" fill="rgb(240,54,50)" fg:x="3170422747" fg:w="13789711"/><text x="3.8414%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (116,317,269 samples, 0.13%)</title><rect x="3.6108%" y="341" width="0.1318%" height="15" fill="rgb(233,84,52)" fg:x="3187535666" fg:w="116317269"/><text x="3.8608%" y="351.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (140,139,903 samples, 0.16%)</title><rect x="3.7457%" y="341" width="0.1587%" height="15" fill="rgb(207,117,47)" fg:x="3306633145" fg:w="140139903"/><text x="3.9957%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (107,182,028 samples, 0.12%)</title><rect x="3.9044%" y="341" width="0.1214%" height="15" fill="rgb(249,43,39)" fg:x="3446773048" fg:w="107182028"/><text x="4.1544%" y="351.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (66,992,433 samples, 0.08%)</title><rect x="4.0430%" y="341" width="0.0759%" height="15" fill="rgb(209,38,44)" fg:x="3569095073" fg:w="66992433"/><text x="4.2930%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (75,107,870 samples, 0.09%)</title><rect x="4.1209%" y="341" width="0.0851%" height="15" fill="rgb(236,212,23)" fg:x="3637870891" fg:w="75107870"/><text x="4.3709%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (28,552,296 samples, 0.03%)</title><rect x="4.2060%" y="341" width="0.0323%" height="15" fill="rgb(242,79,21)" fg:x="3712978761" fg:w="28552296"/><text x="4.4560%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (179,934,331 samples, 0.20%)</title><rect x="4.2383%" y="341" width="0.2038%" height="15" fill="rgb(211,96,35)" fg:x="3741531057" fg:w="179934331"/><text x="4.4883%" y="351.50"></text></g><g><title>malloc (248,682,535 samples, 0.28%)</title><rect x="4.4422%" y="341" width="0.2817%" height="15" fill="rgb(253,215,40)" fg:x="3921465388" fg:w="248682535"/><text x="4.6922%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (41,222,130 samples, 0.05%)</title><rect x="4.7239%" y="341" width="0.0467%" height="15" fill="rgb(211,81,21)" fg:x="4170147923" fg:w="41222130"/><text x="4.9739%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (27,233,491 samples, 0.03%)</title><rect x="4.7720%" y="341" width="0.0308%" height="15" fill="rgb(208,190,38)" fg:x="4212652118" fg:w="27233491"/><text x="5.0220%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="325" width="0.0195%" height="15" fill="rgb(235,213,38)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="335.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="309" width="0.0195%" height="15" fill="rgb(237,122,38)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="293" width="0.0195%" height="15" fill="rgb(244,218,35)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="277" width="0.0195%" height="15" fill="rgb(240,68,47)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="261" width="0.0195%" height="15" fill="rgb(210,16,53)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="245" width="0.0195%" height="15" fill="rgb(235,124,12)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="229" width="0.0195%" height="15" fill="rgb(224,169,11)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (17,178,722 samples, 0.02%)</title><rect x="5.0015%" y="213" width="0.0195%" height="15" fill="rgb(250,166,2)" fg:x="4415229837" fg:w="17178722"/><text x="5.2515%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13,339,488 samples, 0.02%)</title><rect x="5.0058%" y="197" width="0.0151%" height="15" fill="rgb(242,216,29)" fg:x="4419069071" fg:w="13339488"/><text x="5.2558%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13,339,488 samples, 0.02%)</title><rect x="5.0058%" y="181" width="0.0151%" height="15" fill="rgb(230,116,27)" fg:x="4419069071" fg:w="13339488"/><text x="5.2558%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="325" width="0.0389%" height="15" fill="rgb(228,99,48)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="309" width="0.0389%" height="15" fill="rgb(253,11,6)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="293" width="0.0389%" height="15" fill="rgb(247,143,39)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="277" width="0.0389%" height="15" fill="rgb(236,97,10)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="261" width="0.0389%" height="15" fill="rgb(233,208,19)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="245" width="0.0389%" height="15" fill="rgb(216,164,2)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (34,326,452 samples, 0.04%)</title><rect x="5.0210%" y="229" width="0.0389%" height="15" fill="rgb(220,129,5)" fg:x="4432408559" fg:w="34326452"/><text x="5.2710%" y="239.50"></text></g><g><title>server::get_value_type (245,972,486 samples, 0.28%)</title><rect x="4.8037%" y="341" width="0.2786%" height="15" fill="rgb(242,17,10)" fg:x="4240596505" fg:w="245972486"/><text x="5.0537%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (19,833,980 samples, 0.02%)</title><rect x="5.0598%" y="325" width="0.0225%" height="15" fill="rgb(242,107,0)" fg:x="4466735011" fg:w="19833980"/><text x="5.3098%" y="335.50"></text></g><g><title>server::process_request (25,357,874 samples, 0.03%)</title><rect x="5.0823%" y="341" width="0.0287%" height="15" fill="rgb(251,28,31)" fg:x="4486568991" fg:w="25357874"/><text x="5.3323%" y="351.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="325" width="0.0143%" height="15" fill="rgb(233,223,10)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="335.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="309" width="0.0143%" height="15" fill="rgb(215,21,27)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="293" width="0.0143%" height="15" fill="rgb(232,23,21)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="303.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="277" width="0.0143%" height="15" fill="rgb(244,5,23)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="261" width="0.0143%" height="15" fill="rgb(226,81,46)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="245" width="0.0143%" height="15" fill="rgb(247,70,30)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="229" width="0.0143%" height="15" fill="rgb(212,68,19)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (12,585,538 samples, 0.01%)</title><rect x="5.1844%" y="213" width="0.0143%" height="15" fill="rgb(240,187,13)" fg:x="4576693249" fg:w="12585538"/><text x="5.4344%" y="223.50"></text></g><g><title>alloc::string::String::push_str (13,651,809 samples, 0.02%)</title><rect x="5.2072%" y="325" width="0.0155%" height="15" fill="rgb(223,113,26)" fg:x="4596805375" fg:w="13651809"/><text x="5.4572%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (13,651,809 samples, 0.02%)</title><rect x="5.2072%" y="309" width="0.0155%" height="15" fill="rgb(206,192,2)" fg:x="4596805375" fg:w="13651809"/><text x="5.4572%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13,651,809 samples, 0.02%)</title><rect x="5.2072%" y="293" width="0.0155%" height="15" fill="rgb(241,108,4)" fg:x="4596805375" fg:w="13651809"/><text x="5.4572%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (13,651,809 samples, 0.02%)</title><rect x="5.2072%" y="277" width="0.0155%" height="15" fill="rgb(247,173,49)" fg:x="4596805375" fg:w="13651809"/><text x="5.4572%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13,651,809 samples, 0.02%)</title><rect x="5.2072%" y="261" width="0.0155%" height="15" fill="rgb(224,114,35)" fg:x="4596805375" fg:w="13651809"/><text x="5.4572%" y="271.50"></text></g><g><title>server_lib::resp3::bulk_string_response (109,914,958 samples, 0.12%)</title><rect x="5.1110%" y="341" width="0.1245%" height="15" fill="rgb(245,159,27)" fg:x="4511926865" fg:w="109914958"/><text x="5.3610%" y="351.50"></text></g><g><title>server_lib::resp3::parse_arrays (24,330,182 samples, 0.03%)</title><rect x="5.2355%" y="341" width="0.0276%" height="15" fill="rgb(245,172,44)" fg:x="4621841823" fg:w="24330182"/><text x="5.4855%" y="351.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (173,611,852 samples, 0.20%)</title><rect x="5.2631%" y="341" width="0.1967%" height="15" fill="rgb(236,23,11)" fg:x="4646172005" fg:w="173611852"/><text x="5.5131%" y="351.50"></text></g><g><title>server_lib::resp3::parse_request (20,967,239 samples, 0.02%)</title><rect x="5.4598%" y="341" width="0.0238%" height="15" fill="rgb(205,117,38)" fg:x="4819783857" fg:w="20967239"/><text x="5.7098%" y="351.50"></text></g><g><title>server_lib::storage::Storage::get_entry (13,077,215 samples, 0.01%)</title><rect x="5.4835%" y="341" width="0.0148%" height="15" fill="rgb(237,72,25)" fg:x="4840751096" fg:w="13077215"/><text x="5.7335%" y="351.50"></text></g><g><title>server_lib::storage::Storage::insert_with_ttl (143,015,700 samples, 0.16%)</title><rect x="5.5040%" y="341" width="0.1620%" height="15" fill="rgb(244,70,9)" fg:x="4858795119" fg:w="143015700"/><text x="5.7540%" y="351.50"></text></g><g><title>std::io::Write::write_all (90,771,911 samples, 0.10%)</title><rect x="5.6660%" y="341" width="0.1028%" height="15" fill="rgb(217,125,39)" fg:x="5001810819" fg:w="90771911"/><text x="5.9160%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::recv (38,190,430 samples, 0.04%)</title><rect x="5.7688%" y="341" width="0.0433%" height="15" fill="rgb(235,36,10)" fg:x="5092582730" fg:w="38190430"/><text x="6.0188%" y="351.50"></text></g><g><title>std::net::udp::UdpSocket::send (38,460,213 samples, 0.04%)</title><rect x="5.8120%" y="341" width="0.0436%" height="15" fill="rgb(251,123,47)" fg:x="5130773160" fg:w="38460213"/><text x="6.0620%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (134,578,083 samples, 0.15%)</title><rect x="5.8556%" y="341" width="0.1524%" height="15" fill="rgb(221,13,13)" fg:x="5169233373" fg:w="134578083"/><text x="6.1056%" y="351.50"></text></g><g><title>std::thread::yield_now (32,818,393 samples, 0.04%)</title><rect x="6.0081%" y="341" width="0.0372%" height="15" fill="rgb(238,131,9)" fg:x="5303811456" fg:w="32818393"/><text x="6.2581%" y="351.50"></text></g><g><title>std::time::SystemTime::now (80,408,142 samples, 0.09%)</title><rect x="6.0460%" y="341" width="0.0911%" height="15" fill="rgb(211,50,8)" fg:x="5337326213" fg:w="80408142"/><text x="6.2960%" y="351.50"></text></g><g><title>[unknown] (3,115,910,831 samples, 3.53%)</title><rect x="2.6288%" y="357" width="3.5296%" height="15" fill="rgb(245,182,24)" fg:x="2320690986" fg:w="3115910831"/><text x="2.8788%" y="367.50">[un..</text></g><g><title>unlink_chunk.isra.0 (18,242,654 samples, 0.02%)</title><rect x="6.1378%" y="341" width="0.0207%" height="15" fill="rgb(242,14,37)" fg:x="5418359163" fg:w="18242654"/><text x="6.3878%" y="351.50"></text></g><g><title>__internal_syscall_cancel (20,751,055 samples, 0.02%)</title><rect x="6.1585%" y="357" width="0.0235%" height="15" fill="rgb(246,228,12)" fg:x="5436601817" fg:w="20751055"/><text x="6.4085%" y="367.50"></text></g><g><title>__libc_recv (42,674,108 samples, 0.05%)</title><rect x="6.1820%" y="357" width="0.0483%" height="15" fill="rgb(213,55,15)" fg:x="5457352872" fg:w="42674108"/><text x="6.4320%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (21,776,318 samples, 0.02%)</title><rect x="6.2318%" y="357" width="0.0247%" height="15" fill="rgb(209,9,3)" fg:x="5501287012" fg:w="21776318"/><text x="6.4818%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (445,539,364 samples, 0.50%)</title><rect x="6.2564%" y="357" width="0.5047%" height="15" fill="rgb(230,59,30)" fg:x="5523063330" fg:w="445539364"/><text x="6.5064%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (95,995,853 samples, 0.11%)</title><rect x="6.6524%" y="341" width="0.1087%" height="15" fill="rgb(209,121,21)" fg:x="5872606841" fg:w="95995853"/><text x="6.9024%" y="351.50"></text></g><g><title>__send (64,458,045 samples, 0.07%)</title><rect x="6.7646%" y="357" width="0.0730%" height="15" fill="rgb(220,109,13)" fg:x="5971689293" fg:w="64458045"/><text x="7.0146%" y="367.50"></text></g><g><title>__syscall_cancel (28,064,741 samples, 0.03%)</title><rect x="6.8376%" y="357" width="0.0318%" height="15" fill="rgb(232,18,1)" fg:x="6036147338" fg:w="28064741"/><text x="7.0876%" y="367.50"></text></g><g><title>__syscall_cancel_arch_end (457,127,451 samples, 0.52%)</title><rect x="6.8694%" y="357" width="0.5178%" height="15" fill="rgb(215,41,42)" fg:x="6064212079" fg:w="457127451"/><text x="7.1194%" y="367.50"></text></g><g><title>_int_free_chunk (134,875,628 samples, 0.15%)</title><rect x="7.3873%" y="357" width="0.1528%" height="15" fill="rgb(224,123,36)" fg:x="6521339530" fg:w="134875628"/><text x="7.6373%" y="367.50"></text></g><g><title>_int_free_create_chunk (28,198,229 samples, 0.03%)</title><rect x="7.5400%" y="357" width="0.0319%" height="15" fill="rgb(240,125,3)" fg:x="6656215158" fg:w="28198229"/><text x="7.7900%" y="367.50"></text></g><g><title>_int_free_merge_chunk (23,171,199 samples, 0.03%)</title><rect x="7.5720%" y="357" width="0.0262%" height="15" fill="rgb(205,98,50)" fg:x="6684413387" fg:w="23171199"/><text x="7.8220%" y="367.50"></text></g><g><title>_int_malloc (58,526,913 samples, 0.07%)</title><rect x="7.5982%" y="357" width="0.0663%" height="15" fill="rgb(205,185,37)" fg:x="6707584586" fg:w="58526913"/><text x="7.8482%" y="367.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="341" width="0.0264%" height="15" fill="rgb(238,207,15)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="351.50"></text></g><g><title>__libc_start_call_main (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="325" width="0.0264%" height="15" fill="rgb(213,199,42)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="335.50"></text></g><g><title>main (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="309" width="0.0264%" height="15" fill="rgb(235,201,11)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="319.50"></text></g><g><title>std::rt::lang_start_internal (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="293" width="0.0264%" height="15" fill="rgb(207,46,11)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="303.50"></text></g><g><title>std::panic::catch_unwind (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="277" width="0.0264%" height="15" fill="rgb(241,35,35)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="287.50"></text></g><g><title>std::panicking::try (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="261" width="0.0264%" height="15" fill="rgb(243,32,47)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="271.50"></text></g><g><title>std::panicking::try::do_call (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="245" width="0.0264%" height="15" fill="rgb(247,202,23)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="255.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="229" width="0.0264%" height="15" fill="rgb(219,102,11)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="239.50"></text></g><g><title>std::panic::catch_unwind (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="213" width="0.0264%" height="15" fill="rgb(243,110,44)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="223.50"></text></g><g><title>std::panicking::try (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="197" width="0.0264%" height="15" fill="rgb(222,74,54)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="207.50"></text></g><g><title>std::panicking::try::do_call (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="181" width="0.0264%" height="15" fill="rgb(216,99,12)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="165" width="0.0264%" height="15" fill="rgb(226,22,26)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="175.50"></text></g><g><title>std::rt::lang_start::{{closure}} (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="149" width="0.0264%" height="15" fill="rgb(217,163,10)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="159.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="133" width="0.0264%" height="15" fill="rgb(213,25,53)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="117" width="0.0264%" height="15" fill="rgb(252,105,26)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="127.50"></text></g><g><title>server::main (23,295,025 samples, 0.03%)</title><rect x="7.6645%" y="101" width="0.0264%" height="15" fill="rgb(220,39,43)" fg:x="6766111499" fg:w="23295025"/><text x="7.9145%" y="111.50"></text></g><g><title>std::thread::sleep (9,596,584 samples, 0.01%)</title><rect x="7.6800%" y="85" width="0.0109%" height="15" fill="rgb(229,68,48)" fg:x="6779809940" fg:w="9596584"/><text x="7.9300%" y="95.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (9,596,584 samples, 0.01%)</title><rect x="7.6800%" y="69" width="0.0109%" height="15" fill="rgb(252,8,32)" fg:x="6779809940" fg:w="9596584"/><text x="7.9300%" y="79.50"></text></g><g><title>_start (23,796,529 samples, 0.03%)</title><rect x="7.6645%" y="357" width="0.0270%" height="15" fill="rgb(223,20,43)" fg:x="6766111499" fg:w="23796529"/><text x="7.9145%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (47,884,536 samples, 0.05%)</title><rect x="7.6915%" y="357" width="0.0542%" height="15" fill="rgb(229,81,49)" fg:x="6789908028" fg:w="47884536"/><text x="7.9415%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (127,427,672 samples, 0.14%)</title><rect x="7.7457%" y="357" width="0.1443%" height="15" fill="rgb(236,28,36)" fg:x="6837792564" fg:w="127427672"/><text x="7.9957%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (231,472,783 samples, 0.26%)</title><rect x="7.8947%" y="357" width="0.2622%" height="15" fill="rgb(249,185,26)" fg:x="6969306219" fg:w="231472783"/><text x="8.1447%" y="367.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (70,453,240 samples, 0.08%)</title><rect x="8.1569%" y="357" width="0.0798%" height="15" fill="rgb(249,174,33)" fg:x="7200779002" fg:w="70453240"/><text x="8.4069%" y="367.50"></text></g><g><title>cfree@GLIBC_2.2.5 (353,925,443 samples, 0.40%)</title><rect x="8.2367%" y="357" width="0.4009%" height="15" fill="rgb(233,201,37)" fg:x="7271232242" fg:w="353925443"/><text x="8.4867%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad (67,654,592 samples, 0.08%)</title><rect x="8.6407%" y="357" width="0.0766%" height="15" fill="rgb(221,78,26)" fg:x="7627873207" fg:w="67654592"/><text x="8.8907%" y="367.50"></text></g><g><title>core::fmt::write (200,144,030 samples, 0.23%)</title><rect x="8.7174%" y="357" width="0.2267%" height="15" fill="rgb(250,127,30)" fg:x="7695527799" fg:w="200144030"/><text x="8.9674%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (35,338,792 samples, 0.04%)</title><rect x="8.9040%" y="341" width="0.0400%" height="15" fill="rgb(230,49,44)" fg:x="7860333037" fg:w="35338792"/><text x="9.1540%" y="351.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (35,338,792 samples, 0.04%)</title><rect x="8.9040%" y="325" width="0.0400%" height="15" fill="rgb(229,67,23)" fg:x="7860333037" fg:w="35338792"/><text x="9.1540%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (109,603,202 samples, 0.12%)</title><rect x="8.9441%" y="357" width="0.1242%" height="15" fill="rgb(249,83,47)" fg:x="7895671829" fg:w="109603202"/><text x="9.1941%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,872,161 samples, 0.02%)</title><rect x="9.0480%" y="341" width="0.0202%" height="15" fill="rgb(215,43,3)" fg:x="7987402870" fg:w="17872161"/><text x="9.2980%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (9,853,520 samples, 0.01%)</title><rect x="9.0571%" y="325" width="0.0112%" height="15" fill="rgb(238,154,13)" fg:x="7995421511" fg:w="9853520"/><text x="9.3071%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (9,853,520 samples, 0.01%)</title><rect x="9.0571%" y="309" width="0.0112%" height="15" fill="rgb(219,56,2)" fg:x="7995421511" fg:w="9853520"/><text x="9.3071%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (9,853,520 samples, 0.01%)</title><rect x="9.0571%" y="293" width="0.0112%" height="15" fill="rgb(233,0,4)" fg:x="7995421511" fg:w="9853520"/><text x="9.3071%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (9,853,520 samples, 0.01%)</title><rect x="9.0571%" y="277" width="0.0112%" height="15" fill="rgb(235,30,7)" fg:x="7995421511" fg:w="9853520"/><text x="9.3071%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (131,459,599 samples, 0.15%)</title><rect x="9.0697%" y="357" width="0.1489%" height="15" fill="rgb(250,79,13)" fg:x="8006600863" fg:w="131459599"/><text x="9.3197%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (348,656,155 samples, 0.39%)</title><rect x="9.2187%" y="357" width="0.3950%" height="15" fill="rgb(211,146,34)" fg:x="8138060462" fg:w="348656155"/><text x="9.4687%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (30,653,101 samples, 0.03%)</title><rect x="9.5789%" y="341" width="0.0347%" height="15" fill="rgb(228,22,38)" fg:x="8456063516" fg:w="30653101"/><text x="9.8289%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,653,101 samples, 0.03%)</title><rect x="9.5789%" y="325" width="0.0347%" height="15" fill="rgb(235,168,5)" fg:x="8456063516" fg:w="30653101"/><text x="9.8289%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (30,653,101 samples, 0.03%)</title><rect x="9.5789%" y="309" width="0.0347%" height="15" fill="rgb(221,155,16)" fg:x="8456063516" fg:w="30653101"/><text x="9.8289%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (168,202,115 samples, 0.19%)</title><rect x="9.6136%" y="357" width="0.1905%" height="15" fill="rgb(215,215,53)" fg:x="8486716617" fg:w="168202115"/><text x="9.8636%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (512,928,011 samples, 0.58%)</title><rect x="9.8041%" y="357" width="0.5810%" height="15" fill="rgb(223,4,10)" fg:x="8654918732" fg:w="512928011"/><text x="10.0541%" y="367.50"></text></g><g><title>malloc (481,645,809 samples, 0.55%)</title><rect x="10.3945%" y="357" width="0.5456%" height="15" fill="rgb(234,103,6)" fg:x="9176048382" fg:w="481645809"/><text x="10.6445%" y="367.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (52,770,631 samples, 0.06%)</title><rect x="10.9466%" y="357" width="0.0598%" height="15" fill="rgb(227,97,0)" fg:x="9663444469" fg:w="52770631"/><text x="11.1966%" y="367.50"></text></g><g><title>server::get_value_type (9,626,468 samples, 0.01%)</title><rect x="11.0128%" y="357" width="0.0109%" height="15" fill="rgb(234,150,53)" fg:x="9721878429" fg:w="9626468"/><text x="11.2628%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (31,685,701 samples, 0.04%)</title><rect x="11.9648%" y="325" width="0.0359%" height="15" fill="rgb(228,201,54)" fg:x="10562277871" fg:w="31685701"/><text x="12.2148%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (31,685,701 samples, 0.04%)</title><rect x="11.9648%" y="309" width="0.0359%" height="15" fill="rgb(222,22,37)" fg:x="10562277871" fg:w="31685701"/><text x="12.2148%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (683,992,176 samples, 0.77%)</title><rect x="11.9239%" y="341" width="0.7748%" height="15" fill="rgb(237,53,32)" fg:x="10526226724" fg:w="683992176"/><text x="12.1739%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (616,255,328 samples, 0.70%)</title><rect x="12.0007%" y="325" width="0.6981%" height="15" fill="rgb(233,25,53)" fg:x="10593963572" fg:w="616255328"/><text x="12.2507%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_add (616,255,328 samples, 0.70%)</title><rect x="12.0007%" y="309" width="0.6981%" height="15" fill="rgb(210,40,34)" fg:x="10593963572" fg:w="616255328"/><text x="12.2507%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11,336,846 samples, 0.01%)</title><rect x="12.6987%" y="341" width="0.0128%" height="15" fill="rgb(241,220,44)" fg:x="11210218900" fg:w="11336846"/><text x="12.9487%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (11,336,846 samples, 0.01%)</title><rect x="12.6987%" y="325" width="0.0128%" height="15" fill="rgb(235,28,35)" fg:x="11210218900" fg:w="11336846"/><text x="12.9487%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (10,766,317 samples, 0.01%)</title><rect x="12.6994%" y="309" width="0.0122%" height="15" fill="rgb(210,56,17)" fg:x="11210789429" fg:w="10766317"/><text x="12.9494%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10,766,317 samples, 0.01%)</title><rect x="12.6994%" y="293" width="0.0122%" height="15" fill="rgb(224,130,29)" fg:x="11210789429" fg:w="10766317"/><text x="12.9494%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (10,766,317 samples, 0.01%)</title><rect x="12.6994%" y="277" width="0.0122%" height="15" fill="rgb(235,212,8)" fg:x="11210789429" fg:w="10766317"/><text x="12.9494%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (10,766,317 samples, 0.01%)</title><rect x="12.6994%" y="261" width="0.0122%" height="15" fill="rgb(223,33,50)" fg:x="11210789429" fg:w="10766317"/><text x="12.9494%" y="271.50"></text></g><g><title>__libc_recv (96,025,383 samples, 0.11%)</title><rect x="12.7116%" y="341" width="0.1088%" height="15" fill="rgb(219,149,13)" fg:x="11221555746" fg:w="96025383"/><text x="12.9616%" y="351.50"></text></g><g><title>__rustc::__rust_dealloc (49,249,174 samples, 0.06%)</title><rect x="12.8277%" y="341" width="0.0558%" height="15" fill="rgb(250,156,29)" fg:x="11324087242" fg:w="49249174"/><text x="13.0777%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (351,643,346 samples, 0.40%)</title><rect x="12.8835%" y="341" width="0.3983%" height="15" fill="rgb(216,193,19)" fg:x="11373336416" fg:w="351643346"/><text x="13.1335%" y="351.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (32,793,669 samples, 0.04%)</title><rect x="13.2819%" y="341" width="0.0371%" height="15" fill="rgb(216,135,14)" fg:x="11724979762" fg:w="32793669"/><text x="13.5319%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (32,793,669 samples, 0.04%)</title><rect x="13.2819%" y="325" width="0.0371%" height="15" fill="rgb(241,47,5)" fg:x="11724979762" fg:w="32793669"/><text x="13.5319%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32,793,669 samples, 0.04%)</title><rect x="13.2819%" y="309" width="0.0371%" height="15" fill="rgb(233,42,35)" fg:x="11724979762" fg:w="32793669"/><text x="13.5319%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (32,793,669 samples, 0.04%)</title><rect x="13.2819%" y="293" width="0.0371%" height="15" fill="rgb(231,13,6)" fg:x="11724979762" fg:w="32793669"/><text x="13.5319%" y="303.50"></text></g><g><title>__rustc::__rdl_dealloc (44,298,891 samples, 0.05%)</title><rect x="13.5544%" y="245" width="0.0502%" height="15" fill="rgb(207,181,40)" fg:x="11965614139" fg:w="44298891"/><text x="13.8044%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (40,619,161 samples, 0.05%)</title><rect x="13.5586%" y="229" width="0.0460%" height="15" fill="rgb(254,173,49)" fg:x="11969293869" fg:w="40619161"/><text x="13.8086%" y="239.50"></text></g><g><title>__rustc::__rust_dealloc (145,947,587 samples, 0.17%)</title><rect x="13.6046%" y="245" width="0.1653%" height="15" fill="rgb(221,1,38)" fg:x="12009913030" fg:w="145947587"/><text x="13.8546%" y="255.50"></text></g><g><title>_int_free_create_chunk (187,364,368 samples, 0.21%)</title><rect x="15.0011%" y="197" width="0.2122%" height="15" fill="rgb(206,124,46)" fg:x="13242694107" fg:w="187364368"/><text x="15.2511%" y="207.50"></text></g><g><title>unlink_chunk.isra.0 (57,576,415 samples, 0.07%)</title><rect x="15.1481%" y="181" width="0.0652%" height="15" fill="rgb(249,21,11)" fg:x="13372482060" fg:w="57576415"/><text x="15.3981%" y="191.50"></text></g><g><title>_int_free_merge_chunk (275,099,532 samples, 0.31%)</title><rect x="14.9154%" y="213" width="0.3116%" height="15" fill="rgb(222,201,40)" fg:x="13167071705" fg:w="275099532"/><text x="15.1654%" y="223.50"></text></g><g><title>unlink_chunk.isra.0 (12,112,762 samples, 0.01%)</title><rect x="15.2133%" y="197" width="0.0137%" height="15" fill="rgb(235,61,29)" fg:x="13430058475" fg:w="12112762"/><text x="15.4633%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,608,683,459 samples, 1.82%)</title><rect x="13.4056%" y="277" width="1.8223%" height="15" fill="rgb(219,207,3)" fg:x="11834197926" fg:w="1608683459"/><text x="13.6556%" y="287.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (1,608,683,459 samples, 1.82%)</title><rect x="13.4056%" y="261" width="1.8223%" height="15" fill="rgb(222,56,46)" fg:x="11834197926" fg:w="1608683459"/><text x="13.6556%" y="271.50">a..</text></g><g><title>cfree@GLIBC_2.2.5 (1,283,601,316 samples, 1.45%)</title><rect x="13.7738%" y="245" width="1.4540%" height="15" fill="rgb(239,76,54)" fg:x="12159280069" fg:w="1283601316"/><text x="14.0238%" y="255.50"></text></g><g><title>_int_free_chunk (483,985,189 samples, 0.55%)</title><rect x="14.6796%" y="229" width="0.5482%" height="15" fill="rgb(231,124,27)" fg:x="12958896196" fg:w="483985189"/><text x="14.9296%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,692,619,971 samples, 1.92%)</title><rect x="13.3190%" y="341" width="1.9174%" height="15" fill="rgb(249,195,6)" fg:x="11757773431" fg:w="1692619971"/><text x="13.5690%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,692,619,971 samples, 1.92%)</title><rect x="13.3190%" y="325" width="1.9174%" height="15" fill="rgb(237,174,47)" fg:x="11757773431" fg:w="1692619971"/><text x="13.5690%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,692,619,971 samples, 1.92%)</title><rect x="13.3190%" y="309" width="1.9174%" height="15" fill="rgb(206,201,31)" fg:x="11757773431" fg:w="1692619971"/><text x="13.5690%" y="319.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,616,195,476 samples, 1.83%)</title><rect x="13.4056%" y="293" width="1.8308%" height="15" fill="rgb(231,57,52)" fg:x="11834197926" fg:w="1616195476"/><text x="13.6556%" y="303.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (80,074,065 samples, 0.09%)</title><rect x="15.4298%" y="293" width="0.0907%" height="15" fill="rgb(248,177,22)" fg:x="13621122240" fg:w="80074065"/><text x="15.6798%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (80,074,065 samples, 0.09%)</title><rect x="15.4298%" y="277" width="0.0907%" height="15" fill="rgb(215,211,37)" fg:x="13621122240" fg:w="80074065"/><text x="15.6798%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (80,074,065 samples, 0.09%)</title><rect x="15.4298%" y="261" width="0.0907%" height="15" fill="rgb(241,128,51)" fg:x="13621122240" fg:w="80074065"/><text x="15.6798%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (80,074,065 samples, 0.09%)</title><rect x="15.4298%" y="245" width="0.0907%" height="15" fill="rgb(227,165,31)" fg:x="13621122240" fg:w="80074065"/><text x="15.6798%" y="255.50"></text></g><g><title>__rustc::__rust_dealloc (81,527,227 samples, 0.09%)</title><rect x="15.5714%" y="277" width="0.0924%" height="15" fill="rgb(228,167,24)" fg:x="13746145827" fg:w="81527227"/><text x="15.8214%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,340,632,691 samples, 1.52%)</title><rect x="15.6666%" y="277" width="1.5186%" height="15" fill="rgb(228,143,12)" fg:x="13830205694" fg:w="1340632691"/><text x="15.9166%" y="287.50"></text></g><g><title>_int_free_chunk (346,138,237 samples, 0.39%)</title><rect x="16.7932%" y="261" width="0.3921%" height="15" fill="rgb(249,149,8)" fg:x="14824700148" fg:w="346138237"/><text x="17.0432%" y="271.50"></text></g><g><title>_int_free_merge_chunk (212,298,336 samples, 0.24%)</title><rect x="16.9448%" y="245" width="0.2405%" height="15" fill="rgb(243,35,44)" fg:x="14958540049" fg:w="212298336"/><text x="17.1948%" y="255.50"></text></g><g><title>_int_free_create_chunk (172,347,967 samples, 0.20%)</title><rect x="16.9900%" y="229" width="0.1952%" height="15" fill="rgb(246,89,9)" fg:x="14998490418" fg:w="172347967"/><text x="17.2400%" y="239.50"></text></g><g><title>unlink_chunk.isra.0 (34,585,074 samples, 0.04%)</title><rect x="17.1461%" y="213" width="0.0392%" height="15" fill="rgb(233,213,13)" fg:x="15136253311" fg:w="34585074"/><text x="17.3961%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,865,649 samples, 0.01%)</title><rect x="17.7020%" y="197" width="0.0146%" height="15" fill="rgb(233,141,41)" fg:x="15626982424" fg:w="12865649"/><text x="17.9520%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (12,865,649 samples, 0.01%)</title><rect x="17.7020%" y="181" width="0.0146%" height="15" fill="rgb(239,167,4)" fg:x="15626982424" fg:w="12865649"/><text x="17.9520%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,026,665,899 samples, 2.30%)</title><rect x="15.4282%" y="309" width="2.2958%" height="15" fill="rgb(209,217,16)" fg:x="13619743704" fg:w="2026665899"/><text x="15.6782%" y="319.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[server_lib::resp3::RequestType]&gt; (1,945,213,298 samples, 2.20%)</title><rect x="15.5205%" y="293" width="2.2035%" height="15" fill="rgb(219,88,35)" fg:x="13701196305" fg:w="1945213298"/><text x="15.7705%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (475,571,218 samples, 0.54%)</title><rect x="17.1853%" y="277" width="0.5387%" height="15" fill="rgb(220,193,23)" fg:x="15170838385" fg:w="475571218"/><text x="17.4353%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (81,040,213 samples, 0.09%)</title><rect x="17.6322%" y="261" width="0.0918%" height="15" fill="rgb(230,90,52)" fg:x="15565369390" fg:w="81040213"/><text x="17.8822%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (81,040,213 samples, 0.09%)</title><rect x="17.6322%" y="245" width="0.0918%" height="15" fill="rgb(252,106,19)" fg:x="15565369390" fg:w="81040213"/><text x="17.8822%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81,040,213 samples, 0.09%)</title><rect x="17.6322%" y="229" width="0.0918%" height="15" fill="rgb(206,74,20)" fg:x="15565369390" fg:w="81040213"/><text x="17.8822%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,427,179 samples, 0.02%)</title><rect x="17.7020%" y="213" width="0.0220%" height="15" fill="rgb(230,138,44)" fg:x="15626982424" fg:w="19427179"/><text x="17.9520%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::resp3::RequestType&gt; (2,212,295,662 samples, 2.51%)</title><rect x="15.2364%" y="341" width="2.5060%" height="15" fill="rgb(235,182,43)" fg:x="13450393402" fg:w="2212295662"/><text x="15.4864%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;server_lib::resp3::RequestType&gt;&gt; (2,042,945,360 samples, 2.31%)</title><rect x="15.4282%" y="325" width="2.3142%" height="15" fill="rgb(242,16,51)" fg:x="13619743704" fg:w="2042945360"/><text x="15.6782%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;server_lib::resp3::RequestType&gt;&gt; (16,279,461 samples, 0.02%)</title><rect x="17.7240%" y="309" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="15646409603" fg:w="16279461"/><text x="17.9740%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,279,461 samples, 0.02%)</title><rect x="17.7240%" y="293" width="0.0184%" height="15" fill="rgb(210,31,22)" fg:x="15646409603" fg:w="16279461"/><text x="17.9740%" y="303.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (11,459,331 samples, 0.01%)</title><rect x="18.6397%" y="261" width="0.0130%" height="15" fill="rgb(239,54,39)" fg:x="16454784339" fg:w="11459331"/><text x="18.8897%" y="271.50"></text></g><g><title>core::fmt::Formatter::new (13,186,855 samples, 0.01%)</title><rect x="18.9080%" y="245" width="0.0149%" height="15" fill="rgb(230,99,41)" fg:x="16691680868" fg:w="13186855"/><text x="19.1580%" y="255.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (155,047,389 samples, 0.18%)</title><rect x="18.9341%" y="229" width="0.1756%" height="15" fill="rgb(253,106,12)" fg:x="16714652708" fg:w="155047389"/><text x="19.1841%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (28,822,033 samples, 0.03%)</title><rect x="19.0770%" y="213" width="0.0326%" height="15" fill="rgb(213,46,41)" fg:x="16840878064" fg:w="28822033"/><text x="19.3270%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (38,269,368 samples, 0.04%)</title><rect x="19.2886%" y="69" width="0.0434%" height="15" fill="rgb(215,133,35)" fg:x="17027674011" fg:w="38269368"/><text x="19.5386%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (35,596,841 samples, 0.04%)</title><rect x="19.2917%" y="53" width="0.0403%" height="15" fill="rgb(213,28,5)" fg:x="17030346538" fg:w="35596841"/><text x="19.5417%" y="63.50"></text></g><g><title>__rustc::__rust_alloc (57,482,247 samples, 0.07%)</title><rect x="19.3320%" y="69" width="0.0651%" height="15" fill="rgb(215,77,49)" fg:x="17065943379" fg:w="57482247"/><text x="19.5820%" y="79.50"></text></g><g><title>_int_malloc (451,225,165 samples, 0.51%)</title><rect x="20.1166%" y="53" width="0.5111%" height="15" fill="rgb(248,100,22)" fg:x="17758531204" fg:w="451225165"/><text x="20.3666%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (129,685,093 samples, 0.15%)</title><rect x="20.4808%" y="37" width="0.1469%" height="15" fill="rgb(208,67,9)" fg:x="18080071276" fg:w="129685093"/><text x="20.7308%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,322,795,846 samples, 1.50%)</title><rect x="19.1301%" y="149" width="1.4984%" height="15" fill="rgb(219,133,21)" fg:x="16887742841" fg:w="1322795846"/><text x="19.3801%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,319,275,413 samples, 1.49%)</title><rect x="19.1341%" y="133" width="1.4945%" height="15" fill="rgb(246,46,29)" fg:x="16891263274" fg:w="1319275413"/><text x="19.3841%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,319,275,413 samples, 1.49%)</title><rect x="19.1341%" y="117" width="1.4945%" height="15" fill="rgb(246,185,52)" fg:x="16891263274" fg:w="1319275413"/><text x="19.3841%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,312,911,467 samples, 1.49%)</title><rect x="19.1413%" y="101" width="1.4872%" height="15" fill="rgb(252,136,11)" fg:x="16897627220" fg:w="1312911467"/><text x="19.3913%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,226,989,413 samples, 1.39%)</title><rect x="19.2387%" y="85" width="1.3899%" height="15" fill="rgb(219,138,53)" fg:x="16983549274" fg:w="1226989413"/><text x="19.4887%" y="95.50"></text></g><g><title>malloc (1,085,764,122 samples, 1.23%)</title><rect x="19.3986%" y="69" width="1.2299%" height="15" fill="rgb(211,51,23)" fg:x="17124774565" fg:w="1085764122"/><text x="19.6486%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (381,840,301 samples, 0.43%)</title><rect x="20.6286%" y="149" width="0.4325%" height="15" fill="rgb(247,221,28)" fg:x="18210538687" fg:w="381840301"/><text x="20.8786%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (381,840,301 samples, 0.43%)</title><rect x="20.6286%" y="133" width="0.4325%" height="15" fill="rgb(251,222,45)" fg:x="18210538687" fg:w="381840301"/><text x="20.8786%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,723,893,379 samples, 1.95%)</title><rect x="19.1097%" y="229" width="1.9528%" height="15" fill="rgb(217,162,53)" fg:x="16869700097" fg:w="1723893379"/><text x="19.3597%" y="239.50">&lt;..</text></g><g><title>alloc::string::String::push_str (1,721,787,714 samples, 1.95%)</title><rect x="19.1121%" y="213" width="1.9504%" height="15" fill="rgb(229,93,14)" fg:x="16871805762" fg:w="1721787714"/><text x="19.3621%" y="223.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,721,787,714 samples, 1.95%)</title><rect x="19.1121%" y="197" width="1.9504%" height="15" fill="rgb(209,67,49)" fg:x="16871805762" fg:w="1721787714"/><text x="19.3621%" y="207.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,721,787,714 samples, 1.95%)</title><rect x="19.1121%" y="181" width="1.9504%" height="15" fill="rgb(213,87,29)" fg:x="16871805762" fg:w="1721787714"/><text x="19.3621%" y="191.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,721,787,714 samples, 1.95%)</title><rect x="19.1121%" y="165" width="1.9504%" height="15" fill="rgb(205,151,52)" fg:x="16871805762" fg:w="1721787714"/><text x="19.3621%" y="175.50">a..</text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (12,296,177 samples, 0.01%)</title><rect x="21.0625%" y="229" width="0.0139%" height="15" fill="rgb(253,215,39)" fg:x="18593593476" fg:w="12296177"/><text x="21.3125%" y="239.50"></text></g><g><title>core::fmt::write (2,359,200,140 samples, 2.67%)</title><rect x="18.6527%" y="261" width="2.6725%" height="15" fill="rgb(221,220,41)" fg:x="16466243670" fg:w="2359200140"/><text x="18.9027%" y="271.50">co..</text></g><g><title>core::fmt::rt::Argument::fmt (2,120,576,087 samples, 2.40%)</title><rect x="18.9230%" y="245" width="2.4022%" height="15" fill="rgb(218,133,21)" fg:x="16704867723" fg:w="2120576087"/><text x="19.1730%" y="255.50">co..</text></g><g><title>core::fmt::Formatter::pad (219,554,157 samples, 0.25%)</title><rect x="21.0764%" y="229" width="0.2487%" height="15" fill="rgb(221,193,43)" fg:x="18605889653" fg:w="219554157"/><text x="21.3264%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2,371,222,551 samples, 2.69%)</title><rect x="18.6397%" y="277" width="2.6861%" height="15" fill="rgb(240,128,52)" fg:x="16454784339" fg:w="2371222551"/><text x="18.8897%" y="287.50">co..</text></g><g><title>&lt;server_lib::storage::StorageValue as core::fmt::Display&gt;::fmt (2,524,870,176 samples, 2.86%)</title><rect x="18.4891%" y="293" width="2.8601%" height="15" fill="rgb(253,114,12)" fg:x="16321884940" fg:w="2524870176"/><text x="18.7391%" y="303.50">&lt;s..</text></g><g><title>core::fmt::rt::&lt;impl core::fmt::Arguments&gt;::new_v1 (20,748,226 samples, 0.02%)</title><rect x="21.3258%" y="277" width="0.0235%" height="15" fill="rgb(215,223,47)" fg:x="18826006890" fg:w="20748226"/><text x="21.5758%" y="287.50"></text></g><g><title>&lt;T as alloc::string::SpecToString&gt;::spec_to_string (2,587,288,500 samples, 2.93%)</title><rect x="18.4405%" y="309" width="2.9308%" height="15" fill="rgb(248,225,23)" fg:x="16278948065" fg:w="2587288500"/><text x="18.6905%" y="319.50">&lt;T..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (9,207,511 samples, 0.01%)</title><rect x="21.3609%" y="293" width="0.0104%" height="15" fill="rgb(250,108,0)" fg:x="18857029054" fg:w="9207511"/><text x="21.6109%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (178,022,984 samples, 0.20%)</title><rect x="21.5006%" y="101" width="0.2017%" height="15" fill="rgb(228,208,7)" fg:x="18980338869" fg:w="178022984"/><text x="21.7506%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (165,116,581 samples, 0.19%)</title><rect x="21.5152%" y="85" width="0.1870%" height="15" fill="rgb(244,45,10)" fg:x="18993245272" fg:w="165116581"/><text x="21.7652%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (153,684,431 samples, 0.17%)</title><rect x="21.7023%" y="101" width="0.1741%" height="15" fill="rgb(207,125,25)" fg:x="19158361853" fg:w="153684431"/><text x="21.9523%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,838,631,958 samples, 2.08%)</title><rect x="21.4970%" y="149" width="2.0828%" height="15" fill="rgb(210,195,18)" fg:x="18977160372" fg:w="1838631958"/><text x="21.7470%" y="159.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,838,631,958 samples, 2.08%)</title><rect x="21.4970%" y="133" width="2.0828%" height="15" fill="rgb(249,80,12)" fg:x="18977160372" fg:w="1838631958"/><text x="21.7470%" y="143.50">a..</text></g><g><title>alloc::alloc::alloc (1,838,631,958 samples, 2.08%)</title><rect x="21.4970%" y="117" width="2.0828%" height="15" fill="rgb(221,65,9)" fg:x="18977160372" fg:w="1838631958"/><text x="21.7470%" y="127.50">a..</text></g><g><title>malloc (1,503,746,046 samples, 1.70%)</title><rect x="21.8763%" y="101" width="1.7034%" height="15" fill="rgb(235,49,36)" fg:x="19312046284" fg:w="1503746046"/><text x="22.1263%" y="111.50"></text></g><g><title>_int_malloc (363,269,394 samples, 0.41%)</title><rect x="23.1683%" y="85" width="0.4115%" height="15" fill="rgb(225,32,20)" fg:x="20452522936" fg:w="363269394"/><text x="23.4183%" y="95.50"></text></g><g><title>unlink_chunk.isra.0 (81,875,810 samples, 0.09%)</title><rect x="23.4870%" y="69" width="0.0927%" height="15" fill="rgb(215,141,46)" fg:x="20733916520" fg:w="81875810"/><text x="23.7370%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,954,990,299 samples, 2.21%)</title><rect x="21.3750%" y="213" width="2.2146%" height="15" fill="rgb(250,160,47)" fg:x="18869502840" fg:w="1954990299"/><text x="21.6250%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,954,990,299 samples, 2.21%)</title><rect x="21.3750%" y="197" width="2.2146%" height="15" fill="rgb(216,222,40)" fg:x="18869502840" fg:w="1954990299"/><text x="21.6250%" y="207.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,954,990,299 samples, 2.21%)</title><rect x="21.3750%" y="181" width="2.2146%" height="15" fill="rgb(234,217,39)" fg:x="18869502840" fg:w="1954990299"/><text x="21.6250%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,954,990,299 samples, 2.21%)</title><rect x="21.3750%" y="165" width="2.2146%" height="15" fill="rgb(207,178,40)" fg:x="18869502840" fg:w="1954990299"/><text x="21.6250%" y="175.50">a..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2,557,645,779 samples, 2.90%)</title><rect x="21.3750%" y="277" width="2.8973%" height="15" fill="rgb(221,136,13)" fg:x="18869502840" fg:w="2557645779"/><text x="21.6250%" y="287.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,557,645,779 samples, 2.90%)</title><rect x="21.3750%" y="261" width="2.8973%" height="15" fill="rgb(249,199,10)" fg:x="18869502840" fg:w="2557645779"/><text x="21.6250%" y="271.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,557,645,779 samples, 2.90%)</title><rect x="21.3750%" y="245" width="2.8973%" height="15" fill="rgb(249,222,13)" fg:x="18869502840" fg:w="2557645779"/><text x="21.6250%" y="255.50">al..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,557,645,779 samples, 2.90%)</title><rect x="21.3750%" y="229" width="2.8973%" height="15" fill="rgb(244,185,38)" fg:x="18869502840" fg:w="2557645779"/><text x="21.6250%" y="239.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (602,655,480 samples, 0.68%)</title><rect x="23.5896%" y="213" width="0.6827%" height="15" fill="rgb(236,202,9)" fg:x="20824493139" fg:w="602655480"/><text x="23.8396%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (602,655,480 samples, 0.68%)</title><rect x="23.5896%" y="197" width="0.6827%" height="15" fill="rgb(250,229,37)" fg:x="20824493139" fg:w="602655480"/><text x="23.8396%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (590,278,177 samples, 0.67%)</title><rect x="23.6036%" y="181" width="0.6687%" height="15" fill="rgb(206,174,23)" fg:x="20836870442" fg:w="590278177"/><text x="23.8536%" y="191.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (5,229,600,824 samples, 5.92%)</title><rect x="18.4054%" y="325" width="5.9240%" height="15" fill="rgb(211,33,43)" fg:x="16247969922" fg:w="5229600824"/><text x="18.6554%" y="335.50">&lt;T as al..</text></g><g><title>&lt;alloc::borrow::Cow&lt;str&gt; as alloc::string::SpecToString&gt;::spec_to_string (2,611,334,181 samples, 2.96%)</title><rect x="21.3713%" y="309" width="2.9581%" height="15" fill="rgb(245,58,50)" fg:x="18866236565" fg:w="2611334181"/><text x="21.6213%" y="319.50">&lt;al..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2,608,067,906 samples, 2.95%)</title><rect x="21.3750%" y="293" width="2.9544%" height="15" fill="rgb(244,68,36)" fg:x="18869502840" fg:w="2608067906"/><text x="21.6250%" y="303.50">all..</text></g><g><title>alloc::string::String::from_utf8_unchecked (50,422,127 samples, 0.06%)</title><rect x="24.2723%" y="277" width="0.0571%" height="15" fill="rgb(232,229,15)" fg:x="21427148619" fg:w="50422127"/><text x="24.5223%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (37,020,270 samples, 0.04%)</title><rect x="24.3294%" y="325" width="0.0419%" height="15" fill="rgb(254,30,23)" fg:x="21477570746" fg:w="37020270"/><text x="24.5794%" y="335.50"></text></g><g><title>alloc::string::String::as_str (37,020,270 samples, 0.04%)</title><rect x="24.3294%" y="309" width="0.0419%" height="15" fill="rgb(235,160,14)" fg:x="21477570746" fg:w="37020270"/><text x="24.5794%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (37,020,270 samples, 0.04%)</title><rect x="24.3294%" y="293" width="0.0419%" height="15" fill="rgb(212,155,44)" fg:x="21477570746" fg:w="37020270"/><text x="24.5794%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28,429,908 samples, 0.03%)</title><rect x="24.3391%" y="277" width="0.0322%" height="15" fill="rgb(226,2,50)" fg:x="21486161108" fg:w="28429908"/><text x="24.5891%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28,429,908 samples, 0.03%)</title><rect x="24.3391%" y="261" width="0.0322%" height="15" fill="rgb(234,177,6)" fg:x="21486161108" fg:w="28429908"/><text x="24.5891%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (28,429,908 samples, 0.03%)</title><rect x="24.3391%" y="245" width="0.0322%" height="15" fill="rgb(217,24,9)" fg:x="21486161108" fg:w="28429908"/><text x="24.5891%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (28,429,908 samples, 0.03%)</title><rect x="24.3391%" y="229" width="0.0322%" height="15" fill="rgb(220,13,46)" fg:x="21486161108" fg:w="28429908"/><text x="24.5891%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (22,576,860 samples, 0.03%)</title><rect x="24.3713%" y="325" width="0.0256%" height="15" fill="rgb(239,221,27)" fg:x="21514591016" fg:w="22576860"/><text x="24.6213%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (13,795,539 samples, 0.02%)</title><rect x="24.3813%" y="309" width="0.0156%" height="15" fill="rgb(222,198,25)" fg:x="21523372337" fg:w="13795539"/><text x="24.6313%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (13,795,539 samples, 0.02%)</title><rect x="24.3813%" y="293" width="0.0156%" height="15" fill="rgb(211,99,13)" fg:x="21523372337" fg:w="13795539"/><text x="24.6313%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17,763,561 samples, 0.02%)</title><rect x="24.3969%" y="325" width="0.0201%" height="15" fill="rgb(232,111,31)" fg:x="21537167876" fg:w="17763561"/><text x="24.6469%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (17,763,561 samples, 0.02%)</title><rect x="24.3969%" y="309" width="0.0201%" height="15" fill="rgb(245,82,37)" fg:x="21537167876" fg:w="17763561"/><text x="24.6469%" y="319.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (17,830,082 samples, 0.02%)</title><rect x="24.4208%" y="325" width="0.0202%" height="15" fill="rgb(227,149,46)" fg:x="21558254891" fg:w="17830082"/><text x="24.6708%" y="335.50"></text></g><g><title>core::cell::UnsafeCell&lt;T&gt;::get (17,830,082 samples, 0.02%)</title><rect x="24.4208%" y="309" width="0.0202%" height="15" fill="rgb(218,36,50)" fg:x="21558254891" fg:w="17830082"/><text x="24.6708%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (116,800,153 samples, 0.13%)</title><rect x="24.4506%" y="325" width="0.1323%" height="15" fill="rgb(226,80,48)" fg:x="21584566943" fg:w="116800153"/><text x="24.7006%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (47,583,651 samples, 0.05%)</title><rect x="24.7982%" y="165" width="0.0539%" height="15" fill="rgb(238,224,15)" fg:x="21891388974" fg:w="47583651"/><text x="25.0482%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44,367,180 samples, 0.05%)</title><rect x="24.8018%" y="149" width="0.0503%" height="15" fill="rgb(241,136,10)" fg:x="21894605445" fg:w="44367180"/><text x="25.0518%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (53,034,375 samples, 0.06%)</title><rect x="24.8521%" y="165" width="0.0601%" height="15" fill="rgb(208,32,45)" fg:x="21938972625" fg:w="53034375"/><text x="25.1021%" y="175.50"></text></g><g><title>core::ptr::read_volatile (12,948,772 samples, 0.01%)</title><rect x="24.9122%" y="165" width="0.0147%" height="15" fill="rgb(207,135,9)" fg:x="21992007000" fg:w="12948772"/><text x="25.1622%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (563,822,273 samples, 0.64%)</title><rect x="24.7791%" y="213" width="0.6387%" height="15" fill="rgb(206,86,44)" fg:x="21874529438" fg:w="563822273"/><text x="25.0291%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (563,822,273 samples, 0.64%)</title><rect x="24.7791%" y="197" width="0.6387%" height="15" fill="rgb(245,177,15)" fg:x="21874529438" fg:w="563822273"/><text x="25.0291%" y="207.50"></text></g><g><title>alloc::alloc::alloc (563,822,273 samples, 0.64%)</title><rect x="24.7791%" y="181" width="0.6387%" height="15" fill="rgb(206,64,50)" fg:x="21874529438" fg:w="563822273"/><text x="25.0291%" y="191.50"></text></g><g><title>malloc (433,395,939 samples, 0.49%)</title><rect x="24.9268%" y="165" width="0.4909%" height="15" fill="rgb(234,36,40)" fg:x="22004955772" fg:w="433395939"/><text x="25.1768%" y="175.50"></text></g><g><title>_int_malloc (11,217,593 samples, 0.01%)</title><rect x="25.4051%" y="149" width="0.0127%" height="15" fill="rgb(213,64,8)" fg:x="22427134118" fg:w="11217593"/><text x="25.6551%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (576,919,720 samples, 0.65%)</title><rect x="24.7680%" y="293" width="0.6535%" height="15" fill="rgb(210,75,36)" fg:x="21864777650" fg:w="576919720"/><text x="25.0180%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (576,919,720 samples, 0.65%)</title><rect x="24.7680%" y="277" width="0.6535%" height="15" fill="rgb(229,88,21)" fg:x="21864777650" fg:w="576919720"/><text x="25.0180%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (576,919,720 samples, 0.65%)</title><rect x="24.7680%" y="261" width="0.6535%" height="15" fill="rgb(252,204,47)" fg:x="21864777650" fg:w="576919720"/><text x="25.0180%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (576,919,720 samples, 0.65%)</title><rect x="24.7680%" y="245" width="0.6535%" height="15" fill="rgb(208,77,27)" fg:x="21864777650" fg:w="576919720"/><text x="25.0180%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (576,919,720 samples, 0.65%)</title><rect x="24.7680%" y="229" width="0.6535%" height="15" fill="rgb(221,76,26)" fg:x="21864777650" fg:w="576919720"/><text x="25.0180%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (763,143,706 samples, 0.86%)</title><rect x="24.5845%" y="325" width="0.8645%" height="15" fill="rgb(225,139,18)" fg:x="21702735558" fg:w="763143706"/><text x="24.8345%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (661,297,823 samples, 0.75%)</title><rect x="24.6998%" y="309" width="0.7491%" height="15" fill="rgb(230,137,11)" fg:x="21804581441" fg:w="661297823"/><text x="24.9498%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (24,181,894 samples, 0.03%)</title><rect x="25.4216%" y="293" width="0.0274%" height="15" fill="rgb(212,28,1)" fg:x="22441697370" fg:w="24181894"/><text x="25.6716%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (22,204,923 samples, 0.03%)</title><rect x="25.4238%" y="277" width="0.0252%" height="15" fill="rgb(248,164,17)" fg:x="22443674341" fg:w="22204923"/><text x="25.6738%" y="287.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (6,460,074,022 samples, 7.32%)</title><rect x="25.9469%" y="309" width="7.3179%" height="15" fill="rgb(222,171,42)" fg:x="22905479593" fg:w="6460074022"/><text x="26.1969%" y="319.50">&lt;core::str..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (84,205,620 samples, 0.10%)</title><rect x="33.1694%" y="293" width="0.0954%" height="15" fill="rgb(243,84,45)" fg:x="29281347995" fg:w="84205620"/><text x="33.4194%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (80,954,762 samples, 0.09%)</title><rect x="33.1731%" y="277" width="0.0917%" height="15" fill="rgb(252,49,23)" fg:x="29284598853" fg:w="80954762"/><text x="33.4231%" y="287.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (6,918,576,959 samples, 7.84%)</title><rect x="25.4569%" y="325" width="7.8372%" height="15" fill="rgb(215,19,7)" fg:x="22472934501" fg:w="6918576959"/><text x="25.7069%" y="335.50">alloc::stri..</text></g><g><title>core::str::lossy::&lt;impl [u8]&gt;::utf8_chunks (25,957,845 samples, 0.03%)</title><rect x="33.2648%" y="309" width="0.0294%" height="15" fill="rgb(238,81,41)" fg:x="29365553615" fg:w="25957845"/><text x="33.5148%" y="319.50"></text></g><g><title>_int_free_create_chunk (197,917,707 samples, 0.22%)</title><rect x="34.2219%" y="277" width="0.2242%" height="15" fill="rgb(210,199,37)" fg:x="30210481678" fg:w="197917707"/><text x="34.4719%" y="287.50"></text></g><g><title>unlink_chunk.isra.0 (19,837,744 samples, 0.02%)</title><rect x="34.4236%" y="261" width="0.0225%" height="15" fill="rgb(244,192,49)" fg:x="30388561641" fg:w="19837744"/><text x="34.6736%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,016,363,480 samples, 1.15%)</title><rect x="33.2963%" y="325" width="1.1513%" height="15" fill="rgb(226,211,11)" fg:x="29393414347" fg:w="1016363480"/><text x="33.5463%" y="335.50"></text></g><g><title>_int_free_chunk (417,513,591 samples, 0.47%)</title><rect x="33.9747%" y="309" width="0.4730%" height="15" fill="rgb(236,162,54)" fg:x="29992264236" fg:w="417513591"/><text x="34.2247%" y="319.50"></text></g><g><title>_int_free_merge_chunk (263,060,752 samples, 0.30%)</title><rect x="34.1497%" y="293" width="0.2980%" height="15" fill="rgb(220,229,9)" fg:x="30146717075" fg:w="263060752"/><text x="34.3997%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;str&gt;&gt; (42,468,532 samples, 0.05%)</title><rect x="34.4477%" y="325" width="0.0481%" height="15" fill="rgb(250,87,22)" fg:x="30409777827" fg:w="42468532"/><text x="34.6977%" y="335.50"></text></g><g><title>__rustc::__rust_dealloc (155,665,770 samples, 0.18%)</title><rect x="34.6073%" y="213" width="0.1763%" height="15" fill="rgb(239,43,17)" fg:x="30550720611" fg:w="155665770"/><text x="34.8573%" y="223.50"></text></g><g><title>_int_free_create_chunk (83,447,452 samples, 0.09%)</title><rect x="35.8959%" y="165" width="0.0945%" height="15" fill="rgb(231,177,25)" fg:x="31688290927" fg:w="83447452"/><text x="36.1459%" y="175.50"></text></g><g><title>unlink_chunk.isra.0 (17,398,566 samples, 0.02%)</title><rect x="35.9708%" y="149" width="0.0197%" height="15" fill="rgb(219,179,1)" fg:x="31754339813" fg:w="17398566"/><text x="36.2208%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,237,388,427 samples, 1.40%)</title><rect x="34.5895%" y="245" width="1.4017%" height="15" fill="rgb(238,219,53)" fg:x="30534976318" fg:w="1237388427"/><text x="34.8395%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1,237,388,427 samples, 1.40%)</title><rect x="34.5895%" y="229" width="1.4017%" height="15" fill="rgb(232,167,36)" fg:x="30534976318" fg:w="1237388427"/><text x="34.8395%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,064,159,989 samples, 1.21%)</title><rect x="34.7857%" y="213" width="1.2055%" height="15" fill="rgb(244,19,51)" fg:x="30708204756" fg:w="1064159989"/><text x="35.0357%" y="223.50"></text></g><g><title>_int_free_chunk (214,222,081 samples, 0.24%)</title><rect x="35.7485%" y="197" width="0.2427%" height="15" fill="rgb(224,6,22)" fg:x="31558142664" fg:w="214222081"/><text x="35.9985%" y="207.50"></text></g><g><title>_int_free_merge_chunk (116,477,889 samples, 0.13%)</title><rect x="35.8592%" y="181" width="0.1319%" height="15" fill="rgb(224,145,5)" fg:x="31655886856" fg:w="116477889"/><text x="36.1092%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,332,361,443 samples, 1.51%)</title><rect x="34.4958%" y="325" width="1.5093%" height="15" fill="rgb(234,130,49)" fg:x="30452246359" fg:w="1332361443"/><text x="34.7458%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,332,361,443 samples, 1.51%)</title><rect x="34.4958%" y="309" width="1.5093%" height="15" fill="rgb(254,6,2)" fg:x="30452246359" fg:w="1332361443"/><text x="34.7458%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,332,361,443 samples, 1.51%)</title><rect x="34.4958%" y="293" width="1.5093%" height="15" fill="rgb(208,96,46)" fg:x="30452246359" fg:w="1332361443"/><text x="34.7458%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,332,361,443 samples, 1.51%)</title><rect x="34.4958%" y="277" width="1.5093%" height="15" fill="rgb(239,3,39)" fg:x="30452246359" fg:w="1332361443"/><text x="34.7458%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,249,631,484 samples, 1.42%)</title><rect x="34.5895%" y="261" width="1.4156%" height="15" fill="rgb(233,210,1)" fg:x="30534976318" fg:w="1249631484"/><text x="34.8395%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (12,243,057 samples, 0.01%)</title><rect x="35.9912%" y="245" width="0.0139%" height="15" fill="rgb(244,137,37)" fg:x="31772364745" fg:w="12243057"/><text x="36.2412%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt;&gt; (238,891,989 samples, 0.27%)</title><rect x="36.0050%" y="325" width="0.2706%" height="15" fill="rgb(240,136,2)" fg:x="31784607802" fg:w="238891989"/><text x="36.2550%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (238,891,989 samples, 0.27%)</title><rect x="36.0050%" y="309" width="0.2706%" height="15" fill="rgb(239,18,37)" fg:x="31784607802" fg:w="238891989"/><text x="36.2550%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (222,633,545 samples, 0.25%)</title><rect x="36.0235%" y="293" width="0.2522%" height="15" fill="rgb(218,185,22)" fg:x="31800866246" fg:w="222633545"/><text x="36.2735%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_sub (222,633,545 samples, 0.25%)</title><rect x="36.0235%" y="277" width="0.2522%" height="15" fill="rgb(225,218,4)" fg:x="31800866246" fg:w="222633545"/><text x="36.2735%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (254,908,616 samples, 0.29%)</title><rect x="36.2906%" y="277" width="0.2888%" height="15" fill="rgb(230,182,32)" fg:x="32036688442" fg:w="254908616"/><text x="36.5406%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (254,908,616 samples, 0.29%)</title><rect x="36.2906%" y="261" width="0.2888%" height="15" fill="rgb(242,56,43)" fg:x="32036688442" fg:w="254908616"/><text x="36.5406%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (9,081,841 samples, 0.01%)</title><rect x="36.6006%" y="229" width="0.0103%" height="15" fill="rgb(233,99,24)" fg:x="32310328835" fg:w="9081841"/><text x="36.8506%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::RwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,server_lib::storage::Storage&gt;&gt; (303,261,295 samples, 0.34%)</title><rect x="36.2757%" y="325" width="0.3435%" height="15" fill="rgb(234,209,42)" fg:x="32023499791" fg:w="303261295"/><text x="36.5257%" y="335.50"></text></g><g><title>&lt;lock_api::rwlock::RwLockWriteGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (303,261,295 samples, 0.34%)</title><rect x="36.2757%" y="309" width="0.3435%" height="15" fill="rgb(227,7,12)" fg:x="32023499791" fg:w="303261295"/><text x="36.5257%" y="319.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::unlock_exclusive (303,261,295 samples, 0.34%)</title><rect x="36.2757%" y="293" width="0.3435%" height="15" fill="rgb(245,203,43)" fg:x="32023499791" fg:w="303261295"/><text x="36.5257%" y="303.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (35,164,028 samples, 0.04%)</title><rect x="36.5794%" y="277" width="0.0398%" height="15" fill="rgb(238,205,33)" fg:x="32291597058" fg:w="35164028"/><text x="36.8294%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wake_parked_threads (35,164,028 samples, 0.04%)</title><rect x="36.5794%" y="261" width="0.0398%" height="15" fill="rgb(231,56,7)" fg:x="32291597058" fg:w="35164028"/><text x="36.8294%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_filter (35,164,028 samples, 0.04%)</title><rect x="36.5794%" y="245" width="0.0398%" height="15" fill="rgb(244,186,29)" fg:x="32291597058" fg:w="35164028"/><text x="36.8294%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (23,242,365 samples, 0.03%)</title><rect x="36.6192%" y="325" width="0.0263%" height="15" fill="rgb(234,111,31)" fg:x="32326761086" fg:w="23242365"/><text x="36.8692%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (23,242,365 samples, 0.03%)</title><rect x="36.6192%" y="309" width="0.0263%" height="15" fill="rgb(241,149,10)" fg:x="32326761086" fg:w="23242365"/><text x="36.8692%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (219,385,120 samples, 0.25%)</title><rect x="36.6455%" y="325" width="0.2485%" height="15" fill="rgb(249,206,44)" fg:x="32350003451" fg:w="219385120"/><text x="36.8955%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (219,385,120 samples, 0.25%)</title><rect x="36.6455%" y="309" width="0.2485%" height="15" fill="rgb(251,153,30)" fg:x="32350003451" fg:w="219385120"/><text x="36.8955%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (219,385,120 samples, 0.25%)</title><rect x="36.6455%" y="293" width="0.2485%" height="15" fill="rgb(239,152,38)" fg:x="32350003451" fg:w="219385120"/><text x="36.8955%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (219,385,120 samples, 0.25%)</title><rect x="36.6455%" y="277" width="0.2485%" height="15" fill="rgb(249,139,47)" fg:x="32350003451" fg:w="219385120"/><text x="36.8955%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (279,453,695 samples, 0.32%)</title><rect x="36.9876%" y="293" width="0.3166%" height="15" fill="rgb(244,64,35)" fg:x="32651977957" fg:w="279453695"/><text x="37.2376%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (279,453,695 samples, 0.32%)</title><rect x="36.9876%" y="277" width="0.3166%" height="15" fill="rgb(216,46,15)" fg:x="32651977957" fg:w="279453695"/><text x="37.2376%" y="287.50"></text></g><g><title>__sched_yield (58,174,459 samples, 0.07%)</title><rect x="39.1740%" y="277" width="0.0659%" height="15" fill="rgb(250,74,19)" fg:x="34582110876" fg:w="58174459"/><text x="39.4240%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (44,588,382 samples, 0.05%)</title><rect x="39.2399%" y="277" width="0.0505%" height="15" fill="rgb(249,42,33)" fg:x="34640285335" fg:w="44588382"/><text x="39.4899%" y="287.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::write (2,134,276,968 samples, 2.42%)</title><rect x="36.8940%" y="325" width="2.4177%" height="15" fill="rgb(242,149,17)" fg:x="32569388571" fg:w="2134276968"/><text x="37.1440%" y="335.50">lo..</text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_exclusive (2,134,276,968 samples, 2.42%)</title><rect x="36.8940%" y="309" width="2.4177%" height="15" fill="rgb(244,29,21)" fg:x="32569388571" fg:w="2134276968"/><text x="37.1440%" y="319.50">&lt;p..</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (1,772,233,887 samples, 2.01%)</title><rect x="37.3041%" y="293" width="2.0076%" height="15" fill="rgb(220,130,37)" fg:x="32931431652" fg:w="1772233887"/><text x="37.5541%" y="303.50">p..</text></g><g><title>syscall (16,850,458 samples, 0.02%)</title><rect x="39.2926%" y="277" width="0.0191%" height="15" fill="rgb(211,67,2)" fg:x="34686815081" fg:w="16850458"/><text x="39.5426%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (33,338,628 samples, 0.04%)</title><rect x="39.4437%" y="69" width="0.0378%" height="15" fill="rgb(235,68,52)" fg:x="34820172524" fg:w="33338628"/><text x="39.6937%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28,621,166 samples, 0.03%)</title><rect x="39.4490%" y="53" width="0.0324%" height="15" fill="rgb(246,142,3)" fg:x="34824889986" fg:w="28621166"/><text x="39.6990%" y="63.50"></text></g><g><title>__rustc::__rust_alloc (41,077,968 samples, 0.05%)</title><rect x="39.4814%" y="69" width="0.0465%" height="15" fill="rgb(241,25,7)" fg:x="34853511152" fg:w="41077968"/><text x="39.7314%" y="79.50"></text></g><g><title>_int_malloc (255,590,186 samples, 0.29%)</title><rect x="39.6857%" y="53" width="0.2895%" height="15" fill="rgb(242,119,39)" fg:x="35033823117" fg:w="255590186"/><text x="39.9357%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (25,104,306 samples, 0.03%)</title><rect x="39.9468%" y="37" width="0.0284%" height="15" fill="rgb(241,98,45)" fg:x="35264308997" fg:w="25104306"/><text x="40.1968%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (474,994,894 samples, 0.54%)</title><rect x="39.4399%" y="117" width="0.5381%" height="15" fill="rgb(254,28,30)" fg:x="34816852054" fg:w="474994894"/><text x="39.6899%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (474,994,894 samples, 0.54%)</title><rect x="39.4399%" y="101" width="0.5381%" height="15" fill="rgb(241,142,54)" fg:x="34816852054" fg:w="474994894"/><text x="39.6899%" y="111.50"></text></g><g><title>alloc::alloc::alloc (474,994,894 samples, 0.54%)</title><rect x="39.4399%" y="85" width="0.5381%" height="15" fill="rgb(222,85,15)" fg:x="34816852054" fg:w="474994894"/><text x="39.6899%" y="95.50"></text></g><g><title>malloc (397,257,828 samples, 0.45%)</title><rect x="39.5280%" y="69" width="0.4500%" height="15" fill="rgb(210,85,47)" fg:x="34894589120" fg:w="397257828"/><text x="39.7780%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (493,858,131 samples, 0.56%)</title><rect x="39.4192%" y="181" width="0.5594%" height="15" fill="rgb(224,206,25)" fg:x="34798575227" fg:w="493858131"/><text x="39.6692%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (493,858,131 samples, 0.56%)</title><rect x="39.4192%" y="165" width="0.5594%" height="15" fill="rgb(243,201,19)" fg:x="34798575227" fg:w="493858131"/><text x="39.6692%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (493,858,131 samples, 0.56%)</title><rect x="39.4192%" y="149" width="0.5594%" height="15" fill="rgb(236,59,4)" fg:x="34798575227" fg:w="493858131"/><text x="39.6692%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (493,858,131 samples, 0.56%)</title><rect x="39.4192%" y="133" width="0.5594%" height="15" fill="rgb(254,179,45)" fg:x="34798575227" fg:w="493858131"/><text x="39.6692%" y="143.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="309" width="0.9691%" height="15" fill="rgb(226,14,10)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="319.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="293" width="0.9691%" height="15" fill="rgb(244,27,41)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="277" width="0.9691%" height="15" fill="rgb(235,35,32)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="287.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="261" width="0.9691%" height="15" fill="rgb(218,68,31)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="245" width="0.9691%" height="15" fill="rgb(207,120,37)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="229" width="0.9691%" height="15" fill="rgb(227,98,0)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="213" width="0.9691%" height="15" fill="rgb(207,7,3)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (855,535,137 samples, 0.97%)</title><rect x="39.4192%" y="197" width="0.9691%" height="15" fill="rgb(206,98,19)" fg:x="34798575227" fg:w="855535137"/><text x="39.6692%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (361,677,006 samples, 0.41%)</title><rect x="39.9786%" y="181" width="0.4097%" height="15" fill="rgb(217,5,26)" fg:x="35292433358" fg:w="361677006"/><text x="40.2286%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (361,677,006 samples, 0.41%)</title><rect x="39.9786%" y="165" width="0.4097%" height="15" fill="rgb(235,190,38)" fg:x="35292433358" fg:w="361677006"/><text x="40.2286%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (355,614,325 samples, 0.40%)</title><rect x="39.9855%" y="149" width="0.4028%" height="15" fill="rgb(247,86,24)" fg:x="35298496039" fg:w="355614325"/><text x="40.2355%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (53,896,025 samples, 0.06%)</title><rect x="42.5152%" y="149" width="0.0611%" height="15" fill="rgb(205,101,16)" fg:x="37531678897" fg:w="53896025"/><text x="42.7652%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51,250,356 samples, 0.06%)</title><rect x="42.5182%" y="133" width="0.0581%" height="15" fill="rgb(246,168,33)" fg:x="37534324566" fg:w="51250356"/><text x="42.7682%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (57,303,109 samples, 0.06%)</title><rect x="42.5763%" y="149" width="0.0649%" height="15" fill="rgb(231,114,1)" fg:x="37585574922" fg:w="57303109"/><text x="42.8263%" y="159.50"></text></g><g><title>_int_malloc (715,734,421 samples, 0.81%)</title><rect x="43.4918%" y="133" width="0.8108%" height="15" fill="rgb(207,184,53)" fg:x="38393785958" fg:w="715734421"/><text x="43.7418%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (101,870,738 samples, 0.12%)</title><rect x="44.1872%" y="117" width="0.1154%" height="15" fill="rgb(224,95,51)" fg:x="39007649641" fg:w="101870738"/><text x="44.4372%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,589,374,974 samples, 1.80%)</title><rect x="42.5042%" y="197" width="1.8004%" height="15" fill="rgb(212,188,45)" fg:x="37521987600" fg:w="1589374974"/><text x="42.7542%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,589,374,974 samples, 1.80%)</title><rect x="42.5042%" y="181" width="1.8004%" height="15" fill="rgb(223,154,38)" fg:x="37521987600" fg:w="1589374974"/><text x="42.7542%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (1,589,374,974 samples, 1.80%)</title><rect x="42.5042%" y="165" width="1.8004%" height="15" fill="rgb(251,22,52)" fg:x="37521987600" fg:w="1589374974"/><text x="42.7542%" y="175.50">a..</text></g><g><title>malloc (1,459,670,459 samples, 1.65%)</title><rect x="42.6512%" y="149" width="1.6535%" height="15" fill="rgb(229,209,22)" fg:x="37651692115" fg:w="1459670459"/><text x="42.9012%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,598,703,517 samples, 1.81%)</title><rect x="42.4944%" y="277" width="1.8110%" height="15" fill="rgb(234,138,34)" fg:x="37513327394" fg:w="1598703517"/><text x="42.7444%" y="287.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,598,703,517 samples, 1.81%)</title><rect x="42.4944%" y="261" width="1.8110%" height="15" fill="rgb(212,95,11)" fg:x="37513327394" fg:w="1598703517"/><text x="42.7444%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,598,703,517 samples, 1.81%)</title><rect x="42.4944%" y="245" width="1.8110%" height="15" fill="rgb(240,179,47)" fg:x="37513327394" fg:w="1598703517"/><text x="42.7444%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,598,703,517 samples, 1.81%)</title><rect x="42.4944%" y="229" width="1.8110%" height="15" fill="rgb(240,163,11)" fg:x="37513327394" fg:w="1598703517"/><text x="42.7444%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,598,703,517 samples, 1.81%)</title><rect x="42.4944%" y="213" width="1.8110%" height="15" fill="rgb(236,37,12)" fg:x="37513327394" fg:w="1598703517"/><text x="42.7444%" y="223.50">a..</text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (1,237,465,476 samples, 1.40%)</title><rect x="44.3054%" y="277" width="1.4018%" height="15" fill="rgb(232,164,16)" fg:x="39112030911" fg:w="1237465476"/><text x="44.5554%" y="287.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (1,014,852,636 samples, 1.15%)</title><rect x="44.5576%" y="261" width="1.1496%" height="15" fill="rgb(244,205,15)" fg:x="39334643751" fg:w="1014852636"/><text x="44.8076%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (4,739,702,407 samples, 5.37%)</title><rect x="40.3883%" y="309" width="5.3691%" height="15" fill="rgb(223,117,47)" fg:x="35654110364" fg:w="4739702407"/><text x="40.6383%" y="319.50">alloc::..</text></g><g><title>alloc::str::convert_while_ascii (4,524,556,352 samples, 5.13%)</title><rect x="40.6321%" y="293" width="5.1253%" height="15" fill="rgb(244,107,35)" fg:x="35869256419" fg:w="4524556352"/><text x="40.8821%" y="303.50">alloc:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (44,316,384 samples, 0.05%)</title><rect x="45.7072%" y="277" width="0.0502%" height="15" fill="rgb(205,140,8)" fg:x="40349496387" fg:w="44316384"/><text x="45.9572%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (44,316,384 samples, 0.05%)</title><rect x="45.7072%" y="261" width="0.0502%" height="15" fill="rgb(228,84,46)" fg:x="40349496387" fg:w="44316384"/><text x="45.9572%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (44,316,384 samples, 0.05%)</title><rect x="45.7072%" y="245" width="0.0502%" height="15" fill="rgb(254,188,9)" fg:x="40349496387" fg:w="44316384"/><text x="45.9572%" y="255.50"></text></g><g><title>alloc::string::String::as_str (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="309" width="0.0138%" height="15" fill="rgb(206,112,54)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="293" width="0.0138%" height="15" fill="rgb(216,84,49)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="277" width="0.0138%" height="15" fill="rgb(214,194,35)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="261" width="0.0138%" height="15" fill="rgb(249,28,3)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="245" width="0.0138%" height="15" fill="rgb(222,56,52)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (12,177,340 samples, 0.01%)</title><rect x="45.7574%" y="229" width="0.0138%" height="15" fill="rgb(245,217,50)" fg:x="40393812771" fg:w="12177340"/><text x="46.0074%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (9,815,881 samples, 0.01%)</title><rect x="45.7926%" y="197" width="0.0111%" height="15" fill="rgb(213,201,24)" fg:x="40424905972" fg:w="9815881"/><text x="46.0426%" y="207.50"></text></g><g><title>__rustc::__rust_dealloc (108,993,653 samples, 0.12%)</title><rect x="45.8037%" y="197" width="0.1235%" height="15" fill="rgb(248,116,28)" fg:x="40434721853" fg:w="108993653"/><text x="46.0537%" y="207.50"></text></g><g><title>_int_free_create_chunk (166,212,021 samples, 0.19%)</title><rect x="46.6520%" y="149" width="0.1883%" height="15" fill="rgb(219,72,43)" fg:x="41183584221" fg:w="166212021"/><text x="46.9020%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (16,802,470 samples, 0.02%)</title><rect x="46.8213%" y="133" width="0.0190%" height="15" fill="rgb(209,138,14)" fg:x="41332993772" fg:w="16802470"/><text x="47.0713%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (932,694,376 samples, 1.06%)</title><rect x="45.7917%" y="229" width="1.0565%" height="15" fill="rgb(222,18,33)" fg:x="40424074718" fg:w="932694376"/><text x="46.0417%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (932,694,376 samples, 1.06%)</title><rect x="45.7917%" y="213" width="1.0565%" height="15" fill="rgb(213,199,7)" fg:x="40424074718" fg:w="932694376"/><text x="46.0417%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (813,053,588 samples, 0.92%)</title><rect x="45.9272%" y="197" width="0.9210%" height="15" fill="rgb(250,110,10)" fg:x="40543715506" fg:w="813053588"/><text x="46.1772%" y="207.50"></text></g><g><title>_int_free_chunk (426,059,650 samples, 0.48%)</title><rect x="46.3656%" y="181" width="0.4826%" height="15" fill="rgb(248,123,6)" fg:x="40930709444" fg:w="426059650"/><text x="46.6156%" y="191.50"></text></g><g><title>_int_free_merge_chunk (239,904,357 samples, 0.27%)</title><rect x="46.5765%" y="165" width="0.2718%" height="15" fill="rgb(206,91,31)" fg:x="41116864737" fg:w="239904357"/><text x="46.8265%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (947,370,490 samples, 1.07%)</title><rect x="45.7811%" y="309" width="1.0732%" height="15" fill="rgb(211,154,13)" fg:x="40414724690" fg:w="947370490"/><text x="46.0311%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (947,370,490 samples, 1.07%)</title><rect x="45.7811%" y="293" width="1.0732%" height="15" fill="rgb(225,148,7)" fg:x="40414724690" fg:w="947370490"/><text x="46.0311%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (947,370,490 samples, 1.07%)</title><rect x="45.7811%" y="277" width="1.0732%" height="15" fill="rgb(220,160,43)" fg:x="40414724690" fg:w="947370490"/><text x="46.0311%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (947,370,490 samples, 1.07%)</title><rect x="45.7811%" y="261" width="1.0732%" height="15" fill="rgb(213,52,39)" fg:x="40414724690" fg:w="947370490"/><text x="46.0311%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (938,020,462 samples, 1.06%)</title><rect x="45.7917%" y="245" width="1.0626%" height="15" fill="rgb(243,137,7)" fg:x="40424074718" fg:w="938020462"/><text x="46.0417%" y="255.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (165,271,239 samples, 0.19%)</title><rect x="46.8554%" y="293" width="0.1872%" height="15" fill="rgb(230,79,13)" fg:x="41363144475" fg:w="165271239"/><text x="47.1054%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (165,271,239 samples, 0.19%)</title><rect x="46.8554%" y="277" width="0.1872%" height="15" fill="rgb(247,105,23)" fg:x="41363144475" fg:w="165271239"/><text x="47.1054%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (165,271,239 samples, 0.19%)</title><rect x="46.8554%" y="261" width="0.1872%" height="15" fill="rgb(223,179,41)" fg:x="41363144475" fg:w="165271239"/><text x="47.1054%" y="271.50"></text></g><g><title>core::num::&lt;impl i64&gt;::checked_mul (12,161,177 samples, 0.01%)</title><rect x="47.0289%" y="245" width="0.0138%" height="15" fill="rgb(218,9,34)" fg:x="41516254537" fg:w="12161177"/><text x="47.2789%" y="255.50"></text></g><g><title>core::num::&lt;impl i64&gt;::overflowing_mul (12,161,177 samples, 0.01%)</title><rect x="47.0289%" y="229" width="0.0138%" height="15" fill="rgb(222,106,8)" fg:x="41516254537" fg:w="12161177"/><text x="47.2789%" y="239.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (18,975,012 samples, 0.02%)</title><rect x="47.6292%" y="213" width="0.0215%" height="15" fill="rgb(211,220,0)" fg:x="42046218302" fg:w="18975012"/><text x="47.8792%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (283,578,251 samples, 0.32%)</title><rect x="47.3435%" y="261" width="0.3212%" height="15" fill="rgb(229,52,16)" fg:x="41794036276" fg:w="283578251"/><text x="47.5935%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (145,041,449 samples, 0.16%)</title><rect x="47.5005%" y="245" width="0.1643%" height="15" fill="rgb(212,155,18)" fg:x="41932573078" fg:w="145041449"/><text x="47.7505%" y="255.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (44,457,388 samples, 0.05%)</title><rect x="47.6144%" y="229" width="0.0504%" height="15" fill="rgb(242,21,14)" fg:x="42033157139" fg:w="44457388"/><text x="47.8644%" y="239.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (550,971,165 samples, 0.62%)</title><rect x="47.0427%" y="293" width="0.6241%" height="15" fill="rgb(222,19,48)" fg:x="41528415714" fg:w="550971165"/><text x="47.2927%" y="303.50"></text></g><g><title>core::num::dec2flt::dec2flt (433,888,202 samples, 0.49%)</title><rect x="47.1753%" y="277" width="0.4915%" height="15" fill="rgb(232,45,27)" fg:x="41645498677" fg:w="433888202"/><text x="47.4253%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (718,700,298 samples, 0.81%)</title><rect x="46.8543%" y="309" width="0.8141%" height="15" fill="rgb(249,103,42)" fg:x="41362095180" fg:w="718700298"/><text x="47.1043%" y="319.50"></text></g><g><title>server::get_value_type (7,381,094,598 samples, 8.36%)</title><rect x="39.3124%" y="325" width="8.3612%" height="15" fill="rgb(246,81,33)" fg:x="34704319834" fg:w="7381094598"/><text x="39.5624%" y="335.50">server::get_..</text></g><g><title>__rustc::__rdl_alloc (63,060,935 samples, 0.07%)</title><rect x="47.7296%" y="69" width="0.0714%" height="15" fill="rgb(252,33,42)" fg:x="42134862561" fg:w="63060935"/><text x="47.9796%" y="79.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (56,691,609 samples, 0.06%)</title><rect x="47.7368%" y="53" width="0.0642%" height="15" fill="rgb(209,212,41)" fg:x="42141231887" fg:w="56691609"/><text x="47.9868%" y="63.50"></text></g><g><title>__rustc::__rust_alloc (76,970,431 samples, 0.09%)</title><rect x="47.8011%" y="69" width="0.0872%" height="15" fill="rgb(207,154,6)" fg:x="42197923496" fg:w="76970431"/><text x="48.0511%" y="79.50"></text></g><g><title>_int_malloc (618,722,529 samples, 0.70%)</title><rect x="48.8728%" y="53" width="0.7009%" height="15" fill="rgb(223,64,47)" fg:x="43144048744" fg:w="618722529"/><text x="49.1228%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (133,427,383 samples, 0.15%)</title><rect x="49.4226%" y="37" width="0.1511%" height="15" fill="rgb(211,161,38)" fg:x="43629343890" fg:w="133427383"/><text x="49.6726%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,631,234,880 samples, 1.85%)</title><rect x="47.7267%" y="117" width="1.8478%" height="15" fill="rgb(219,138,40)" fg:x="42132281009" fg:w="1631234880"/><text x="47.9767%" y="127.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,631,234,880 samples, 1.85%)</title><rect x="47.7267%" y="101" width="1.8478%" height="15" fill="rgb(241,228,46)" fg:x="42132281009" fg:w="1631234880"/><text x="47.9767%" y="111.50">a..</text></g><g><title>alloc::alloc::alloc (1,631,234,880 samples, 1.85%)</title><rect x="47.7267%" y="85" width="1.8478%" height="15" fill="rgb(223,209,38)" fg:x="42132281009" fg:w="1631234880"/><text x="47.9767%" y="95.50">a..</text></g><g><title>malloc (1,487,331,310 samples, 1.68%)</title><rect x="47.8897%" y="69" width="1.6848%" height="15" fill="rgb(236,164,45)" fg:x="42276184579" fg:w="1487331310"/><text x="48.1397%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,674,546,475 samples, 1.90%)</title><rect x="47.6810%" y="181" width="1.8969%" height="15" fill="rgb(231,15,5)" fg:x="42091960300" fg:w="1674546475"/><text x="47.9310%" y="191.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,674,546,475 samples, 1.90%)</title><rect x="47.6810%" y="165" width="1.8969%" height="15" fill="rgb(252,35,15)" fg:x="42091960300" fg:w="1674546475"/><text x="47.9310%" y="175.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,674,546,475 samples, 1.90%)</title><rect x="47.6810%" y="149" width="1.8969%" height="15" fill="rgb(248,181,18)" fg:x="42091960300" fg:w="1674546475"/><text x="47.9310%" y="159.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,674,546,475 samples, 1.90%)</title><rect x="47.6810%" y="133" width="1.8969%" height="15" fill="rgb(233,39,42)" fg:x="42091960300" fg:w="1674546475"/><text x="47.9310%" y="143.50">a..</text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="309" width="2.4775%" height="15" fill="rgb(238,110,33)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="319.50">&lt;T..</text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="293" width="2.4775%" height="15" fill="rgb(233,195,10)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="303.50">&lt;s..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="277" width="2.4775%" height="15" fill="rgb(254,105,3)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="287.50">&lt;a..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="261" width="2.4775%" height="15" fill="rgb(221,225,9)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="271.50">al..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="245" width="2.4775%" height="15" fill="rgb(224,227,45)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="255.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="229" width="2.4775%" height="15" fill="rgb(229,198,43)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="239.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="213" width="2.4775%" height="15" fill="rgb(206,209,35)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="223.50">al..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,187,085,614 samples, 2.48%)</title><rect x="47.6810%" y="197" width="2.4775%" height="15" fill="rgb(245,195,53)" fg:x="42091960300" fg:w="2187085614"/><text x="47.9310%" y="207.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (512,539,139 samples, 0.58%)</title><rect x="49.5779%" y="181" width="0.5806%" height="15" fill="rgb(240,92,26)" fg:x="43766506775" fg:w="512539139"/><text x="49.8279%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (512,539,139 samples, 0.58%)</title><rect x="49.5779%" y="165" width="0.5806%" height="15" fill="rgb(207,40,23)" fg:x="43766506775" fg:w="512539139"/><text x="49.8279%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (507,767,164 samples, 0.58%)</title><rect x="49.5833%" y="149" width="0.5752%" height="15" fill="rgb(223,111,35)" fg:x="43771278750" fg:w="507767164"/><text x="49.8333%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (73,586,649 samples, 0.08%)</title><rect x="50.2418%" y="149" width="0.0834%" height="15" fill="rgb(229,147,28)" fg:x="44352605170" fg:w="73586649"/><text x="50.4918%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (67,619,103 samples, 0.08%)</title><rect x="50.2486%" y="133" width="0.0766%" height="15" fill="rgb(211,29,28)" fg:x="44358572716" fg:w="67619103"/><text x="50.4986%" y="143.50"></text></g><g><title>__rustc::__rust_alloc (86,350,904 samples, 0.10%)</title><rect x="50.3252%" y="149" width="0.0978%" height="15" fill="rgb(228,72,33)" fg:x="44426191819" fg:w="86350904"/><text x="50.5752%" y="159.50"></text></g><g><title>_int_malloc (822,553,321 samples, 0.93%)</title><rect x="51.3381%" y="133" width="0.9318%" height="15" fill="rgb(205,214,31)" fg:x="45320387215" fg:w="822553321"/><text x="51.5881%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (170,529,632 samples, 0.19%)</title><rect x="52.0767%" y="117" width="0.1932%" height="15" fill="rgb(224,111,15)" fg:x="45972410904" fg:w="170529632"/><text x="52.3267%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,795,456,495 samples, 2.03%)</title><rect x="50.2367%" y="197" width="2.0339%" height="15" fill="rgb(253,21,26)" fg:x="44348085843" fg:w="1795456495"/><text x="50.4867%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,795,456,495 samples, 2.03%)</title><rect x="50.2367%" y="181" width="2.0339%" height="15" fill="rgb(245,139,43)" fg:x="44348085843" fg:w="1795456495"/><text x="50.4867%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (1,795,456,495 samples, 2.03%)</title><rect x="50.2367%" y="165" width="2.0339%" height="15" fill="rgb(252,170,7)" fg:x="44348085843" fg:w="1795456495"/><text x="50.4867%" y="175.50">a..</text></g><g><title>malloc (1,629,001,018 samples, 1.85%)</title><rect x="50.4253%" y="149" width="1.8453%" height="15" fill="rgb(231,118,14)" fg:x="44514541320" fg:w="1629001018"/><text x="50.6753%" y="159.50">m..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,822,497,152 samples, 2.06%)</title><rect x="50.2088%" y="261" width="2.0645%" height="15" fill="rgb(238,83,0)" fg:x="44323434508" fg:w="1822497152"/><text x="50.4588%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,822,497,152 samples, 2.06%)</title><rect x="50.2088%" y="245" width="2.0645%" height="15" fill="rgb(221,39,39)" fg:x="44323434508" fg:w="1822497152"/><text x="50.4588%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,822,497,152 samples, 2.06%)</title><rect x="50.2088%" y="229" width="2.0645%" height="15" fill="rgb(222,119,46)" fg:x="44323434508" fg:w="1822497152"/><text x="50.4588%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,822,497,152 samples, 2.06%)</title><rect x="50.2088%" y="213" width="2.0645%" height="15" fill="rgb(222,165,49)" fg:x="44323434508" fg:w="1822497152"/><text x="50.4588%" y="223.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,676,819,228 samples, 3.03%)</title><rect x="50.1585%" y="309" width="3.0323%" height="15" fill="rgb(219,113,52)" fg:x="44279045914" fg:w="2676819228"/><text x="50.4085%" y="319.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,676,819,228 samples, 3.03%)</title><rect x="50.1585%" y="293" width="3.0323%" height="15" fill="rgb(214,7,15)" fg:x="44279045914" fg:w="2676819228"/><text x="50.4085%" y="303.50">all..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,676,819,228 samples, 3.03%)</title><rect x="50.1585%" y="277" width="3.0323%" height="15" fill="rgb(235,32,4)" fg:x="44279045914" fg:w="2676819228"/><text x="50.4085%" y="287.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (809,933,482 samples, 0.92%)</title><rect x="52.2733%" y="261" width="0.9175%" height="15" fill="rgb(238,90,54)" fg:x="46145931660" fg:w="809933482"/><text x="52.5233%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (809,933,482 samples, 0.92%)</title><rect x="52.2733%" y="245" width="0.9175%" height="15" fill="rgb(213,208,19)" fg:x="46145931660" fg:w="809933482"/><text x="52.5233%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (789,856,328 samples, 0.89%)</title><rect x="52.2960%" y="229" width="0.8947%" height="15" fill="rgb(233,156,4)" fg:x="46166008814" fg:w="789856328"/><text x="52.5460%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (15,651,667 samples, 0.02%)</title><rect x="53.2590%" y="245" width="0.0177%" height="15" fill="rgb(207,194,5)" fg:x="47016122637" fg:w="15651667"/><text x="53.5090%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15,651,667 samples, 0.02%)</title><rect x="53.2590%" y="229" width="0.0177%" height="15" fill="rgb(206,111,30)" fg:x="47016122637" fg:w="15651667"/><text x="53.5090%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (15,651,667 samples, 0.02%)</title><rect x="53.2590%" y="213" width="0.0177%" height="15" fill="rgb(243,70,54)" fg:x="47016122637" fg:w="15651667"/><text x="53.5090%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (15,651,667 samples, 0.02%)</title><rect x="53.2590%" y="197" width="0.0177%" height="15" fill="rgb(242,28,8)" fg:x="47016122637" fg:w="15651667"/><text x="53.5090%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,044,544,592 samples, 1.18%)</title><rect x="53.2768%" y="245" width="1.1832%" height="15" fill="rgb(219,106,18)" fg:x="47031774304" fg:w="1044544592"/><text x="53.5268%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,001,693,064 samples, 1.13%)</title><rect x="53.3253%" y="229" width="1.1347%" height="15" fill="rgb(244,222,10)" fg:x="47074625832" fg:w="1001693064"/><text x="53.5753%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,122,521,336 samples, 1.27%)</title><rect x="53.2005%" y="277" width="1.2716%" height="15" fill="rgb(236,179,52)" fg:x="46964490194" fg:w="1122521336"/><text x="53.4505%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,122,521,336 samples, 1.27%)</title><rect x="53.2005%" y="261" width="1.2716%" height="15" fill="rgb(213,23,39)" fg:x="46964490194" fg:w="1122521336"/><text x="53.4505%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (10,692,634 samples, 0.01%)</title><rect x="54.4600%" y="245" width="0.0121%" height="15" fill="rgb(238,48,10)" fg:x="48076318896" fg:w="10692634"/><text x="54.7100%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1,125,971,585 samples, 1.28%)</title><rect x="53.2005%" y="309" width="1.2755%" height="15" fill="rgb(251,196,23)" fg:x="46964490194" fg:w="1125971585"/><text x="53.4505%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,125,971,585 samples, 1.28%)</title><rect x="53.2005%" y="293" width="1.2755%" height="15" fill="rgb(250,152,24)" fg:x="46964490194" fg:w="1125971585"/><text x="53.4505%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (50,604,105 samples, 0.06%)</title><rect x="54.5276%" y="165" width="0.0573%" height="15" fill="rgb(209,150,17)" fg:x="48135948815" fg:w="50604105"/><text x="54.7776%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (47,605,575 samples, 0.05%)</title><rect x="54.5310%" y="149" width="0.0539%" height="15" fill="rgb(234,202,34)" fg:x="48138947345" fg:w="47605575"/><text x="54.7810%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (47,269,986 samples, 0.05%)</title><rect x="54.5849%" y="165" width="0.0535%" height="15" fill="rgb(253,148,53)" fg:x="48186552920" fg:w="47269986"/><text x="54.8349%" y="175.50"></text></g><g><title>alloc_perturb (14,883,464 samples, 0.02%)</title><rect x="56.6796%" y="133" width="0.0169%" height="15" fill="rgb(218,129,16)" fg:x="50035780350" fg:w="14883464"/><text x="56.9296%" y="143.50"></text></g><g><title>malloc_consolidate (21,127,116 samples, 0.02%)</title><rect x="56.6965%" y="133" width="0.0239%" height="15" fill="rgb(216,85,19)" fg:x="50050663814" fg:w="21127116"/><text x="56.9465%" y="143.50"></text></g><g><title>_int_malloc (1,243,588,901 samples, 1.41%)</title><rect x="55.5022%" y="149" width="1.4087%" height="15" fill="rgb(235,228,7)" fg:x="48996388118" fg:w="1243588901"/><text x="55.7522%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (166,859,178 samples, 0.19%)</title><rect x="56.7219%" y="133" width="0.1890%" height="15" fill="rgb(245,175,0)" fg:x="50073117841" fg:w="166859178"/><text x="56.9719%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,107,721,534 samples, 2.39%)</title><rect x="54.5262%" y="213" width="2.3876%" height="15" fill="rgb(208,168,36)" fg:x="48134796011" fg:w="2107721534"/><text x="54.7762%" y="223.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,107,721,534 samples, 2.39%)</title><rect x="54.5262%" y="197" width="2.3876%" height="15" fill="rgb(246,171,24)" fg:x="48134796011" fg:w="2107721534"/><text x="54.7762%" y="207.50">al..</text></g><g><title>alloc::alloc::alloc (2,107,721,534 samples, 2.39%)</title><rect x="54.5262%" y="181" width="2.3876%" height="15" fill="rgb(215,142,24)" fg:x="48134796011" fg:w="2107721534"/><text x="54.7762%" y="191.50">al..</text></g><g><title>malloc (2,007,923,542 samples, 2.27%)</title><rect x="54.6393%" y="165" width="2.2745%" height="15" fill="rgb(250,187,7)" fg:x="48234594003" fg:w="2007923542"/><text x="54.8893%" y="175.50">m..</text></g><g><title>alloc::string::String::with_capacity (2,157,607,833 samples, 2.44%)</title><rect x="54.4760%" y="309" width="2.4441%" height="15" fill="rgb(228,66,33)" fg:x="48090461779" fg:w="2157607833"/><text x="54.7260%" y="319.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,148,300,008 samples, 2.43%)</title><rect x="54.4866%" y="293" width="2.4336%" height="15" fill="rgb(234,215,21)" fg:x="48099769604" fg:w="2148300008"/><text x="54.7366%" y="303.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,148,300,008 samples, 2.43%)</title><rect x="54.4866%" y="277" width="2.4336%" height="15" fill="rgb(222,191,20)" fg:x="48099769604" fg:w="2148300008"/><text x="54.7366%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,148,300,008 samples, 2.43%)</title><rect x="54.4866%" y="261" width="2.4336%" height="15" fill="rgb(245,79,54)" fg:x="48099769604" fg:w="2148300008"/><text x="54.7366%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,148,300,008 samples, 2.43%)</title><rect x="54.4866%" y="245" width="2.4336%" height="15" fill="rgb(240,10,37)" fg:x="48099769604" fg:w="2148300008"/><text x="54.7366%" y="255.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,148,300,008 samples, 2.43%)</title><rect x="54.4866%" y="229" width="2.4336%" height="15" fill="rgb(214,192,32)" fg:x="48099769604" fg:w="2148300008"/><text x="54.7366%" y="239.50">al..</text></g><g><title>__rustc::__rdl_dealloc (40,162,313 samples, 0.05%)</title><rect x="56.9231%" y="197" width="0.0455%" height="15" fill="rgb(209,36,54)" fg:x="50250654315" fg:w="40162313"/><text x="57.1731%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38,912,189 samples, 0.04%)</title><rect x="56.9245%" y="181" width="0.0441%" height="15" fill="rgb(220,10,11)" fg:x="50251904439" fg:w="38912189"/><text x="57.1745%" y="191.50"></text></g><g><title>__rustc::__rust_dealloc (140,957,951 samples, 0.16%)</title><rect x="56.9685%" y="197" width="0.1597%" height="15" fill="rgb(221,106,17)" fg:x="50290816628" fg:w="140957951"/><text x="57.2185%" y="207.50"></text></g><g><title>_int_free_create_chunk (272,698,752 samples, 0.31%)</title><rect x="58.5745%" y="149" width="0.3089%" height="15" fill="rgb(251,142,44)" fg:x="51708526846" fg:w="272698752"/><text x="58.8245%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (42,104,892 samples, 0.05%)</title><rect x="58.8357%" y="133" width="0.0477%" height="15" fill="rgb(238,13,15)" fg:x="51939120706" fg:w="42104892"/><text x="59.0857%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,740,825,017 samples, 1.97%)</title><rect x="56.9201%" y="229" width="1.9720%" height="15" fill="rgb(208,107,27)" fg:x="50248069612" fg:w="1740825017"/><text x="57.1701%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (1,740,825,017 samples, 1.97%)</title><rect x="56.9201%" y="213" width="1.9720%" height="15" fill="rgb(205,136,37)" fg:x="50248069612" fg:w="1740825017"/><text x="57.1701%" y="223.50">a..</text></g><g><title>cfree@GLIBC_2.2.5 (1,553,792,995 samples, 1.76%)</title><rect x="57.1320%" y="197" width="1.7601%" height="15" fill="rgb(250,205,27)" fg:x="50435101634" fg:w="1553792995"/><text x="57.3820%" y="207.50"></text></g><g><title>_int_free_chunk (748,886,263 samples, 0.85%)</title><rect x="58.0438%" y="181" width="0.8483%" height="15" fill="rgb(210,80,43)" fg:x="51240008366" fg:w="748886263"/><text x="58.2938%" y="191.50"></text></g><g><title>_int_free_merge_chunk (366,772,533 samples, 0.42%)</title><rect x="58.4766%" y="165" width="0.4155%" height="15" fill="rgb(247,160,36)" fg:x="51622122096" fg:w="366772533"/><text x="58.7266%" y="175.50"></text></g><g><title>server_lib::resp3::bulk_string_response (9,915,264,556 samples, 11.23%)</title><rect x="47.6736%" y="325" width="11.2318%" height="15" fill="rgb(234,13,49)" fg:x="42085414432" fg:w="9915264556"/><text x="47.9236%" y="335.50">server_lib::resp3..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,752,609,376 samples, 1.99%)</title><rect x="56.9201%" y="309" width="1.9853%" height="15" fill="rgb(234,122,0)" fg:x="50248069612" fg:w="1752609376"/><text x="57.1701%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,752,609,376 samples, 1.99%)</title><rect x="56.9201%" y="293" width="1.9853%" height="15" fill="rgb(207,146,38)" fg:x="50248069612" fg:w="1752609376"/><text x="57.1701%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,752,609,376 samples, 1.99%)</title><rect x="56.9201%" y="277" width="1.9853%" height="15" fill="rgb(207,177,25)" fg:x="50248069612" fg:w="1752609376"/><text x="57.1701%" y="287.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,752,609,376 samples, 1.99%)</title><rect x="56.9201%" y="261" width="1.9853%" height="15" fill="rgb(211,178,42)" fg:x="50248069612" fg:w="1752609376"/><text x="57.1701%" y="271.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,752,609,376 samples, 1.99%)</title><rect x="56.9201%" y="245" width="1.9853%" height="15" fill="rgb(230,69,54)" fg:x="50248069612" fg:w="1752609376"/><text x="57.1701%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (11,784,359 samples, 0.01%)</title><rect x="58.8921%" y="229" width="0.0133%" height="15" fill="rgb(214,135,41)" fg:x="51988894629" fg:w="11784359"/><text x="59.1421%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (40,167,188 samples, 0.05%)</title><rect x="59.9038%" y="101" width="0.0455%" height="15" fill="rgb(237,67,25)" fg:x="52882003942" fg:w="40167188"/><text x="60.1538%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (37,486,048 samples, 0.04%)</title><rect x="59.9068%" y="85" width="0.0425%" height="15" fill="rgb(222,189,50)" fg:x="52884685082" fg:w="37486048"/><text x="60.1568%" y="95.50"></text></g><g><title>__rustc::__rust_alloc (34,004,115 samples, 0.04%)</title><rect x="59.9493%" y="101" width="0.0385%" height="15" fill="rgb(245,148,34)" fg:x="52922171130" fg:w="34004115"/><text x="60.1993%" y="111.50"></text></g><g><title>core::ptr::read_volatile (11,664,006 samples, 0.01%)</title><rect x="59.9886%" y="101" width="0.0132%" height="15" fill="rgb(222,29,6)" fg:x="52956819544" fg:w="11664006"/><text x="60.2386%" y="111.50"></text></g><g><title>malloc_consolidate (32,954,186 samples, 0.04%)</title><rect x="62.1731%" y="69" width="0.0373%" height="15" fill="rgb(221,189,43)" fg:x="54885314333" fg:w="32954186"/><text x="62.4231%" y="79.50"></text></g><g><title>_int_malloc (1,432,792,620 samples, 1.62%)</title><rect x="60.7256%" y="85" width="1.6230%" height="15" fill="rgb(207,36,27)" fg:x="53607436032" fg:w="1432792620"/><text x="60.9756%" y="95.50"></text></g><g><title>unlink_chunk.isra.0 (121,960,133 samples, 0.14%)</title><rect x="62.2104%" y="69" width="0.1382%" height="15" fill="rgb(217,90,24)" fg:x="54918268519" fg:w="121960133"/><text x="62.4604%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,161,682,189 samples, 2.45%)</title><rect x="59.9013%" y="149" width="2.4487%" height="15" fill="rgb(224,66,35)" fg:x="52879804197" fg:w="2161682189"/><text x="60.1513%" y="159.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,161,682,189 samples, 2.45%)</title><rect x="59.9013%" y="133" width="2.4487%" height="15" fill="rgb(221,13,50)" fg:x="52879804197" fg:w="2161682189"/><text x="60.1513%" y="143.50">al..</text></g><g><title>alloc::alloc::alloc (2,161,682,189 samples, 2.45%)</title><rect x="59.9013%" y="117" width="2.4487%" height="15" fill="rgb(236,68,49)" fg:x="52879804197" fg:w="2161682189"/><text x="60.1513%" y="127.50">al..</text></g><g><title>malloc (2,073,002,836 samples, 2.35%)</title><rect x="60.0018%" y="101" width="2.3483%" height="15" fill="rgb(229,146,28)" fg:x="52968483550" fg:w="2073002836"/><text x="60.2518%" y="111.50">m..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,168,025,551 samples, 2.46%)</title><rect x="59.8968%" y="213" width="2.4559%" height="15" fill="rgb(225,31,38)" fg:x="52875855821" fg:w="2168025551"/><text x="60.1468%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,168,025,551 samples, 2.46%)</title><rect x="59.8968%" y="197" width="2.4559%" height="15" fill="rgb(250,208,3)" fg:x="52875855821" fg:w="2168025551"/><text x="60.1468%" y="207.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,168,025,551 samples, 2.46%)</title><rect x="59.8968%" y="181" width="2.4559%" height="15" fill="rgb(246,54,23)" fg:x="52875855821" fg:w="2168025551"/><text x="60.1468%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,168,025,551 samples, 2.46%)</title><rect x="59.8968%" y="165" width="2.4559%" height="15" fill="rgb(243,76,11)" fg:x="52875855821" fg:w="2168025551"/><text x="60.1468%" y="175.50">al..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5,067,642,052 samples, 5.74%)</title><rect x="59.8551%" y="277" width="5.7405%" height="15" fill="rgb(245,21,50)" fg:x="52838989440" fg:w="5067642052"/><text x="60.1051%" y="287.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,030,775,671 samples, 5.70%)</title><rect x="59.8968%" y="261" width="5.6988%" height="15" fill="rgb(228,9,43)" fg:x="52875855821" fg:w="5030775671"/><text x="60.1468%" y="271.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,030,775,671 samples, 5.70%)</title><rect x="59.8968%" y="245" width="5.6988%" height="15" fill="rgb(208,100,47)" fg:x="52875855821" fg:w="5030775671"/><text x="60.1468%" y="255.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,030,775,671 samples, 5.70%)</title><rect x="59.8968%" y="229" width="5.6988%" height="15" fill="rgb(232,26,8)" fg:x="52875855821" fg:w="5030775671"/><text x="60.1468%" y="239.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,862,750,120 samples, 3.24%)</title><rect x="62.3527%" y="213" width="3.2429%" height="15" fill="rgb(216,166,38)" fg:x="55043881372" fg:w="2862750120"/><text x="62.6027%" y="223.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,862,750,120 samples, 3.24%)</title><rect x="62.3527%" y="197" width="3.2429%" height="15" fill="rgb(251,202,51)" fg:x="55043881372" fg:w="2862750120"/><text x="62.6027%" y="207.50">cor..</text></g><g><title>__memmove_avx_unaligned_erms (2,852,865,998 samples, 3.23%)</title><rect x="62.3639%" y="181" width="3.2317%" height="15" fill="rgb(254,216,34)" fg:x="55053765494" fg:w="2852865998"/><text x="62.6139%" y="191.50">__m..</text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (5,247,647,852 samples, 5.94%)</title><rect x="59.6518%" y="293" width="5.9444%" height="15" fill="rgb(251,32,27)" fg:x="52659550072" fg:w="5247647852"/><text x="59.9018%" y="303.50">&lt;server_..</text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (5,300,987,728 samples, 6.00%)</title><rect x="59.5979%" y="309" width="6.0049%" height="15" fill="rgb(208,127,28)" fg:x="52611962938" fg:w="5300987728"/><text x="59.8479%" y="319.50">&lt;server_..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (203,826,799 samples, 0.23%)</title><rect x="65.6035%" y="309" width="0.2309%" height="15" fill="rgb(224,137,22)" fg:x="57913593438" fg:w="203826799"/><text x="65.8535%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_add (203,826,799 samples, 0.23%)</title><rect x="65.6035%" y="293" width="0.2309%" height="15" fill="rgb(254,70,32)" fg:x="57913593438" fg:w="203826799"/><text x="65.8535%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::gt (41,358,027 samples, 0.05%)</title><rect x="65.8524%" y="293" width="0.0468%" height="15" fill="rgb(229,75,37)" fg:x="58133299610" fg:w="41358027"/><text x="66.1024%" y="303.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialOrd&gt;::partial_cmp (41,358,027 samples, 0.05%)</title><rect x="65.8524%" y="277" width="0.0468%" height="15" fill="rgb(252,64,23)" fg:x="58133299610" fg:w="41358027"/><text x="66.1024%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (25,052,423 samples, 0.03%)</title><rect x="65.8992%" y="293" width="0.0284%" height="15" fill="rgb(232,162,48)" fg:x="58174657637" fg:w="25052423"/><text x="66.1492%" y="303.50"></text></g><g><title>[[vdso]] (192,564,912 samples, 0.22%)</title><rect x="65.9946%" y="261" width="0.2181%" height="15" fill="rgb(246,160,12)" fg:x="58258841794" fg:w="192564912"/><text x="66.2446%" y="271.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (262,120,093 samples, 0.30%)</title><rect x="65.9498%" y="277" width="0.2969%" height="15" fill="rgb(247,166,0)" fg:x="58219317742" fg:w="262120093"/><text x="66.1998%" y="287.50"></text></g><g><title>__vdso_clock_gettime (30,031,129 samples, 0.03%)</title><rect x="66.2127%" y="261" width="0.0340%" height="15" fill="rgb(249,219,21)" fg:x="58451406706" fg:w="30031129"/><text x="66.4627%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (284,874,508 samples, 0.32%)</title><rect x="65.9276%" y="293" width="0.3227%" height="15" fill="rgb(205,209,3)" fg:x="58199710060" fg:w="284874508"/><text x="66.1776%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (54,283,146 samples, 0.06%)</title><rect x="66.2858%" y="277" width="0.0615%" height="15" fill="rgb(243,44,1)" fg:x="58515917152" fg:w="54283146"/><text x="66.5358%" y="287.50"></text></g><g><title>std::time::SystemTime::duration_since (161,740,970 samples, 0.18%)</title><rect x="66.2510%" y="293" width="0.1832%" height="15" fill="rgb(206,159,16)" fg:x="58485224125" fg:w="161740970"/><text x="66.5010%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::sub_time (76,764,797 samples, 0.09%)</title><rect x="66.3473%" y="277" width="0.0870%" height="15" fill="rgb(244,77,30)" fg:x="58570200298" fg:w="76764797"/><text x="66.5973%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (68,823,082 samples, 0.08%)</title><rect x="66.3563%" y="261" width="0.0780%" height="15" fill="rgb(218,69,12)" fg:x="58578142013" fg:w="68823082"/><text x="66.6063%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (18,760,981 samples, 0.02%)</title><rect x="66.4130%" y="245" width="0.0213%" height="15" fill="rgb(212,87,7)" fg:x="58628204114" fg:w="18760981"/><text x="66.6630%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::ge (18,760,981 samples, 0.02%)</title><rect x="66.4130%" y="229" width="0.0213%" height="15" fill="rgb(245,114,25)" fg:x="58628204114" fg:w="18760981"/><text x="66.6630%" y="239.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (18,760,981 samples, 0.02%)</title><rect x="66.4130%" y="213" width="0.0213%" height="15" fill="rgb(210,61,42)" fg:x="58628204114" fg:w="18760981"/><text x="66.6630%" y="223.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (532,172,713 samples, 0.60%)</title><rect x="65.8344%" y="309" width="0.6028%" height="15" fill="rgb(211,52,33)" fg:x="58117420237" fg:w="532172713"/><text x="66.0844%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19,524,163 samples, 0.02%)</title><rect x="66.7244%" y="181" width="0.0221%" height="15" fill="rgb(234,58,33)" fg:x="58903091807" fg:w="19524163"/><text x="66.9744%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (30,749,388 samples, 0.03%)</title><rect x="66.7633%" y="165" width="0.0348%" height="15" fill="rgb(220,115,36)" fg:x="58937444756" fg:w="30749388"/><text x="67.0133%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (122,070,818 samples, 0.14%)</title><rect x="66.6866%" y="229" width="0.1383%" height="15" fill="rgb(243,153,54)" fg:x="58869753727" fg:w="122070818"/><text x="66.9366%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (122,070,818 samples, 0.14%)</title><rect x="66.6866%" y="213" width="0.1383%" height="15" fill="rgb(251,47,18)" fg:x="58869753727" fg:w="122070818"/><text x="66.9366%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (122,070,818 samples, 0.14%)</title><rect x="66.6866%" y="197" width="0.1383%" height="15" fill="rgb(242,102,42)" fg:x="58869753727" fg:w="122070818"/><text x="66.9366%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (69,208,575 samples, 0.08%)</title><rect x="66.7465%" y="181" width="0.0784%" height="15" fill="rgb(234,31,38)" fg:x="58922615970" fg:w="69208575"/><text x="66.9965%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (23,630,401 samples, 0.03%)</title><rect x="66.7981%" y="165" width="0.0268%" height="15" fill="rgb(221,117,51)" fg:x="58968194144" fg:w="23630401"/><text x="67.0481%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (91,648,804 samples, 0.10%)</title><rect x="66.8249%" y="229" width="0.1038%" height="15" fill="rgb(212,20,18)" fg:x="58991824545" fg:w="91648804"/><text x="67.0749%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (75,934,513 samples, 0.09%)</title><rect x="66.8427%" y="213" width="0.0860%" height="15" fill="rgb(245,133,36)" fg:x="59007538836" fg:w="75934513"/><text x="67.0927%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (75,934,513 samples, 0.09%)</title><rect x="66.8427%" y="197" width="0.0860%" height="15" fill="rgb(212,6,19)" fg:x="59007538836" fg:w="75934513"/><text x="67.0927%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (75,934,513 samples, 0.09%)</title><rect x="66.8427%" y="181" width="0.0860%" height="15" fill="rgb(218,1,36)" fg:x="59007538836" fg:w="75934513"/><text x="67.0927%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (212,901,298 samples, 0.24%)</title><rect x="66.9287%" y="149" width="0.2412%" height="15" fill="rgb(246,84,54)" fg:x="59083473349" fg:w="212901298"/><text x="67.1787%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (111,708,400 samples, 0.13%)</title><rect x="67.0433%" y="133" width="0.1265%" height="15" fill="rgb(242,110,6)" fg:x="59184666247" fg:w="111708400"/><text x="67.2933%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22,239,566 samples, 0.03%)</title><rect x="67.1447%" y="117" width="0.0252%" height="15" fill="rgb(214,47,5)" fg:x="59274135081" fg:w="22239566"/><text x="67.3947%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (509,474,773 samples, 0.58%)</title><rect x="66.6757%" y="261" width="0.5771%" height="15" fill="rgb(218,159,25)" fg:x="58860127762" fg:w="509474773"/><text x="66.9257%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (506,982,849 samples, 0.57%)</title><rect x="66.6785%" y="245" width="0.5743%" height="15" fill="rgb(215,211,28)" fg:x="58862619686" fg:w="506982849"/><text x="66.9285%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (286,129,186 samples, 0.32%)</title><rect x="66.9287%" y="229" width="0.3241%" height="15" fill="rgb(238,59,32)" fg:x="59083473349" fg:w="286129186"/><text x="67.1787%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (286,129,186 samples, 0.32%)</title><rect x="66.9287%" y="213" width="0.3241%" height="15" fill="rgb(226,82,3)" fg:x="59083473349" fg:w="286129186"/><text x="67.1787%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (286,129,186 samples, 0.32%)</title><rect x="66.9287%" y="197" width="0.3241%" height="15" fill="rgb(240,164,32)" fg:x="59083473349" fg:w="286129186"/><text x="67.1787%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (286,129,186 samples, 0.32%)</title><rect x="66.9287%" y="181" width="0.3241%" height="15" fill="rgb(232,46,7)" fg:x="59083473349" fg:w="286129186"/><text x="67.1787%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (286,129,186 samples, 0.32%)</title><rect x="66.9287%" y="165" width="0.3241%" height="15" fill="rgb(229,129,53)" fg:x="59083473349" fg:w="286129186"/><text x="67.1787%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (73,227,888 samples, 0.08%)</title><rect x="67.1699%" y="149" width="0.0830%" height="15" fill="rgb(234,188,29)" fg:x="59296374647" fg:w="73227888"/><text x="67.4199%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (64,474,250 samples, 0.07%)</title><rect x="67.1798%" y="133" width="0.0730%" height="15" fill="rgb(246,141,4)" fg:x="59305128285" fg:w="64474250"/><text x="67.4298%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (26,478,666 samples, 0.03%)</title><rect x="67.2228%" y="117" width="0.0300%" height="15" fill="rgb(229,23,39)" fg:x="59343123869" fg:w="26478666"/><text x="67.4728%" y="127.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14,553,884 samples, 0.02%)</title><rect x="67.2612%" y="213" width="0.0165%" height="15" fill="rgb(206,12,3)" fg:x="59377021235" fg:w="14553884"/><text x="67.5112%" y="223.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (14,553,884 samples, 0.02%)</title><rect x="67.2612%" y="197" width="0.0165%" height="15" fill="rgb(252,226,20)" fg:x="59377021235" fg:w="14553884"/><text x="67.5112%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (277,539,684 samples, 0.31%)</title><rect x="67.2777%" y="213" width="0.3144%" height="15" fill="rgb(216,123,35)" fg:x="59391575119" fg:w="277539684"/><text x="67.5277%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (277,539,684 samples, 0.31%)</title><rect x="67.2777%" y="197" width="0.3144%" height="15" fill="rgb(212,68,40)" fg:x="59391575119" fg:w="277539684"/><text x="67.5277%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (277,539,684 samples, 0.31%)</title><rect x="67.2777%" y="181" width="0.3144%" height="15" fill="rgb(254,125,32)" fg:x="59391575119" fg:w="277539684"/><text x="67.5277%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (23,940,334 samples, 0.03%)</title><rect x="67.5936%" y="213" width="0.0271%" height="15" fill="rgb(253,97,22)" fg:x="59670408634" fg:w="23940334"/><text x="67.8436%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23,940,334 samples, 0.03%)</title><rect x="67.5936%" y="197" width="0.0271%" height="15" fill="rgb(241,101,14)" fg:x="59670408634" fg:w="23940334"/><text x="67.8436%" y="207.50"></text></g><g><title>hashbrown::control::tag::Tag::full (9,917,056 samples, 0.01%)</title><rect x="67.6207%" y="213" width="0.0112%" height="15" fill="rgb(238,103,29)" fg:x="59694348968" fg:w="9917056"/><text x="67.8707%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,713,084,200 samples, 3.07%)</title><rect x="67.6325%" y="197" width="3.0733%" height="15" fill="rgb(233,195,47)" fg:x="59704788180" fg:w="2713084200"/><text x="67.8825%" y="207.50">has..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,713,084,200 samples, 3.07%)</title><rect x="67.6325%" y="181" width="3.0733%" height="15" fill="rgb(246,218,30)" fg:x="59704788180" fg:w="2713084200"/><text x="67.8825%" y="191.50">&lt;Q ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,620,506,467 samples, 2.97%)</title><rect x="67.7374%" y="165" width="2.9685%" height="15" fill="rgb(219,145,47)" fg:x="59797365913" fg:w="2620506467"/><text x="67.9874%" y="175.50">cor..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,620,506,467 samples, 2.97%)</title><rect x="67.7374%" y="149" width="2.9685%" height="15" fill="rgb(243,12,26)" fg:x="59797365913" fg:w="2620506467"/><text x="67.9874%" y="159.50">cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,620,506,467 samples, 2.97%)</title><rect x="67.7374%" y="133" width="2.9685%" height="15" fill="rgb(214,87,16)" fg:x="59797365913" fg:w="2620506467"/><text x="67.9874%" y="143.50">cor..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,620,506,467 samples, 2.97%)</title><rect x="67.7374%" y="117" width="2.9685%" height="15" fill="rgb(208,99,42)" fg:x="59797365913" fg:w="2620506467"/><text x="67.9874%" y="127.50">cor..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,620,506,467 samples, 2.97%)</title><rect x="67.7374%" y="101" width="2.9685%" height="15" fill="rgb(253,99,2)" fg:x="59797365913" fg:w="2620506467"/><text x="67.9874%" y="111.50">&lt;[A..</text></g><g><title>__memcmp_avx2_movbe (1,214,622,469 samples, 1.38%)</title><rect x="69.3300%" y="85" width="1.3759%" height="15" fill="rgb(220,168,23)" fg:x="61203249911" fg:w="1214622469"/><text x="69.5800%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,718,855,562 samples, 3.08%)</title><rect x="67.6325%" y="213" width="3.0799%" height="15" fill="rgb(242,38,24)" fg:x="59704788180" fg:w="2718855562"/><text x="67.8825%" y="223.50">has..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (3,824,147,236 samples, 4.33%)</title><rect x="66.4372%" y="309" width="4.3319%" height="15" fill="rgb(225,182,9)" fg:x="58649592950" fg:w="3824147236"/><text x="66.6872%" y="319.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (3,824,147,236 samples, 4.33%)</title><rect x="66.4372%" y="293" width="4.3319%" height="15" fill="rgb(243,178,37)" fg:x="58649592950" fg:w="3824147236"/><text x="66.6872%" y="303.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (3,824,147,236 samples, 4.33%)</title><rect x="66.4372%" y="277" width="4.3319%" height="15" fill="rgb(232,139,19)" fg:x="58649592950" fg:w="3824147236"/><text x="66.6872%" y="287.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (3,104,137,651 samples, 3.52%)</title><rect x="67.2528%" y="261" width="3.5163%" height="15" fill="rgb(225,201,24)" fg:x="59369602535" fg:w="3104137651"/><text x="67.5028%" y="271.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,104,137,651 samples, 3.52%)</title><rect x="67.2528%" y="245" width="3.5163%" height="15" fill="rgb(221,47,46)" fg:x="59369602535" fg:w="3104137651"/><text x="67.5028%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,100,733,281 samples, 3.51%)</title><rect x="67.2567%" y="229" width="3.5125%" height="15" fill="rgb(249,23,13)" fg:x="59373006905" fg:w="3100733281"/><text x="67.5067%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (50,096,444 samples, 0.06%)</title><rect x="70.7124%" y="213" width="0.0567%" height="15" fill="rgb(219,9,5)" fg:x="62423643742" fg:w="50096444"/><text x="70.9624%" y="223.50"></text></g><g><title>[[vdso]] (186,347,896 samples, 0.21%)</title><rect x="70.8261%" y="277" width="0.2111%" height="15" fill="rgb(254,171,16)" fg:x="62524021111" fg:w="186347896"/><text x="71.0761%" y="287.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (233,409,076 samples, 0.26%)</title><rect x="70.7943%" y="293" width="0.2644%" height="15" fill="rgb(230,171,20)" fg:x="62495978843" fg:w="233409076"/><text x="71.0443%" y="303.50"></text></g><g><title>__vdso_clock_gettime (19,018,912 samples, 0.02%)</title><rect x="71.0372%" y="277" width="0.0215%" height="15" fill="rgb(210,71,41)" fg:x="62710369007" fg:w="19018912"/><text x="71.2872%" y="287.50"></text></g><g><title>server_lib::storage::Storage::get_entry (10,730,720,169 samples, 12.16%)</title><rect x="58.9097%" y="325" width="12.1556%" height="15" fill="rgb(206,173,20)" fg:x="52004415518" fg:w="10730720169"/><text x="59.1597%" y="335.50">server_lib::storag..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (261,395,501 samples, 0.30%)</title><rect x="70.7692%" y="309" width="0.2961%" height="15" fill="rgb(233,88,34)" fg:x="62473740186" fg:w="261395501"/><text x="71.0192%" y="319.50"></text></g><g><title>__rustc::__rust_dealloc (22,306,970 samples, 0.03%)</title><rect x="71.2303%" y="181" width="0.0253%" height="15" fill="rgb(223,209,46)" fg:x="62880806904" fg:w="22306970"/><text x="71.4803%" y="191.50"></text></g><g><title>_int_free_create_chunk (576,969,002 samples, 0.65%)</title><rect x="72.9691%" y="133" width="0.6536%" height="15" fill="rgb(250,43,18)" fg:x="64415784003" fg:w="576969002"/><text x="73.2191%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (296,729,775 samples, 0.34%)</title><rect x="73.2865%" y="117" width="0.3361%" height="15" fill="rgb(208,13,10)" fg:x="64696023230" fg:w="296729775"/><text x="73.5365%" y="127.50"></text></g><g><title>_int_free_merge_chunk (1,108,636,128 samples, 1.26%)</title><rect x="72.4838%" y="149" width="1.2558%" height="15" fill="rgb(212,200,36)" fg:x="63987395763" fg:w="1108636128"/><text x="72.7338%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (103,278,886 samples, 0.12%)</title><rect x="73.6226%" y="133" width="0.1170%" height="15" fill="rgb(225,90,30)" fg:x="64992753005" fg:w="103278886"/><text x="73.8726%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,218,303,510 samples, 2.51%)</title><rect x="71.2276%" y="213" width="2.5129%" height="15" fill="rgb(236,182,39)" fg:x="62878435780" fg:w="2218303510"/><text x="71.4776%" y="223.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (2,218,303,510 samples, 2.51%)</title><rect x="71.2276%" y="197" width="2.5129%" height="15" fill="rgb(212,144,35)" fg:x="62878435780" fg:w="2218303510"/><text x="71.4776%" y="207.50">al..</text></g><g><title>cfree@GLIBC_2.2.5 (2,192,363,282 samples, 2.48%)</title><rect x="71.2570%" y="181" width="2.4835%" height="15" fill="rgb(228,63,44)" fg:x="62904376008" fg:w="2192363282"/><text x="71.5070%" y="191.50">cf..</text></g><g><title>_int_free_chunk (1,235,926,634 samples, 1.40%)</title><rect x="72.3404%" y="165" width="1.4000%" height="15" fill="rgb(228,109,6)" fg:x="63860812656" fg:w="1235926634"/><text x="72.5904%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;server_lib::storage::StorageEntry&gt;&gt; (2,228,968,328 samples, 2.52%)</title><rect x="71.2176%" y="293" width="2.5249%" height="15" fill="rgb(238,117,24)" fg:x="62869645338" fg:w="2228968328"/><text x="71.4676%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageEntry&gt; (2,224,034,047 samples, 2.52%)</title><rect x="71.2232%" y="277" width="2.5193%" height="15" fill="rgb(242,26,26)" fg:x="62874579619" fg:w="2224034047"/><text x="71.4732%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;server_lib::storage::StorageValue&gt; (2,224,034,047 samples, 2.52%)</title><rect x="71.2232%" y="261" width="2.5193%" height="15" fill="rgb(221,92,48)" fg:x="62874579619" fg:w="2224034047"/><text x="71.4732%" y="271.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,221,457,904 samples, 2.52%)</title><rect x="71.2261%" y="245" width="2.5164%" height="15" fill="rgb(209,209,32)" fg:x="62877155762" fg:w="2221457904"/><text x="71.4761%" y="255.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,220,177,886 samples, 2.51%)</title><rect x="71.2276%" y="229" width="2.5150%" height="15" fill="rgb(221,70,22)" fg:x="62878435780" fg:w="2220177886"/><text x="71.4776%" y="239.50">al..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (74,904,791 samples, 0.08%)</title><rect x="73.7426%" y="293" width="0.0849%" height="15" fill="rgb(248,145,5)" fg:x="65098613666" fg:w="74904791"/><text x="73.9926%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_add (74,904,791 samples, 0.08%)</title><rect x="73.7426%" y="277" width="0.0849%" height="15" fill="rgb(226,116,26)" fg:x="65098613666" fg:w="74904791"/><text x="73.9926%" y="287.50"></text></g><g><title>server_lib::storage::Storage::is_full (119,496,381 samples, 0.14%)</title><rect x="73.8274%" y="293" width="0.1354%" height="15" fill="rgb(244,5,17)" fg:x="65173518457" fg:w="119496381"/><text x="74.0774%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::len (118,975,056 samples, 0.13%)</title><rect x="73.8280%" y="277" width="0.1348%" height="15" fill="rgb(252,159,33)" fg:x="65174039782" fg:w="118975056"/><text x="74.0780%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (118,975,056 samples, 0.13%)</title><rect x="73.8280%" y="261" width="0.1348%" height="15" fill="rgb(206,71,0)" fg:x="65174039782" fg:w="118975056"/><text x="74.0780%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (118,975,056 samples, 0.13%)</title><rect x="73.8280%" y="245" width="0.1348%" height="15" fill="rgb(233,118,54)" fg:x="65174039782" fg:w="118975056"/><text x="74.0780%" y="255.50"></text></g><g><title>server_lib::storage::StorageValue::size_in_bytes (10,372,484 samples, 0.01%)</title><rect x="73.9628%" y="293" width="0.0117%" height="15" fill="rgb(234,83,48)" fg:x="65293014838" fg:w="10372484"/><text x="74.2128%" y="303.50"></text></g><g><title>core::mem::replace (77,782,060 samples, 0.09%)</title><rect x="73.9825%" y="261" width="0.0881%" height="15" fill="rgb(228,3,54)" fg:x="65310431514" fg:w="77782060"/><text x="74.2325%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (91,948,580 samples, 0.10%)</title><rect x="74.0706%" y="261" width="0.1042%" height="15" fill="rgb(226,155,13)" fg:x="65388213574" fg:w="91948580"/><text x="74.3206%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (91,948,580 samples, 0.10%)</title><rect x="74.0706%" y="245" width="0.1042%" height="15" fill="rgb(241,28,37)" fg:x="65388213574" fg:w="91948580"/><text x="74.3206%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (91,948,580 samples, 0.10%)</title><rect x="74.0706%" y="229" width="0.1042%" height="15" fill="rgb(233,93,10)" fg:x="65388213574" fg:w="91948580"/><text x="74.3206%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91,948,580 samples, 0.10%)</title><rect x="74.0706%" y="213" width="0.1042%" height="15" fill="rgb(225,113,19)" fg:x="65388213574" fg:w="91948580"/><text x="74.3206%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (90,761,133 samples, 0.10%)</title><rect x="74.0720%" y="197" width="0.1028%" height="15" fill="rgb(241,2,18)" fg:x="65389401021" fg:w="90761133"/><text x="74.3220%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (90,761,133 samples, 0.10%)</title><rect x="74.0720%" y="181" width="0.1028%" height="15" fill="rgb(228,207,21)" fg:x="65389401021" fg:w="90761133"/><text x="74.3220%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (90,761,133 samples, 0.10%)</title><rect x="74.0720%" y="165" width="0.1028%" height="15" fill="rgb(213,211,35)" fg:x="65389401021" fg:w="90761133"/><text x="74.3220%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (79,467,935 samples, 0.09%)</title><rect x="74.0848%" y="149" width="0.0900%" height="15" fill="rgb(209,83,10)" fg:x="65400694219" fg:w="79467935"/><text x="74.3348%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16,525,015 samples, 0.02%)</title><rect x="74.1868%" y="229" width="0.0187%" height="15" fill="rgb(209,164,1)" fg:x="65490776199" fg:w="16525015"/><text x="74.4368%" y="239.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22,573,475 samples, 0.03%)</title><rect x="74.2089%" y="213" width="0.0256%" height="15" fill="rgb(213,184,43)" fg:x="65510285608" fg:w="22573475"/><text x="74.4589%" y="223.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (22,573,475 samples, 0.03%)</title><rect x="74.2089%" y="197" width="0.0256%" height="15" fill="rgb(231,61,34)" fg:x="65510285608" fg:w="22573475"/><text x="74.4589%" y="207.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (225,177,940 samples, 0.26%)</title><rect x="74.2380%" y="213" width="0.2551%" height="15" fill="rgb(235,75,3)" fg:x="65535998637" fg:w="225177940"/><text x="74.4880%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (225,177,940 samples, 0.26%)</title><rect x="74.2380%" y="197" width="0.2551%" height="15" fill="rgb(220,106,47)" fg:x="65535998637" fg:w="225177940"/><text x="74.4880%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (225,177,940 samples, 0.26%)</title><rect x="74.2380%" y="181" width="0.2551%" height="15" fill="rgb(210,196,33)" fg:x="65535998637" fg:w="225177940"/><text x="74.4880%" y="191.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (26,245,313 samples, 0.03%)</title><rect x="74.4931%" y="213" width="0.0297%" height="15" fill="rgb(229,154,42)" fg:x="65761176577" fg:w="26245313"/><text x="74.7431%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26,245,313 samples, 0.03%)</title><rect x="74.4931%" y="197" width="0.0297%" height="15" fill="rgb(228,114,26)" fg:x="65761176577" fg:w="26245313"/><text x="74.7431%" y="207.50"></text></g><g><title>hashbrown::control::tag::Tag::full (48,209,358 samples, 0.05%)</title><rect x="74.5228%" y="213" width="0.0546%" height="15" fill="rgb(208,144,1)" fg:x="65787421890" fg:w="48209358"/><text x="74.7728%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="197" width="2.2389%" height="15" fill="rgb(239,112,37)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="207.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="181" width="2.2389%" height="15" fill="rgb(210,96,50)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="191.50">&lt;..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="165" width="2.2389%" height="15" fill="rgb(222,178,2)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="175.50">c..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="149" width="2.2389%" height="15" fill="rgb(226,74,18)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="159.50">&lt;..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="133" width="2.2389%" height="15" fill="rgb(225,67,54)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="143.50">a..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="117" width="2.2389%" height="15" fill="rgb(251,92,32)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="127.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,976,460,233 samples, 2.24%)</title><rect x="74.6606%" y="101" width="2.2389%" height="15" fill="rgb(228,149,22)" fg:x="65909056463" fg:w="1976460233"/><text x="74.9106%" y="111.50">&lt;..</text></g><g><title>__memcmp_avx2_movbe (915,515,371 samples, 1.04%)</title><rect x="75.8624%" y="85" width="1.0371%" height="15" fill="rgb(243,54,13)" fg:x="66970001325" fg:w="915515371"/><text x="76.1124%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2,051,196,315 samples, 2.32%)</title><rect x="74.5774%" y="213" width="2.3236%" height="15" fill="rgb(243,180,28)" fg:x="65835631248" fg:w="2051196315"/><text x="74.8274%" y="223.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (2,407,814,333 samples, 2.73%)</title><rect x="74.1748%" y="261" width="2.7275%" height="15" fill="rgb(208,167,24)" fg:x="65480162154" fg:w="2407814333"/><text x="74.4248%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2,407,814,333 samples, 2.73%)</title><rect x="74.1748%" y="245" width="2.7275%" height="15" fill="rgb(245,73,45)" fg:x="65480162154" fg:w="2407814333"/><text x="74.4248%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2,380,675,273 samples, 2.70%)</title><rect x="74.2055%" y="229" width="2.6968%" height="15" fill="rgb(237,203,48)" fg:x="65507301214" fg:w="2380675273"/><text x="74.4555%" y="239.50">ha..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (15,650,416 samples, 0.02%)</title><rect x="76.9619%" y="181" width="0.0177%" height="15" fill="rgb(211,197,16)" fg:x="67940554889" fg:w="15650416"/><text x="77.2119%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21,143,931 samples, 0.02%)</title><rect x="76.9987%" y="165" width="0.0240%" height="15" fill="rgb(243,99,51)" fg:x="67973110081" fg:w="21143931"/><text x="77.2487%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (125,135,112 samples, 0.14%)</title><rect x="76.9023%" y="229" width="0.1418%" height="15" fill="rgb(215,123,29)" fg:x="67887976487" fg:w="125135112"/><text x="77.1523%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (125,135,112 samples, 0.14%)</title><rect x="76.9023%" y="213" width="0.1418%" height="15" fill="rgb(239,186,37)" fg:x="67887976487" fg:w="125135112"/><text x="77.1523%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (125,135,112 samples, 0.14%)</title><rect x="76.9023%" y="197" width="0.1418%" height="15" fill="rgb(252,136,39)" fg:x="67887976487" fg:w="125135112"/><text x="77.1523%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (56,906,294 samples, 0.06%)</title><rect x="76.9796%" y="181" width="0.0645%" height="15" fill="rgb(223,213,32)" fg:x="67956205305" fg:w="56906294"/><text x="77.2296%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18,857,587 samples, 0.02%)</title><rect x="77.0227%" y="165" width="0.0214%" height="15" fill="rgb(233,115,5)" fg:x="67994254012" fg:w="18857587"/><text x="77.2727%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (124,373,609 samples, 0.14%)</title><rect x="77.0441%" y="229" width="0.1409%" height="15" fill="rgb(207,226,44)" fg:x="68013111599" fg:w="124373609"/><text x="77.2941%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (120,879,373 samples, 0.14%)</title><rect x="77.0480%" y="213" width="0.1369%" height="15" fill="rgb(208,126,0)" fg:x="68016605835" fg:w="120879373"/><text x="77.2980%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (120,879,373 samples, 0.14%)</title><rect x="77.0480%" y="197" width="0.1369%" height="15" fill="rgb(244,66,21)" fg:x="68016605835" fg:w="120879373"/><text x="77.2980%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (120,879,373 samples, 0.14%)</title><rect x="77.0480%" y="181" width="0.1369%" height="15" fill="rgb(222,97,12)" fg:x="68016605835" fg:w="120879373"/><text x="77.2980%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (162,150,440 samples, 0.18%)</title><rect x="77.1890%" y="133" width="0.1837%" height="15" fill="rgb(219,213,19)" fg:x="68141082744" fg:w="162150440"/><text x="77.4390%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (88,646,077 samples, 0.10%)</title><rect x="77.2723%" y="117" width="0.1004%" height="15" fill="rgb(252,169,30)" fg:x="68214587107" fg:w="88646077"/><text x="77.5223%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23,871,088 samples, 0.03%)</title><rect x="77.3457%" y="101" width="0.0270%" height="15" fill="rgb(206,32,51)" fg:x="68279362096" fg:w="23871088"/><text x="77.5957%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (468,469,215 samples, 0.53%)</title><rect x="76.9023%" y="261" width="0.5307%" height="15" fill="rgb(250,172,42)" fg:x="67887976487" fg:w="468469215"/><text x="77.1523%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (468,469,215 samples, 0.53%)</title><rect x="76.9023%" y="245" width="0.5307%" height="15" fill="rgb(209,34,43)" fg:x="67887976487" fg:w="468469215"/><text x="77.1523%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (218,960,494 samples, 0.25%)</title><rect x="77.1849%" y="229" width="0.2480%" height="15" fill="rgb(223,11,35)" fg:x="68137485208" fg:w="218960494"/><text x="77.4349%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (216,048,297 samples, 0.24%)</title><rect x="77.1882%" y="213" width="0.2447%" height="15" fill="rgb(251,219,26)" fg:x="68140397405" fg:w="216048297"/><text x="77.4382%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (216,048,297 samples, 0.24%)</title><rect x="77.1882%" y="197" width="0.2447%" height="15" fill="rgb(231,119,3)" fg:x="68140397405" fg:w="216048297"/><text x="77.4382%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (216,048,297 samples, 0.24%)</title><rect x="77.1882%" y="181" width="0.2447%" height="15" fill="rgb(216,97,11)" fg:x="68140397405" fg:w="216048297"/><text x="77.4382%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (216,048,297 samples, 0.24%)</title><rect x="77.1882%" y="165" width="0.2447%" height="15" fill="rgb(223,59,9)" fg:x="68140397405" fg:w="216048297"/><text x="77.4382%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (216,048,297 samples, 0.24%)</title><rect x="77.1882%" y="149" width="0.2447%" height="15" fill="rgb(233,93,31)" fg:x="68140397405" fg:w="216048297"/><text x="77.4382%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (53,212,518 samples, 0.06%)</title><rect x="77.3727%" y="133" width="0.0603%" height="15" fill="rgb(239,81,33)" fg:x="68303233184" fg:w="53212518"/><text x="77.6227%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40,774,766 samples, 0.05%)</title><rect x="77.3868%" y="117" width="0.0462%" height="15" fill="rgb(213,120,34)" fg:x="68315670936" fg:w="40774766"/><text x="77.6368%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (22,406,481 samples, 0.03%)</title><rect x="77.4076%" y="101" width="0.0254%" height="15" fill="rgb(243,49,53)" fg:x="68334039221" fg:w="22406481"/><text x="77.6576%" y="111.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3,055,888,267 samples, 3.46%)</title><rect x="73.9745%" y="293" width="3.4617%" height="15" fill="rgb(247,216,33)" fg:x="65303387322" fg:w="3055888267"/><text x="74.2245%" y="303.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,055,888,267 samples, 3.46%)</title><rect x="73.9745%" y="277" width="3.4617%" height="15" fill="rgb(226,26,14)" fg:x="65303387322" fg:w="3055888267"/><text x="74.2245%" y="287.50">has..</text></g><g><title>[[vdso]] (208,260,475 samples, 0.24%)</title><rect x="77.8311%" y="261" width="0.2359%" height="15" fill="rgb(215,49,53)" fg:x="68707899603" fg:w="208260475"/><text x="78.0811%" y="271.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (639,950,774 samples, 0.72%)</title><rect x="77.4633%" y="277" width="0.7249%" height="15" fill="rgb(245,162,40)" fg:x="68383235373" fg:w="639950774"/><text x="77.7133%" y="287.50"></text></g><g><title>__vdso_clock_gettime (107,026,069 samples, 0.12%)</title><rect x="78.0670%" y="261" width="0.1212%" height="15" fill="rgb(229,68,17)" fg:x="68916160078" fg:w="107026069"/><text x="78.3170%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (665,852,387 samples, 0.75%)</title><rect x="77.4362%" y="293" width="0.7543%" height="15" fill="rgb(213,182,10)" fg:x="68359275589" fg:w="665852387"/><text x="77.6862%" y="303.50"></text></g><g><title>server::process_request (53,366,620,111 samples, 60.45%)</title><rect x="17.7424%" y="341" width="60.4528%" height="15" fill="rgb(245,125,30)" fg:x="15662689064" fg:w="53366620111"/><text x="17.9924%" y="351.50">server::process_request</text></g><g><title>server_lib::storage::Storage::insert_entry (6,294,173,488 samples, 7.13%)</title><rect x="71.0653%" y="325" width="7.1299%" height="15" fill="rgb(232,202,2)" fg:x="62735135687" fg:w="6294173488"/><text x="71.3153%" y="335.50">server_lib..</text></g><g><title>server_lib::storage::Storage::insert_with_ttl (6,282,758,796 samples, 7.12%)</title><rect x="71.0782%" y="309" width="7.1170%" height="15" fill="rgb(237,140,51)" fg:x="62746550379" fg:w="6282758796"/><text x="71.3282%" y="319.50">server_lib..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (98,702,506 samples, 0.11%)</title><rect x="78.4274%" y="325" width="0.1118%" height="15" fill="rgb(236,157,25)" fg:x="69234345882" fg:w="98702506"/><text x="78.6774%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (237,894,946 samples, 0.27%)</title><rect x="78.5393%" y="325" width="0.2695%" height="15" fill="rgb(219,209,0)" fg:x="69333048388" fg:w="237894946"/><text x="78.7893%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (237,894,946 samples, 0.27%)</title><rect x="78.5393%" y="309" width="0.2695%" height="15" fill="rgb(240,116,54)" fg:x="69333048388" fg:w="237894946"/><text x="78.7893%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (237,894,946 samples, 0.27%)</title><rect x="78.5393%" y="293" width="0.2695%" height="15" fill="rgb(216,10,36)" fg:x="69333048388" fg:w="237894946"/><text x="78.7893%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (237,894,946 samples, 0.27%)</title><rect x="78.5393%" y="277" width="0.2695%" height="15" fill="rgb(222,72,44)" fg:x="69333048388" fg:w="237894946"/><text x="78.7893%" y="287.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (28,696,371 samples, 0.03%)</title><rect x="78.7762%" y="261" width="0.0325%" height="15" fill="rgb(232,159,9)" fg:x="69542246963" fg:w="28696371"/><text x="79.0262%" y="271.50"></text></g><g><title>core::slice::index::get_noubcheck (28,696,371 samples, 0.03%)</title><rect x="78.7762%" y="245" width="0.0325%" height="15" fill="rgb(210,39,32)" fg:x="69542246963" fg:w="28696371"/><text x="79.0262%" y="255.50"></text></g><g><title>server_lib::resp3::get_data_type (243,580,671 samples, 0.28%)</title><rect x="78.8087%" y="325" width="0.2759%" height="15" fill="rgb(216,194,45)" fg:x="69570943334" fg:w="243580671"/><text x="79.0587%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (160,340,546 samples, 0.18%)</title><rect x="80.5559%" y="309" width="0.1816%" height="15" fill="rgb(218,18,35)" fg:x="71113348411" fg:w="160340546"/><text x="80.8059%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (20,262,733 samples, 0.02%)</title><rect x="80.7782%" y="293" width="0.0230%" height="15" fill="rgb(207,83,51)" fg:x="71309523505" fg:w="20262733"/><text x="81.0282%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20,262,733 samples, 0.02%)</title><rect x="80.7782%" y="277" width="0.0230%" height="15" fill="rgb(225,63,43)" fg:x="71309523505" fg:w="20262733"/><text x="81.0282%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (20,262,733 samples, 0.02%)</title><rect x="80.7782%" y="261" width="0.0230%" height="15" fill="rgb(207,57,36)" fg:x="71309523505" fg:w="20262733"/><text x="81.0282%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (20,262,733 samples, 0.02%)</title><rect x="80.7782%" y="245" width="0.0230%" height="15" fill="rgb(216,99,33)" fg:x="71309523505" fg:w="20262733"/><text x="81.0282%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14,551,717 samples, 0.02%)</title><rect x="80.8011%" y="293" width="0.0165%" height="15" fill="rgb(225,42,16)" fg:x="71329786238" fg:w="14551717"/><text x="81.0511%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (321,795,913 samples, 0.36%)</title><rect x="80.7376%" y="309" width="0.3645%" height="15" fill="rgb(220,201,45)" fg:x="71273688957" fg:w="321795913"/><text x="80.9876%" y="319.50"></text></g><g><title>core::ptr::write (251,146,915 samples, 0.28%)</title><rect x="80.8176%" y="293" width="0.2845%" height="15" fill="rgb(225,33,4)" fg:x="71344337955" fg:w="251146915"/><text x="81.0676%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (317,687,248 samples, 0.36%)</title><rect x="81.5026%" y="181" width="0.3599%" height="15" fill="rgb(224,33,50)" fg:x="71949075110" fg:w="317687248"/><text x="81.7526%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (187,609,452 samples, 0.21%)</title><rect x="81.6500%" y="165" width="0.2125%" height="15" fill="rgb(246,198,51)" fg:x="72079152906" fg:w="187609452"/><text x="81.9000%" y="175.50"></text></g><g><title>__rustc::__rust_alloc (199,769,186 samples, 0.23%)</title><rect x="81.8625%" y="181" width="0.2263%" height="15" fill="rgb(205,22,4)" fg:x="72266762358" fg:w="199769186"/><text x="82.1125%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,109,711,507 samples, 2.39%)</title><rect x="81.4778%" y="229" width="2.3898%" height="15" fill="rgb(206,3,8)" fg:x="71927186632" fg:w="2109711507"/><text x="81.7278%" y="239.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,109,711,507 samples, 2.39%)</title><rect x="81.4778%" y="213" width="2.3898%" height="15" fill="rgb(251,23,15)" fg:x="71927186632" fg:w="2109711507"/><text x="81.7278%" y="223.50">al..</text></g><g><title>alloc::alloc::alloc (2,109,711,507 samples, 2.39%)</title><rect x="81.4778%" y="197" width="2.3898%" height="15" fill="rgb(252,88,28)" fg:x="71927186632" fg:w="2109711507"/><text x="81.7278%" y="207.50">al..</text></g><g><title>malloc (1,570,366,595 samples, 1.78%)</title><rect x="82.0888%" y="181" width="1.7789%" height="15" fill="rgb(212,127,14)" fg:x="72466531544" fg:w="1570366595"/><text x="82.3388%" y="191.50">m..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,484,820,889 samples, 2.81%)</title><rect x="81.1021%" y="309" width="2.8148%" height="15" fill="rgb(247,145,37)" fg:x="71595484870" fg:w="2484820889"/><text x="81.3521%" y="319.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,484,820,889 samples, 2.81%)</title><rect x="81.1021%" y="293" width="2.8148%" height="15" fill="rgb(209,117,53)" fg:x="71595484870" fg:w="2484820889"/><text x="81.3521%" y="303.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,460,024,455 samples, 2.79%)</title><rect x="81.1302%" y="277" width="2.7867%" height="15" fill="rgb(212,90,42)" fg:x="71620281304" fg:w="2460024455"/><text x="81.3802%" y="287.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,460,024,455 samples, 2.79%)</title><rect x="81.1302%" y="261" width="2.7867%" height="15" fill="rgb(218,164,37)" fg:x="71620281304" fg:w="2460024455"/><text x="81.3802%" y="271.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,460,024,455 samples, 2.79%)</title><rect x="81.1302%" y="245" width="2.7867%" height="15" fill="rgb(246,65,34)" fg:x="71620281304" fg:w="2460024455"/><text x="81.3802%" y="255.50">al..</text></g><g><title>alloc::raw_vec::layout_array (43,407,620 samples, 0.05%)</title><rect x="83.8677%" y="229" width="0.0492%" height="15" fill="rgb(231,100,33)" fg:x="74036898139" fg:w="43407620"/><text x="84.1177%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::repeat (43,407,620 samples, 0.05%)</title><rect x="83.8677%" y="213" width="0.0492%" height="15" fill="rgb(228,126,14)" fg:x="74036898139" fg:w="43407620"/><text x="84.1177%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (28,117,016 samples, 0.03%)</title><rect x="83.8850%" y="197" width="0.0319%" height="15" fill="rgb(215,173,21)" fg:x="74052188743" fg:w="28117016"/><text x="84.1350%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (28,117,016 samples, 0.03%)</title><rect x="83.8850%" y="181" width="0.0319%" height="15" fill="rgb(210,6,40)" fg:x="74052188743" fg:w="28117016"/><text x="84.1350%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (28,117,016 samples, 0.03%)</title><rect x="83.8850%" y="165" width="0.0319%" height="15" fill="rgb(212,48,18)" fg:x="74052188743" fg:w="28117016"/><text x="84.1350%" y="175.50"></text></g><g><title>__rustc::__rust_dealloc (35,067,889 samples, 0.04%)</title><rect x="83.9653%" y="213" width="0.0397%" height="15" fill="rgb(230,214,11)" fg:x="74123065915" fg:w="35067889"/><text x="84.2153%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (310,607,509 samples, 0.35%)</title><rect x="83.9582%" y="245" width="0.3519%" height="15" fill="rgb(254,105,39)" fg:x="74116760540" fg:w="310607509"/><text x="84.2082%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (310,607,509 samples, 0.35%)</title><rect x="83.9582%" y="229" width="0.3519%" height="15" fill="rgb(245,158,5)" fg:x="74116760540" fg:w="310607509"/><text x="84.2082%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (269,234,245 samples, 0.30%)</title><rect x="84.0050%" y="213" width="0.3050%" height="15" fill="rgb(249,208,11)" fg:x="74158133804" fg:w="269234245"/><text x="84.2550%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (345,094,277 samples, 0.39%)</title><rect x="83.9213%" y="309" width="0.3909%" height="15" fill="rgb(210,39,28)" fg:x="74084182935" fg:w="345094277"/><text x="84.1713%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (345,094,277 samples, 0.39%)</title><rect x="83.9213%" y="293" width="0.3909%" height="15" fill="rgb(211,56,53)" fg:x="74084182935" fg:w="345094277"/><text x="84.1713%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (345,094,277 samples, 0.39%)</title><rect x="83.9213%" y="277" width="0.3909%" height="15" fill="rgb(226,201,30)" fg:x="74084182935" fg:w="345094277"/><text x="84.1713%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (312,516,672 samples, 0.35%)</title><rect x="83.9582%" y="261" width="0.3540%" height="15" fill="rgb(239,101,34)" fg:x="74116760540" fg:w="312516672"/><text x="84.2082%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (43,561,763 samples, 0.05%)</title><rect x="84.3122%" y="309" width="0.0493%" height="15" fill="rgb(226,209,5)" fg:x="74429277212" fg:w="43561763"/><text x="84.5622%" y="319.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (43,561,763 samples, 0.05%)</title><rect x="84.3122%" y="293" width="0.0493%" height="15" fill="rgb(250,105,47)" fg:x="74429277212" fg:w="43561763"/><text x="84.5622%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (43,561,763 samples, 0.05%)</title><rect x="84.3122%" y="277" width="0.0493%" height="15" fill="rgb(230,72,3)" fg:x="74429277212" fg:w="43561763"/><text x="84.5622%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (43,561,763 samples, 0.05%)</title><rect x="84.3122%" y="261" width="0.0493%" height="15" fill="rgb(232,218,39)" fg:x="74429277212" fg:w="43561763"/><text x="84.5622%" y="271.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (17,707,889 samples, 0.02%)</title><rect x="84.3415%" y="245" width="0.0201%" height="15" fill="rgb(248,166,6)" fg:x="74455131086" fg:w="17707889"/><text x="84.5915%" y="255.50"></text></g><g><title>core::slice::index::get_noubcheck (17,707,889 samples, 0.02%)</title><rect x="84.3415%" y="229" width="0.0201%" height="15" fill="rgb(247,89,20)" fg:x="74455131086" fg:w="17707889"/><text x="84.5915%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (558,078,055 samples, 0.63%)</title><rect x="84.3615%" y="309" width="0.6322%" height="15" fill="rgb(248,130,54)" fg:x="74472838975" fg:w="558078055"/><text x="84.6115%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (420,465,703 samples, 0.48%)</title><rect x="84.5174%" y="293" width="0.4763%" height="15" fill="rgb(234,196,4)" fg:x="74610451327" fg:w="420465703"/><text x="84.7674%" y="303.50"></text></g><g><title>core::str::validations::run_utf8_validation (182,821,163 samples, 0.21%)</title><rect x="84.7866%" y="277" width="0.2071%" height="15" fill="rgb(250,143,31)" fg:x="74848095867" fg:w="182821163"/><text x="85.0366%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (18,643,100 samples, 0.02%)</title><rect x="85.0940%" y="245" width="0.0211%" height="15" fill="rgb(211,110,34)" fg:x="75119437167" fg:w="18643100"/><text x="85.3440%" y="255.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (115,685,328 samples, 0.13%)</title><rect x="84.9937%" y="309" width="0.1310%" height="15" fill="rgb(215,124,48)" fg:x="75030917030" fg:w="115685328"/><text x="85.2437%" y="319.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (115,685,328 samples, 0.13%)</title><rect x="84.9937%" y="293" width="0.1310%" height="15" fill="rgb(216,46,13)" fg:x="75030917030" fg:w="115685328"/><text x="85.2437%" y="303.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (115,685,328 samples, 0.13%)</title><rect x="84.9937%" y="277" width="0.1310%" height="15" fill="rgb(205,184,25)" fg:x="75030917030" fg:w="115685328"/><text x="85.2437%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (115,685,328 samples, 0.13%)</title><rect x="84.9937%" y="261" width="0.1310%" height="15" fill="rgb(228,1,10)" fg:x="75030917030" fg:w="115685328"/><text x="85.2437%" y="271.50"></text></g><g><title>server_lib::resp3::get_data_type (91,148,814 samples, 0.10%)</title><rect x="85.1341%" y="309" width="0.1033%" height="15" fill="rgb(213,116,27)" fg:x="75154878402" fg:w="91148814"/><text x="85.3841%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (151,300,755 samples, 0.17%)</title><rect x="87.1864%" y="133" width="0.1714%" height="15" fill="rgb(241,95,50)" fg:x="76966587230" fg:w="151300755"/><text x="87.4364%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (147,332,951 samples, 0.17%)</title><rect x="87.1909%" y="117" width="0.1669%" height="15" fill="rgb(238,48,32)" fg:x="76970555034" fg:w="147332951"/><text x="87.4409%" y="127.50"></text></g><g><title>__rustc::__rust_alloc (138,408,582 samples, 0.16%)</title><rect x="87.3578%" y="133" width="0.1568%" height="15" fill="rgb(235,113,49)" fg:x="77117887985" fg:w="138408582"/><text x="87.6078%" y="143.50"></text></g><g><title>alloc_perturb (14,196,665 samples, 0.02%)</title><rect x="90.1975%" y="101" width="0.0161%" height="15" fill="rgb(205,127,43)" fg:x="79624723572" fg:w="14196665"/><text x="90.4475%" y="111.50"></text></g><g><title>malloc_consolidate (26,237,375 samples, 0.03%)</title><rect x="90.2136%" y="101" width="0.0297%" height="15" fill="rgb(250,162,2)" fg:x="79638920237" fg:w="26237375"/><text x="90.4636%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,794,260,605 samples, 3.17%)</title><rect x="87.1770%" y="181" width="3.1653%" height="15" fill="rgb(220,13,41)" fg:x="76958255259" fg:w="2794260605"/><text x="87.4270%" y="191.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,794,260,605 samples, 3.17%)</title><rect x="87.1770%" y="165" width="3.1653%" height="15" fill="rgb(249,221,25)" fg:x="76958255259" fg:w="2794260605"/><text x="87.4270%" y="175.50">all..</text></g><g><title>alloc::alloc::alloc (2,794,260,605 samples, 3.17%)</title><rect x="87.1770%" y="149" width="3.1653%" height="15" fill="rgb(215,208,19)" fg:x="76958255259" fg:w="2794260605"/><text x="87.4270%" y="159.50">all..</text></g><g><title>malloc (2,496,219,297 samples, 2.83%)</title><rect x="87.5146%" y="133" width="2.8277%" height="15" fill="rgb(236,175,2)" fg:x="77256296567" fg:w="2496219297"/><text x="87.7646%" y="143.50">ma..</text></g><g><title>_int_malloc (1,293,073,373 samples, 1.46%)</title><rect x="88.8775%" y="117" width="1.4648%" height="15" fill="rgb(241,52,2)" fg:x="78459442491" fg:w="1293073373"/><text x="89.1275%" y="127.50"></text></g><g><title>unlink_chunk.isra.0 (87,358,252 samples, 0.10%)</title><rect x="90.2433%" y="101" width="0.0990%" height="15" fill="rgb(248,140,14)" fg:x="79665157612" fg:w="87358252"/><text x="90.4933%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,846,770,443 samples, 3.22%)</title><rect x="87.1238%" y="245" width="3.2248%" height="15" fill="rgb(253,22,42)" fg:x="76911352657" fg:w="2846770443"/><text x="87.3738%" y="255.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,846,770,443 samples, 3.22%)</title><rect x="87.1238%" y="229" width="3.2248%" height="15" fill="rgb(234,61,47)" fg:x="76911352657" fg:w="2846770443"/><text x="87.3738%" y="239.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,846,770,443 samples, 3.22%)</title><rect x="87.1238%" y="213" width="3.2248%" height="15" fill="rgb(208,226,15)" fg:x="76911352657" fg:w="2846770443"/><text x="87.3738%" y="223.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,846,770,443 samples, 3.22%)</title><rect x="87.1238%" y="197" width="3.2248%" height="15" fill="rgb(217,221,4)" fg:x="76911352657" fg:w="2846770443"/><text x="87.3738%" y="207.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,886,553,688 samples, 4.40%)</title><rect x="87.0110%" y="293" width="4.4026%" height="15" fill="rgb(212,174,34)" fg:x="76811762216" fg:w="3886553688"/><text x="87.2610%" y="303.50">alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,886,553,688 samples, 4.40%)</title><rect x="87.0110%" y="277" width="4.4026%" height="15" fill="rgb(253,83,4)" fg:x="76811762216" fg:w="3886553688"/><text x="87.2610%" y="287.50">alloc..</text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,886,553,688 samples, 4.40%)</title><rect x="87.0110%" y="261" width="4.4026%" height="15" fill="rgb(250,195,49)" fg:x="76811762216" fg:w="3886553688"/><text x="87.2610%" y="271.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (940,192,804 samples, 1.07%)</title><rect x="90.3486%" y="245" width="1.0650%" height="15" fill="rgb(241,192,25)" fg:x="79758123100" fg:w="940192804"/><text x="90.5986%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (940,192,804 samples, 1.07%)</title><rect x="90.3486%" y="229" width="1.0650%" height="15" fill="rgb(208,124,10)" fg:x="79758123100" fg:w="940192804"/><text x="90.5986%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (935,869,158 samples, 1.06%)</title><rect x="90.3535%" y="213" width="1.0601%" height="15" fill="rgb(222,33,0)" fg:x="79762446746" fg:w="935869158"/><text x="90.6035%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (15,175,399 samples, 0.02%)</title><rect x="91.4354%" y="277" width="0.0172%" height="15" fill="rgb(234,209,28)" fg:x="80717573733" fg:w="15175399"/><text x="91.6854%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (15,175,399 samples, 0.02%)</title><rect x="91.4354%" y="261" width="0.0172%" height="15" fill="rgb(224,11,23)" fg:x="80717573733" fg:w="15175399"/><text x="91.6854%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (15,175,399 samples, 0.02%)</title><rect x="91.4354%" y="245" width="0.0172%" height="15" fill="rgb(232,99,1)" fg:x="80717573733" fg:w="15175399"/><text x="91.6854%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (15,175,399 samples, 0.02%)</title><rect x="91.4354%" y="229" width="0.0172%" height="15" fill="rgb(237,95,45)" fg:x="80717573733" fg:w="15175399"/><text x="91.6854%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (101,209,916 samples, 0.11%)</title><rect x="91.4136%" y="293" width="0.1146%" height="15" fill="rgb(208,109,11)" fg:x="80698315904" fg:w="101209916"/><text x="91.6636%" y="303.50"></text></g><g><title>core::ptr::write (66,776,688 samples, 0.08%)</title><rect x="91.4526%" y="277" width="0.0756%" height="15" fill="rgb(216,190,48)" fg:x="80732749132" fg:w="66776688"/><text x="91.7026%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (116,417,816 samples, 0.13%)</title><rect x="91.6030%" y="165" width="0.1319%" height="15" fill="rgb(251,171,36)" fg:x="80865474842" fg:w="116417816"/><text x="91.8530%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (109,375,601 samples, 0.12%)</title><rect x="91.6110%" y="149" width="0.1239%" height="15" fill="rgb(230,62,22)" fg:x="80872517057" fg:w="109375601"/><text x="91.8610%" y="159.50"></text></g><g><title>__rustc::__rust_alloc (129,356,140 samples, 0.15%)</title><rect x="91.7349%" y="165" width="0.1465%" height="15" fill="rgb(225,114,35)" fg:x="80981892658" fg:w="129356140"/><text x="91.9849%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (938,159,799 samples, 1.06%)</title><rect x="91.5283%" y="293" width="1.0627%" height="15" fill="rgb(215,118,42)" fg:x="80799525820" fg:w="938159799"/><text x="91.7783%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (938,159,799 samples, 1.06%)</title><rect x="91.5283%" y="277" width="1.0627%" height="15" fill="rgb(243,119,21)" fg:x="80799525820" fg:w="938159799"/><text x="91.7783%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (886,648,400 samples, 1.00%)</title><rect x="91.5866%" y="261" width="1.0044%" height="15" fill="rgb(252,177,53)" fg:x="80851037219" fg:w="886648400"/><text x="91.8366%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (886,648,400 samples, 1.00%)</title><rect x="91.5866%" y="245" width="1.0044%" height="15" fill="rgb(237,209,29)" fg:x="80851037219" fg:w="886648400"/><text x="91.8366%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (886,648,400 samples, 1.00%)</title><rect x="91.5866%" y="229" width="1.0044%" height="15" fill="rgb(212,65,23)" fg:x="80851037219" fg:w="886648400"/><text x="91.8366%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (881,527,677 samples, 1.00%)</title><rect x="91.5924%" y="213" width="0.9986%" height="15" fill="rgb(230,222,46)" fg:x="80856157942" fg:w="881527677"/><text x="91.8424%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (881,527,677 samples, 1.00%)</title><rect x="91.5924%" y="197" width="0.9986%" height="15" fill="rgb(215,135,32)" fg:x="80856157942" fg:w="881527677"/><text x="91.8424%" y="207.50"></text></g><g><title>alloc::alloc::alloc (881,527,677 samples, 1.00%)</title><rect x="91.5924%" y="181" width="0.9986%" height="15" fill="rgb(246,101,22)" fg:x="80856157942" fg:w="881527677"/><text x="91.8424%" y="191.50"></text></g><g><title>malloc (626,436,821 samples, 0.71%)</title><rect x="91.8814%" y="165" width="0.7096%" height="15" fill="rgb(206,107,13)" fg:x="81111248798" fg:w="626436821"/><text x="92.1314%" y="175.50"></text></g><g><title>__rustc::__rdl_dealloc (31,784,401 samples, 0.04%)</title><rect x="92.6051%" y="197" width="0.0360%" height="15" fill="rgb(250,100,44)" fg:x="81750149438" fg:w="31784401"/><text x="92.8551%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (30,489,311 samples, 0.03%)</title><rect x="92.6066%" y="181" width="0.0345%" height="15" fill="rgb(231,147,38)" fg:x="81751444528" fg:w="30489311"/><text x="92.8566%" y="191.50"></text></g><g><title>__rustc::__rust_dealloc (76,547,043 samples, 0.09%)</title><rect x="92.6411%" y="197" width="0.0867%" height="15" fill="rgb(229,8,40)" fg:x="81781933839" fg:w="76547043"/><text x="92.8911%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="293" width="0.9677%" height="15" fill="rgb(221,135,30)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="277" width="0.9677%" height="15" fill="rgb(249,193,18)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="261" width="0.9677%" height="15" fill="rgb(209,133,39)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="245" width="0.9677%" height="15" fill="rgb(232,100,14)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="229" width="0.9677%" height="15" fill="rgb(224,185,1)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (854,289,317 samples, 0.97%)</title><rect x="92.5910%" y="213" width="0.9677%" height="15" fill="rgb(223,139,8)" fg:x="81737685619" fg:w="854289317"/><text x="92.8410%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (733,494,054 samples, 0.83%)</title><rect x="92.7278%" y="197" width="0.8309%" height="15" fill="rgb(232,213,38)" fg:x="81858480882" fg:w="733494054"/><text x="92.9778%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (54,766,116 samples, 0.06%)</title><rect x="93.5587%" y="293" width="0.0620%" height="15" fill="rgb(207,94,22)" fg:x="82591974936" fg:w="54766116"/><text x="93.8087%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (54,766,116 samples, 0.06%)</title><rect x="93.5587%" y="277" width="0.0620%" height="15" fill="rgb(219,183,54)" fg:x="82591974936" fg:w="54766116"/><text x="93.8087%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (54,766,116 samples, 0.06%)</title><rect x="93.5587%" y="261" width="0.0620%" height="15" fill="rgb(216,185,54)" fg:x="82591974936" fg:w="54766116"/><text x="93.8087%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::from_utf8 (585,911,264 samples, 0.66%)</title><rect x="93.6208%" y="293" width="0.6637%" height="15" fill="rgb(254,217,39)" fg:x="82646741052" fg:w="585911264"/><text x="93.8708%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (402,017,226 samples, 0.46%)</title><rect x="93.8291%" y="277" width="0.4554%" height="15" fill="rgb(240,178,23)" fg:x="82830635090" fg:w="402017226"/><text x="94.0791%" y="287.50"></text></g><g><title>core::str::validations::run_utf8_validation (204,630,435 samples, 0.23%)</title><rect x="94.0527%" y="261" width="0.2318%" height="15" fill="rgb(218,11,47)" fg:x="83028021881" fg:w="204630435"/><text x="94.3027%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (58,062,584 samples, 0.07%)</title><rect x="94.5758%" y="229" width="0.0658%" height="15" fill="rgb(218,51,51)" fg:x="83489822261" fg:w="58062584"/><text x="94.8258%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (24,131,754 samples, 0.03%)</title><rect x="94.6142%" y="213" width="0.0273%" height="15" fill="rgb(238,126,27)" fg:x="83523753091" fg:w="24131754"/><text x="94.8642%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (331,924,540 samples, 0.38%)</title><rect x="94.2845%" y="293" width="0.3760%" height="15" fill="rgb(249,202,22)" fg:x="83232652316" fg:w="331924540"/><text x="94.5345%" y="303.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (331,924,540 samples, 0.38%)</title><rect x="94.2845%" y="277" width="0.3760%" height="15" fill="rgb(254,195,49)" fg:x="83232652316" fg:w="331924540"/><text x="94.5345%" y="287.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_str_radix (331,924,540 samples, 0.38%)</title><rect x="94.2845%" y="261" width="0.3760%" height="15" fill="rgb(208,123,14)" fg:x="83232652316" fg:w="331924540"/><text x="94.5345%" y="271.50"></text></g><g><title>core::num::&lt;impl i64&gt;::from_ascii_radix (331,924,540 samples, 0.38%)</title><rect x="94.2845%" y="245" width="0.3760%" height="15" fill="rgb(224,200,8)" fg:x="83232652316" fg:w="331924540"/><text x="94.5345%" y="255.50"></text></g><g><title>core::num::can_not_overflow (16,692,011 samples, 0.02%)</title><rect x="94.6416%" y="229" width="0.0189%" height="15" fill="rgb(217,61,36)" fg:x="83547884845" fg:w="16692011"/><text x="94.8916%" y="239.50"></text></g><g><title>server_lib::resp3::parse_request (14,543,450,543 samples, 16.47%)</title><rect x="78.1952%" y="341" width="16.4746%" height="15" fill="rgb(206,35,45)" fg:x="69029309175" fg:w="14543450543"/><text x="78.4452%" y="351.50">server_lib::resp3::parse_..</text></g><g><title>server_lib::resp3::parse_arrays (13,758,235,713 samples, 15.59%)</title><rect x="79.0847%" y="325" width="15.5851%" height="15" fill="rgb(217,65,33)" fg:x="69814524005" fg:w="13758235713"/><text x="79.3347%" y="335.50">server_lib::resp3::parse..</text></g><g><title>server_lib::resp3::parse_bulk_strings (8,326,732,502 samples, 9.43%)</title><rect x="85.2374%" y="309" width="9.4324%" height="15" fill="rgb(222,158,48)" fg:x="75246027216" fg:w="8326732502"/><text x="85.4874%" y="319.50">server_lib::r..</text></g><g><title>__send (107,644,233 samples, 0.12%)</title><rect x="95.0662%" y="325" width="0.1219%" height="15" fill="rgb(254,2,54)" fg:x="83922712854" fg:w="107644233"/><text x="95.3162%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13,611,821 samples, 0.02%)</title><rect x="95.1881%" y="325" width="0.0154%" height="15" fill="rgb(250,143,38)" fg:x="84030357087" fg:w="13611821"/><text x="95.4381%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13,611,821 samples, 0.02%)</title><rect x="95.1881%" y="309" width="0.0154%" height="15" fill="rgb(248,25,0)" fg:x="84030357087" fg:w="13611821"/><text x="95.4381%" y="319.50"></text></g><g><title>__syscall_cancel_arch (19,673,671 samples, 0.02%)</title><rect x="96.8177%" y="245" width="0.0223%" height="15" fill="rgb(206,152,27)" fg:x="85468933016" fg:w="19673671"/><text x="97.0677%" y="255.50"></text></g><g><title>__syscall_cancel_arch_end (225,935,475 samples, 0.26%)</title><rect x="96.8400%" y="245" width="0.2559%" height="15" fill="rgb(240,77,30)" fg:x="85488606687" fg:w="225935475"/><text x="97.0900%" y="255.50"></text></g><g><title>__send (1,313,499,591 samples, 1.49%)</title><rect x="95.6691%" y="293" width="1.4879%" height="15" fill="rgb(231,5,3)" fg:x="84455004831" fg:w="1313499591"/><text x="95.9191%" y="303.50"></text></g><g><title>__syscall_cancel (1,119,531,207 samples, 1.27%)</title><rect x="95.8889%" y="277" width="1.2682%" height="15" fill="rgb(207,226,32)" fg:x="84648973215" fg:w="1119531207"/><text x="96.1389%" y="287.50"></text></g><g><title>__internal_syscall_cancel (1,038,401,592 samples, 1.18%)</title><rect x="95.9808%" y="261" width="1.1763%" height="15" fill="rgb(222,207,47)" fg:x="84730102830" fg:w="1038401592"/><text x="96.2308%" y="271.50"></text></g><g><title>__syscall_cancel_arch_start (53,962,260 samples, 0.06%)</title><rect x="97.0959%" y="245" width="0.0611%" height="15" fill="rgb(229,115,45)" fg:x="85714542162" fg:w="53962260"/><text x="97.3459%" y="255.50"></text></g><g><title>__syscall_cancel (14,714,134 samples, 0.02%)</title><rect x="97.1570%" y="293" width="0.0167%" height="15" fill="rgb(224,191,6)" fg:x="85768504422" fg:w="14714134"/><text x="97.4070%" y="303.50"></text></g><g><title>std::io::Write::write_all (2,266,127,016 samples, 2.57%)</title><rect x="94.6697%" y="341" width="2.5670%" height="15" fill="rgb(230,227,24)" fg:x="83572759718" fg:w="2266127016"/><text x="94.9197%" y="351.50">st..</text></g><g><title>std::net::udp::UdpSocket::send (1,794,917,826 samples, 2.03%)</title><rect x="95.2035%" y="325" width="2.0333%" height="15" fill="rgb(228,80,19)" fg:x="84043968908" fg:w="1794917826"/><text x="95.4535%" y="335.50">s..</text></g><g><title>std::sys::net::connection::socket::UdpSocket::send (1,739,127,610 samples, 1.97%)</title><rect x="95.2667%" y="309" width="1.9701%" height="15" fill="rgb(247,229,0)" fg:x="84099759124" fg:w="1739127610"/><text x="95.5167%" y="319.50">s..</text></g><g><title>std::sys::pal::unix::cvt (55,668,178 samples, 0.06%)</title><rect x="97.1737%" y="293" width="0.0631%" height="15" fill="rgb(237,194,15)" fg:x="85783218556" fg:w="55668178"/><text x="97.4237%" y="303.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (35,072,090 samples, 0.04%)</title><rect x="97.1970%" y="277" width="0.0397%" height="15" fill="rgb(219,203,20)" fg:x="85803814644" fg:w="35072090"/><text x="97.4470%" y="287.50"></text></g><g><title>__internal_syscall_cancel (10,395,821 samples, 0.01%)</title><rect x="97.5181%" y="277" width="0.0118%" height="15" fill="rgb(234,128,8)" fg:x="86087269583" fg:w="10395821"/><text x="97.7681%" y="287.50"></text></g><g><title>__syscall_cancel_arch_end (211,307,474 samples, 0.24%)</title><rect x="98.1659%" y="245" width="0.2394%" height="15" fill="rgb(248,202,8)" fg:x="86659117265" fg:w="211307474"/><text x="98.4159%" y="255.50"></text></g><g><title>__libc_recv (1,011,645,722 samples, 1.15%)</title><rect x="97.3038%" y="293" width="1.1460%" height="15" fill="rgb(206,104,37)" fg:x="85898019104" fg:w="1011645722"/><text x="97.5538%" y="303.50"></text></g><g><title>__syscall_cancel (811,999,422 samples, 0.92%)</title><rect x="97.5299%" y="277" width="0.9198%" height="15" fill="rgb(223,8,27)" fg:x="86097665404" fg:w="811999422"/><text x="97.7799%" y="287.50"></text></g><g><title>__internal_syscall_cancel (754,581,805 samples, 0.85%)</title><rect x="97.5950%" y="261" width="0.8548%" height="15" fill="rgb(216,217,28)" fg:x="86155083021" fg:w="754581805"/><text x="97.8450%" y="271.50"></text></g><g><title>__syscall_cancel_arch_start (39,240,087 samples, 0.04%)</title><rect x="98.4053%" y="245" width="0.0445%" height="15" fill="rgb(249,199,1)" fg:x="86870424739" fg:w="39240087"/><text x="98.6553%" y="255.50"></text></g><g><title>server::handle_client (77,436,798,265 samples, 87.72%)</title><rect x="11.0237%" y="357" width="87.7190%" height="15" fill="rgb(240,85,17)" fg:x="9731504897" fg:w="77436798265"/><text x="11.2737%" y="367.50">server::handle_client</text></g><g><title>std::net::udp::UdpSocket::recv (1,329,416,428 samples, 1.51%)</title><rect x="97.2368%" y="341" width="1.5059%" height="15" fill="rgb(206,108,45)" fg:x="85838886734" fg:w="1329416428"/><text x="97.4868%" y="351.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::read (1,324,330,002 samples, 1.50%)</title><rect x="97.2425%" y="325" width="1.5002%" height="15" fill="rgb(245,210,41)" fg:x="85843973160" fg:w="1324330002"/><text x="97.4925%" y="335.50"></text></g><g><title>std::sys::net::connection::socket::unix::Socket::recv_with_flags (1,324,330,002 samples, 1.50%)</title><rect x="97.2425%" y="309" width="1.5002%" height="15" fill="rgb(206,13,37)" fg:x="85843973160" fg:w="1324330002"/><text x="97.4925%" y="319.50"></text></g><g><title>std::sys::pal::unix::cvt (253,289,828 samples, 0.29%)</title><rect x="98.4558%" y="293" width="0.2869%" height="15" fill="rgb(250,61,18)" fg:x="86915013334" fg:w="253289828"/><text x="98.7058%" y="303.50"></text></g><g><title>&lt;isize as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (253,289,828 samples, 0.29%)</title><rect x="98.4558%" y="277" width="0.2869%" height="15" fill="rgb(235,172,48)" fg:x="86915013334" fg:w="253289828"/><text x="98.7058%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="213" width="0.0106%" height="15" fill="rgb(249,201,17)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="197" width="0.0106%" height="15" fill="rgb(219,208,6)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="181" width="0.0106%" height="15" fill="rgb(248,31,23)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="165" width="0.0106%" height="15" fill="rgb(245,15,42)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="149" width="0.0106%" height="15" fill="rgb(222,217,39)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="133" width="0.0106%" height="15" fill="rgb(210,219,27)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="143.50"></text></g><g><title>alloc::alloc::alloc (9,381,137 samples, 0.01%)</title><rect x="98.9130%" y="117" width="0.0106%" height="15" fill="rgb(252,166,36)" fg:x="87318639804" fg:w="9381137"/><text x="99.1630%" y="127.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="341" width="0.0135%" height="15" fill="rgb(245,132,34)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="351.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="325" width="0.0135%" height="15" fill="rgb(236,54,3)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="309" width="0.0135%" height="15" fill="rgb(241,173,43)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="293" width="0.0135%" height="15" fill="rgb(215,190,9)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="277" width="0.0135%" height="15" fill="rgb(242,101,16)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="261" width="0.0135%" height="15" fill="rgb(223,190,21)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="245" width="0.0135%" height="15" fill="rgb(215,228,25)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (11,913,116 samples, 0.01%)</title><rect x="98.9130%" y="229" width="0.0135%" height="15" fill="rgb(225,36,22)" fg:x="87318639804" fg:w="11913116"/><text x="99.1630%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11,698,137 samples, 0.01%)</title><rect x="98.9265%" y="341" width="0.0133%" height="15" fill="rgb(251,106,46)" fg:x="87330552920" fg:w="11698137"/><text x="99.1765%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11,698,137 samples, 0.01%)</title><rect x="98.9265%" y="325" width="0.0133%" height="15" fill="rgb(208,90,1)" fg:x="87330552920" fg:w="11698137"/><text x="99.1765%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (11,698,137 samples, 0.01%)</title><rect x="98.9265%" y="309" width="0.0133%" height="15" fill="rgb(243,10,4)" fg:x="87330552920" fg:w="11698137"/><text x="99.1765%" y="319.50"></text></g><g><title>alloc::string::String::push_str (15,707,201 samples, 0.02%)</title><rect x="98.9398%" y="341" width="0.0178%" height="15" fill="rgb(212,137,27)" fg:x="87342251057" fg:w="15707201"/><text x="99.1898%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (15,707,201 samples, 0.02%)</title><rect x="98.9398%" y="325" width="0.0178%" height="15" fill="rgb(231,220,49)" fg:x="87342251057" fg:w="15707201"/><text x="99.1898%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15,707,201 samples, 0.02%)</title><rect x="98.9398%" y="309" width="0.0178%" height="15" fill="rgb(237,96,20)" fg:x="87342251057" fg:w="15707201"/><text x="99.1898%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (15,707,201 samples, 0.02%)</title><rect x="98.9398%" y="293" width="0.0178%" height="15" fill="rgb(239,229,30)" fg:x="87342251057" fg:w="15707201"/><text x="99.1898%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15,707,201 samples, 0.02%)</title><rect x="98.9398%" y="277" width="0.0178%" height="15" fill="rgb(219,65,33)" fg:x="87342251057" fg:w="15707201"/><text x="99.1898%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="341" width="0.0107%" height="15" fill="rgb(243,134,7)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="325" width="0.0107%" height="15" fill="rgb(216,177,54)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="309" width="0.0107%" height="15" fill="rgb(211,160,20)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="293" width="0.0107%" height="15" fill="rgb(239,85,39)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="277" width="0.0107%" height="15" fill="rgb(232,125,22)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="261" width="0.0107%" height="15" fill="rgb(244,57,34)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="245" width="0.0107%" height="15" fill="rgb(214,203,32)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="229" width="0.0107%" height="15" fill="rgb(207,58,43)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="239.50"></text></g><g><title>alloc::alloc::alloc (9,470,495 samples, 0.01%)</title><rect x="98.9576%" y="213" width="0.0107%" height="15" fill="rgb(215,193,15)" fg:x="87357958258" fg:w="9470495"/><text x="99.2076%" y="223.50"></text></g><g><title>server_lib::resp3::bulk_string_response (225,987,350 samples, 0.26%)</title><rect x="98.7433%" y="357" width="0.2560%" height="15" fill="rgb(232,15,44)" fg:x="87168783855" fg:w="225987350"/><text x="98.9933%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="341" width="0.0310%" height="15" fill="rgb(212,3,48)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="325" width="0.0310%" height="15" fill="rgb(218,128,7)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="309" width="0.0310%" height="15" fill="rgb(226,216,39)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="293" width="0.0310%" height="15" fill="rgb(243,47,51)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="277" width="0.0310%" height="15" fill="rgb(241,183,40)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="261" width="0.0310%" height="15" fill="rgb(231,217,32)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (27,342,452 samples, 0.03%)</title><rect x="98.9683%" y="245" width="0.0310%" height="15" fill="rgb(229,61,38)" fg:x="87367428753" fg:w="27342452"/><text x="99.2183%" y="255.50"></text></g><g><title>server_lib::resp3::parse_bulk_strings (49,940,619 samples, 0.06%)</title><rect x="99.0003%" y="357" width="0.0566%" height="15" fill="rgb(225,210,5)" fg:x="87395670886" fg:w="49940619"/><text x="99.2503%" y="367.50"></text></g><g><title>server_lib::resp3::parse_request (34,357,171 samples, 0.04%)</title><rect x="99.0568%" y="357" width="0.0389%" height="15" fill="rgb(231,79,45)" fg:x="87445611505" fg:w="34357171"/><text x="99.3068%" y="367.50"></text></g><g><title>&lt;server_lib::storage::StorageEntry as core::clone::Clone&gt;::clone (68,906,308 samples, 0.08%)</title><rect x="99.2410%" y="341" width="0.0781%" height="15" fill="rgb(224,100,7)" fg:x="87608207511" fg:w="68906308"/><text x="99.4910%" y="351.50"></text></g><g><title>&lt;server_lib::storage::StorageValue as core::clone::Clone&gt;::clone (68,906,308 samples, 0.08%)</title><rect x="99.2410%" y="325" width="0.0781%" height="15" fill="rgb(241,198,18)" fg:x="87608207511" fg:w="68906308"/><text x="99.4910%" y="335.50"></text></g><g><title>server_lib::storage::StorageEntry::is_expired (73,294,071 samples, 0.08%)</title><rect x="99.3191%" y="341" width="0.0830%" height="15" fill="rgb(252,97,53)" fg:x="87677113819" fg:w="73294071"/><text x="99.5691%" y="351.50"></text></g><g><title>server_lib::storage::Storage::get_entry (271,026,149 samples, 0.31%)</title><rect x="99.0958%" y="357" width="0.3070%" height="15" fill="rgb(220,88,7)" fg:x="87479968676" fg:w="271026149"/><text x="99.3458%" y="367.50"></text></g><g><title>server_lib::storage::Storage::insert_entry (183,128,480 samples, 0.21%)</title><rect x="99.4028%" y="357" width="0.2074%" height="15" fill="rgb(213,176,14)" fg:x="87750994825" fg:w="183128480"/><text x="99.6528%" y="367.50"></text></g><g><title>std::io::Write::write_all (115,799,246 samples, 0.13%)</title><rect x="99.6146%" y="357" width="0.1312%" height="15" fill="rgb(246,73,7)" fg:x="87937965198" fg:w="115799246"/><text x="99.8646%" y="367.50"></text></g><g><title>std::net::udp::UdpSocket::send (18,621,060 samples, 0.02%)</title><rect x="99.7466%" y="357" width="0.0211%" height="15" fill="rgb(245,64,36)" fg:x="88054491929" fg:w="18621060"/><text x="99.9966%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (18,214,448 samples, 0.02%)</title><rect x="99.7677%" y="357" width="0.0206%" height="15" fill="rgb(245,80,10)" fg:x="88073112989" fg:w="18214448"/><text x="100.0177%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (18,335,763 samples, 0.02%)</title><rect x="99.7883%" y="357" width="0.0208%" height="15" fill="rgb(232,107,50)" fg:x="88091327437" fg:w="18335763"/><text x="100.0383%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (59,038,067 samples, 0.07%)</title><rect x="99.8175%" y="357" width="0.0669%" height="15" fill="rgb(253,3,0)" fg:x="88117070226" fg:w="59038067"/><text x="100.0675%" y="367.50"></text></g><g><title>std::time::SystemTime::now (33,057,610 samples, 0.04%)</title><rect x="99.8843%" y="357" width="0.0374%" height="15" fill="rgb(212,99,53)" fg:x="88176108293" fg:w="33057610"/><text x="100.1343%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (11,573,986 samples, 0.01%)</title><rect x="99.9087%" y="341" width="0.0131%" height="15" fill="rgb(249,111,54)" fg:x="88197591917" fg:w="11573986"/><text x="100.1587%" y="351.50"></text></g><g><title>all (88,278,210,957 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(249,55,30)" fg:x="0" fg:w="88278210957"/><text x="0.2500%" y="399.50"></text></g><g><title>server (88,278,210,957 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(237,47,42)" fg:x="0" fg:w="88278210957"/><text x="0.2500%" y="383.50">server</text></g><g><title>unlink_chunk.isra.0 (67,747,397 samples, 0.08%)</title><rect x="99.9233%" y="357" width="0.0767%" height="15" fill="rgb(211,20,18)" fg:x="88210463560" fg:w="67747397"/><text x="100.1733%" y="367.50"></text></g></svg></svg>